<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用php自制一个图片API接口</title>
      <link href="/posts/46474/"/>
      <url>/posts/46474/</url>
      
        <content type="html"><![CDATA[<h1 id="使用php自制一个图片API接口"><a href="#使用php自制一个图片API接口" class="headerlink" title="使用php自制一个图片API接口"></a>使用php自制一个图片API接口</h1><p>有时候我们需要获得一些随机图片，如果用别人的api接口，可能接口不太稳定，也可能别人的图片不符合你的审美，这时候我们就需要自制一个简易的图片api接口了，下面我介绍两种方法制作属于自己的api图片接口~</p><p>文章参考来自<a href="https://www.datealive.top/">梦独吟</a></p><p>所有源码可以在github上下载，顺便点个<a href="https://github.com/img-api">star</a>吧~</p><h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><hr><p>方法很简单，我们新建一个php文件，插入下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存有链接的文件名，这里是存放图片链接的txt文件</span></span><br><span class="line">$filename = <span class="string">&quot;文件名.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists($filename))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从文本获取链接</span></span><br><span class="line">$pics = [];</span><br><span class="line">$fs = fopen($filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!feof($fs))&#123;</span><br><span class="line">$line=trim(fgets($fs));</span><br><span class="line"><span class="keyword">if</span>($line!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">array_push($pics, $line);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数组随机获取链接</span></span><br><span class="line">$pic = $pics[array_rand($pics)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回指定格式</span></span><br><span class="line">$type=$_GET[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span>($type)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">header(<span class="string">&#x27;Content-type:text/json&#x27;</span>);</span><br><span class="line"><span class="keyword">die</span>(json_encode([<span class="string">&#x27;pic&#x27;</span>=&gt;$pic]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">die</span>(header(<span class="string">&quot;Location: $pic&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接下来，我们新建一个txt文件，在每一行(注意是每行)插入一条图片的url链接</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://image.datealive.top/images/2020/05/13/timg-1.jpg</span><br><span class="line">https://image.datealive.top/images/2020/05/13/timg-2.jpg</span><br></pre></td></tr></table></figure><hr><p>最后，我们把两个文件上传到服务器上，通过访问php文件即可，注意是同一目录下！！</p><p>演示demo:</p><p><a href="http://img-api.kococ.cn/img-api.php">传送门 </a></p><hr><h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><h3 id="基于jsDeliver-github的图片api接口"><a href="#基于jsDeliver-github的图片api接口" class="headerlink" title="基于jsDeliver +github的图片api接口"></a>基于<strong>jsDeliver</strong> +github的图片api接口</h3><p>参考于<a href="https://blog.toomey.top/">Toomey</a> 这位大佬，这位大大的博客非常不错哦~~</p><hr><p>方法：</p><p>1.首先你先得上传图片到你的github仓库里，这里提供两种方法上传</p><p>(1)参考这篇博客——<a href="https://blog.toomey.top/2020/04/08/gitsx/">传送门</a></p><p>(2)直接下载<a href="https://desktop.github.com/">Github Desktop </a> ，绑定你的github账号后，克隆你的仓库(注意要有README.md文件)</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/15899882811-300x208.png" alt="img"></p><p>然后选择你的克隆下来的仓库，右键打开show in explorer，在里面添加图片，打开github Desktop，我们就可以看到刚刚上传的文件。我们首先在summary里输入“第一次”(或者其他)，点击commit to master，最后在push即可。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/4d9f303f2ad991cb71e02e9749a43d6-300x117.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/10b6deaf922f23a36287d33f7e84dd4-300x207.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/15900269711-1-300x208.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/d753ed272e3c472d834778219a4eaa7-300x131.png" alt="img"></p><hr><p>2.获取图片链接</p><p>方法：这里使用的是 jsDeliver +github</p><p>首先，打开你的github仓库，找到releases</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/429dd1317bdf0959971f663e18c3703-300x131.png" alt="img"></p><p>然后依次输入版本号，描述，最后更新releases即可</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/dd3b0836c8dcd7aeb359b6ac5568d56-300x183.png" alt="img"></p><p>接下来我们引用资源即可</p><p><a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E5%90%8D">https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@发布的版本号/文件名</a><br>例如： <a href="https://cdn.jsdelivr.net/gh/dateolive/images@V-2.0/images">https://cdn.jsdelivr.net/gh/dateolive/images@V-2.0/images</a><br>ps：也可以不加版本号，这样会默认加载最新的版本<br>例如：<a href="https://cdn.jsdelivr.net/gh/dateolive/images/images">https://cdn.jsdelivr.net/gh/dateolive/images/images</a></p><hr><p>3.编写php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$rand = rand(<span class="number">1</span>,<span class="number">201</span>);</span><br><span class="line">$url = <span class="string">&#x27;https://cdn.jsdelivr.net/gh/dateolive/images@V-2.0/images/&#x27;</span>.$rand.<span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">$img = file_get_contents($url,<span class="literal">true</span>);</span><br><span class="line">header(<span class="string">&quot;Content-Type: image/jpeg;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $img;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里rand就是一个随机函数，随机产生1-100的数字，因为我上传的图片是要数字排好的，所以这样可以实现随机调用</p><p>第二行就是使用jsDeliver加载资源了，具体方法上面第二步有说明</p><p>最后是利用header函数重定向到后面的url地址，实现跳转</p><hr><p>4.把写好的php文件上传服务器即可。</p><p>5.演示demo：</p><p><a href="http://imapi.datealive.top/tp/api.php">传送门</a><a href="http://imapi.datealive.top/tp/api.php">http://imapi.datealive.top/tp/api.php</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发API接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是istio</title>
      <link href="/posts/62006/"/>
      <url>/posts/62006/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-istio"><a href="#什么是-istio" class="headerlink" title="什么是 istio"></a>什么是 istio</h1><p>如果你比较关注新兴技术的话，那么很可能在不同的地方听说过 istio，并且知道它和 service mesh 有着牵扯。这篇文章是我之前在公司内部做过的分享，可以作为了解 istio 的入门介绍，了解什么是 istio，istio 为什么最近这么火，以及 istio 能够我们带来什么好处。</p><h2 id="什么是-istio？"><a href="#什么是-istio？" class="headerlink" title="什么是 istio？"></a>什么是 istio？</h2><p>官方对 istio 的介绍浓缩成了一句话：</p><blockquote><p>An open platform to connect, secure, control and observe services.</p></blockquote><p>翻译过来，就是”连接、安全加固、控制和观察服务的开放平台“。开放平台就是指它本身是开源的，服务对应的是微服务，也可以粗略地理解为单个应用。<br>中间的四个动词就是 istio 的主要功能，官方也各有一句话的说明。这里再阐释一下：</p><ul><li>连接（Connect）：智能控制服务之间的调用流量，能够实现灰度升级、AB 测试和红黑部署等功能</li><li>安全加固（Secure）：自动为服务之间的调用提供认证、授权和加密</li><li>控制（Control）：应用用户定义的 policy，保证资源在消费者中公平分配</li><li>观察（Observe）：查看服务运行期间的各种数据，比如日志、监控和 tracing，了解服务的运行情况</li></ul><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fume2oh274j30vg0glgmg.jpg" alt="what is istio"></p><p>虽然听起来非常高级，功能非常强大，但是一股脑出现这么多名词，还都是非常虚的概念，说了跟没说一样。要想理解上面这几句话的含义，我们还是从头说起，先聊聊 service mesh。</p><p>NOTE：其实 istio 的源头是微服务，但这又是一个比较大的话题，目前可以参考网络上各种文章。如果有机会，我们再来聊聊微服务。</p><h2 id="什么是-service-mesh"><a href="#什么是-service-mesh" class="headerlink" title="什么是 service mesh"></a>什么是 service mesh</h2><p>一般介绍 service mesh 的文章都会从网络层的又一个抽象说起，把 service mesh 看做建立在 TCP 层之上的微服务层。我这次换个思路，从 service mesh 的技术根基——网络代理来分析。</p><p>说起网络代理，我们会想到翻墙，如果对软件架构比较熟悉的会想到 Nginx 等反向代理软件。其实网络代理的范围比较广，可以肯定的说，有网络访问的地方就会有代理的存在。</p><p>Wikipedia 对代理的定义如下：</p><blockquote><p>In computer networks, a proxy server is a server (a computer system or an application) that acts as an intermediary for requests from clients seeking resources from other servers.</p></blockquote><p><strong>NOTE</strong>：代理可以是嵌套的，也就是说通信双方 A、B 中间可以多多层代理，而这些代理的存在有可能对 A、B 是透明的。</p><p>简单来说，网络代理可以简单类比成现实生活中的中介，本来需要通信的双方因为各种原因在中间再加上一道关卡。本来双方就能完成的通信，为何非要多此一举呢？那是因为代理可以为整个通信带来更多的功能，比如：</p><ul><li>拦截：代理可以选择性拦截传输的网络流量，比如一些公司限制员工在上班的时候不能访问某些游戏或者电商网站，再比如把我们和世界隔离开来的 GFW，还有在数据中心中拒绝恶意访问的网关</li><li>统计：既然所有的流量都经过代理，那么代理也可以用来统计网络中的数据信息，比如了解哪些人在访问哪些网站，通信的应答延迟等</li><li>缓存：如果通信双方比较”远“，访问比较慢，那么代理可以把最近访问的数据缓存在本地，后面的访问不用访问后端来做到加速。CDN 就是这个功能的典型场景</li><li>分发：如果某个通信方有多个服务器后端，代理可以根据某些规则来选择如何把流量发送给多个服务器，也就是我们常说的负载均衡功能。比如著名的 Nginx 软件</li><li>跳板：如果 A、B 双方因为某些原因不能直接访问，而代理可以和双方通信，那么通过代理，双方可以绕过原来的限制进行通信。这应该广大中国网民比较熟悉的场景</li><li>注入：既然代理可以看到流量，那么它也可以修改网络流量，可以自动在收到的流量中添加一些数据，比如有些宽带提供商的弹窗广告</li><li>……</li></ul><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fume2oh274j30vg0glgmg.jpg" alt="what is proxy"></p><p>不是要讲 service mesh 吗？为什么扯了一堆代理的事情？因为 service mesh 可以看做是传统代理的升级版，用来解决现在微服务框架中出现的问题，可以把 service mesh 看做是<strong>分布式</strong>的<strong>微服务</strong>代理。</p><p>在传统模式下，代理一般是集中式的单独的服务器，所有的请求都要先通过代理，然后再流入转发到实际的后端。而在 service mesh 中，代理变成了分布式的，它常驻在了应用的身边（最常见的就是 kubernetes sidecar 模式，每一个应用的 pod 中都运行着一个代理，负责流量相关的事情）。这样的话，应用所有的流量都被代理接管，那么这个代理就能做到上面提到的所有可能的事情，从而带来无限的想象力。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fume2oh274j30vg0glgmg.jpg" alt="side car proxy"></p><p>此外，原来的代理都是基于网络流量的，一般都是工作在 IP 或者 TCP 层，很少关心具体的应用逻辑。但是 service mesh 中，代理会知道整个集群的所有应用信息，并且额外添加了热更新、注入服务发现、降级熔断、认证授权、超时重试、日志监控等功能，让这些通用的功能不必每个应用都自己实现，放在代理中即可。换句话说，service mesh 中的代理对微服务中的应用做了定制化的改进！</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fumeg2zckgj30vc0gf761.jpg" alt="distributed micro-service proxy"></p><p>就这样，借着微服务和容器化的东风，传统的代理摇身一变，成了如今炙手可热的 service mesh。应用微服务之后，每个单独的微服务都会有很多副本，而且可能会有多个版本，这么多微服务之间的相互调用和管理非常复杂，但是有了 service mesh，我们可以把这块内容统一在代理层。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fumf44jsmwj30w40i1djt.jpg" alt="service mesh architecture"></p><p>有了看起来四通八达的分布式代理，我们还需要对这些代理进行统一的管理。手动更新每个代理的配置，对代理进行升级或者维护是个不可持续的事情，在前面的基础上，在加上一个控制中心，一个完整的 service mesh 就成了。管理员只需要根据控制中心的 API 来配置整个集群的应用流量、安全规则即可，代理会自动和控制中心打交道根据用户的期望改变自己的行为。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fumf44jsmwj30w40i1djt.jpg" alt="service mesh with control plane"></p><p><strong>NOTE</strong>：所以你也可以理解 service mesh 中的代理会抢了 Nginx 的生意，这也是为了 Nginx 也要开始做 NginMesh 的原因。</p><h2 id="再来看-istio"><a href="#再来看-istio" class="headerlink" title="再来看 istio"></a>再来看 istio</h2><p>了解了 service mesh 的概念，我们再来看 istio ，也许就会清楚很多。首先来看 istio 官方给出的架构图：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fumf44jsmwj30w40i1djt.jpg" alt="istio architecture"></p><p>可以看到，istio 就是我们上述提到的 service mesh 架构的一种实现，服务之间的通信（比如这里的 Service A 访问 Service B）会通过代理（默认是 envoy）来进行，而且中间的网络协议支持 HTTP/1.1，HTTP/2，gRPC 或者 TCP，可以说覆盖了主流的通信协议。控制中心做了进一步的系分，分成了 Pilot、Mixer、和 Citadel，它们的各自功能如下：</p><ul><li>Pilot：为 envoy 提供了服务发现，流量管理和智能路由（AB测试、金丝雀发布等），以及错误处理（超时、重试、熔断）功能。用户通过 pilot 的 API 管理网络相关的资源对象，pilot 会根据用户的配置和服务的信息把网络流量管理变成 envoy 能识别的格式分发到各个 sidecar 代理中。</li><li>Mixer：为整个集群执行访问控制（哪些用户可以访问哪些服务）和 policy 管理（rate limit，quota 等），并且收集代理观察到的服务之间的流量统计数据</li><li>Citadel：为服务之间提供认证和证书管理，可以让服务自动升级成 TLS 协议</li></ul><p>代理会和控制中心通信，一方面可以获取需要的服务之间的信息，另一方面也可以汇报服务调用的 metrics 数据。知道 istio 的核心架构，再来看看它的功能描述就非常容易理解了。</p><ul><li>连接：控制中心可以从集群中获取所有服务的信息，并分发给代理，这样代理就能根据用户的期望来完成服务之间的通信（自动地服务发现、负载均衡、流量控制等）</li><li>安全加固：因为所有的流量都是通过代理的，那么代理接收到不加密的网络流量之后，可以自动做一次封装，把它升级成安全的加密流量</li><li>控制：用户可以配置各种规则（比如 RBAC 授权、白名单、rate limit 或者 quota 等），当代理发现服务之间的访问不符合这些规则，就直接拒绝掉</li><li>观察：所有的流量都经过代理，因此代理对整个集群的访问情况知道得一清二楚，它把这些数据上报到控制中心，那么管理员就能观察到整个集群的流量情况了</li></ul><h2 id="istio-解决什么问题"><a href="#istio-解决什么问题" class="headerlink" title="istio 解决什么问题"></a>istio 解决什么问题</h2><p>虽然看起来非常炫酷，功能也很强大，但是一个架构和产品出来都是要解决具体的问题。所以这部分我们来看看微服务架构中的难题以及 istio 给出的答案。</p><p>首先，原来的单个应用拆分成了许多分散的微服务，它们之间相互调用才能完成一个任务，而一旦某个过程出错（组件越多，出错的概率也就越大），就非常难以排查。</p><p>用户请求出现问题无外乎两个问题：错误和响应慢。如果请求错误，那么我们需要知道那个步骤出错了，这么多的微服务之间的调用怎么确定哪个有调用成功？哪个没有调用成功呢？如果是请求响应太慢，我们就需要知道到底哪些地方比较慢？整个链路的调用各阶段耗时是多少？哪些调用是并发执行的，哪些是串行的？这些问题需要我们能非常清楚整个集群的调用以及流量情况。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fundnum6cwj31510m375v.jpg" alt="微服务故障排查困难"></p><p>此外，微服务拆分成这么多组件，如果单个组件出错的概率不变，那么整体有地方出错的概率就会增大。服务调用的时候如果没有错误处理机制，那么会导致非常多的问题。比如如果应用没有配置超时参数，或者配置的超时参数不对，则会导致请求的调用链超时叠加，对于用户来说就是请求卡住了；如果没有重试机制，那么因为各种原因导致的偶发故障也会导致直接返回错误给用户，造成不好的用户体验；此外，如果某些节点异常（比如网络中断，或者负载很高），也会导致应用整体的响应时间变成，集群服务应该能自动避开这些节点上的应用；最后，应用也是会出现 bug 的，各种 bug 会导致某些应用不可访问。这些问题需要每个应用能及时发现问题，并做好对应的处理措施。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fundt2q5alj31kw0sh7cx.jpg" alt="应用容错性"></p><p>应用数量的增多，对于日常的应用发布来说也是个难题。应用的发布需要非常谨慎，如果应用都是一次性升级的，出现错误会导致整个线上应用不可用，影响范围太大；而且，很多情况我们需要同时存在不同的版本，使用 AB 测试验证哪个版本更好；如果版本升级改动了 API，并且互相有依赖，那么我们还希望能自动地控制发布期间不同版本访问不同的地址。这些问题都需要智能的流量控制机制。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1fune76uq2wj31550jb0uc.jpg" alt="应用发布困难"></p><p>为了保证整个系统的安全性，每个应用都需要实现一套相似的认证、授权、HTTPS、限流等功能。一方面大多数的程序员对安全相关的功能并不擅长或者感兴趣，另外这些完全相似的内容每次都要实现一遍是非常冗余的。这个问题需要一个能自动管理安全相关内容的系统。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1funelzxf46j31kw0qu79g.jpg" alt="应用安全"></p><p>上面提到的这些问题是不是非常熟悉？它们就是 istio 尝试解决的问题，如果把上面的问题和 istio 提供的功能做个映射，你会发现它们是非常匹配，毕竟 istio 就是为了解决微服务的这些问题才出现的。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/006tNbRwgy1funghiputng31hc0te7ip.gif" alt="istio solves microservice issues"></p><h2 id="用什么姿势接入-istio？"><a href="#用什么姿势接入-istio？" class="headerlink" title="用什么姿势接入 istio？"></a>用什么姿势接入 istio？</h2><p>虽然 istio 能解决那么多的问题，但是引入 istio 并不是没有代价的。最大的问题是 istio 的复杂性，强大的功能也意味着 istio 的概念和组件非常多，要想理解和掌握 istio ，并成功在生产环境中部署需要非常详细的规划。一般情况下，集群管理团队需要对 kubernetes 非常熟悉，了解常用的使用模式，然后采用逐步演进的方式把 istio 的功能分批掌控下来。</p><p>第一步，自然是在测试环境搭建一套 istio 的集群，理解所有的核心概念和组件。了解 istio 提供的接口和资源，知道它们的用处，思考如何应用到自己的场景中，然后是熟悉 istio 的源代码，跟进社区的 issues，了解目前还存在的 issues 和 bug，思考如何规避或者修复。这一步是基础，需要积累到 istio 安装部署、核心概念、功能和缺陷相关的知识，为后面做好准备。</p><p>第二步，可以考虑接入 istio 的观察性功能，包括 logging、tracing、metrics 数据。应用部署到集群中，选择性地（一般是流量比较小，影响范围不大的应用）为一些应用开启 istio 自动注入功能，接管应用的流量，并安装 prometheus 和 zipkin 等监控组件，收集系统所有的监控数据。这一步可以试探性地了解 istio 对应用的性能影响，同时建立服务的性能测试基准，发现服务的性能瓶颈，帮助快速定位应用可能出现的问题。此时，这些功能可以是对应用开发者透明的，只需要集群管理员感知，这样可以减少可能带来的风险。</p><p>第三步，为应用配置 timeout 超时参数、自动重试、熔断和降级等功能，增加服务的容错性。这样可以避免某些应用错误进行这些配置导致问题的出现，这一步完成后需要通知所有的应用开发者删除掉在应用代码中对应的处理逻辑。这一步需要开发者和集群管理员同时参与。</p><p>第四步，和 ingress、helm、应用上架等相关组件和流程对接，使用 istio 接管应用的升级发布流程。让开发者可以配置应用灰度发布升级的策略，支持应用的蓝绿发布、金丝雀发布以及 AB 测试。</p><p>第五步，接入安全功能。配置应用的 TLS 互信，添加 RBAC 授权，设置应用的流量限制，提升整个集群的安全性。因为安全的问题配置比较繁琐，而且优先级一般会比功能性相关的特性要低，所以这里放在了最后。</p><p>当然这个步骤只是一个参考，每个公司需要根据自己的情况、人力、时间和节奏来调整，找到适合自己的方案。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Istio 的架构在数据中心和集群管理中非常常见，每个 agent 分布在各个节点上（可以是服务器、虚拟机、pod、容器）负责接收指令并执行，以及汇报信息；控制中心负责汇聚整个集群的信息，并提供 API 让用户对集群进行管理。kubernetes 也是类似的架构，SDN（Software Defined Network） 也是如此。相信以后会有更多类似架构的出现，这是因为数据中心要管理的节点越来越多，我们需要把任务执行分布到各节点（agent 负责的功能），同时也需要对整个集群进行管理和控制（control plane 的功能），完全去中心化的架构是无法满足后面这个要求的。</p><p>Istio 的出现为负责的微服务架构减轻了很多的负担，开发者不用关心服务调用的超时、重试、rate limit 的实现，服务之间的安全、授权也自动得到了保证；集群管理员也能够很方便地发布应用（AB 测试和灰度发布），并且能清楚看到整个集群的运行情况。</p><p>但是这并不表明有了 istio 就可以高枕无忧了，istio 只是把原来分散在应用内部的复杂性统一抽象出来放到了统一的地方，并没有让原来的复杂消失不见。因此我们需要维护 istio 整个集群，而 istio 的架构比较复杂，尤其是它一般还需要架在 kubernetes 之上，这两个系统都比较复杂，而且它们的稳定性和性能会影响到整个集群。因此再采用 isito 之前，必须做好清楚的规划，权衡它带来的好处是否远大于额外维护它的花费，需要有相关的人才对整个网络、kubernetes 和 istio 都比较了解才行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://istio.io/docs/concepts/what-is-istio/">Istio / What is Istio?</a>：istio 官网上对 istio 进行介绍的文档</p></li><li><p><a href="http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh</a>：service mesh pattern 详解的文章</p></li><li><p><a href="https://cizixs.com/2018/08/25/knative-serverless-platform/">serverless 平台 knative 简介 →</a></p></li></ul><h2 id="订阅本博客，第一时间收到文章更新"><a href="#订阅本博客，第一时间收到文章更新" class="headerlink" title="订阅本博客，第一时间收到文章更新"></a>订阅本博客，第一时间收到文章更新</h2>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务治理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PrometheusAlert</title>
      <link href="/posts/22341/"/>
      <url>/posts/22341/</url>
      
        <content type="html"><![CDATA[<p>Prometheus Alert是开源的运维告警中心消息转发系统,支持主流的监控系统Prometheus,Zabbix,日志系统Graylog和数据可视化系统Grafana发出的预警消息,支持钉钉,微信,华为云短信,腾讯云短信,腾讯云电话,阿里云短信,阿里云电话等</p><p><em>PrometheusAlert可以部署在本地和云平台上，支持windows、linux、公有云、私有云、混合云、容器和kubernetes。你可以根据实际场景或需求，选择相应的方式来部署PrometheusAlert</em></p><p><strong>在这里优先采用Docker容器化部署.没有安装Docker的小伙伴,可以采取下面的方式一键安装Docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Al</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><em>告警固然离不开数据的支撑,所以需提前部署好Prometheus以及alertmanager组件并且已经有相应的指标</em></p><p><strong>Prometheus监控设计部署可采纳==&gt;&gt;<a href="https://kococ.cn/posts/33168/">这篇文章</a>:100:</strong></p><h3 id="安装部署PrometheusAlert"><a href="#安装部署PrometheusAlert" class="headerlink" title="安装部署PrometheusAlert"></a>安装部署PrometheusAlert</h3><p><strong>Clone项目源代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/feiyu563/PrometheusAlert.git</span><br></pre></td></tr></table></figure><p><strong>创建项目配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/prometheusalert-center/</span><br><span class="line">cp PrometheusAlert/conf/app.conf /etc/prometheusalert-center/</span><br></pre></td></tr></table></figure><p><strong>启动PrometheusAlert并挂载配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -v /etc/prometheusalert-center:/app/conf --name PrometheusAlert feiyu563/prometheus-alert:latest</span><br></pre></td></tr></table></figure><p><strong>启动后可使用浏览器打开以下地址查看</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://127.0.0.1:8080</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><em>这里贴出测试环境所使用配置文件,我使用的是企业微信机器人进行告警通知</em></p><p><code>机器人地址需在企业微信群内新建机器人才可得到地址,复制在默认配置项wxurl里就可以</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------↓全局配置-----------------------</span></span><br><span class="line"><span class="string">appname</span> <span class="string">=</span> <span class="string">PrometheusAlert</span></span><br><span class="line"><span class="comment">#监听端口</span></span><br><span class="line"><span class="string">httpport</span> <span class="string">=</span> <span class="number">8080</span></span><br><span class="line"><span class="string">runmode</span> <span class="string">=</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#设置代理 proxy = http://123.123.123.123:8080</span></span><br><span class="line"><span class="string">proxy</span> <span class="string">=</span></span><br><span class="line"><span class="comment">#开启JSON请求</span></span><br><span class="line"><span class="string">copyrequestbody</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#告警消息标题</span></span><br><span class="line"><span class="string">title=PrometheusAlert</span></span><br><span class="line"><span class="comment">#链接到告警平台地址</span></span><br><span class="line"><span class="string">GraylogAlerturl=http://graylog.org</span></span><br><span class="line"><span class="comment">#钉钉告警 告警logo图标地址</span></span><br><span class="line"><span class="string">logourl=https://raw.githubusercontent.com/feiyu563/PrometheusAlert/master/doc/alert-center.png</span></span><br><span class="line"><span class="comment">#钉钉告警 恢复logo图标地址</span></span><br><span class="line"><span class="string">rlogourl=https://raw.githubusercontent.com/feiyu563/PrometheusAlert/master/doc/alert-center.png</span></span><br><span class="line"><span class="comment">#短信告警级别(等于3就进行短信告警) 告警级别定义 0 信息,1 警告,2 一般严重,3 严重,4 灾难</span></span><br><span class="line"><span class="string">messagelevel=3</span></span><br><span class="line"><span class="comment">#电话告警级别(等于4就进行语音告警) 告警级别定义 0 信息,1 警告,2 一般严重,3 严重,4 灾难</span></span><br><span class="line"><span class="string">phonecalllevel=4</span></span><br><span class="line"><span class="comment">#默认拨打号码(页面测试短信和电话功能需要配置此项)</span></span><br><span class="line"><span class="string">defaultphone=xxxxxxxx</span></span><br><span class="line"><span class="comment">#故障恢复是否启用电话通知0为关闭,1为开启</span></span><br><span class="line"><span class="string">phonecallresolved=1</span></span><br><span class="line"><span class="comment">#自动告警抑制(自动告警抑制是默认同一个告警源的告警信息只发送告警级别最高的第一条告警信息,其他消息默认屏蔽,这么做的目的是为了减少相同告警来源的消息数量,防止告警炸弹,0为关闭,1为开启)</span></span><br><span class="line"><span class="string">silent=0</span></span><br><span class="line"><span class="comment">#是否前台输出file or console</span></span><br><span class="line"><span class="string">logtype=file</span></span><br><span class="line"><span class="comment">#日志文件路径</span></span><br><span class="line"><span class="string">logpath=logs/prometheusalertcenter.log</span></span><br><span class="line"><span class="comment">#转换Prometheus,graylog告警消息的时区为CST时区(如默认已经是CST时区，请勿开启)</span></span><br><span class="line"><span class="string">prometheus_cst_time=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓webhook-----------------------</span></span><br><span class="line"><span class="comment">#是否开启钉钉告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-dingding=0</span></span><br><span class="line"><span class="comment">#默认钉钉机器人地址</span></span><br><span class="line"><span class="string">ddurl=https://oapi.dingtalk.com/robot/send?access_token=xxxxx</span></span><br><span class="line"><span class="comment">#是否开启 @所有人(0为关闭,1为开启)</span></span><br><span class="line"><span class="string">dd_isatall=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启微信告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-weixin=1</span></span><br><span class="line"><span class="comment">#默认企业微信机器人地址</span></span><br><span class="line"><span class="string">wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/*******</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启飞书告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-feishu=0</span></span><br><span class="line"><span class="comment">#默认飞书机器人地址</span></span><br><span class="line"><span class="string">fsurl=https://open.feishu.cn/open-apis/bot/hook/xxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓腾讯云接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启腾讯云短信告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-txdx=0</span></span><br><span class="line"><span class="comment">#腾讯云短信接口key</span></span><br><span class="line"><span class="string">TXY_DX_appkey=xxxxx</span></span><br><span class="line"><span class="comment">#腾讯云短信模版ID 腾讯云短信模版配置可参考 prometheus告警:&#123;1&#125;</span></span><br><span class="line"><span class="string">TXY_DX_tpl_id=xxxxx</span></span><br><span class="line"><span class="comment">#腾讯云短信sdk app id</span></span><br><span class="line"><span class="string">TXY_DX_sdkappid=xxxxx</span></span><br><span class="line"><span class="comment">#腾讯云短信签名 根据自己审核通过的签名来填写</span></span><br><span class="line"><span class="string">TXY_DX_sign=腾讯云</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启腾讯云电话告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-txdh=0</span></span><br><span class="line"><span class="comment">#腾讯云电话接口key</span></span><br><span class="line"><span class="string">TXY_DH_phonecallappkey=xxxxx</span></span><br><span class="line"><span class="comment">#腾讯云电话模版ID</span></span><br><span class="line"><span class="string">TXY_DH_phonecalltpl_id=xxxxx</span></span><br><span class="line"><span class="comment">#腾讯云电话sdk app id</span></span><br><span class="line"><span class="string">TXY_DH_phonecallsdkappid=xxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓华为云接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启华为云短信告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-hwdx=0</span></span><br><span class="line"><span class="comment">#华为云短信接口key</span></span><br><span class="line"><span class="string">HWY_DX_APP_Key=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#华为云短信接口Secret</span></span><br><span class="line"><span class="string">HWY_DX_APP_Secret=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#华为云APP接入地址(端口接口地址)</span></span><br><span class="line"><span class="string">HWY_DX_APP_Url=https://rtcsms.cn-north-1.myhuaweicloud.com:10743</span></span><br><span class="line"><span class="comment">#华为云短信模板ID</span></span><br><span class="line"><span class="string">HWY_DX_Templateid=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#华为云签名名称，必须是已审核通过的，与模板类型一致的签名名称,按照自己的实际签名填写</span></span><br><span class="line"><span class="string">HWY_DX_Signature=华为云</span></span><br><span class="line"><span class="comment">#华为云签名通道号</span></span><br><span class="line"><span class="string">HWY_DX_Sender=xxxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓阿里云接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启阿里云短信告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-alydx=0</span></span><br><span class="line"><span class="comment">#阿里云短信主账号AccessKey的ID</span></span><br><span class="line"><span class="string">ALY_DX_AccessKeyId=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#阿里云短信接口密钥</span></span><br><span class="line"><span class="string">ALY_DX_AccessSecret=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#阿里云短信签名名称</span></span><br><span class="line"><span class="string">ALY_DX_SignName=阿里云</span></span><br><span class="line"><span class="comment">#阿里云短信模板ID</span></span><br><span class="line"><span class="string">ALY_DX_Template=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启阿里云电话告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-alydh=0</span></span><br><span class="line"><span class="comment">#阿里云电话主账号AccessKey的ID</span></span><br><span class="line"><span class="string">ALY_DH_AccessKeyId=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#阿里云电话接口密钥</span></span><br><span class="line"><span class="string">ALY_DH_AccessSecret=xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#阿里云电话被叫显号，必须是已购买的号码</span></span><br><span class="line"><span class="string">ALY_DX_CalledShowNumber=xxxxxxxxx</span></span><br><span class="line"><span class="comment">#阿里云电话文本转语音（TTS）模板ID</span></span><br><span class="line"><span class="string">ALY_DH_TtsCode=xxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓容联云接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启容联云电话告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">RLY_DH_open-rlydh=0</span></span><br><span class="line"><span class="comment">#容联云基础接口地址</span></span><br><span class="line"><span class="string">RLY_URL=https://app.cloopen.com:8883/2013-12-26/Accounts/</span></span><br><span class="line"><span class="comment">#容联云后台SID</span></span><br><span class="line"><span class="string">RLY_ACCOUNT_SID=xxxxxxxxxxx</span></span><br><span class="line"><span class="comment">#容联云api-token</span></span><br><span class="line"><span class="string">RLY_ACCOUNT_TOKEN=xxxxxxxxxx</span></span><br><span class="line"><span class="comment">#容联云app_id</span></span><br><span class="line"><span class="string">RLY_APP_ID=xxxxxxxxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓邮件配置-----------------------</span></span><br><span class="line"><span class="comment">#是否开启邮件</span></span><br><span class="line"><span class="string">open-email=0</span></span><br><span class="line"><span class="comment">#邮件发件服务器地址</span></span><br><span class="line"><span class="string">Email_host=x</span></span><br><span class="line"><span class="comment">#邮件发件服务器端</span></span><br><span class="line"><span class="string">Email_port=x</span></span><br><span class="line"><span class="comment">#邮件帐号</span></span><br><span class="line"><span class="string">Email_user=x</span></span><br><span class="line"><span class="comment">#邮件密码</span></span><br><span class="line"><span class="string">Email_password=x</span></span><br><span class="line"><span class="comment">#邮件标题</span></span><br><span class="line"><span class="string">Email_title=运维告警</span></span><br><span class="line"><span class="comment">#默认发送邮箱</span></span><br><span class="line"><span class="string">Default_emails=x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓七陌云接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启七陌短信告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-7moordx=0</span></span><br><span class="line"><span class="comment">#七陌账户ID</span></span><br><span class="line"><span class="string">7MOOR_ACCOUNT_ID=Nxxx</span></span><br><span class="line"><span class="comment">#七陌账户APISecret</span></span><br><span class="line"><span class="string">7MOOR_ACCOUNT_APISECRET=xxx</span></span><br><span class="line"><span class="comment">#七陌账户短信模板编号</span></span><br><span class="line"><span class="string">7MOOR_DX_TEMPLATENUM=n</span></span><br><span class="line"><span class="comment">#注意：七陌短信变量这里只用一个var1，在代码里写死了。</span></span><br><span class="line"><span class="comment">#-----------</span></span><br><span class="line"><span class="comment">#是否开启七陌webcall语音通知告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-7moordh=0</span></span><br><span class="line"><span class="comment">#请在七陌平台添加虚拟服务号、文本节点</span></span><br><span class="line"><span class="comment">#七陌账户webcall的虚拟服务号</span></span><br><span class="line"><span class="string">7MOOR_WEBCALL_SERVICENO=xxx</span></span><br><span class="line"><span class="comment"># 文本节点里被替换的变量，我配置的是text。如果被替换的变量不是text，请修改此配置</span></span><br><span class="line"><span class="string">7MOOR_WEBCALL_VOICE_VAR=text</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓telegram接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启telegram告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-tg=0</span></span><br><span class="line"><span class="comment">#tg机器人token</span></span><br><span class="line"><span class="string">TG_TOKEN=xxxxx</span></span><br><span class="line"><span class="comment">#tg消息模式 个人消息或者频道消息 0为关闭(推送给个人)，1为开启(推送给频道)</span></span><br><span class="line"><span class="string">TG_MODE_CHAN=0</span></span><br><span class="line"><span class="comment">#tg用户ID</span></span><br><span class="line"><span class="string">TG_USERID=xxxxx</span></span><br><span class="line"><span class="comment">#tg频道name</span></span><br><span class="line"><span class="string">TG_CHANNAME=xxxxx</span></span><br><span class="line"><span class="comment">#tg api地址, 可以配置为代理地址</span></span><br><span class="line"><span class="comment">#TG_API_PROXY=&quot;https://api.telegram.org/bot%s/%s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------↓workwechat接口-----------------------</span></span><br><span class="line"><span class="comment">#是否开启workwechat告警通道,可同时开始多个通道0为关闭,1为开启</span></span><br><span class="line"><span class="string">open-workwechat=0</span></span><br><span class="line"><span class="comment"># 企业ID</span></span><br><span class="line"><span class="string">WorkWechat_CropID=x</span></span><br><span class="line"><span class="comment"># 应用ID</span></span><br><span class="line"><span class="string">WorkWechat_AgentID=x</span></span><br><span class="line"><span class="comment"># 应用secret</span></span><br><span class="line"><span class="string">WorkWechat_AgentSecret=x</span></span><br><span class="line"><span class="comment"># 接受用户</span></span><br><span class="line"><span class="string">WorkWechat_ToUser=&quot;&quot;</span></span><br><span class="line"><span class="comment"># 接受部门</span></span><br><span class="line"><span class="string">WorkWechat_ToParty=&quot;&quot;</span></span><br><span class="line"><span class="comment"># 接受标签</span></span><br><span class="line"><span class="string">WorkWechat_ToTag=&quot;&quot;</span></span><br><span class="line"><span class="comment"># 消息类型, 暂时只支持markdown</span></span><br><span class="line"><span class="comment">#WorkWechat_Msgtype = &quot;markdown&quot;</span></span><br></pre></td></tr></table></figure><h4 id="更新alertmanager配置文件"><a href="#更新alertmanager配置文件" class="headerlink" title="更新alertmanager配置文件"></a>更新alertmanager配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/alertmanager/config.yml </span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"> <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&#x27;http://192.168.1.101:8080/prometheus/alert&#x27;</span></span><br><span class="line"><span class="comment">#  - url: &#x27;http://192.168.1.101:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=e5f4c03c-91ef-4f07-*********&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="告警规则编写"><a href="#告警规则编写" class="headerlink" title="告警规则编写"></a>告警规则编写</h3><p>例: 主机节点丢失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/prometheus/rules/node.yml </span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exports.rules</span>    </span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">实例信息告警</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span>      </span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span>           </span><br><span class="line">    <span class="attr">labels:</span>          </span><br><span class="line">      <span class="attr">severity:</span> <span class="string">ERROR</span></span><br><span class="line">      <span class="attr">level:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">annotations:</span>    </span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 信息丢失,疑似服务器失联或者关机&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> job 名为 <span class="template-variable">&#123;&#123; $labels.job &#125;&#125;</span> 已经失联长达一分钟,请运维人员排查故障&quot;</span></span><br></pre></td></tr></table></figure><p>告警规则中serverity默认不被调用,PrometheusAlert默认使用的是level.含义为告警等级</p><p><strong>更新完以上配置后,默认就可以”开箱即用了”,记得重启这三个服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart prometheus alertmanager PrometheusAlert</span><br></pre></td></tr></table></figure><p><em>更改后,alertmanager默认不再承担告警角色,它会转发到PrometheusAlert程序中</em></p><p>同时可以访问<a href="http://192.168.1.101:8080/test%E7%95%8C%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E5%8F%91%E4%BF%A1">http://192.168.1.101:8080/test界面进行测试发信</a></p><h2 id="扩展功能-PrometheusAlert高级自定义消息模版"><a href="#扩展功能-PrometheusAlert高级自定义消息模版" class="headerlink" title="扩展功能 PrometheusAlert高级自定义消息模版"></a>扩展功能 PrometheusAlert高级自定义消息模版</h2><p><em>在我的理解下,其实并不算是扩展功能.但凡你想使用自己的发信模板,哪怕你只想更改一丢丢默认的模板,那么你也需要学一下这个扩展功能.</em></p><p><strong>环境中使用企业微信机器人进行故障告警及故障恢复测试</strong></p><h3 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h3><p><strong>PrometheusAlert 配置</strong>  </p><p>访问网页地址<a href="http://192.168.1.101:8080/template">http://192.168.1.101:8080/template</a></p><p><em>点击模板编辑-</em></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201130180052868.png" alt="image-20201130180052868"></p><p>温馨提示: 企业微信告警分两种,一种是企业微信应用告警,一种是企业微信机器人告警.这里采用的是企业微信机器人告警.如需使用企业微信应用告警请自行摸索配置文件app.conf</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201130180349108.png" alt="image-20201130180349108"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">$var</span> <span class="string">:=</span> <span class="string">.externalURL</span>&#125;&#125;&#123;&#123; <span class="string">range</span> <span class="string">$k</span>,<span class="string">$v:=.alerts</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">if</span> <span class="string">eq</span> <span class="string">$v.status</span> <span class="string">&quot;resolved&quot;</span>&#125;&#125;</span><br><span class="line">[<span class="string">Prometheus恢复信息</span>]<span class="string">($v.generatorURL&#125;&#125;)</span></span><br><span class="line"><span class="string">&gt;**[&#123;&#123;$v.labels.alertname&#125;&#125;](&#123;&#123;$var&#125;&#125;)**</span></span><br><span class="line"><span class="string">开始时间:</span> &#123;&#123;<span class="string">$v.startsAt</span>&#125;&#125;</span><br><span class="line"><span class="string">结束时间:</span> &#123;&#123;<span class="string">$v.endsAt</span>&#125;&#125;</span><br><span class="line"><span class="string">恢复主机IP:</span> &#123;&#123;<span class="string">$v.labels.instance</span>&#125;&#125;</span><br><span class="line"><span class="string">**&#123;&#123;$v.annotations.recoverymessage&#125;&#125;**</span></span><br><span class="line">&#123;&#123;<span class="string">else</span>&#125;&#125;</span><br><span class="line">[<span class="string">Prometheus告警信息</span>]<span class="string">($v.generatorURL&#125;&#125;)</span></span><br><span class="line"><span class="string">&gt;**[&#123;&#123;$v.labels.alertname&#125;&#125;](&#123;&#123;$var&#125;&#125;)**</span></span><br><span class="line"><span class="string">&gt;告警级别:</span> &#123;&#123;<span class="string">$v.labels.severity</span>&#125;&#125;</span><br><span class="line"><span class="string">开始时间:</span> &#123;&#123;<span class="string">$v.startsAt</span>&#125;&#125;</span><br><span class="line"><span class="string">故障主机IP:</span> &#123;&#123;<span class="string">$v.labels.instance</span>&#125;&#125;</span><br><span class="line"><span class="string">**&#123;&#123;$v.annotations.description&#125;&#125;**</span></span><br><span class="line">&#123;&#123;<span class="string">end</span>&#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>往下滑</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201130180530253.png" alt="image-20201130180530253"></p><p>这里填入你在企业微信中新建的<strong>机器人地址</strong>,填写后点击<strong>保存模板</strong></p><p>回到刚刚的界面复制路径</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201130180809297.png" alt="image-20201130180809297"></p><p><strong>Prometheus 默认配置不更改</strong></p><p><strong>alertmanager 配置</strong></p><p>将你复制的路径地址填写在config.yml文件中.<strong>记得更换其中企业微信的地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/alertmanager/config.yml </span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"> <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;web.hook.prometheusalert&#x27;</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line"><span class="comment">#  - url: &#x27;http://192.168.1.101:8080/prometheus/alert&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&#x27;http://192.168.1.101:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=e5f4c03c-91ef-4f07**********&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>更新完以上配置后,重启这两个服务</strong>:-1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart alertmanager PrometheusAlert</span><br></pre></td></tr></table></figure><p>关闭您的Job或者采集器,测试是否正常告警.</p><p>如果有错,请分析PrometheusAlert程序日志.或者直接百度.谢谢您的阅读</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PrometheusAlert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换Grafana主题</title>
      <link href="/posts/59471/"/>
      <url>/posts/59471/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 这里写分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 这里写标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb常用基础命令</title>
      <link href="/posts/55494/"/>
      <url>/posts/55494/</url>
      
        <content type="html"><![CDATA[<p>基于新版本 v1.6.2，centOS</p><p>CLI使用HTTPAPI通过8086（默认的，可以在配置文件中修改）端口与influxDB直接交互，influx命令在所有influxDB的包中都默认包含</p><blockquote><p>注意：在InfluxDB当中，并没有表（table）这个概念，取而代之的是MEASUREMENTS，MEASUREMENTS的功能与传统数据库中的表一致，因此我们也可以将MEASUREMENTS称为InfluxDB中的表</p></blockquote><h1 id="启动influx"><a href="#启动influx" class="headerlink" title="启动influx"></a>启动influx</h1><p>influx命令在/usr/bin/influx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# find &#x2F; -name influx</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;influx</span><br><span class="line">[root@test25 ~]# </span><br></pre></td></tr></table></figure><p>启动influxd</p><ul><li>service influxdb start</li><li>influxd</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# service influxdb start</span><br><span class="line">[root@test25 ~]# </span><br></pre></td></tr></table></figure><h2 id="influx参数"><a href="#influx参数" class="headerlink" title="influx参数"></a>influx参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx --help</span><br><span class="line">Usage of influx:</span><br><span class="line">  -version</span><br><span class="line">       Display the version and exit.</span><br><span class="line">  -host &#39;host name&#39;</span><br><span class="line">       Host to connect to.</span><br><span class="line">  -port &#39;port #&#39;</span><br><span class="line">       Port to connect to.</span><br><span class="line">  -socket &#39;unix domain socket&#39;</span><br><span class="line">       Unix socket to connect to.</span><br><span class="line">  -database &#39;database name&#39;</span><br><span class="line">       Database to connect to the server.</span><br><span class="line">  -password &#39;password&#39;</span><br><span class="line">      Password to connect to the server.  Leaving blank will prompt for password (--password &#39;&#39;).</span><br><span class="line">  -username &#39;username&#39;</span><br><span class="line">       Username to connect to the server.</span><br><span class="line">  -ssl</span><br><span class="line">        Use https for requests.</span><br><span class="line">  -unsafeSsl</span><br><span class="line">        Set this when connecting to the cluster using https and not use SSL verification.</span><br><span class="line">  -execute &#39;command&#39;</span><br><span class="line">       Execute command and quit.</span><br><span class="line">  -format &#39;json|csv|column&#39;</span><br><span class="line">       Format specifies the format of the server responses:  json, csv, or column.</span><br><span class="line">  -precision &#39;rfc3339|h|m|s|ms|u|ns&#39;</span><br><span class="line">       Precision specifies the format of the timestamp:  rfc3339, h, m, s, ms, u or ns.</span><br><span class="line">  -consistency &#39;any|one|quorum|all&#39;</span><br><span class="line">       Set write consistency level: any, one, quorum, or all</span><br><span class="line">  -pretty</span><br><span class="line">       Turns on pretty print for the json format.</span><br><span class="line">  -import</span><br><span class="line">       Import a previous database export from file</span><br><span class="line">  -pps</span><br><span class="line">       How many points per second the import will allow.  By default it is zero and will not throttle importing.</span><br><span class="line">  -path</span><br><span class="line">       Path to file to import</span><br><span class="line">  -compressed</span><br><span class="line">       Set to true if the import file is compressed</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">    # Use influx in a non-interactive mode to query the database &quot;metrics&quot; and pretty print json:</span><br><span class="line">    $ influx -database &#39;metrics&#39; -execute &#39;select * from cpu&#39; -format &#39;json&#39; -pretty</span><br><span class="line"></span><br><span class="line">    # Connect to a specific database on startup and set database context:</span><br><span class="line">    $ influx -database &#39;metrics&#39; -host &#39;localhost&#39; -port &#39;8086&#39;</span><br><span class="line">[root@test25 ~]#</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-version</td><td>显示版本号并退出</td></tr><tr><td>-host ‘host name’</td><td>连接到远程主机</td></tr><tr><td>-port ‘port #’</td><td>连接远程主机端口</td></tr><tr><td>-socket ‘unix domain socket’</td><td>连接unix套接字</td></tr><tr><td>-database ‘database name’</td><td>连接到服务器的数据库</td></tr><tr><td>-password ‘password’</td><td>连接到服务器的密码</td></tr><tr><td>-username ‘username’</td><td>连接到服务器的用户名</td></tr><tr><td>-ssl</td><td>使用https请求</td></tr><tr><td>-unsafeSsl</td><td>使用https连接到集群时，不要使用SSL验证。</td></tr><tr><td>-execute ‘command’</td><td>执行命令并退出</td></tr><tr><td>-format ‘json|csv|column’</td><td>格式指定了服务器响应的格式：json、csv或column.默认是column</td></tr><tr><td>-precision ‘rfc3339|h|m|s|ms|u|ns’</td><td>指定时间戳的格式精度: rfc3339 (YYYY-MM-DDTHH:MM:SS.nnnnnnnnnZ), h (hours), m (minutes), s (seconds), ms (milliseconds), u (microseconds), ns (nanoseconds)..</td></tr><tr><td>-consistency ‘any|one|quorum|all’</td><td>设置写一致性级别: any, one, quorum, or all</td></tr><tr><td>-pretty</td><td>打开美化json打印</td></tr><tr><td>-import</td><td>导入备份的数据库文件</td></tr><tr><td>-pps</td><td>导入允许每秒多少个点。默认情况下，它是零，不会限制进口</td></tr><tr><td>-path</td><td>import的文件路径</td></tr><tr><td>-compressed</td><td>如果导入文件被压缩，则设置为true</td></tr></tbody></table><p>给出一些demo</p><ul><li>显示版本 -version</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -version</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br></pre></td></tr></table></figure><p>连接指定主机 -host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><p>用使用端口连接主机 -port</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><p>连接指定数据库 -database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><p>使用指定的用户名和密码(添加用户见下面) -password -username</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -username &#39;yueling&#39; -password &#39;123456&#39;</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p>添加用户：yueling和管理员用户lingyue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -database &#39;mydb&#39; -host &#39;localhost&#39; -port &#39;8086&#39;</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; show users</span><br><span class="line">user admin</span><br><span class="line">---- -----</span><br><span class="line">&gt; create user &quot;yueling&quot; with password &#39;123456&#39;</span><br><span class="line">&gt; create user &quot;lingyue&quot; with password &#39;123456&#39; with all privileges</span><br><span class="line">&gt; show users</span><br><span class="line">user    admin</span><br><span class="line">----    -----</span><br><span class="line">yueling false</span><br><span class="line">lingyue true</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p>执行命令并返回 -execute</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -username &#39;yueling&#39; -password &#39;123456&#39; -execute &#39;select * from cpu_load_short&#39;</span><br><span class="line">name: cpu_load_short</span><br><span class="line">time                direction host     region  value</span><br><span class="line">----                --------- ----     ------  -----</span><br><span class="line">1422568543702900257 in        server01 us-west 2</span><br><span class="line">1422568543702900257           server02 us-west 0.55</span><br><span class="line">1434055562000000000           server01 us-west 0.64</span><br><span class="line">1536579271011551389           server02         0.67</span><br><span class="line">[root@test25 ~]# </span><br></pre></td></tr></table></figure><p>指定返回格式 -format</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -username &#39;yueling&#39; -password &#39;123456&#39; -execute &#39;select * from cpu_load_short&#39; -format json</span><br><span class="line">&#123;&quot;results&quot;:[&#123;&quot;series&quot;:[&#123;&quot;name&quot;:&quot;cpu_load_short&quot;,&quot;columns&quot;:[&quot;time&quot;,&quot;direction&quot;,&quot;host&quot;,&quot;region&quot;,&quot;value&quot;],&quot;values&quot;:[[1422568543702900257,&quot;in&quot;,&quot;server01&quot;,&quot;us-west&quot;,2],[1422568543702900257,null,&quot;server02&quot;,&quot;us-west&quot;,0.55],[1434055562000000000,null,&quot;server01&quot;,&quot;us-west&quot;,0.64],[1536579271011551389,null,&quot;server02&quot;,null,0.67]]&#125;]&#125;]&#125;</span><br><span class="line"></span><br><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -format json </span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; use mydb</span><br><span class="line">Using database mydb</span><br><span class="line">&gt; select * from cpu_load_short</span><br><span class="line">&#123;&quot;results&quot;:[&#123;&quot;series&quot;:[&#123;&quot;name&quot;:&quot;cpu_load_short&quot;,&quot;columns&quot;:[&quot;time&quot;,&quot;direction&quot;,&quot;host&quot;,&quot;region&quot;,&quot;value&quot;],&quot;values&quot;:[[1422568543702900257,&quot;in&quot;,&quot;server01&quot;,&quot;us-west&quot;,2],[1422568543702900257,null,&quot;server02&quot;,&quot;us-west&quot;,0.55],[1434055562000000000,null,&quot;server01&quot;,&quot;us-west&quot;,0.64],[1536579271011551389,null,&quot;server02&quot;,null,0.67]]&#125;]&#125;]&#125;</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p>时间戳精度 -precision</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -username &#39;yueling&#39; -password &#39;123456&#39; -execute &#39;select * from cpu_load_short&#39; -format column -precision ms</span><br><span class="line">name: cpu_load_short</span><br><span class="line">time          direction host     region  value</span><br><span class="line">----          --------- ----     ------  -----</span><br><span class="line">1422568543702 in        server01 us-west 2</span><br><span class="line">1422568543702           server02 us-west 0.55</span><br><span class="line">1434055562000           server01 us-west 0.64</span><br><span class="line">1536579271011           server02         0.67</span><br></pre></td></tr></table></figure><p>使用json美化输出 -pretty</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -host localhost -port 8086 -database mydb -username &#39;yueling&#39; -password &#39;123456&#39; -execute &#39;select * from cpu_load_short&#39; -format json</span><br><span class="line"> -pretty</span><br><span class="line">&#123;</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;series&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;cpu_load_short&quot;,</span><br><span class="line">                    &quot;columns&quot;: [</span><br><span class="line">                        &quot;time&quot;,</span><br><span class="line">                        &quot;direction&quot;,</span><br><span class="line">                        &quot;host&quot;,</span><br><span class="line">                        &quot;region&quot;,</span><br><span class="line">                        &quot;value&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;values&quot;: [</span><br><span class="line">                        [</span><br><span class="line">                            1422568543702900257,</span><br><span class="line">                            &quot;in&quot;,</span><br><span class="line">                            &quot;server01&quot;,</span><br><span class="line">                            &quot;us-west&quot;,</span><br><span class="line">                            2</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            1422568543702900257,</span><br><span class="line">                            null,</span><br><span class="line">                            &quot;server02&quot;,</span><br><span class="line">                            &quot;us-west&quot;,</span><br><span class="line">                            0.55</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            1434055562000000000,</span><br><span class="line">                            null,</span><br><span class="line">                            &quot;server01&quot;,</span><br><span class="line">                            &quot;us-west&quot;,</span><br><span class="line">                            0.64</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            1536579271011551389,</span><br><span class="line">                            null,</span><br><span class="line">                            &quot;server02&quot;,</span><br><span class="line">                            null,</span><br><span class="line">                            0.67</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用文件导入数据 -import</p><ul><li>导入的文件包含两个章节<ul><li>DDL：Data Definition Language</li><li>DML：Data Manipulation Language</li></ul></li></ul><blockquote><p>注意文件里的时间戳，自己试验的时候记得修改使符合规则 比如当前时间戳 date +’%s’</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# cat dataarr.txt </span><br><span class="line"># DDL</span><br><span class="line">CREATE DATABASE pirates</span><br><span class="line">CREATE RETENTION POLICY oneday ON pirates DURATION 1d REPLICATION 1</span><br><span class="line"></span><br><span class="line"># DML</span><br><span class="line"># CONTEXT-DATABASE: pirates</span><br><span class="line"># CONTEXT-RETENTION-POLICY: oneday</span><br><span class="line"></span><br><span class="line">treasures,captain_id&#x3D;dread_pirate_roberts value&#x3D;801 1536658695</span><br><span class="line">treasures,captain_id&#x3D;flint value&#x3D;29 1536658695</span><br><span class="line">[root@test25 ~]#</span><br><span class="line">[root@test25 ~]# influx -import -path&#x3D;dataarr.txt -precision&#x3D;s</span><br><span class="line">2018&#x2F;09&#x2F;11 17:40:39 Processed 2 commands</span><br><span class="line">2018&#x2F;09&#x2F;11 17:40:39 Processed 2 inserts</span><br><span class="line">2018&#x2F;09&#x2F;11 17:40:39 Failed 0 inserts</span><br><span class="line">[root@test25 ~]#</span><br></pre></td></tr></table></figure><p>如果是压缩的文件 要配合 -compressed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# gzip dataarr.txt</span><br><span class="line">[root@test25 ~]# ls</span><br><span class="line">anaconda-ks.cfg  dataarr.txt.gz </span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">[root@test25 ~]# influx -import -path&#x3D;dataarr.txt.gz -precision&#x3D;s -compressed</span><br><span class="line">2018&#x2F;09&#x2F;11 17:50:47 Processed 2 commands</span><br><span class="line">2018&#x2F;09&#x2F;11 17:50:47 Processed 2 inserts</span><br><span class="line">2018&#x2F;09&#x2F;11 17:50:47 Failed 0 inserts</span><br><span class="line">[root@test25 ~]#</span><br></pre></td></tr></table></figure><h2 id="influx命令"><a href="#influx命令" class="headerlink" title="influx命令"></a>influx命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p>查看influx内部命令用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; help</span><br><span class="line">Usage:</span><br><span class="line">        connect &lt;host:port&gt;   connects to another node specified by host:port</span><br><span class="line">        auth                  prompts for username and password</span><br><span class="line">        pretty                toggles pretty print for the json format</span><br><span class="line">        chunked               turns on chunked responses from server</span><br><span class="line">        chunk size &lt;size&gt;     sets the size of the chunked responses.  Set to 0 to reset to the default chunked size</span><br><span class="line">        use &lt;db_name&gt;         sets current database</span><br><span class="line">        format &lt;format&gt;       specifies the format of the server responses: json, csv, or column</span><br><span class="line">        precision &lt;format&gt;    specifies the format of the timestamp: rfc3339, h, m, s, ms, u or ns</span><br><span class="line">        consistency &lt;level&gt;   sets write consistency level: any, one, quorum, or all</span><br><span class="line">        history               displays command history</span><br><span class="line">        settings              outputs the current settings for the shell</span><br><span class="line">        clear                 clears settings such as database or retention policy.  run &#39;clear&#39; for help</span><br><span class="line">        exit&#x2F;quit&#x2F;ctrl+d      quits the influx shell</span><br><span class="line"></span><br><span class="line">        show databases        show database names</span><br><span class="line">        show series           show series information</span><br><span class="line">        show measurements     show measurement information</span><br><span class="line">        show tag keys         show tag key information</span><br><span class="line">        show field keys       show field key information</span><br><span class="line"></span><br><span class="line">        A full list of influxql commands can be found at:</span><br><span class="line">        https:&#x2F;&#x2F;docs.influxdata.com&#x2F;influxdb&#x2F;latest&#x2F;query_language&#x2F;spec&#x2F;</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>connect <a href="host:port">host:port</a></td><td>通过host:port连接指定服务器</td></tr><tr><td>auth</td><td>提示输入用户名和密码</td></tr><tr><td>pretty</td><td>开启/关闭美化json输出</td></tr><tr><td>chunked</td><td>开启/关闭服务器响应</td></tr><tr><td>chunk size <size></td><td>设置服务器响应的大小，设置为0则重置返回大小</td></tr><tr><td>use <db_name></td><td>切换数据库</td></tr><tr><td>format <format></td><td>指定输出格式: json, csv, or column（默认是column，当然启动的时候可以用-format指定）</td></tr><tr><td>precision <format></td><td>时间戳精度: rfc3339 (YYYY-MM-DDTHH:MM:SS.nnnnnnnnnZ), h (hours), m (minutes), s (seconds), ms (milliseconds), u (microseconds), ns (nanoseconds)</td></tr><tr><td>consistency <level></td><td>设置并发级别: any, one, quorum, or all</td></tr><tr><td>history</td><td>显示执行命令历史，类似linux的history</td></tr><tr><td>settings</td><td>输出当前的设置项</td></tr><tr><td>clear</td><td>清除数据库设置或者保留策略 clear [ database | db | retention policy | rp ]</td></tr><tr><td>exit/quit/ctrl+d</td><td>退出influx</td></tr><tr><td>show databases</td><td>显示所有数据库的名称</td></tr><tr><td>show series</td><td>显示所有series信息</td></tr><tr><td>show measurements</td><td>显示所有指标信息，相当于表</td></tr><tr><td>show tag keys</td><td>显示所有tag信息</td></tr><tr><td>show field keys</td><td>显示所有field信息</td></tr><tr><td>insert</td><td>写入数据insert into <retention policy> <line protocol></td></tr></tbody></table><p>influx命令的一些示例</p><ul><li>连接服务器、认证 connect和auth</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@test25 ~]# influx -database &#39;mydb&#39; -host &#39;localhost&#39; -port &#39;8086&#39;</span><br><span class="line">Connected to http:&#x2F;&#x2F;localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.2</span><br><span class="line">&gt; connect localhost:8086</span><br><span class="line">&gt; auth</span><br><span class="line">username: lingyue</span><br><span class="line">password: </span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><ul><li>显示设置 settings</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; settings</span><br><span class="line">Setting           Value</span><br><span class="line">--------          --------</span><br><span class="line">Host              localhost:8086</span><br><span class="line">Username          </span><br><span class="line">Database          mydb</span><br><span class="line">RetentionPolicy   </span><br><span class="line">Pretty            false</span><br><span class="line">Format            column</span><br><span class="line">Write Consistency all</span><br><span class="line">Chunked           true</span><br><span class="line">Chunk Size        0</span><br></pre></td></tr></table></figure><ul><li>显示数据 show databases</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; show databases</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">jmeter</span><br><span class="line">_internal</span><br><span class="line">test</span><br><span class="line">mydb</span><br><span class="line">pirates</span><br></pre></td></tr></table></figure><ul><li>切换database use databaseName</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use mydb</span><br><span class="line">Using database mydb</span><br></pre></td></tr></table></figure><ul><li>显示指标 show measurements</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; show measurements</span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">cpu_load_short</span><br></pre></td></tr></table></figure><ul><li>显示tag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; show tag keys</span><br><span class="line">name: cpu_load_short</span><br><span class="line">tagKey</span><br><span class="line">------</span><br><span class="line">direction</span><br><span class="line">host</span><br><span class="line">region</span><br></pre></td></tr></table></figure><ul><li>显示series</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; show series</span><br><span class="line">key</span><br><span class="line">---</span><br><span class="line">cpu_load_short,direction&#x3D;in,host&#x3D;server01,region&#x3D;us-west</span><br><span class="line">cpu_load_short,host&#x3D;server01,region&#x3D;us-west</span><br><span class="line">cpu_load_short,host&#x3D;server02</span><br><span class="line">cpu_load_short,host&#x3D;server02,region&#x3D;us-west</span><br></pre></td></tr></table></figure><ul><li>显示filed</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; show field keys</span><br><span class="line">name: cpu_load_short</span><br><span class="line">fieldKey fieldType</span><br><span class="line">-------- ---------</span><br><span class="line">value    float</span><br></pre></td></tr></table></figure><ul><li>指定输出格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; format json</span><br><span class="line">&gt; show databases</span><br><span class="line">&#123;&quot;results&quot;:[&#123;&quot;series&quot;:[&#123;&quot;name&quot;:&quot;databases&quot;,&quot;columns&quot;:[&quot;name&quot;],&quot;values&quot;:[[&quot;jmeter&quot;],[&quot;_internal&quot;],[&quot;test&quot;],[&quot;mydb&quot;],[&quot;pirates&quot;]]&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><ul><li>格式化json输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; pretty</span><br><span class="line">Pretty print enabled</span><br><span class="line">&gt; show databases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;series&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;databases&quot;,</span><br><span class="line">                    &quot;columns&quot;: [</span><br><span class="line">                        &quot;name&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;values&quot;: [</span><br><span class="line">                        [</span><br><span class="line">                            &quot;jmeter&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            &quot;_internal&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            &quot;test&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            &quot;mydb&quot;</span><br><span class="line">                        ],</span><br><span class="line">                        [</span><br><span class="line">                            &quot;pirates&quot;</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显示执行命令历史 history</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; history</span><br><span class="line">create database test</span><br><span class="line">show databases</span><br><span class="line">……</span><br><span class="line">format json</span><br><span class="line">show databases</span><br><span class="line">pretty</span><br><span class="line">show databases</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><ul><li>insert<br>InfluxDB中没有显式的新建表的语句，只能通过insert数据的方式来建立新表<br>增加数据采用insert的方式，要注意的是 InfluxDB的insert中，表名与数据之间用逗号（,）分隔，tag和field之间用 空格分隔，多个tag或者多个field之间用逗号（,）分隔</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT treasures,captain_id&#x3D;pirate_king value&#x3D;2</span><br><span class="line">&gt; SHOW RETENTION POLICIES ON mydb</span><br><span class="line">name    duration shardGroupDuration replicaN default</span><br><span class="line">----    -------- ------------------ -------- -------</span><br><span class="line">autogen 0s       168h0m0s           1        true</span><br><span class="line">&gt; INSERT INTO autogen treasures,captain_id&#x3D;pirate_king value&#x3D;2</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><ul><li>select 查询数据<br>和sql结构一致</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from cpu_load_short</span><br><span class="line">name: cpu_load_short</span><br><span class="line">time                direction host     region  value</span><br><span class="line">----                --------- ----     ------  -----</span><br><span class="line">1422568543702900257 in        server01 us-west 2</span><br><span class="line">1422568543702900257           server02 us-west 0.55</span><br><span class="line">1434055562000000000           server01 us-west 0.64</span><br><span class="line">1536579271011551389           server02         0.67</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><ul><li>drop 删除measurement和database</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; show databases</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">jmeter</span><br><span class="line">_internal</span><br><span class="line">test</span><br><span class="line">mydb</span><br><span class="line">pirates</span><br><span class="line">&gt; use test</span><br><span class="line">Using database test</span><br><span class="line">&gt; show measurements</span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">disk_free</span><br><span class="line">&gt; drop measurement disk_free</span><br><span class="line">&gt; show measurements</span><br><span class="line">&gt; drop database test</span><br><span class="line">&gt; show databases</span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">jmeter</span><br><span class="line">_internal</span><br><span class="line">mydb</span><br><span class="line">pirates</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 这里写分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 这里写标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegraf+InfluxDB+Grafana+Docker搭建服务器监控平台</title>
      <link href="/posts/8025/"/>
      <url>/posts/8025/</url>
      
        <content type="html"><![CDATA[<h1 id="Telegraf-InfluxDB-Grafana-Docker搭建服务器监控平台"><a href="#Telegraf-InfluxDB-Grafana-Docker搭建服务器监控平台" class="headerlink" title="Telegraf+InfluxDB+Grafana+Docker搭建服务器监控平台"></a>Telegraf+InfluxDB+Grafana+Docker搭建服务器监控平台</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为监控Docker的事情头疼了很久,终于找到了这个很适合业务需求的方案.(我知道你们肯定想说,那么多监控docker的方案都不能使用吗?答案是:可能会使用,但我是FW)</p><p>要搭建服务器监控平台，总共分三步：<br>第一步，数据采集；<br>第二步，数据存储；<br>第三步，数据可视化。</p><p>其中，数据存储连接数据采集与数据可视化，是非常重要的中间环节。本文选择了时序数据库InfluxDB。</p><p>InfluxDB是一款优秀的<strong>时间序列数据库</strong>，适合存储设备性能、日志、物联网传感器等带时间戳的数据。能轻松处理高写入和高查询负载（数据采集与数据可视化非常常见的场景）。具体介绍请参阅InfluxDB官方文档：<a href="https://docs.influxdata.com/influxdb/%E3%80%82">https://docs.influxdata.com/influxdb/。</a></p><p>数据采集方面有非常多的选择，<del>你甚至可以自己开发一个。</del>这里为了方便直接选择Influxdata官方出品的采集工具Telegraf ，毕竟是全家桶产品。Telegraf详情介绍：<a href="https://docs.influxdata.com/telegraf/">https://docs.influxdata.com/telegraf</a>。</p><p>可视化方面选择了超高颜值、功能强大的开源可视化利器Gafana，具体颜值有多高，功能有多强大，本文就不再赘述了，直接上官网：<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a>。</p><p><strong>原博主甚至还给Grafana做了一下中文的本地汉化：<a href="https://github.com/WangHL0927/grafana-chinese%E3%80%82">https://github.com/WangHL0927/grafana-chinese。</a></strong></p><p>Grafana从早期版本就对InfluxDB有着完善的支持。</p><p><strong>最终平台的方案：</strong><br><strong>Telegraf(数据采集)+InfluxDB（数据存储）+Grafana（数据可视化）==&gt;Docker(监控Docker相关业务)。</strong></p><h2 id="设计部署"><a href="#设计部署" class="headerlink" title="设计部署"></a>设计部署</h2><p>InfluxDB与Grafana直接使用官方容器进行部署，方便快捷。服务器需先安装Docker，具体步骤参考本站文章<a href="https://kococ.cn/posts/39421/">CentOS7安装Docker</a>。</p><p>当然你也可以选择我下面给出的一键安装Docker.适用范围Centos 7.2-7.8,需提前准备epel源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="1-部署InfluxDB"><a href="#1-部署InfluxDB" class="headerlink" title="1 部署InfluxDB"></a>1 部署InfluxDB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8086:8086 --name=influxdb influxdb</span><br></pre></td></tr></table></figure><p>以上命令dcoker会自动从仓库下载最新版本的influxdb镜像，后台运行一个名为influxdb的容器并映射主机8086端口到容器8086端口。</p><p>若想将数据存储到宿主机而非容器内，可使用以下命令启动挂载本地目录到容器内。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $pwd为当前工作目录，可替换为其它宿主机目录</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8086:8086 -v <span class="variable">$PWD</span>:/var/lib/influxdb --name=influxdb influxdb</span><br></pre></td></tr></table></figure><p>启动InfluxDB容器后，通过http接口访问进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -G http://localhost:8086/query --data-urlencode <span class="string">&quot;q=show databases&quot;</span></span><br></pre></td></tr></table></figure><p>若influxdb运行正常，则会返回如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链接查询参数为show databases 数据库会返回所有的数据库名，新安装的influxdb默认只有一个&quot;_internal&quot;</span></span><br><span class="line"><span class="comment"># 数据库。</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;results&quot;</span>:[&#123;<span class="string">&quot;statement_id&quot;</span>:0,<span class="string">&quot;series&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;databases&quot;</span>,<span class="string">&quot;columns&quot;</span>:[<span class="string">&quot;name&quot;</span>],<span class="string">&quot;values&quot;</span>:[[<span class="string">&quot;_internal&quot;</span>],[<span class="string">&quot;telegraf&quot;</span>]]&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="influxdb容器管理"><a href="#influxdb容器管理" class="headerlink" title="influxdb容器管理"></a>influxdb容器管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker start influxdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker stop influxdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">docker restart influxdb</span><br></pre></td></tr></table></figure><hr><h3 id="2-安装Telegraf"><a href="#2-安装Telegraf" class="headerlink" title="2 安装Telegraf"></a>2 安装Telegraf</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>Telegraf为了方便配置调试，选择直接在宿主机安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以CentOS为例</span></span><br><span class="line"><span class="comment"># 下载Telegraf</span></span><br><span class="line">wget https://dl.influxdata.com/telegraf/releases/telegraf-1.6.3-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Telegraf</span></span><br><span class="line">sudo yum localinstall telegraf-1.6.3-1.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="配置Telegraf"><a href="#配置Telegraf" class="headerlink" title="配置Telegraf"></a>配置Telegraf</h4><p>用户可修改Telegraf配置文件进行采集项的配置。配置文件默认位于<code>/etc/telegraf/telegraf.conf</code>。<br>在本文方案中，需要配置数据输出项（输出到influxdb），其它项使用telegraf默认即可。</p><p>按照示例配置influxdb url、database名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                            OUTPUT PLUGINS                                   #</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuration for sending metrics to InfluxDB</span></span><br><span class="line">[[outputs.influxdb]]</span><br><span class="line">  <span class="comment">## The full HTTP or UDP URL for your InfluxDB instance.</span></span><br><span class="line">  <span class="comment">##</span></span><br><span class="line">  <span class="comment">## Multiple URLs can be specified for a single cluster, only ONE of the</span></span><br><span class="line">  <span class="comment">## urls will be written to each interval.</span></span><br><span class="line">  <span class="comment"># urls = [&quot;unix:///var/run/influxdb.sock&quot;]</span></span><br><span class="line">  <span class="comment"># urls = [&quot;udp://127.0.0.1:8089&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># influxdb http地址，由于是宿主机直接安装，直接访问本地8086端口即可。</span></span><br><span class="line">  urls = [<span class="string">&quot;http://127.0.0.1:8086&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">## The target database for metrics; will be created as needed.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 数据库名，不存在会自动创建，默认&quot;telegraf&quot;</span></span><br><span class="line">  database = <span class="string">&quot;telegraf&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## If true, no CREATE DATABASE queries will be sent.  Set to true when using</span></span><br><span class="line">  <span class="comment">## Telegraf with a user without permissions to create databases or when the</span></span><br><span class="line">  <span class="comment">## database already exists.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 跳过创建数据库</span></span><br><span class="line">  skip_database_creation = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Name of existing retention policy to write to.  Empty string writes to</span></span><br><span class="line">  <span class="comment">## the default retention policy.</span></span><br><span class="line">  <span class="comment"># retention_policy = &quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Write consistency (clusters only), can be: &quot;any&quot;, &quot;one&quot;, &quot;quorum&quot;, &quot;all&quot;</span></span><br><span class="line">  <span class="comment"># write_consistency = &quot;any&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Timeout for HTTP messages.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 超时时间</span></span><br><span class="line">  timeout = <span class="string">&quot;5s&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## HTTP Basic Auth</span></span><br><span class="line">  <span class="comment"># username = &quot;telegraf&quot;</span></span><br><span class="line">  <span class="comment"># password = &quot;metricsmetricsmetricsmetrics&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## HTTP User-Agent</span></span><br><span class="line">  <span class="comment"># user_agent = &quot;telegraf&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## UDP payload size is the maximum packet size to send.</span></span><br><span class="line">  <span class="comment"># udp_payload = 512</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Optional SSL Config</span></span><br><span class="line">  <span class="comment"># ssl_ca = &quot;/etc/telegraf/ca.pem&quot;</span></span><br><span class="line">  <span class="comment"># ssl_cert = &quot;/etc/telegraf/cert.pem&quot;</span></span><br><span class="line">  <span class="comment"># ssl_key = &quot;/etc/telegraf/key.pem&quot;</span></span><br><span class="line">  <span class="comment">## Use SSL but skip chain &amp; host verification</span></span><br><span class="line">  <span class="comment"># insecure_skip_verify = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## HTTP Proxy override, if unset values the standard proxy environment</span></span><br><span class="line">  <span class="comment">## variables are consulted to determine which proxy, if any, should be used.</span></span><br><span class="line">  <span class="comment"># http_proxy = &quot;http://corporate.proxy:3128&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## Additional HTTP headers</span></span><br><span class="line">  <span class="comment"># http_headers = &#123;&quot;X-Special-Header&quot; = &quot;Special-Value&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## HTTP Content-Encoding for write request body, can be set to &quot;gzip&quot; to</span></span><br><span class="line">  <span class="comment">## compress body or &quot;identity&quot; to apply no encoding.</span></span><br><span class="line">  <span class="comment"># content_encoding = &quot;identity&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## When true, Telegraf will output unsigned integers as unsigned values,</span></span><br><span class="line">  <span class="comment">## i.e.: &quot;42u&quot;.  You will need a version of InfluxDB supporting unsigned</span></span><br><span class="line">  <span class="comment">## integer values.  Enabling this option will result in field type errors if</span></span><br><span class="line">  <span class="comment">## existing data has been written.</span></span><br><span class="line">  <span class="comment"># influx_uint_support = false</span></span><br><span class="line">  [[inputs.docker]]</span><br><span class="line">  <span class="comment">###指定本机docker运行时sock文件</span></span><br><span class="line">  endpoint = <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">  <span class="comment">###设置为true以收集集群度量</span></span><br><span class="line">  <span class="comment">###如果使用docker-compose或者docker-swarm需要用到</span></span><br><span class="line">  gather_services = <span class="literal">false</span></span><br><span class="line">  <span class="comment">###排除容器名等配置</span></span><br><span class="line">  container_name_include = []</span><br><span class="line">  container_name_exclude = []</span><br><span class="line">  <span class="comment">###Docker统计信息超时时间</span></span><br><span class="line">  timeout = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="comment">###包含和排除docker标签,空数组包含所有标签</span></span><br><span class="line">  <span class="comment">###哪些环境变量，我们应该作为一个标签使用＃tag_env = “ JAVA_HOME ”，“ HEAP_SIZE ” ] ＃＃可选TLS配置＃ tls_ca = “/etc/telegraf/ca.pem” ＃ TLS_CERT = “/etc/telegraf/cert.pem” ＃ TLS_KEY = “/etc/telegraf/key.pem”</span></span><br><span class="line">  docker_label_include = []</span><br><span class="line">  docker_label_exclude = []</span><br><span class="line">  <span class="comment">###每个容器的IO报告</span></span><br><span class="line">  perdevice = <span class="literal">true</span></span><br><span class="line">  <span class="comment">###每个容器的总IO和网络统计信息</span></span><br><span class="line">  total = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Telegraf提供的采集内容非常丰富，将相应配置项取消注释并重启Telegraf即可生效。其它更多配置项请参考Telegraf官方文档：<a href="https://docs.influxdata.com/telegraf">https://docs.influxdata.com/telegraf</a></p><h4 id="启动Telegraf"><a href="#启动Telegraf" class="headerlink" title="启动Telegraf"></a>启动Telegraf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start telegraf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop telegraf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart telegraf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status telegraf</span><br></pre></td></tr></table></figure><hr><h3 id="部署Grafana"><a href="#部署Grafana" class="headerlink" title="部署Grafana"></a>部署Grafana</h3><p>Grafana同样采用官方docker镜像进行快速部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name=grafana grafana/grafana</span><br></pre></td></tr></table></figure><p>以上命令docker会拉取最新版grafana镜像，运行名为grafana的容器，并映射宿主机3000端口。</p><p>初次启动，grafana会创建数据库，时间稍长，稍后即可访问<code>http://localhost:3000</code>打开grafana登录页面。<br>输入默认用户名密码登录（admin）。</p><p>你可以自行创建仪表盘,当然也可以引用Grafana官网已经创建好的模板,毕竟你走过的路可能别人早就走过好几遍了.</p><h3 id="Grafana绘图示例"><a href="#Grafana绘图示例" class="headerlink" title="Grafana绘图示例"></a>Grafana绘图示例</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/70.jpg" alt="img1"></p><p>按照主页向导完成初次配置。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/71.jpg" alt="img2"></p><h4 id="1-添加数据源"><a href="#1-添加数据源" class="headerlink" title="1 添加数据源"></a>1 添加数据源</h4><p>点击添加数据源，按照下图配置选择influxdb添加一个influxdb数据源。</p><p>url需配置成正确的宿主机ip和端口（防火墙需放行8086），若不想暴露数据库端口，可换成influxdb容器的ip地址（需自行进入容器查看，容器重启后可能会发生变化）避免数据库暴露至公网。</p><p>InfluxDB Details需填写数据名（默认telegraf）、用户名和密码（默认均为root）。</p><p>填写完成后，点击<code>Save&amp;Test</code>按钮，若访问正常，会出现<code>Data source is working</code>提示，否则请检查配置内容以及网络（防火墙）。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/72.jpg" alt="img3"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/79.jpg" alt="img4"></p><hr><h4 id="添加仪表板"><a href="#添加仪表板" class="headerlink" title="添加仪表板"></a>添加仪表板</h4><p>返回主页，点击添加仪表板按钮添加新仪表板，点击<code>Graph</code>创建一个Graph Panel。<br><img src="https://gitee.com/xoxoyun/img/raw/master/image/80.jpg" alt="img5"></p><p>点击标题展开菜单，选择<code>Edit</code>进入面板编辑。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/75.jpg" alt="img6"></p><p>选择<code>Metrics</code>选项卡配置面板数据。</p><p>如图示配置可显示一条CPU-total的数据曲线。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/76.jpg" alt="img7"></p><p>还可添加多条查询，同时在一个panel显示多条曲线。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/77.jpg" alt="img8"></p><p>配置完成后点击上方保存按钮保存仪表板。</p><p>Grafana详细的使用方法请参考官方文档：<a href="http://docs.grafana.org/%E6%88%96%E5%85%B6%E5%AE%83%E6%95%99%E7%A8%8B%E3%80%82">http://docs.grafana.org/或其它教程。</a></p><h3 id="引用Grafana官网模板"><a href="#引用Grafana官网模板" class="headerlink" title="引用Grafana官网模板"></a>引用Grafana官网模板</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201117101720227.png" alt="image-20201117101720227"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201117102348557.png" alt="image-20201117102348557"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201117102511029.png" alt="image-20201117102511029"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/cascascascascas.png" alt="cascascascascas"></p><p>就写到这里.欢迎大佬补充.</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telegraf+InfluxDB+Grafana+Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S中Harbor使用Nginx反向代理无法获取image</title>
      <link href="/posts/25030/"/>
      <url>/posts/25030/</url>
      
        <content type="html"><![CDATA[<h1 id="K8S中Harbor使用Nginx反向代理无法获取image"><a href="#K8S中Harbor使用Nginx反向代理无法获取image" class="headerlink" title="K8S中Harbor使用Nginx反向代理无法获取image"></a>K8S中Harbor使用Nginx反向代理无法获取image</h1><p><strong>问题：Kubernetes创建Pod失败，无法获取image</strong></p><p>Failed create pod sandbox: rpc error: code = Unknown desc = failed pulling image “harbor.od.com/public/pause:latest”: Error response from daemon: Get <a href="http://harbor.od.com/v2/public/pause/manifests/latest">http://harbor.od.com/v2/public/pause/manifests/latest</a>: Get <a href="http://harbor.od.com:180/service/token?scope=repository:public/pause:pull&amp;service=harbor-registry">http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpause%3Apull&amp;service=harbor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1463803-20200528143416223-854846338.png" alt="img"></p><p><strong>环境：</strong><br>harbor.od.com二进制包安装，使用docker-compose启动，<br>harbor.yaml配置port：180<br>然后通过部署nginx，反向到后端harbor上</p><p><strong>故障排查：</strong></p><p>1.使用docker pull 仓库镜像也无法获取</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1463803-20200528144244888-457757939.png" alt="img"></p><p>Error response from daemon: Get <a href="http://harbor.od.com/v2/public/pause/manifests/latest">http://harbor.od.com/v2/public/pause/manifests/latest</a>: Get <a href="http://harbor.od.com:180/service/token?scope=repository:public/paue:pull&amp;service=harbor-registry">http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpaue%3Apull&amp;service=harbor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>2.使用docker loginx登录Harbor</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1463803-20200528144653673-1303543697.png" alt="img"></p><p>Error response from daemon: Get <a href="https://harbor,od,com/v2/">https://harbor,od,com/v2/</a>: dial tcp: lookup harbor,od,com: no such host</p><p>3.修改成使用IP的方式登录Harbor</p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1463803-20200528144937392-1751809771.png" alt="img"></p><p>Error response from daemon: Get <a href="http://harbor.od.com/v2/">http://harbor.od.com/v2/</a>: Get <a href="http://harbor.od.com:180/service/token?account=admin&amp;client_id=docker&amp;offline_token=true&amp;service=habor-registry">http://harbor.od.com:180/service/token?account=admin&amp;client_id=docker&amp;offline_token=true&amp;service=habor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p><strong>分析问题：</strong></p><p>docker使用Http请求获取镜像，harbor是通过nginx的80端口访问，但是通过Log上看到的是使用Get方式，另外还要带有域名加180端口方式验证，应该是配置问题引起</p><p>#<a href="https://www.cnblogs.com/liucx/">https://www.cnblogs.com/liucx/</a></p><p><strong>解决问题：</strong><br>修改harbor.yml配置文件，取消external_url注释，设置为：</p><p>external_url: <a href="http://harbor.od.com/">http://harbor.od.com:80</a><br>然后，docker-compose down停止所有服务，删除当前配置目录：rm -rf ./common/config下配置清单，重新执行install.sh生成配置，即可解决</p><p>配置大概解释：如果使用外部代理就要启动该项<br># Uncomment external_url if you want to enable external proxy<br># And when it enabled the hostname will no longer used</p>]]></content>
      
      
      <categories>
          
          <category> 报错记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netdata安装教程</title>
      <link href="/posts/4238/"/>
      <url>/posts/4238/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Netdata是一款Linux性能实时监测工具，每个服务器每秒收集数千个度量标准，只有1%的CPU利用率，一个内核，几MB内存，没有磁盘I/O。即使运行在低端硬件上，也可以在令人惊叹的实时交互式web仪表板上查看所有内容。监控数据极多，比如iptables Linux firewall、fping、Processes、NFS、Network QoS、Applications、Apache web server、Nginx、Tomcat、Mysql、postgres、redis、mongodb、elasticsearch、SNMP devices等等。很强大，特别是界面非常酷炫，有兴趣的可以试试。</p><p>官网地址：[<a href="https://my-netdata.io/][1]">https://my-netdata.io/][1]</a><br>Github地址：[<a href="https://github.com/firehol/netdata][2]">https://github.com/firehol/netdata][2]</a><br>演示地址：[<a href="https://my-netdata.io/#demosites][3]%EF%BC%88%E6%9C%898%E4%B8%AA%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%9A%8F%E4%BE%BF%E7%82%B9%E4%B8%80%E4%B8%AA%E8%BF%9B%E5%8E%BB%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%EF%BC%89">https://my-netdata.io/#demosites][3]（有8个地址，随便点一个进去就可以了）</a></p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/2535861129.png" alt="netdata1.png"></p><p><img src="http://www.kococ.cn/usr/uploads/2020/01/2945352374.png" alt="请输入图片描述"></p><p><img src="http://www.kococ.cn/usr/uploads/2020/01/3173847027.png" alt="Netdata(3).png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>支持Centos、Debian、Ubuntu等所有的Linux发行版，运行以下命令：#安装基本的netdatabash &lt;(curl -Ss https://my-netdata.io/kickstart.sh)#or#安装netdata及所有插件的软件包bash &lt;(curl -Ss https://my-netdata.io/kickstart.sh) all</code></pre><p><strong>安装完成后访问[<a href="http://ip:19999/][7]%E5%8D%B3%E5%8F%AF%EF%BC%81">http://ip:19999/][7]即可！</a></strong><br><strong>提示</strong>：如果要在64bit缺少软件包管理器的Linux上安装（例如CoreOS、CirrOS、busybox、systems），就运行下面这个命令，netdata将以二进制编译形式进行安装：</p><pre><code>bash &lt;(curl -Ss https://my-netdata.io/kickstart-static64.sh)</code></pre><p>如果运行不了，则需要分开运行：</p><pre><code>wget -O /tmp/kickstart-static64.sh https://my-netdata.io/kickstart-static64.shsh /tmp/kickstart-static64.sh</code></pre><p>安装详情参考：<a href="https://github.com/firehol/netdata/wiki/Installation">https://github.com/firehol/netdata/wiki/Installation</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netdata性能实时监测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CKA-Kubernetes记录</title>
      <link href="/posts/21975/"/>
      <url>/posts/21975/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker概念与安装"><a href="#Docker概念与安装" class="headerlink" title="Docker概念与安装"></a>Docker概念与安装</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>• 使用最广泛的开源容器引擎</p><p>• 一种操作系统级的虚拟化技术</p><p>• 依赖于Linux内核特性：Namespace（资源隔离）和Cgroups（资源限制）</p><p>• 一个简单的应用程序打包工具</p><h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104151540611.png" alt="image-20201104151540611"></p><h2 id="Docker的版本与支持平台"><a href="#Docker的版本与支持平台" class="headerlink" title="Docker的版本与支持平台"></a>Docker的版本与支持平台</h2><p><strong>Docker版本：</strong></p><p>• 社区版（Community Edition，CE） </p><p>• 企业版（Enterprise Edition，EE）</p><p><strong>支持平台：</strong></p><p>• Linux（CentOS,Debian,Fedora,Oracle Linux,RHEL,SUSE和Ubuntu） </p><p>• Mac</p><p>• Windows</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p># <strong>安装前建议关闭selinux和firewalld</strong></p><p># 安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p># 添加Docker软件包阿里源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p># 安装Docker CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p># 启动Docker服务并设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>#优化docker配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;graph&quot;: &quot;/data/docker&quot;,</span><br><span class="line">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;registry.access.redhat.com&quot;,&quot;quay.io&quot;],</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://q2gr04ke.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">    &quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重启docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>docker-daemon.json配置文件详解</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">“api-cors-header”:&quot;&quot;, ——————在引擎API中设置CORS标头</span><br><span class="line">“authorization-plugins”:[], ——————要加载的授权插件</span><br><span class="line">“bridge”:&quot;&quot;, ————将容器附加到网桥</span><br><span class="line">“cgroup-parent”:&quot;&quot;, ——————为所有容器设置父cgroup</span><br><span class="line">“cluster-store”:&quot;&quot;, ——————分布式存储后端的URL</span><br><span class="line">“cluster-store-opts”:&#123;&#125;, ————————设置集群存储选项（默认map []）</span><br><span class="line">“cluster-advertise”:&quot;&quot;, ————————要通告的地址或接口名称</span><br><span class="line">“debug”: true, ————————启用调试模式，启用后，可以看到很多的启动信息。默认false</span><br><span class="line">“default-gateway”:&quot;&quot;, ——————容器默认网关IPv4地址</span><br><span class="line">“default-gateway-v6”:&quot;&quot;, ——————容器默认网关IPv6地址</span><br><span class="line">“default-runtime”:“runc”, ————————容器的默认OCI运行时（默认为“ runc”）</span><br><span class="line">“default-ulimits”:&#123;&#125;, ——————容器的默认ulimit（默认[]）</span><br><span class="line">“dns”: [“192.168.1.1”], ——————设定容器DNS的地址，在容器的 /etc/resolv.conf文件中可查看。</span><br><span class="line">“dns-opts”: [], ————————容器 /etc/resolv.conf 文件，其他设置</span><br><span class="line">“dns-search”: [], ————————设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的 主机时，DNS不仅搜索host，还会搜</span><br><span class="line">索host.example.com 。 注意：如果不设置， Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。</span><br><span class="line">“exec-opts”: [], ————————运行时执行选项</span><br><span class="line">“exec-root”:&quot;&quot;, ————————执行状态文件的根目录（默认为’/var/run/docker‘）</span><br><span class="line">“fixed-cidr”:&quot;&quot;, ————————固定IP的IPv4子网</span><br><span class="line">“fixed-cidr-v6”:&quot;&quot;, ————————固定IP的IPv6子网</span><br><span class="line">“data-root”:&quot;/var/lib/docker&quot;, ————-Docker运行时使用的根路径，默认/var/lib/docker</span><br><span class="line">“group”: “”, ——————UNIX套接字的组（默认为“docker”）</span><br><span class="line">“hosts”: [], ——————设置容器hosts</span><br><span class="line">“icc”: false, ——————启用容器间通信（默认为true）</span><br><span class="line">“ip”:“0.0.0.0”, ————————绑定容器端口时的默认IP（默认0.0.0.0）</span><br><span class="line">“iptables”: false, ———————启用iptables规则添加（默认为true）</span><br><span class="line">“ipv6”: false, ——————启用IPv6网络</span><br><span class="line">“ip-forward”: false, ————————默认true, 启用 net.ipv4.ip_forward ,进入容器后使用 sysctl -a | grepnet.ipv4.ip_forward 查看</span><br><span class="line">“ip-masq”:false, ——————启用IP伪装（默认为true）</span><br><span class="line">“labels”:[“nodeName=node-121”], ————————docker主机的标签，很实用的功能,例如定义：–label nodeName=host-121</span><br><span class="line">“live-restore”: true, ——————在容器仍在运行时启用docker的实时还原</span><br><span class="line">“log-driver”:&quot;&quot;, ——————容器日志的默认驱动程序（默认为“ json-file”）</span><br><span class="line">“log-level”:&quot;&quot;, ——————设置日志记录级别（“调试”，“信息”，“警告”，“错误”，“致命”）（默认为“信息”）</span><br><span class="line">“max-concurrent-downloads”:3, ——————设置每个请求的最大并发下载量（默认为3）</span><br><span class="line">“max-concurrent-uploads”:5, ——————设置每次推送的最大同时上传数（默认为5）</span><br><span class="line">“mtu”: 0, ——————设置容器网络MTU</span><br><span class="line">“oom-score-adjust”:-500, ——————设置守护程序的oom_score_adj（默认值为-500）</span><br><span class="line">“pidfile”: “”, ——————Docker守护进程的PID文件</span><br><span class="line">“raw-logs”: false, ——————全时间戳机制</span><br><span class="line">“selinux-enabled”: false, ——————默认 false，启用selinux支持</span><br><span class="line">“storage-driver”:&quot;&quot;, ——————要使用的存储驱动程序</span><br><span class="line">“swarm-default-advertise-addr”:&quot;&quot;, ——————设置默认地址或群集广告地址的接口</span><br><span class="line">“tls”: true, ————————默认 false, 启动TLS认证开关</span><br><span class="line">“tlscacert”: “”, ——————默认 ~/.docker/ca.pem，通过CA认证过的的certificate文件路径</span><br><span class="line">“tlscert”: “”, ————————默认 ~/.docker/cert.pem ，TLS的certificate文件路径</span><br><span class="line">“tlskey”: “”, ————————默认~/.docker/key.pem，TLS的key文件路径</span><br><span class="line">“tlsverify”: true, ————————默认false，使用TLS并做后台进程与客户端通讯的验证</span><br><span class="line">“userland-proxy”:false, ——————使用userland代理进行环回流量（默认为true）</span><br><span class="line">“userns-remap”:&quot;&quot;, ————————用户名称空间的用户/组设置</span><br><span class="line">“bip”:“192.168.88.0/22”, ——————————指定网桥IP</span><br><span class="line">“registry-mirrors”: [“https://192.498.89.232:89”], ————————设置镜像加速</span><br><span class="line">“insecure-registries”: [“120.123.122.123:12312”], ———————设置私有仓库地址可以设为http</span><br><span class="line">“storage-opts”: [</span><br><span class="line">“overlay2.override_kernel_check=true”,</span><br><span class="line">“overlay2.size=15G”</span><br><span class="line">], ————————存储驱动程序选项</span><br><span class="line">“log-opts”: &#123;</span><br><span class="line">“max-file”: “3”,</span><br><span class="line">“max-size”: “10m”,</span><br><span class="line">&#125;, ————————容器默认日志驱动程序选项</span><br><span class="line">“iptables”: false ————————启用iptables规则添加（默认为true）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>官方文档：<a href="https://docs.docker.com/">https://docs.docker.com</a></p><p>阿里云源：<a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><h2 id="Docker常用命令及容器管理"><a href="#Docker常用命令及容器管理" class="headerlink" title="Docker常用命令及容器管理"></a>Docker常用命令及容器管理</h2><p>• <strong>docker常用命令</strong></p><p>• <strong>创建容器常用选项</strong></p><p>• <strong>常用管理命令</strong></p><p>• <strong>镜像常用管理命令</strong></p><p>• <strong>容器数据持久化</strong></p><p>• <strong>容器网络</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152419460.png" alt="image-20201104152419460"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152527395.png" alt="image-20201104152527395"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152537039.png" alt="image-20201104152537039"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152548062.png" alt="image-20201104152548062"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152558673.png" alt="image-20201104152558673"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152625488.png" alt="image-20201104152625488"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152638674.png" alt="image-20201104152638674"></p><h2 id="Dockerfile构建镜像"><a href="#Dockerfile构建镜像" class="headerlink" title="Dockerfile构建镜像"></a>Dockerfile构建镜像</h2><p>• <strong>Dockerfile概述</strong></p><p>• <strong>Dockerfile常用指令</strong></p><p>• <strong>构建镜像命令</strong></p><p>• <strong>构建Nginx镜像</strong></p><p>• <strong>构建Tomcat镜像</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152711147.png" alt="image-20201104152711147"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152721695.png" alt="image-20201104152721695"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152732781.png" alt="image-20201104152732781"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152750392.png" alt="image-20201104152750392"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104152759381.png" alt="image-20201104152759381"></p><h1 id="Kubernetes核心概念"><a href="#Kubernetes核心概念" class="headerlink" title="Kubernetes核心概念"></a>Kubernetes核心概念</h1><p><strong>CKA考纲</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153211833.png" alt="image-20201104153211833"></p><h2 id="Kubernetes淡入-为什么用kubernetes"><a href="#Kubernetes淡入-为什么用kubernetes" class="headerlink" title="Kubernetes淡入(为什么用kubernetes?)"></a>Kubernetes淡入(为什么用kubernetes?)</h2><p>企业需求：为提高业务并发和高可用，会使用多台服务器</p><p>• 多容器跨主机提供服务</p><p>• 多容器分布节点部署</p><p>• 多容器怎么升级</p><p>• 高效管理这些容器</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153428223.png" alt="image-20201104153428223"></p><p><strong>容器编排系统</strong></p><ul><li>Kubernetes</li><li>Swarm</li><li>Mesos Marathon</li></ul><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153532496.png" alt="image-20201104153532496"></p><h2 id="Kubernetes是什么"><a href="#Kubernetes是什么" class="headerlink" title="Kubernetes是什么?"></a>Kubernetes是什么?</h2><p>• Kubernetes是Google在2014年开源的一个容器集群管理系统，Kubernetes简称K8S。 </p><p>• Kubernetes用于容器化应用程序的部署，扩展和管理，目标是让部署容器化应用简单高效。</p><p>官方网站：<a href="http://www.kubernetes.io/">http://www.kubernetes.io</a></p><h2 id="Kubernetes集群架构与组件"><a href="#Kubernetes集群架构与组件" class="headerlink" title="Kubernetes集群架构与组件"></a>Kubernetes集群架构与组件</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153700874.png" alt="image-20201104153700874"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153719743.png" alt="image-20201104153719743"></p><p><strong>Master组件</strong></p><p> <strong>kube-apiserver</strong></p><p>Kubernetes API，集群的统一入口，各组件协调者，以RESTful </p><p>API提供接口服务，所有对象资源的增删改查和监听操作都交给</p><p>APIServer处理后再提交给Etcd存储。</p><p> <strong>kube-controller-manager</strong></p><p>处理集群中常规后台任务，一个资源对应一个控制器，而</p><p>ControllerManager就是负责管理这些控制器的。</p><p> <strong>kube-scheduler</strong></p><p>根据调度算法为新创建的Pod选择一个Node节点，可以任意部署,</p><p>可以部署在同一个节点上,也可以部署在不同的节点上。</p><p> <strong>etcd</strong></p><p>分布式键值存储系统。用于保存集群状态数据，比如Pod、Service</p><p>等对象信息。</p><p><strong>Node组件</strong></p><p> <strong>kubelet</strong></p><p>kubelet是Master在Node节点上的Agent，管理本机运行容器的生命周</p><p>期，比如创建容器、Pod挂载数据卷、下载secret、获取容器和节点状态</p><p>等工作。kubelet将每个Pod转换成一组容器。</p><p> <strong>kube-proxy</strong></p><p>在Node节点上实现Pod网络代理，维护网络规则和四层负载均衡工作。</p><p> <strong>docker或rocket</strong></p><p>容器引擎，运行容器</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>官网文档：<a href="https://kubernetes.io/zh/docs/home/">https://kubernetes.io/zh/docs/home/</a></p><p>重点熟悉：概念和任务</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104153834033.png" alt="image-20201104153834033"></p><h1 id="kubernetes集群搭建V1-19"><a href="#kubernetes集群搭建V1-19" class="headerlink" title="kubernetes集群搭建V1.19"></a>kubernetes集群搭建V1.19</h1><ul><li><strong>kubeadm</strong></li></ul><p>Kubeadm是一个工具，提供kubeadm init和kubeadm join，用于快速部署Kubernetes集群。</p><p>部署地址：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p><ul><li><strong>二进制</strong></li></ul><p>推荐，从官方下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群。</p><p>下载地址：<a href="https://github.com/kubernetes/kubernetes/releases">https://github.com/kubernetes/kubernetes/releases</a></p><h2 id="服务器硬件配置推荐"><a href="#服务器硬件配置推荐" class="headerlink" title="服务器硬件配置推荐"></a>服务器硬件配置推荐</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104154515640.png" alt="image-20201104154515640"></p><h2 id="kubernetes-CNI网络模型"><a href="#kubernetes-CNI网络模型" class="headerlink" title="kubernetes CNI网络模型"></a>kubernetes CNI网络模型</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104154638126.png" alt="image-20201104154638126"></p><p><strong>K8s是一个扁平化网络。</strong></p><p>即所有部署的网络组件都必须满足如下要求：</p><p>• 一个Pod一个IP</p><p>• 所有的 Pod 可以与任何其他 Pod 直接通信</p><p>• 所有节点可以与所有 Pod 直接通信</p><p>• Pod 内部获取到的 IP 地址与其他 Pod 或节点与其通信时的 IP 地址是同一个</p><p>主流网络组件有：Flannel、Calico等</p><p>Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。</p><p>Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter </p><p>通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。</p><p>此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。</p><p><strong>Calico部署：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure><p>下载完后还需要修改里面定义Pod网络l（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定PodIP段的一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><p>Flannel是CoreOS维护的一个网络组件，Flannel为每个Pod提供全局唯一的IP，Flannel使用ETCD来存储Pod子网</p><p>与Node IP之间的关系。flanneld守护进程在每台主机上运行，并负责维护ETCD信息和路由数据包。</p><p><strong>Flannel部署：</strong></p><p>wget <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p><p>sed -i -r “s#quay.io/coreos/flannel:.*-amd64#lizhenliang/flannel:v0.11.0-amd64#g” kube-flannel.y</p><hr><h2 id="kuernetes部署"><a href="#kuernetes部署" class="headerlink" title="kuernetes部署"></a>kuernetes部署</h2><p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p><p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure><h2 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1. 安装要求"></a>1. 安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止swap分区</li></ul><h2 id="2-准备环境"><a href="#2-准备环境" class="headerlink" title="2. 准备环境"></a>2. 准备环境</h2><p> <img src="https://blog-1252881505.cos.ap-beijing.myqcloud.com/k8s/single-master.jpg" alt="kubernetesæ¶æå¾"> </p><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master</td><td>192.168.31.61</td></tr><tr><td>k8s-node1</td><td>192.168.31.62</td></tr><tr><td>k8s-node2</td><td>192.168.31.63</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙：</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></span><br><span class="line"></span><br><span class="line">关闭selinux：</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="comment"># 永久</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0  <span class="comment"># 临时</span></span></span><br><span class="line"></span><br><span class="line">关闭swap：</span><br><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a  <span class="comment"># 临时</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/fstab  <span class="comment"># 永久</span></span></span><br><span class="line"></span><br><span class="line">设置主机名：</span><br><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname &lt;hostname&gt;</span></span><br><span class="line"></span><br><span class="line">在master添加hosts：</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span></span><br><span class="line">192.168.31.61 k8s-master</span><br><span class="line">192.168.31.62 k8s-node1</span><br><span class="line">192.168.31.63 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">将桥接的IPv4流量传递到iptables的链：</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system  <span class="comment"># 生效</span></span></span><br><span class="line"></span><br><span class="line">时间同步：</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install ntpdate -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ntpdate time.windows.com</span></span><br></pre></td></tr></table></figure><h2 id="3-安装Docker-kubeadm-kubelet【所有节点】"><a href="#3-安装Docker-kubeadm-kubelet【所有节点】" class="headerlink" title="3. 安装Docker/kubeadm/kubelet【所有节点】"></a>3. 安装Docker/kubeadm/kubelet【所有节点】</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><h3 id="3-1-安装Docker"><a href="#3-1-安装Docker" class="headerlink" title="3.1 安装Docker"></a>3.1 安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install docker-ce</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span></span><br></pre></td></tr></table></figure><p>配置镜像下载加速器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://q2gr04ke.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: </span><br><span class="line">  [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br></pre></td></tr></table></figure><h3 id="3-2-添加阿里云YUM软件源"><a href="#3-2-添加阿里云YUM软件源" class="headerlink" title="3.2 添加阿里云YUM软件源"></a>3.2 添加阿里云YUM软件源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="3-3-安装kubeadm-kubelet和kubectl"><a href="#3-3-安装kubeadm-kubelet和kubectl" class="headerlink" title="3.3 安装kubeadm,kubelet和kubectl"></a>3.3 安装kubeadm,kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y kubelet-1.19.0 kubeadm-1.19.0 kubectl-1.19.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> kubelet</span></span><br></pre></td></tr></table></figure><h2 id="4-部署Kubernetes-Master"><a href="#4-部署Kubernetes-Master" class="headerlink" title="4. 部署Kubernetes Master"></a>4. 部署Kubernetes Master</h2><p><a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a> </p><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node</a> </p><p>在192.168.31.61（Master）执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address&#x3D;192.168.1.101 \</span><br><span class="line">  --image-repository registry.aliyuncs.com&#x2F;google_containers \</span><br><span class="line">  --kubernetes-version v1.19.0 \</span><br><span class="line">  --service-cidr&#x3D;10.96.0.0&#x2F;12 \</span><br><span class="line">  --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 \</span><br><span class="line">  --ignore-preflight-errors&#x3D;all</span><br></pre></td></tr></table></figure><ul><li>–apiserver-advertise-address 集群通告地址</li><li>–image-repository  由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</li><li>–kubernetes-version K8s版本，与上面安装的一致</li><li>–service-cidr 集群内部虚拟网络，Pod统一访问入口</li><li>–pod-network-cidr Pod网络，，与下面部署的CNI网络组件yaml中保持一致</li></ul><p>或者使用配置文件引导：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vi kubeadm.conf</span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.18.0</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers </span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0&#x2F;16 </span><br><span class="line">  serviceSubnet: 10.96.0.0&#x2F;12 </span><br><span class="line"></span><br><span class="line">$ kubeadm init --config kubeadm.conf --ignore-preflight-errors&#x3D;all  </span><br></pre></td></tr></table></figure><p>拷贝kubectl使用的连接k8s认证文件到默认路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master   Ready    master   2m   v1.18.0</span><br></pre></td></tr></table></figure><h2 id="5-加入Kubernetes-Node"><a href="#5-加入Kubernetes-Node" class="headerlink" title="5. 加入Kubernetes Node"></a>5. 加入Kubernetes Node</h2><p>在192.168.31.62/63（Node）执行。</p><p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm join 192.168.31.61:6443 --token esce21.q6hetwm8si29qxwn \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br></pre></td></tr></table></figure><p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm token create</span><br><span class="line">$ kubeadm token list</span><br><span class="line">$ openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null | openssl dgst -sha256 -hex | sed &#39;s&#x2F;^.* &#x2F;&#x2F;&#39;</span><br><span class="line">63bca849e0e01691ae14eab449570284f0c3ddeea590f8da988c07fe2729e924</span><br><span class="line"></span><br><span class="line">$ kubeadm join 192.168.31.61:6443 --token nuja6n.o3jrhsffiqs9swnu --discovery-token-ca-cert-hash sha256:63bca849e0e01691ae14eab449570284f0c3ddeea590f8da988c07fe2729e924</span><br></pre></td></tr></table></figure><p>或者直接命令快捷生成：kubeadm token create –print-join-command</p><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/</a></p><h2 id="6-部署容器网络（CNI）"><a href="#6-部署容器网络（CNI）" class="headerlink" title="6. 部署容器网络（CNI）"></a>6. 部署容器网络（CNI）</h2><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network</a> </p><p>注意：只需要部署下面其中一个，推荐Calico。</p><p>Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。</p><p>Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。</p><p>此外，Calico  项目还实现了 Kubernetes 网络策略，提供ACL功能。</p><p> <a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;manifests&#x2F;calico.yaml</span><br></pre></td></tr></table></figure><p>下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样</p><p>修改完后应用清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f calico.yaml</span><br><span class="line">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="7-测试kubernetes集群"><a href="#7-测试kubernetes集群" class="headerlink" title="7. 测试kubernetes集群"></a>7. 测试kubernetes集群</h2><ul><li>验证Pod工作</li><li>验证Pod网络通信</li><li>验证DNS解析</li></ul><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image&#x3D;nginx</span><br><span class="line">$ kubectl expose deployment nginx --port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：NodeIP:Port </p><p>验证集群CS健康</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kuberctl get cs</span><br></pre></td></tr></table></figure><p>如果结果不为健康</p><p>请修改主节点相关配置文件后重启Kubelet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 manifests]# cat /etc/kubernetes/manifests/kube-controller-manager.yaml | grep &quot;port&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">    - --port=0</span></span><br><span class="line">[root@master1 manifests]# cat /etc/kubernetes/manifests/kube-scheduler.yaml | grep &quot;port&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">    - --port=0</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure><h2 id="8-部署-Dashboard"><a href="#8-部署-Dashboard" class="headerlink" title="8. 部署 Dashboard"></a>8. 部署 Dashboard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;dashboard&#x2F;v2.0.3&#x2F;aio&#x2F;deploy&#x2F;recommended.yaml</span><br></pre></td></tr></table></figure><p>默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ vi recommended.yaml</span><br><span class="line">...</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  type: NodePort</span><br><span class="line">...</span><br><span class="line">$ kubectl apply -f recommended.yaml</span><br><span class="line">$ kubectl get pods -n kubernetes-dashboard</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-6b4884c9d5-gl8nr   1&#x2F;1     Running   0          13m</span><br><span class="line">kubernetes-dashboard-7f99b75bf4-89cds        1&#x2F;1     Running   0          13m</span><br></pre></td></tr></table></figure><p>访问地址：NodeIP:30001</p><p>创建service account并绑定默认cluster-admin管理员集群角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">$ kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line"># 用户授权</span><br><span class="line">$ kubectl create clusterrolebinding dashboard-admin --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kube-system:dashboard-admin</span><br><span class="line"># 获取用户Token</span><br><span class="line">$ kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &#39;&#x2F;dashboard-admin&#x2F;&#123;print $1&#125;&#39;)</span><br></pre></td></tr></table></figure><p>使用输出的token登录Dashboard。</p><h2 id="Kubernetes命令行管理工具"><a href="#Kubernetes命令行管理工具" class="headerlink" title="Kubernetes命令行管理工具"></a>Kubernetes命令行管理工具</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104154952872.png" alt="image-20201104154952872"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104155014167.png" alt="image-20201104155014167"></p><p>官方文档参考地址：</p><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/">https://kubernetes.io/zh/docs/reference/kubectl/overview/</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104155031847.png" alt="image-20201104155031847"></p><h3 id="kubernetes命令行补全"><a href="#kubernetes命令行补全" class="headerlink" title="kubernetes命令行补全"></a>kubernetes命令行补全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="快速部署一个网站Nginx"><a href="#快速部署一个网站Nginx" class="headerlink" title="快速部署一个网站Nginx"></a>快速部署一个网站Nginx</h2><p><strong>使用Deployment控制器部署镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment web --image=lizhenliang/java-demo </span><br><span class="line"></span><br><span class="line">kubectl get deploy,pods</span><br></pre></td></tr></table></figure><p><strong>使用Service将Pod暴露出去：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment web --port=80 --type=NodePort --target-port=8080 --name=web</span><br><span class="line"></span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p><strong>访问应用：</strong></p><p>NodeIP:Port # 端口随机生成，通过get svc获取</p><h2 id="资源概念"><a href="#资源概念" class="headerlink" title="资源概念"></a>资源概念</h2><ul><li><strong>Pod</strong></li></ul><p>• 最小部署单元</p><p>• 一组容器的集合</p><p>• 一个Pod中的容器共享网络命名空间</p><p>• Pod是短暂的 </p><ul><li><strong>Controllers</strong></li></ul><p>• Deployment ： 无状态应用部署</p><p>• StatefulSet ： 有状态应用部署</p><p>• DaemonSet ： 确保所有Node运行同一个Pod</p><p>• Job ： 一次性任务</p><p>• Cronjob ： 定时任务</p><p>更高级层次对象，部署和管理Pod</p><ul><li><strong>Service</strong></li></ul><p>• 防止Pod失联</p><p>• 定义一组Pod的访问策略</p><ul><li><p>Label ： 标签，附加到某个资源上，用于关联对象、查询和筛选</p></li><li><p>Namespaces ： 命名空间，将对象逻辑上隔离</p></li></ul><h1 id="Kubernetes监控与日志"><a href="#Kubernetes监控与日志" class="headerlink" title="Kubernetes监控与日志"></a>Kubernetes监控与日志</h1><h2 id="查看集群资源状态"><a href="#查看集群资源状态" class="headerlink" title="查看集群资源状态"></a>查看集群资源状态</h2><p><strong>查看master组件状态：</strong></p><p>kubectl get cs</p><p><strong>查看node状态：</strong></p><p>kubectl get node </p><p><strong>查看Apiserver代理的URL：</strong></p><p>kubectl cluster-info</p><p><strong>查看集群详细信息：</strong></p><p>kubectl cluster-info dump</p><p><strong>查看资源信息：</strong></p><p>kubectl describe &lt;资源&gt; &lt;名称&gt;</p><p><strong>查看资源信息：</strong></p><p>kubectl get pod&lt;Pod名称&gt; –watch</p><h2 id="监控集群资源利用率"><a href="#监控集群资源利用率" class="headerlink" title="监控集群资源利用率"></a>监控集群资源利用率</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104160318259.png" alt="Metrics-server + cAdvisor 监控集群资源消耗"></p><p>Metrics Server是一个集群范围的资源使用情况的数据聚合器。作为一</p><p>个应用部署在集群中。Metric server从每个节点上Kubelet API收集指</p><p>标，通过Kubernetes聚合器注册在Master APIServer中。</p><h3 id="Metrics-Server部署"><a href="#Metrics-Server部署" class="headerlink" title="Metrics Server部署"></a>Metrics Server部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget https://github.com/kubernetes-sigs/metricsserver/releases/download/v0.3.7/components.yaml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi components.yaml</span></span><br><span class="line">...</span><br><span class="line">containers:</span><br><span class="line">- name: metrics-server</span><br><span class="line">image: lizhenliang/metrics-server:v0.3.7 </span><br><span class="line">imagePullPolicy: IfNotPresent</span><br><span class="line">args:</span><br><span class="line">- --cert-dir=/tmp</span><br><span class="line">- --secure-port=4443</span><br><span class="line">- --kubelet-insecure-tls   #不验证kubelet提供的https证书</span><br><span class="line">- --kubelet-preferred-address-types=InternalIP  #使用节点IP连接kubelet</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>项目地址：<a href="https://github.com/kubernetes-sigs/metrics-server">https://github.com/kubernetes-sigs/metrics-server</a></p><p><strong>查看Node资源消耗</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl top node &#123;node name&#125;</span><br></pre></td></tr></table></figure><p><strong>查看Pod资源消耗</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl top pod &#123;pod name&#125; -n &#123;namespace&#125;</span><br></pre></td></tr></table></figure><h2 id="管理Kubernetes组件日志"><a href="#管理Kubernetes组件日志" class="headerlink" title="管理Kubernetes组件日志"></a>管理Kubernetes组件日志</h2><p>• K8S系统的组件日志</p><p>• K8S Cluster里面部署的应用程序日志</p><p>- 标准输出</p><p>- 日志文件</p><p>systemd守护进程管理的组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet</span><br></pre></td></tr></table></figure><p>Pod部署的组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs kube-proxy-btz4p -n kube-system</span><br></pre></td></tr></table></figure><p>系统日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><h2 id="管理Kubernetes应用日志"><a href="#管理Kubernetes应用日志" class="headerlink" title="管理Kubernetes应用日志"></a>管理Kubernetes应用日志</h2><p>查看容器标准输出日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs &lt;Pod名称&gt;</span><br><span class="line"></span><br><span class="line">kubectl logs -f &lt;Pod名称&gt;</span><br><span class="line"></span><br><span class="line">kubectl logs -f &lt;Pod名称&gt; -c &lt;容器名称&gt;</span><br></pre></td></tr></table></figure><p>标准输出在宿主机的路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/docker/containers/&lt;container-id&gt;/&lt;container-id&gt;-json.log</span><br></pre></td></tr></table></figure><p><strong>边车容器实现挂载同一数据卷进行持久化日志</strong></p><p>容器中应用日志可以使用emptyDir数据卷将日志文件持久化到宿主机上。</p><p>宿主机的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;&lt;pod-id&gt;&#x2F;volumes&#x2F;kubernetes.io~empty-dir&#x2F;logs&#x2F;access.log</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lizhenliang/nginx-php</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/local/nginx/logs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">/bin/sh</span>, <span class="string">-c</span>, <span class="string">&#x27;tail -f /opt/access.log&#x27;</span>] </span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/opt</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>参考文档： <a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/">https://kubernetes.io/docs/concepts/cluster-administration/logging/</a></p><h1 id="Kubernetes应用生命周期管理"><a href="#Kubernetes应用生命周期管理" class="headerlink" title="Kubernetes应用生命周期管理"></a>Kubernetes应用生命周期管理</h1><h2 id="在Kubernetes中部署应用流程"><a href="#在Kubernetes中部署应用流程" class="headerlink" title="在Kubernetes中部署应用流程"></a>在Kubernetes中部署应用流程</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201104180918129.png" alt="image-20201104180918129"></p><h2 id="使用Deployment部署Java应用"><a href="#使用Deployment部署Java应用" class="headerlink" title="使用Deployment部署Java应用"></a>使用Deployment部署Java应用</h2><ol><li><p>使用Deployment控制器部署镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kuberctl crate deployment web --image=lizhenliang/java-demo</span><br><span class="line">kubectl get deploy,pods</span><br></pre></td></tr></table></figure></li><li><p>使用Service发布Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment web --port=80 --type=NodePort --target-port=8080 --name=web</span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure></li></ol><h1 id="Kubernetes调度"><a href="#Kubernetes调度" class="headerlink" title="Kubernetes调度"></a>Kubernetes调度</h1><h2 id="创建一个Pod的工作流程"><a href="#创建一个Pod的工作流程" class="headerlink" title="创建一个Pod的工作流程"></a>创建一个Pod的工作流程</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106163332968.png" alt="image-20201106163332968"></p><p>Kubernetes基于list-watch(服务注册)机制的控制器架</p><p>构，实现组件间交互的解耦。</p><p>kubectl run nginx –image=nginx<br>1、kubectl将创建pod的请求提交到apiserver<br>2、会将请求的信息写到etcd<br>3、apiserver通知scheduler有创建新的pod，收到创建之后就会根据调度算法选择一个合适的节点<br>4、给这个pod打一个标记，pod=k8s-node1<br>5、apiserver收到scheduler的调度结果写到etcd<br>6、k8s-node1上的kubelet收到事件，从apiserver获取pod的相关信息<br>7、kubelet调用docker api创建pod中所需的容器<br>8、会把这个pod的状态汇报给apsierver<br>9、apiserver把状态写入到etcd</p><h2 id="Pod中影响调度的重要属性"><a href="#Pod中影响调度的重要属性" class="headerlink" title="Pod中影响调度的重要属性"></a>Pod中影响调度的重要属性</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106163500976.png" alt="image-20201106163500976"></p><h2 id="Resources资源限制对Pod调度的影响"><a href="#Resources资源限制对Pod调度的影响" class="headerlink" title="Resources资源限制对Pod调度的影响"></a>Resources资源限制对Pod调度的影响</h2><p>容器资源限制：</p><p>• resources.limits.cpu</p><p>• resources.limits.memory</p><p>容器使用的最小资源需求，作为容器调度时资源分配的依据：</p><p>• resources.requests.cpu</p><p>• resources.requests.memory</p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106163646001.png" alt="image-20201106163646001"></p><p>CPU单位：可以写m也可以写浮点数，例如0.5=500m，1=1000m</p><p>K8s会根据Request的值去查找有足够资源的Node来调度此Pod </p><h2 id="nodeSelector-标签选择器-amp-nodeAffinity-节点亲和性"><a href="#nodeSelector-标签选择器-amp-nodeAffinity-节点亲和性" class="headerlink" title="nodeSelector(标签选择器)&amp;nodeAffinity(节点亲和性)"></a>nodeSelector(标签选择器)&amp;nodeAffinity(节点亲和性)</h2><h3 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h3><p>用于将Pod调度到匹配Label的Node上,如果没有匹配的标签会调度失败.</p><p>作用:</p><ul><li>完全匹配节点标签</li><li>固定Pod到特定节点</li></ul><p><strong>给节点打标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes [node] key=value</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes node1 disk=ssd</span><br></pre></td></tr></table></figure><p><strong>文件编写示例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disk:</span> <span class="string">&quot;ssd&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">iamge:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><h3 id="nodeAffinity"><a href="#nodeAffinity" class="headerlink" title="nodeAffinity"></a>nodeAffinity</h3><p><strong>nodeAffinity：</strong>节点亲和类似于nodeSelector，可以根据节点上</p><p>的标签来约束Pod可以调度到哪些节点。</p><p>相比nodeSelector： </p><p>• 匹配有更多的逻辑组合，不只是字符串的完全相等</p><p>• 调度分为软策略和硬策略，而不是硬性要求</p><p>• 硬（required）：必须满足</p><p>• 软（preferred）：尝试满足，但不保证</p><p>操作符：In、NotIn、Exists、DoesNotExist、Gt、Lt</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106164347928.png" alt="image-20201106164347928"></p><h2 id="Taint污点"><a href="#Taint污点" class="headerlink" title="Taint污点"></a>Taint污点</h2><p><strong>Taints</strong>:避免Pod调度到特定的Node上</p><p>应用场景:</p><p>• 专用节点，例如配备了特殊硬件的节点</p><p>• 基于Taint的驱逐</p><p><strong>设置污点：</strong></p><p>kubectl taint node [node] key=value:[effect] </p><p>其中[effect] 可取值：</p><p>• NoSchedule ：一定不能被调度。</p><p>• PreferNoSchedule：尽量不要调度。</p><p>• NoExecute：不仅不会调度，还会驱逐Node上已有的Pod。</p><p><strong>去掉污点：</strong></p><p>kubectl taint node [node] key:[effect]-</p><p>例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint node dsik=ssd:NoSchedule</span><br></pre></td></tr></table></figure><h2 id="Tolerations-污点容忍"><a href="#Tolerations-污点容忍" class="headerlink" title="Tolerations(污点容忍)"></a>Tolerations(污点容忍)</h2><p><strong>Tolerations：</strong>允许Pod调度到持有Taints的Node上</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106164703285.png" alt="image-20201106164703285"></p><h2 id="nodeName高于一切"><a href="#nodeName高于一切" class="headerlink" title="nodeName高于一切"></a>nodeName高于一切</h2><p><strong>nodeName:</strong> 指定节点名称,用于将Pod调度到指定的Node上,不经过调度器</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106164833281.png" alt="image-20201106164833281"></p><h2 id="DaemonSet控制器"><a href="#DaemonSet控制器" class="headerlink" title="DaemonSet控制器"></a>DaemonSet控制器</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106164924972.png" alt="image-20201106164924972"></p><p>DaemonSet功能：</p><p>• 在每一个Node上运行一个Pod</p><p>• 新加入的Node也同样会自动运行一个Pod</p><p>应用场景：网络插件、监控Agent、日志Agent</p><p><strong>示例</strong>:部署一个日志采集程序</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106165007303.png" alt="image-20201106165007303"></p><h2 id="常见调度失败问题分析"><a href="#常见调度失败问题分析" class="headerlink" title="常见调度失败问题分析"></a>常见调度失败问题分析</h2><p>查看调度结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod &lt;NAME&gt; -o wide</span><br></pre></td></tr></table></figure><p>查看调度失败原因: kubectl describe pod <name></p><ul><li>节点CPU内存性能不足</li><li>有污点,没配置容忍策略</li><li>没有匹配到节点标签</li></ul><h1 id="Kubernetes网络"><a href="#Kubernetes网络" class="headerlink" title="Kubernetes网络"></a>Kubernetes网络</h1><h2 id="Service-存在的意义"><a href="#Service-存在的意义" class="headerlink" title="Service 存在的意义"></a>Service 存在的意义</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106170304578.png" alt="image-20201106170304578"></p><ul><li><p>防止Pod失联(服务发现),自动发现</p></li><li><p>定义一组Pod的访问策略(负载均衡)</p></li></ul><h2 id="Pod与Service的关系"><a href="#Pod与Service的关系" class="headerlink" title="Pod与Service的关系"></a>Pod与Service的关系</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106174709007.png" alt="image-20201106174709007"></p><p>• 通过label-selector相关联</p><p>• 通过Service实现Pod的负载均衡（ TCP/UDP 4层）</p><h2 id="Service的三种常见类型"><a href="#Service的三种常见类型" class="headerlink" title="Service的三种常见类型"></a>Service的三种常见类型</h2><p>• <strong>ClusterIP：集群内部使用</strong></p><p>• <strong>NodePort：对外暴露应用</strong></p><p>• <strong>LoadBalancer：对外暴露应用，适用公有云</strong></p><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106174807976.png" alt="image-20201106174807976"></p><p><strong>ClusterIP：</strong>默认<strong>，</strong>分配一个稳定的IP地址，即VIP，只能在集群内</p><p>部访问（同Namespace内的Pod）。</p><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106174902023.png" alt="image-20201106174902023"></p><p><strong>NodePort：</strong>在每个节点上启用一个端口来暴露服务，可以在集群</p><p>外部访问。也会分配一个稳定内部集群IP地址。</p><p>访问地址：<NodeIP>:<NodePort></p><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106174951536.png" alt="image-20201106174951536"></p><p><strong>LoadBalancer：</strong>与NodePort类似，在每个节点上启用一个端口来暴</p><p>露服务。除此之外，Kubernetes会请求底层云平台上的负载均衡器，</p><p>将每个Node（[NodeIP]:[NodePort]）作为后端添加进去。</p><h2 id="Service代理模式–kube-proxy"><a href="#Service代理模式–kube-proxy" class="headerlink" title="Service代理模式–kube-proxy"></a>Service代理模式–kube-proxy</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106175603692.png" alt="image-20201106175603692"></p><p><strong>kubeadm方式修改ipvs模式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl edit configmap kube-proxy -n kube-system</span></span><br><span class="line">...</span><br><span class="line">mode: “ipvs“</span><br><span class="line">...</span><br><span class="line"><span class="comment"># kubectl delete pod kube-proxy-btz4p -n kube-system</span></span><br></pre></td></tr></table></figure><p>注：</p><p>1、kube-proxy配置文件以configmap方式存储</p><p>2、如果让所有节点生效，需要重建所有节点kube-proxy pod</p><p>二进制方式修改ipvs模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi kube-proxy-config.yml </span></span><br><span class="line">mode: ipvs</span><br><span class="line">ipvs:</span><br><span class="line">scheduler: <span class="string">&quot;rr“</span></span><br><span class="line"><span class="string"># systemctl restart kube-proxy</span></span><br></pre></td></tr></table></figure><p>注：参考不同资料，文件名可能不同</p><h2 id="Service代理模式"><a href="#Service代理模式" class="headerlink" title="Service代理模式"></a>Service代理模式</h2><p><strong>流程包流程：客户端 -&gt;NodePort/ClusterIP（iptables/Ipvs负载均衡规则） -&gt; 分布在各节点Pod</strong></p><p><strong>查看负载均衡规则：</strong></p><p>• iptables模式</p><p>iptables-save |grep <SERVICE-NAME></p><p>• ipvs模式</p><p>ipvsadm -L -n</p><h4 id="iptables-VS-IPVS"><a href="#iptables-VS-IPVS" class="headerlink" title="iptables VS  IPVS"></a>iptables VS  IPVS</h4><p>Iptables： </p><p>• 灵活，功能强大</p><p>• 规则遍历匹配和更新，呈线性时延</p><p>IPVS： </p><p>• 工作在内核态，有更好的性能</p><p>• 调度算法丰富：rr，wrr，lc，wlc，ip hash…</p><h2 id="Service-DNS名称"><a href="#Service-DNS名称" class="headerlink" title="Service DNS名称"></a>Service DNS名称</h2><ul><li><p>通过Service进行关联</p></li><li><p>通过Ingress Controller实现Pod的负载均衡</p><p>- 支持TCP/UDP 4层和HTTP 7层</p></li></ul><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106180043483.png" alt="image-20201106180043483"></p><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p><strong>Ingress为弥补NodePort不足而生</strong></p><p>NodePort存在的不足：</p><p>• 一个端口只能一个服务使用，端口需提前规划</p><p>• 只支持4层负载均衡</p><p><strong>Ingress是什么</strong></p><p>Ingress 公开了从集群外部到集群内服务的HTTP和HTTPS路由。流量路由由</p><p>Ingress资源上定义的规则控制。</p><p>下面是一个将所有流量都发送到同一Service的简单Ingress示例：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106180347164.png" alt="image-20201106180347164"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201106180436128.png" alt="image-20201106180436128"></p><p><strong>Ingress Controller是什么</strong></p><p>Ingress管理的负载均衡器,为集群提供全局的负载均衡能力.</p><p>使用方法</p><ol><li><p>部署 Ingress Controller(部署在那台节点就可以以后外界就可以解析那台节点的IP进行七层转发)</p></li><li><p>创建Ingress规则</p></li></ol><h2 id="安装Ingress-Controller"><a href="#安装Ingress-Controller" class="headerlink" title="安装Ingress Controller"></a>安装Ingress Controller</h2><p>Ingress Controller有很多实现，我们这里采用官方维护的基于Nginx实现的。</p><p>Github：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></p><p>部署：kubectl apply -f <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-">https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-</a></p><p>0.30.0/deploy/static/mandatory.yaml</p><p><strong>注意事项：</strong></p><p>• 镜像地址修改成国内的：lizhenliang/nginx-ingress-controller:0.30.0 </p><p>• 建议直接宿主机网络暴露：hostNetwork: true</p><p><strong>其他主流控制器：</strong></p><p>Traefik： HTTP反向代理、负载均衡工具</p><p>Istio：服务治理，控制入口流量</p><h2 id="Ingress-Controller工作流程"><a href="#Ingress-Controller工作流程" class="headerlink" title="Ingress Controller工作流程"></a>Ingress Controller工作流程</h2><p><strong>Ingress Contronler怎么工作的？</strong></p><p>Ingress Contronler通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，</p><p>按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，应用到管理的</p><p>Nginx服务，然后热加载生效。</p><p>以此来达到Nginx负载均衡器配置及动态更新的问题。</p><p><strong>流程包流程：客户端 -&gt;Ingress Controller（nginx） -&gt; 分布在各节点Pod</strong></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CKAkubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s日常记录</title>
      <link href="/posts/33647/"/>
      <url>/posts/33647/</url>
      
        <content type="html"><![CDATA[<h4 id="第四章课后作业"><a href="#第四章课后作业" class="headerlink" title="第四章课后作业"></a>第四章课后作业</h4><p><strong>1、查看pod日志，并将日志中Error的行记录到指定文件</strong></p><p>• pod名称：web</p><p>• 文件：/opt/web</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031171041659.png" alt="image-20201031171041659"></p><p><strong>2、查看指定标签使用cpu最高的pod，并记录到到指定文件</strong></p><p>• 标签：app=web</p><p>• 文件：/opt/cpu</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031171142370.png" alt="image-20201031171142370"></p><p><strong>3、Pod里创建一个边车容器读取业务容器日志</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;docker-logs-car.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: web</span><br><span class="line">    image: lizhenliang&#x2F;nginx-php</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: logs</span><br><span class="line">      mountPath: &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</span><br><span class="line">  - name: log</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [&#x2F;bin&#x2F;sh, -c, &#39;tail -f &#x2F;opt&#x2F;access.log&#39;]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: logs</span><br><span class="line">      mountPath: &#x2F;opt</span><br><span class="line">  volumes:</span><br><span class="line">  - name: logs</span><br><span class="line">    emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f docker-logs-car.yaml</span><br></pre></td></tr></table></figure><p>查看日志</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031171926951.png" alt="image-20201031171926951"></p><p>根据报错提示候面还需要加上docker容器指定名字</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031172035503.png" alt="image-20201031172035503"></p><p>这个时候我们启动三个窗口</p><p>第一个窗口监控nginx所在容器的日志</p><p>第二个窗口监控边车容器日志</p><p>第三个窗口bash进入nginx容器中.curl 127.0.0.1制作日志(通过kubectl get pods -o wide 找到所在主机直接kubectl exec 进入)</p><ol><li><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031172753224.png" alt="image-20201031172753224"></li><li><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031172812143.png" alt="image-20201031172812143"></li><li><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201031172940123.png" alt="image-20201031172940123"></li></ol><p>在这里我们要注意kubectl logs pod-name 默认查看的是pod的日志 并不是内部业务所产生的日志</p><p><strong>kubernetes命令补全</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">source &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h4 id="第五章课后作业"><a href="#第五章课后作业" class="headerlink" title="第五章课后作业"></a>第五章课后作业</h4><p><strong>1、在节点上配置kubelet托管启动一个pod</strong></p><p>• 节点：k8s-node1</p><p>• pod名称：web</p><p>• 镜像：nginx</p><p><strong>首先修改kubelet配置文件中静态Pod相关配置</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201102144038347.png" alt="image-20201102144038347"></p><p><strong>在配置文件指定目录下创建需要创建的静态Pod</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201102144319430.png" alt="image-20201102144319430"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201102144349251.png" alt="image-20201102144349251"></p><p><strong>回到主节点查看是否已经创建静态Pod</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201102144511660.png" alt="image-20201102144511660"></p><p>Pod命名方式会以工作节点主机名为结尾命名</p><p><strong>2、向pod中添加一个init容器，init容器创建一个空文件，如果该空文件没有被检测到pod退出</strong></p><p>• pod名称：web</p><p> 新建PodYaml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# vim web.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  #Pod重启策略  Always一直重启Onfailure    当容器异常退出时才重启容器(退出码不为0)Never从不重启容器</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    args:</span><br><span class="line">    #创建一个测试文件,在十秒钟后删除测试文件,并且等待20秒钟</span><br><span class="line">    - &#x2F;bin&#x2F;sh</span><br><span class="line">    - -c</span><br><span class="line">    - touch &#x2F;opt&#x2F;test ; sleep 10; rm -rf &#x2F;opt&#x2F;test ; sleep 20</span><br><span class="line">    #存活性探针五秒钟检测一次测试文件是否存在,如果检查失败,将杀死容器,根据Pod的重启策略来继续</span><br><span class="line">    livenessProbe: </span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">          - cat</span><br><span class="line">          - &#x2F;opt&#x2F;test</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">    #就绪性探针五秒钟检测一次测试文件是否存在,如果检测失败,将service中调度策略移除</span><br><span class="line">    readinessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">        - cat</span><br><span class="line">        - &#x2F;opt&#x2F;test</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl apply -f web.yaml</span><br><span class="line">[root@master1 page5]# kubectl get pods</span><br><span class="line">NAME                                READY   STATUS             RESTARTS   AGE</span><br><span class="line">web                                 0&#x2F;1     CrashLoopBackOff   9          19m</span><br><span class="line">#按照设定策略,默认会一直重启</span><br></pre></td></tr></table></figure><p><strong>3、创建一个deployment 副本数 3，然后滚动更新镜像版本，并记录这个更新记录，最后再回滚到上一个版本</strong></p><p>• 名称：nginx</p><p>• 镜像版本：1.16</p><p>• 更新镜像版本：1.17</p><p><strong>创建deployment的yaml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# vim deployment.yaml </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line"> name: nginx-deployment</span><br><span class="line"> namespace: default</span><br><span class="line">spec:</span><br><span class="line">#副本数</span><br><span class="line"> replicas: 3</span><br><span class="line"> selector:</span><br><span class="line">  matchLabels:</span><br><span class="line">   app: nginx</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: nginx</span><br><span class="line">  spec:</span><br><span class="line">   containers:</span><br><span class="line">   - name: nginx</span><br><span class="line">   #镜像版本</span><br><span class="line">     image: nginx:1.16</span><br><span class="line">     resources:</span><br><span class="line">      requests:</span><br><span class="line">       cpu: 0.1</span><br><span class="line">     ports:</span><br><span class="line">     - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl apply -f deployment.yaml </span><br><span class="line">deployment.apps&#x2F;nginx-deployment created</span><br><span class="line">service&#x2F;nginx-deployment configured</span><br><span class="line">[root@master1 page5]# kubectl get pods</span><br><span class="line">NAME                               READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx-deployment-5644975f4-2hxpw   1&#x2F;1     Running             0          3s</span><br><span class="line">nginx-deployment-5644975f4-mbw2c   0&#x2F;1     ContainerCreating   0          3s</span><br><span class="line">nginx-deployment-5644975f4-qwkxd   0&#x2F;1     ContainerCreating   0          3s</span><br></pre></td></tr></table></figure><p><strong>命令行修改镜像版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl set image deployment nginx-deployment nginx&#x3D;nginx:1.17 --record&#x3D;true</span><br><span class="line">deployment.apps&#x2F;nginx-deployment image updated</span><br><span class="line">#--record&#x3D;true 参数作用为记录更新镜像命令信息</span><br></pre></td></tr></table></figure><p><strong>查看修改记录,回滚版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl rollout history deployment nginx-deployment</span><br><span class="line">deployment.apps&#x2F;nginx-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         kubectl set image deployment nginx-deployment nginx&#x3D;nginx:1.17 --record&#x3D;true</span><br><span class="line">[root@master1 page5]# kubectl rollout undo deployment nginx-deployment --to-revision&#x3D;2</span><br><span class="line">deployment.apps&#x2F;nginx-deployment skipped rollback (current template already matches revision 2)</span><br><span class="line">#默认不指定--to-revision&#x3D;$version会回滚上一个版本</span><br><span class="line">$kubectl rollout undo deployment&#x2F;nginx-deployment</span><br></pre></td></tr></table></figure><p><strong>4、给web deployment扩容副本数为4</strong></p><p><strong>使用命令行直接扩容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl scale deployment nginx-deployment  --replicas&#x3D;4</span><br><span class="line">deployment.apps&#x2F;nginx-deployment scaled</span><br><span class="line">[root@master1 page5]# kubectl get pods</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-745bff48c5-g97tx   1&#x2F;1     Running   0          24m</span><br><span class="line">nginx-deployment-745bff48c5-k24qj   1&#x2F;1     Running   0          23m</span><br><span class="line">nginx-deployment-745bff48c5-tdw6x   1&#x2F;1     Running   0          24m</span><br><span class="line">nginx-deployment-745bff48c5-znclz   1&#x2F;1     Running   0          10s</span><br></pre></td></tr></table></figure><p><strong>5、创建一个pod，其中运行着nginx、redis、memcached、consul 4个容器</strong></p><p><strong>创建Pod yaml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# vim 5.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: si-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: si-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">  - name: redis</span><br><span class="line">    image: redis</span><br><span class="line">  - name: memcached</span><br><span class="line">    image: memcached</span><br><span class="line">  - name: consul</span><br><span class="line">    image: consul</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl apply -f 5.yaml </span><br><span class="line">pod&#x2F;si-pod created</span><br><span class="line">[root@master1 page5]#</span><br><span class="line">[root@master1 page5]# kubectl get pods</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-745bff48c5-g97tx   1&#x2F;1     Running   0          32m</span><br><span class="line">nginx-deployment-745bff48c5-k24qj   1&#x2F;1     Running   0          31m</span><br><span class="line">nginx-deployment-745bff48c5-tdw6x   1&#x2F;1     Running   0          31m</span><br><span class="line">si-pod                              4&#x2F;4     Running   0          101s</span><br><span class="line">[root@master1 page5]#</span><br></pre></td></tr></table></figure><p><strong>6、把deployment输出json文件，再删除创建的deployment</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page5]# kubectl get deployment nginx-deployment -o json &gt; nginx-deployment.json</span><br><span class="line">[root@master1 page5]# kubectl delete deployment nginx-deployment -n default </span><br><span class="line">deployment.apps &quot;nginx-deployment&quot; deleted</span><br></pre></td></tr></table></figure><p><strong>7、生成一个deployment yaml文件保存到/opt/deploy.yaml</strong></p><p>• 名称：web</p><p>• 标签：app_env_stage=dev</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment 123 --image&#x3D;nginx -o yaml --dry-run&#x3D;client &gt;123.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 123.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app_env_stage: dev</span><br><span class="line">  name: &quot;123&quot;</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app_env_stage: dev</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app_env_stage: dev</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: nginx</span><br><span class="line">        name: nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# kubectl apply -f 123.yaml </span><br><span class="line">deployment.apps&#x2F;123 created</span><br><span class="line">[root@master1 ~]# vim 123.yaml </span><br><span class="line">[root@master1 ~]# kube</span><br><span class="line">kubeadm  kubectl  kubelet  </span><br><span class="line">[root@master1 ~]# kubectl describe deployments 123 </span><br><span class="line">Name:                   123</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Mon, 02 Nov 2020 16:42:25 +0800</span><br><span class="line">Labels:                 app_env_stage&#x3D;dev</span><br></pre></td></tr></table></figure><h4 id="第六章课后作业"><a href="#第六章课后作业" class="headerlink" title="第六章课后作业"></a>第六章课后作业</h4><p><strong>1、创建一个pod，分配到指定标签node上</strong> </p><p>• pod名称：web</p><p>• 镜像：nginx</p><p>• node标签：disk=ssd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginxnodeselector</span><br><span class="line">spec:</span><br><span class="line">  nodeSelector:</span><br><span class="line">    disk: &quot;ssd&quot;</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page6]# kubectl apply -f nginx.yaml </span><br><span class="line">pod&#x2F;nginxnodeselector created</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page6]# kubectl label node node2 disk&#x3D;ssd</span><br><span class="line">node&#x2F;node2 labeled</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page6]# kubectl get pods -o wide</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">nginxnodeselector   1&#x2F;1     Running   0          31s   10.244.104.62   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@master1 page6]# </span><br></pre></td></tr></table></figure><p><strong>2、确保在每个节点上运行一个pod，不考虑污点</strong></p><p>• pod名称：nginx</p><p>• 镜像：nginx</p><ul><li>使用DaemonSet方式创建Pod,如果有污点的机器不会去分配</li><li>使用nodeName方式调度的Pod需要创建两次</li></ul><p><strong>3、查看集群中状态为ready的node数量，并将结果写到指定文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page6]# kubectl get nodes --show-labels &gt; test</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss_agent:2.32.2011031259,ss_battle:2.32.2011031259</span><br></pre></td></tr></table></figure><p><strong>四 , 查看集群中状态为ready的node数量,不包含被打了NoSchedule污点的节点,并将结果写到/opt/node.txt</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node $(kubectl get nodes|grep Ready|awk &#x27;&#123;print $1&#125;&#x27;)|grep -vc NoSchedule &gt; /opt/node.txt</span><br></pre></td></tr></table></figure><h4 id="第七章课后作业"><a href="#第七章课后作业" class="headerlink" title="第七章课后作业"></a>第七章课后作业</h4><p><strong>1、给一个pod创建service，并可以通过ClusterIP/NodePort访问</strong></p><p>• 名称：web-service</p><p>• pod名称：web</p><p>• 容器端口：80</p><p><strong><em>新建Pod</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="comment">#因为后期需要被Service进行关联所以我们要给出标签字段</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx.yaml</span><br></pre></td></tr></table></figure><p><strong><em>新建Service文件</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose pod nginx --port=80 --type=NodePort --target-port=80 --name=nginx --dry-run=client -o yaml &gt;svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="comment">#Service端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="comment">#目标容器暴露的端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="comment">#NodePort模式指定暴露端口</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="comment">#标签选择器选中该pod所用标签,后期将根据标签所关联pod进行动态负载均衡</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="comment">#可以选择暴露的类型有ClusterIP,NodePort,LoadBalancer</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f svc.yaml</span><br><span class="line">kubectl get pods,svc -n default</span><br></pre></td></tr></table></figure><p><strong>2、 任意名称创建deployment和service，使用busybox容器nslookup解析service</strong></p><p><strong><em>创建Deploy</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dp.yaml</span><br></pre></td></tr></table></figure><p><strong><em>创建service</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx-deployment --port=80 --type=NodePort --target-port=80 --name=nginx --dry-run=client -o yaml &gt;svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page7]# kubectl apply -f dp.yaml </span><br><span class="line">deployment.apps/nginx-deployment unchanged</span><br><span class="line">[root@master1 page7]# kubectl apply -f svc.yaml </span><br><span class="line">service/nginx unchange</span><br><span class="line">[root@master1 page7]# kubectl get pods,svc</span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginx-deployment-7848d4b86f-d8wtl   1/1     Running   0          4d2h</span><br><span class="line">pod/nginx-deployment-7848d4b86f-sqg7n   1/1     Running   0          4d2h</span><br><span class="line">pod/nginx-deployment-7848d4b86f-xqrkh   1/1     Running   0          4d2h</span><br><span class="line">pod/nginx1-7848d4b86f-p4zz5             1/1     Running   0          111m</span><br><span class="line">pod/pod1                                1/1     Running   0          3h25m</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        17d</span><br><span class="line">service/nginx        NodePort    10.108.97.47   &lt;none&gt;        80:30532/TCP   4d1h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>创建busyboxPod(需满足版本低于1.28.4)</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page7]# kubectl run busybox1 --image=busybox:1.28.3 sleep 3000</span><br><span class="line">pod/busybox1 created</span><br><span class="line">[root@master1 page7]# kubectl exec -it busybox1 -n default -- sh </span><br><span class="line">/ # nslookup nginx</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      nginx</span><br><span class="line">Address 1: 10.108.97.47 nginx.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p><strong>3、列出命名空间下某个service关联的所有pod，并将pod名称写到/opt/pod.txt文件中（使用标签筛选）</strong></p><p>• 命名空间：default</p><p>• service名称：web</p><p><strong><em>先找出Service绑定的Pod标签</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 page7]# kubectl describe svc nginx --show-events </span><br><span class="line">Name:                     nginx</span><br><span class="line">Namespace:                default</span><br><span class="line">Labels:                   app=nginx</span><br><span class="line">....</span><br><span class="line">然后直接根据标签去过滤</span><br><span class="line">[root@master1 page7]# kubectl get pods -l app=nginx</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-7848d4b86f-d8wtl   1/1     Running   0          5h4m</span><br><span class="line">nginx-deployment-7848d4b86f-sqg7n   1/1     Running   0          5h4m</span><br><span class="line">nginx-deployment-7848d4b86f-xqrkh   1/1     Running   0          5h4m</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -l app=nginx | awk -F &#x27; &#x27; &#x27;&#123;print $1&#125;&#x27; | grep -v -i &quot;name&quot; &gt;/opt/pod.txt</span><br></pre></td></tr></table></figure><p><strong>4、使用Ingress将美女示例应用暴露到外部访问</strong></p><p>新建Pod***</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="comment">#因为后期需要被Service进行关联所以我们要给出标签字段</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx.yaml</span><br></pre></td></tr></table></figure><p><strong><em>新建Service文件</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose pod nginx --port=80 --type=NodePort --target-port=80 --name=nginx --dry-run=client -o yaml &gt;svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="comment">#Service端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="comment">#目标容器暴露的端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="comment">#NodePort模式指定暴露端口</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="comment">#标签选择器选中该pod所用标签,后期将根据标签所关联pod进行动态负载均衡</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="comment">#可以选择暴露的类型有ClusterIP,NodePort,LoadBalancer</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f svc.yaml</span><br><span class="line">kubectl get pods,svc -n default</span><br></pre></td></tr></table></figure><p><strong><em>新建Service文件</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ingress.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">xoxoyun.cn</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl apply -f ingress.yaml</span><br></pre></td></tr></table></figure><p><em>由于我们没有做DNS服务器,所以我们将安装了Ingress-nginx组件的主机IP添加至需要访问的主机Hosts文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.1.102 xoxoyun.cn</span><br><span class="line">192.168.1.103 xoxoyun.cn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl xoxoyun.cn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAProxy详解配置文件</title>
      <link href="/posts/17104/"/>
      <url>/posts/17104/</url>
      
        <content type="html"><![CDATA[<h1 id="HAProxy详解配置文件"><a href="#HAProxy详解配置文件" class="headerlink" title="HAProxy详解配置文件"></a>HAProxy详解配置文件</h1><p>官网：<a href="http://www.haproxy.com/">http://www.haproxy.com</a></p><p>HAProxy 是法国人Willy Tarreau开发的一个开源软件，是一款应对客户端10000以上的同时连接的高性能的TCP和<br>HTTP负载均衡器。其功能是用来提供基于cookie的持久性， 基于内容的交换，过载保护的高级流量管制，自动故障切换<br>，以正则表达式为基础的标题控制运行时间，基于Web的报表，高级日志记录以帮助排除故障的应用或网络及其他功能。</p><p>HAProxy 提供高可用性、负载均衡以及基于TCP和HTTP的应用代理，支持虚拟主机，它是免费、快速并且可靠的一种负载均衡解决方案。适合处理高负载站点的 <strong>七层</strong> 数据请求。类似的代理服务可以屏蔽内部真实服务器，防止内部服务器遭受攻击。</p><h2 id="HAProxy特点和优点："><a href="#HAProxy特点和优点：" class="headerlink" title="HAProxy特点和优点："></a>HAProxy特点和优点：</h2><p>1.支持原声SSL,同时支持客户端和服务器的SSL.<br>2.支持IPv6和UNIX套字节（sockets）<br>3.支持HTTP Keep-Alive<br>4.支持HTTP/1.1压缩，节省宽带<br>5.支持优化健康检测机制（SSL、scripted TCP、check agent…）<br>6.支持7层负载均衡。<br>7.可靠性和稳定性非常好。<br>8.并发连接 40000-50000个，单位时间处理最大请求 20000个，最大数据处理10Gbps.<br>9.支持8种负载均衡算法，同时支持session保持。<br>10.支持虚拟主机。<br>11.支持连接拒绝、全透明代理。<br>12.拥有服务器状态监控页面。<br>13.支持ACL。</p><h2 id="HAProxy保持会话的三种解决方法"><a href="#HAProxy保持会话的三种解决方法" class="headerlink" title="HAProxy保持会话的三种解决方法"></a>HAProxy保持会话的三种解决方法</h2><p>HAProxy为了让同一客户端访问服务器可以保持会话。有三种解决方法：客户端IP、Cookie以及Session。</p><p>1.HAProxy通过客户端IP进行Hash计算并保存，以此确保当相同IP访问代理服务器可以转发给固定的真实服务器。<br>2.HAProxy依靠真实服务器发送客户端的Cookie信息进行会话保持。<br>3.HAProxy将保存真实服务器的Session以及服务器标识，实现会话保持。<br>（HAProxy只要求后端服务器能够在网络联通，也没有像LVS那样繁琐的ARP配置）</p><h2 id="HAProxy的balance-8种负载均衡算法："><a href="#HAProxy的balance-8种负载均衡算法：" class="headerlink" title="HAProxy的balance 8种负载均衡算法："></a>HAProxy的balance 8种负载均衡算法：</h2><p>1.roundrobin ：基于权重轮循。<br>2.static-rr： 基于权重轮循。静态算法，运行时改变无法生效<br>3.source ： 基于请求源IP的算法。对请求的源IP进行hash运算，然后将结果与后端服务器的权重总数想除后转发至某台匹配服务器。使同一IP客户端请求始终被转发到某特定的后端服务器。<br>4.leastconn ：最小连接。（适合数据库负载均衡，不适合会话短的环境）<br>5.uri ：对部分或整体URI进行hash运算，再与服务器的总权重想除，最后转发到匹配后端。<br>6.uri_param ：根据URL路径中参数进行转发，保证在后端服务器数量不变的情况下，同一用户请求分发到同一机器。<br>7.<code>hdr(&lt;name&gt;)</code> ：根据http头转发，如果不存在http头。则使用简单轮循。</p><h2 id="HAProxy-主要工作模式"><a href="#HAProxy-主要工作模式" class="headerlink" title="HAProxy 主要工作模式"></a>HAProxy 主要工作模式</h2><p>1.tcp模式:该模式下，在客户端和服务器之间将建立一个全双工的连接，且不会对7层的报文做任何处理的简单模式。此模式默认，通常用于SSL、SSH、SMTP应用。<br>2.http模式（一般使用）：该模式下，客户端请求在转发给后端服务器之前会被深度分析，所有不与RFC格式兼容的请求都会被拒绝。</p><h2 id="HAProxy-安装"><a href="#HAProxy-安装" class="headerlink" title="HAProxy 安装"></a>HAProxy 安装</h2><h3 id="通过-tar-gz-安装-HAProxy"><a href="#通过-tar-gz-安装-HAProxy" class="headerlink" title="通过 tar.gz 安装 HAProxy"></a>通过 tar.gz 安装 HAProxy</h3><p>1、准备好 HAProxy 安装包，传到/opt目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">haproxy-1.8.13.tar.gz</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>2、解压到 /usr/local/src</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf haproxy-1.8.13.tar.gz -C  /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/haproxy-1.8.13/</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>3、查询系统内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost haproxy-1.8.13]<span class="comment"># uname -r   </span></span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>4、编译时，centos6.X需要使用 TARGET=linux26 ，centos7.x 使用 linux31</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost haproxy-1.8.13]<span class="comment"># make TARGET=linux31 PREFIX=/usr/local/haproxy ARCH=x86_64</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>5、安装到 /usr/local/haproxy 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost haproxy-1.8.13]<span class="comment"># make install PREFIX=/usr/local/haproxy</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>6、创建目录、创建HAProxy配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost haproxy-1.8.13]<span class="comment"># mkdir -p /usr/data/haproxy/</span></span><br><span class="line">[root@localhost haproxy-1.8.13]<span class="comment"># vi /usr/local/haproxy/haproxy.conf</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="通过-yum-安装-HAProxy"><a href="#通过-yum-安装-HAProxy" class="headerlink" title="通过 yum 安装 HAProxy"></a>通过 yum 安装 HAProxy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install haproxy</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="HAProxy配置文件参数"><a href="#HAProxy配置文件参数" class="headerlink" title="HAProxy配置文件参数"></a>HAProxy配置文件参数</h2><h3 id="HAProxy环境"><a href="#HAProxy环境" class="headerlink" title="HAProxy环境"></a>HAProxy环境</h3><p>haproxy的配置文件通常分为三部分: global（全局配置部分） defaults（默认配置部分） listen(应用组件部分)<br>配置文件：/etc/haproxy/haproxy.cfg</p><p>frontend 端：指定接收客户端侦听套接字设置<br>bcakend 端：指定将连接请求转发至后端服务器的相关设置<br>listen 段：指定完整的前后端设置，<strong>只对TCP有效</strong><br>proxy 名称：使用字母 数字 - _ . : 并区分字符大小写</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################全局配置######################## </span></span><br><span class="line"><span class="comment">#######参数是进程级的，通常和操作系统（OS）相关######### </span></span><br><span class="line"><span class="attr">global</span> <span class="string"></span></span><br><span class="line">    <span class="attr">maxconn</span> <span class="string">20480                   #默认最大连接数 </span></span><br><span class="line">    <span class="attr">log</span> <span class="string">127.0.0.1 local0            #日志输出配置，所有日志都记录在本机系统日志，通过local0输出</span></span><br><span class="line">    <span class="attr">log</span> <span class="string">127.0.0.1 local1 notice       #notice 为日志级别，通常有24个级别（error warring info debug）</span></span><br><span class="line">    <span class="attr">chroot</span> <span class="string">/var/haproxy             #chroot服务自设置的根目录，一般需将此行注释掉 </span></span><br><span class="line">    <span class="attr">uid</span> <span class="string">99                          #所属运行的用户uid </span></span><br><span class="line">    <span class="attr">gid</span> <span class="string">99                          #所属运行的用户组 </span></span><br><span class="line">    <span class="attr">daemon</span>                          <span class="string">#守护进程。以后台形式运行haproxy </span></span><br><span class="line">    <span class="attr">nbproc</span> <span class="string">1                        #进程数量(可以设置多个进程提高性能) </span></span><br><span class="line">    <span class="attr">pidfile</span> <span class="string">/var/run/haproxy.pid    #haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 </span></span><br><span class="line">    <span class="meta">ulimit-n</span> <span class="string">65535                  #ulimit的数量限制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################默认设置###################### </span></span><br><span class="line"><span class="comment">##这些参数可以被利用配置到frontend，backend，listen组件## </span></span><br><span class="line"><span class="attr">defaults</span> <span class="string"></span></span><br><span class="line">    <span class="attr">log</span> <span class="string">global                      #定义日志为global配置中的日志定义</span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http                       #所处理的类别 (#7层 http;4层tcp  ) </span></span><br><span class="line">    <span class="attr">maxconn</span> <span class="string">20480                   #最大连接数 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httplog                  #日志类别http日志格式 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httpclose                #每次请求完毕后主动关闭http通道 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">dontlognull              #不记录健康检查的日志信息 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">forwardfor               #如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器  </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">abortonclose             #当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">refresh 30                #统计页面刷新间隔 </span></span><br><span class="line">    <span class="attr">retries</span> <span class="string">3                       #检查节点服务器失败次数，连续达到三次失败，则认为节点不可用</span></span><br><span class="line">    <span class="attr">balance</span> <span class="string">roundrobin              #默认的负载均衡的方式,轮询方式 </span></span><br><span class="line"><span class="comment">    #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash </span></span><br><span class="line"><span class="comment">    #balance leastconn               #默认的负载均衡的方式,最小连接 </span></span><br><span class="line">    <span class="attr">contimeout</span> <span class="string">5000                 #连接的超时时间</span></span><br><span class="line">    <span class="attr">clitimeout</span> <span class="string">50000                #客户端的超时时间</span></span><br><span class="line">    <span class="attr">srvtimeout</span> <span class="string">50000                #服务器的超时时间</span></span><br><span class="line">    <span class="attr">timeout</span> <span class="string">check 2000              #心跳检测的超时时间</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">####################监控页面的设置####################### </span></span><br><span class="line"><span class="attr">listen</span> <span class="string">admin_status                #Frontend和Backend的组合体,监控组的名称，按需自定义名称 </span></span><br><span class="line">    <span class="attr">bind</span> <span class="string">0.0.0.0:65532             #监听端口 </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http                      #http的7层模式 </span></span><br><span class="line">    <span class="attr">log</span> <span class="string">127.0.0.1 local3 err       #错误日志记录 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">refresh 5s               #每隔5秒自动刷新监控页面 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">uri /admin?stats         #监控页面的url </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">realm itnihao\ itnihao   #监控页面的提示信息 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">auth admin:admin         #监控页面的用户和密码admin,可以设置多个用户名 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">auth admin1:admin1       #监控页面的用户和密码admin1 </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">hide-version             #隐藏统计页面上的HAproxy版本信息  </span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">admin if TRUE            #手工启用/禁用,后端服务器(haproxy-1.4.9以后版本) </span></span><br><span class="line">    <span class="attr">errorfile</span> <span class="string">403 /etc/haproxy/errorfiles/403.http </span></span><br><span class="line">    <span class="attr">errorfile</span> <span class="string">500 /etc/haproxy/errorfiles/500.http </span></span><br><span class="line">    <span class="attr">errorfile</span> <span class="string">502 /etc/haproxy/errorfiles/502.http </span></span><br><span class="line">    <span class="attr">errorfile</span> <span class="string">503 /etc/haproxy/errorfiles/503.http </span></span><br><span class="line">    <span class="attr">errorfile</span> <span class="string">504 /etc/haproxy/errorfiles/504.http</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">     #################HAProxy的日志记录内容设置################### </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">request  header Host           len 40 </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">request  header Content-Length len 10 </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">request  header Referer        len 200 </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">response header Server         len 40 </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">response header Content-Length len 10 </span></span><br><span class="line">    <span class="attr">capture</span> <span class="string">response header Cache-Control  len 8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################网站监测listen配置##################### </span></span><br><span class="line"><span class="comment">###########此用法主要是监控haproxy后端服务器的监控状态############ </span></span><br><span class="line"><span class="attr">listen</span> <span class="string">site_status </span></span><br><span class="line">    <span class="attr">bind</span> <span class="string">0.0.0.0:1081                        #监听端口 </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http                                #http的7层模式 </span></span><br><span class="line">    <span class="attr">log</span> <span class="string">127.0.0.1 local3 err                 #[err warning info debug] </span></span><br><span class="line">    <span class="meta">monitor-uri</span> <span class="string">/site_status                 #网站健康检测URL，用来检测HAProxy管理的网站是否可以用，正常返回200，不正常返回503 </span></span><br><span class="line">    <span class="attr">acl</span> <span class="string">site_dead nbsrv(server_web)  lt 2    #定义网站down时的策略当挂在负载均衡上的指定backend的中有效机器数小于1台时返回true </span></span><br><span class="line">    <span class="attr">acl</span> <span class="string">site_dead nbsrv(server_blog) lt 2 </span></span><br><span class="line">    <span class="attr">acl</span> <span class="string">site_dead nbsrv(server_bbs)  lt 2  </span></span><br><span class="line">    <span class="attr">monitor</span> <span class="string">fail if site_dead                #当满足策略的时候返回503，网上文档说的是500，实际测试为503 </span></span><br><span class="line">    <span class="meta">monitor-net</span> <span class="string">192.168.16.2/32              #来自192.168.16.2的日志信息不会被记录和转发 </span></span><br><span class="line">    <span class="meta">monitor-net</span> <span class="string">192.168.16.3/32 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">######## frontend配置############ </span></span><br><span class="line"><span class="comment">##### 注意，frontend 配置里面可以定义多个acl进行匹配操作######## </span></span><br><span class="line"><span class="attr">frontend</span> <span class="string">http_80_in </span></span><br><span class="line">    <span class="attr">bind</span> <span class="string">0.0.0.0:80      #监听端口，即haproxy提供web服务的端口，和lvs的vip端口类似 </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http            #http的7层模式 </span></span><br><span class="line">    <span class="attr">log</span> <span class="string">global           #应用全局的日志配置 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httplog       #启用http的log </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httpclose     #每次请求完毕后主动关闭http通道，HA-Proxy不支持keep-alive模式 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">forwardfor    #如果后端服务器需要获得客户端的真实IP需要配置次参数，将可以从Http Header中获得客户端IP </span></span><br><span class="line">    </span><br><span class="line"><span class="comment">    ########acl策略配置############# </span></span><br><span class="line">    <span class="attr">acl</span> <span class="string">itnihao_web hdr_reg(host) -i ^(www.itnihao.cn|ww1.itnihao.cn)$    </span></span><br><span class="line"><span class="comment">    #如果请求的域名满足正则表达式中的2个域名返回true -i是忽略大小写 </span></span><br><span class="line">    <span class="attr">acl</span> <span class="string">itnihao_blog hdr_dom(host) -i blog.itnihao.cn </span></span><br><span class="line"><span class="comment">    #如果请求的域名满足www.itnihao.cn返回true -i是忽略大小写 </span></span><br><span class="line"><span class="comment">    #acl itnihao    hdr(host) -i itnihao.cn </span></span><br><span class="line"><span class="comment">    #如果请求的域名满足itnihao.cn返回true -i是忽略大小写 </span></span><br><span class="line"><span class="comment">    #acl file_req url_sub -i  killall= </span></span><br><span class="line"><span class="comment">    #在请求url中包含killall=，则此控制策略返回true,否则为false </span></span><br><span class="line"><span class="comment">    #acl dir_req url_dir -i allow </span></span><br><span class="line"><span class="comment">    #在请求url中存在allow作为部分地址路径，则此控制策略返回true,否则返回false </span></span><br><span class="line"><span class="comment">    #acl missing_cl hdr_cnt(Content-length) eq 0 </span></span><br><span class="line"><span class="comment">    #当请求的header中Content-length等于0时返回true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">    ######## acl策略匹配相应 ############# </span></span><br><span class="line"><span class="comment">    #block if missing_cl </span></span><br><span class="line"><span class="comment">    #当请求中header中Content-length等于0阻止请求返回403 </span></span><br><span class="line"><span class="comment">    #block if !file_req || dir_req </span></span><br><span class="line"><span class="comment">    #block表示阻止请求，返回403错误，当前表示如果不满足策略file_req，或者满足策略dir_req，则阻止请求 </span></span><br><span class="line">    <span class="attr">use_backend</span>  <span class="string">server_web  if itnihao_web </span></span><br><span class="line"><span class="comment">    #当满足itnihao_web的策略时使用server_web的backend </span></span><br><span class="line">    <span class="attr">use_backend</span>  <span class="string">server_blog if itnihao_blog </span></span><br><span class="line"><span class="comment">    #当满足itnihao_blog的策略时使用server_blog的backend </span></span><br><span class="line"><span class="comment">    #redirect prefix http://blog.itniaho.cn code 301 if itnihao </span></span><br><span class="line"><span class="comment">    #当访问itnihao.cn的时候，用http的301挑转到http://192.168.16.3 </span></span><br><span class="line">    <span class="attr">default_backend</span> <span class="string">server_bbs </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以上都不满足的时候使用默认server_bbs的backend </span></span><br><span class="line"><span class="comment">##########backend的设置############## </span></span><br><span class="line"><span class="comment"># 下面我将设置三组服务器 server_web，server_blog，server_bbs</span></span><br><span class="line"><span class="comment">######################## backend server_web ########################### </span></span><br><span class="line"><span class="attr">backend</span> <span class="string">server_web </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http            #http的7层模式 </span></span><br><span class="line">    <span class="attr">balance</span> <span class="string">roundrobin   #负载均衡的方式，roundrobin平均方式 </span></span><br><span class="line">    <span class="attr">cookie</span> <span class="string">SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httpchk GET /index.html #心跳检测的文件 </span></span><br><span class="line">    <span class="attr">server</span> <span class="string">web1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1  </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， </span></span><br><span class="line"><span class="comment">    #fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br><span class="line">   </span><br><span class="line">       <span class="attr">server</span> <span class="string">web2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2 </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， </span></span><br><span class="line"><span class="comment">    #fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### backend server_blog ##################### </span></span><br><span class="line"><span class="attr">backend</span> <span class="string">server_blog </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http            #http的7层模式 </span></span><br><span class="line">    <span class="attr">balance</span> <span class="string">roundrobin   #负载均衡的方式，roundrobin平均方式 </span></span><br><span class="line">    <span class="attr">cookie</span> <span class="string">SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httpchk GET /index.html #心跳检测的文件 </span></span><br><span class="line">    <span class="attr">server</span> <span class="string">blog1 192.168.16.2:80 cookie blog1 check inter 1500 rise 3 fall 3 weight 1  </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">server</span> <span class="string">blog2 192.168.16.3:80 cookie blog2 check inter 1500 rise 3 fall 3 weight 2 </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################### backend server_bbs ############################### </span></span><br><span class="line"><span class="attr">backend</span> <span class="string">server_bbs </span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http            # http的7层模式 </span></span><br><span class="line">    <span class="attr">balance</span> <span class="string">roundrobin   #负载均衡的方式，roundrobin平均方式 </span></span><br><span class="line">    <span class="attr">cookie</span> <span class="string">SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httpchk GET /index.html #心跳检测的文件 </span></span><br><span class="line">    <span class="attr">server</span> <span class="string">bbs1 192.168.16.2:80 cookie bbs1 check inter 1500 rise 3 fall 3 weight 1  </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">server</span> <span class="string">bbs2 192.168.16.3:80 cookie bbs2 check inter 1500 rise 3 fall 3 weight 2 </span></span><br><span class="line"><span class="comment">    #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span></span><br></pre></td></tr></table></figure><h3 id="haproxy-配置文件修改"><a href="#haproxy-配置文件修改" class="headerlink" title="haproxy 配置文件修改"></a>haproxy 配置文件修改</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# vim /etc/haproxy/haproxy.cfg</span></span><br><span class="line"><span class="comment"># this config needs haproxy-1.1.28 or haproxy-1.2.1</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">global</span></span><br><span class="line"><span class="comment">#   log 127.0.0.1   local0</span></span><br><span class="line"><span class="comment">#   log 127.0.0.1   local1 notice</span></span><br><span class="line">    <span class="attr">log</span> <span class="string">/dev/log    local0 info</span></span><br><span class="line">    <span class="attr">log</span> <span class="string">/dev/log    local0 notice</span></span><br><span class="line">    <span class="attr">maxconn</span> <span class="string">4096</span></span><br><span class="line">    <span class="attr">uid</span> <span class="string">99</span></span><br><span class="line">    <span class="attr">gid</span> <span class="string">99</span></span><br><span class="line">    <span class="attr">daemon</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">defaults</span></span><br><span class="line">    <span class="attr">log</span> <span class="string">global</span></span><br><span class="line">    <span class="attr">mode</span>    <span class="string">http</span></span><br><span class="line">    <span class="attr">option</span>  <span class="string">httplog</span></span><br><span class="line">    <span class="attr">retries</span> <span class="string">3</span></span><br><span class="line">    <span class="attr">maxconn</span> <span class="string">4096</span></span><br><span class="line">    <span class="attr">contimeout</span>  <span class="string">5000</span></span><br><span class="line">    <span class="attr">clitimeout</span>  <span class="string">50000</span></span><br><span class="line">    <span class="attr">srvtimeout</span>  <span class="string">50000</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">listen</span>  <span class="string">webcluster 0.0.0.0:80</span></span><br><span class="line">    <span class="attr">option</span>  <span class="string">httpchk GET /index.html</span></span><br><span class="line">    <span class="attr">balance</span> <span class="string">roundrobin</span></span><br><span class="line">    <span class="attr">server</span>  <span class="string">inst1 192.168.200.103:80 check inter 2000 fall 3</span></span><br><span class="line">    <span class="attr">server</span>  <span class="string">inst1 192.168.200.104:80 check inter 2000 fall 3</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">listen</span> <span class="string">admin_stats</span></span><br><span class="line">    <span class="attr">bind</span> <span class="string">0.0.0.0:8000</span></span><br><span class="line">    <span class="attr">mode</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">option</span> <span class="string">httplog</span></span><br><span class="line">    <span class="attr">maxconn</span> <span class="string">100</span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">refresh 30s</span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">uri /stats</span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">realm Crushlinux\ Haproxy</span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">auth  admin:admin</span></span><br><span class="line">    <span class="attr">stats</span> <span class="string">hide-version</span></span><br></pre></td></tr></table></figure><h3 id="准备服务自启动脚本"><a href="#准备服务自启动脚本" class="headerlink" title="准备服务自启动脚本"></a>准备服务自启动脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cp /usr/src/haproxy-1.4.24/examples/haproxy.init /etc/init.d/haproxy</span><br><span class="line">[root@localhost ~]# ln -s /usr/local/sbin/haproxy /usr/sbin/haproxy</span><br><span class="line">[root@localhost ~]# chmod +x /etc/init.d/haproxy </span><br><span class="line">[root@localhost ~]# /etc/init.d/haproxy start</span><br><span class="line">Starting haproxy:                                          [确定]</span><br></pre></td></tr></table></figure><h3 id="Haproxy-日志"><a href="#Haproxy-日志" class="headerlink" title="Haproxy 日志"></a>Haproxy 日志</h3><p>Haproxy 的日志默认输出到系统的syslog中，为了更好的管理Haproxy 的日志，在生产环境中一般单独定义出来。</p><h3 id="修改Haproxy配置文件中关于日志配置选项，"><a href="#修改Haproxy配置文件中关于日志配置选项，" class="headerlink" title="修改Haproxy配置文件中关于日志配置选项，"></a>修改Haproxy配置文件中关于日志配置选项，</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/haproxy/haproxy.cfg </span><br><span class="line"><span class="meta">#</span><span class="bash"> this config needs haproxy-1.1.28 or haproxy-1.2.1</span></span><br><span class="line"> </span><br><span class="line">global</span><br><span class="line">    #log 127.0.0.1  local0 </span><br><span class="line">    #log 127.0.0.1  local1 notice</span><br><span class="line">     </span><br><span class="line">    log /dev/log    local0 info</span><br><span class="line">    log /dev/log    local0 notice</span><br><span class="line">[root@localhost ~]# service haproxy restart</span><br><span class="line">Shutting down haproxy:                                     [确定]</span><br><span class="line">Starting haproxy:                                          [确定] </span><br></pre></td></tr></table></figure><p>这两行配置放到global选项中，主要是将Haproxy的info和notice日志分别记录到不同的日志文件中</p><h3 id="修改rsyslog配置"><a href="#修改rsyslog配置" class="headerlink" title="修改rsyslog配置"></a>修改rsyslog配置</h3><p>为了便于管理，将Haproxy相关的配置独立定义到haproxy.conf 并放到/etc/rsyslog.d/ 下，rsyslog启动时会自动加载此目录下的所有配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rsyslog.d/haproxy.conf</span><br><span class="line">if ($programname == &#x27;haproxy&#x27; and $syslogserverity-text == &#x27;info&#x27;) then -/var/log/haproxy/haproxy-info.log</span><br><span class="line">&amp;~</span><br><span class="line">if ($programname == &#x27;haproxy&#x27; and $syslogserverity-text == &#x27;notice&#x27;) then -/var/log/haproxy/haproxy-notice.log</span><br><span class="line">&amp;~　　</span><br></pre></td></tr></table></figure><p>将haproxy的info日志记录到/var/log/haproxy/haproxy-info.log中，将notice日志记录到/var/log/haproxy/haproxy-notice.log中，将notice日志记录到/var/log/haproxy/haproxy-notice<br>&amp;~ 表示当写入到日志文件后，rsyslog停止处理这个信息，（rainerscript 脚本语言）</p><p>重启rsyslog服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service rsyslog restart</span><br><span class="line">关闭系统日志记录器： [确定]</span><br><span class="line">启动系统日志记录器： [确定]</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="查看日志文件是否创建成功"><a href="#查看日志文件是否创建成功" class="headerlink" title="查看日志文件是否创建成功"></a>查看日志文件是否创建成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -l /var/log/haproxy/haproxy-info.log</span><br><span class="line">[root@localhost ~]# ls -l /var/log/haproxy/haproxy-notice.log</span><br><span class="line"> </span><br><span class="line">Sep 20 23:39:26 localhost haproxy[2674]: 192.168.200.1:51629 [20/Sep/2015:23:38:27.256] web-cluster web-cluster/inst2 0/0/0/1/59740 200 1648 - - CD-- 0/0/0/0/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br><span class="line">Sep 20 23:40:06 localhost haproxy[2674]: 192.168.200.1:51693 [20/Sep/2015:23:39:34.423] web-cluster web-cluster/inst2 0/0/0/0/32120 200 580 - - ---- 1/1/1/1/0 0/0 &quot;GET / HTTP/1.1&quot;</span><br><span class="line">8.4 状态统计功能测试</span><br></pre></td></tr></table></figure><h3 id="状态统计功能测试"><a href="#状态统计功能测试" class="headerlink" title="状态统计功能测试"></a>状态统计功能测试</h3><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/format.png" alt="img"></p><p>转载自：<a href="https://www.cnblogs.com/2567xl/p/11640991.html">https://www.cnblogs.com/2567xl/p/11640991.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务注册发现集群搭建——Registrator + Consul + Consul-template + nginx</title>
      <link href="/posts/39204/"/>
      <url>/posts/39204/</url>
      
        <content type="html"><![CDATA[<p>在互联网应用领域，服务的动态性需求十分常见，这就对服务的自动发现和可动态扩展提出了很高的要求。</p><p>微服务系统动辄上万个服务，而且还要动态伸缩。以人工写好的IP、Port 硬编码脚本的方式无法做到大规模自动化，稍微多点服务运维就傻了。微服务必然要做到ip和port自动分配，减少人工干预。我们需要让每个服务能动态的创建地址，同时调用方要能感知地址变化。</p><p>这就需要有一个服务注册与发现的机制，这篇文件就是讨论如何实现这个机制。</p><h1 id="1-服务注册发现的流程"><a href="#1-服务注册发现的流程" class="headerlink" title="1. 服务注册发现的流程"></a>1. 服务注册发现的流程</h1><p>我们做这个事情要达到的目的是：</p><table><thead><tr><th>注册发现模式</th><th>传统模式</th></tr></thead><tbody><tr><td>服务启动后自动被发现</td><td>手动注册</td></tr><tr><td>动态变更负载均衡</td><td>人工写入静态配置</td></tr><tr><td>自动伸缩规模</td><td>运维较长时间的手动调整</td></tr></tbody></table><h2 id="1-1-服务-“自注册”-与-“第三方注册”。"><a href="#1-1-服务-“自注册”-与-“第三方注册”。" class="headerlink" title="1.1 服务 “自注册” 与 “第三方注册”。"></a>1.1 服务 “自注册” 与 “第三方注册”。</h2><p>按注册源分</p><p>1.自注册：服务内部启动客户端，连接注册中心，写入服务信息。</p><p>好处：</p><ul><li>没有引入第三方，进程数量少，少依赖。</li></ul><p>问题：</p><ul><li>服务代码对注册中心进行了硬编码，若更换了注册中心，服务代码也必须跟着调整；</li><li>注册中心必须与每个服务都保持通信，来做心跳检测。如果服务很多时，对注册中心也是一种额外的开销；</li></ul><p>2.第三方注册（本文采用方式）：采用协同进程的方式，监听服务进程的变化，将服务信息写入注册中心。</p><ul><li>好处：做到了服务与注册中心的解耦，对服务而言，完成了服务的自动化注册；</li><li>问题：协同进程本身也要考虑高可用，否则将成为单点故障的风险点；</li></ul><h2 id="1-2-自注册的实现"><a href="#1-2-自注册的实现" class="headerlink" title="1.2 自注册的实现"></a>1.2 自注册的实现</h2><p>自注册不是我们本篇要讨论的，可以自己写代码实现，我们讨论第三方注册的实现。</p><h2 id="1-3-第三方注册的实现"><a href="#1-3-第三方注册的实现" class="headerlink" title="1.3 第三方注册的实现"></a>1.3 第三方注册的实现</h2><p>Docker 的出现，以及微服务架构的兴起，让众多开源项目开始关注在松耦合的架构前提下，如何基于 Docker 实现一套真正可动态扩展的服务架构。</p><p>这里我们使用 Registrator + Consul + Consul-template + Nginx 这几个开源组件来实现可动态扩展的服务注册与发现机制，当然，毫无疑问他们都跑在docker上。</p><p>首先看看流程：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170727173023209.jpg"></p><p>服务注册中心：作为整个架构中的核心，要支持分布式、持久化存储，注册信息变动实时通知消费者。</p><p>服务提供者：服务以 docker 容器化方式部署（实现服务端口的动态生成），并以 docker-compose 的方式来管理，通过 Registrator 可以检测到docker进程信息以完成服务的自动注册。</p><p>服务消费者：要使用服务提供者提供的服务，和服务提供者往往是动态相互转位置的。</p><ol><li>服务注册：服务提供者到注册中心注册；</li><li>服务订阅：服务消费者到注册中心订阅服务信息，对其进行监听；</li><li>缓存：本地缓存服务列表，减少与注册中心的网络通信；</li><li>服务调用：先查找本地缓存，找不到再去注册中心拉取服务地址，然后发送服务请求；</li><li>变更通知：服务节点变动时（新增、删除等），注册中心将通知监听节点，更新服务信息。</li></ol><h1 id="2-工具介绍"><a href="#2-工具介绍" class="headerlink" title="2. 工具介绍"></a>2. 工具介绍</h1><h2 id="2-1-Registrator"><a href="#2-1-Registrator" class="headerlink" title="2.1 Registrator"></a>2.1 Registrator</h2><p>Registrator：一个由Go语言编写的，针对docker使用的，通过检查本机容器进程在线或者停止运行状态，去注册服务的工具。所以我们要做的实验，所有的工具都是在docker上运行的，就是因为registrator是通过检查docker容器的状态来判断服务状态的，这样就和我们的代码实现完全解耦了，对上层透明化，无感知。它有如下特点</p><ul><li>通过docker socket直接监听容器event，根据容器启动/停止等event来注册/注销服务</li><li>每个容器的每个exposed端口对应不同的服务</li><li>支持可插拔的registry backend，默认支持Consul, etcd and SkyDNS</li><li>自身也是docker化的，可以容器方式启动</li><li>用户可自定义配置，如服务TTL（time-to-live）、服务名称、服务tag等</li></ul><h2 id="2-1-consul"><a href="#2-1-consul" class="headerlink" title="2.1 consul"></a>2.1 consul</h2><p>我们上图所说的服务注册中心，就是这玩意。Consul 是一个分布式高可用的服务发现和配置共享的软件。由 HashiCorp 公司用 Go 语言开发。</p><p>Consul在这里用来做 docker 实例的注册与配置共享。</p><p>特点：</p><ul><li>一致性协议采用 Raft 算法，比Paxos算法好用. 使用 GOSSIP 协议管理成员和广播消息, 并且支持 ACL 访问控制.</li><li>支持多数据中心以避免单点故障，内外网的服务采用不同的端口进行监听。而其部署则需要考虑网络延迟, 分片等情况等.zookeeper 和 etcd 均不提供多数据中心功能的支持.</li><li>健康检查. etcd 没有的.</li><li>支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.</li><li>还有一个web管理界面。</li></ul><h2 id="2-3-consul-template"><a href="#2-3-consul-template" class="headerlink" title="2.3 consul-template"></a>2.3 consul-template</h2><p>一开始构建服务发现，大多采用的是zookeeper/etcd+confd。但是复杂难用。consul-template，大概取代了confd的位置，以后可以这样etcd+confd或者consul+consul-template。</p><p>consul template的使用场景：consul template可以查询consul中的服务目录、key、key-values等。这种强大的抽象功能和查询语言模板可以使consul template特别适合动态的创建配置文件。例如：创建apache/nginx proxy balancers、haproxy backends、varnish servers、application configurations。</p><p>consul-template提供了一个便捷的方式从consul中获取存储的值，consul-template守护进程会查询consul服务，来更新系统上指定的任何模板，当更新完成后，模板可以选择运行一些任意的命令，比如我们这里用它来更新nginx.conf这个配置文件，然后执行nginx -s reload命令，以更新路由，达到动态调节负载均衡的目的。</p><blockquote><p>consul-template和nginx必须装到一台机器，因为consul-template需要动态修改nginx配置文件</p></blockquote><h2 id="2-4-nginx"><a href="#2-4-nginx" class="headerlink" title="2.4 nginx"></a>2.4 nginx</h2><p>这个耳熟能详的名字，不用过多介绍了，它在这里就是做负载均衡，转发请求用的。当然最擅长负载均衡的是直接用硬件，软件做性能比不上。但软件成本低、维护方便。</p><h1 id="3-单机实验"><a href="#3-单机实验" class="headerlink" title="3. 单机实验"></a>3. 单机实验</h1><p>首先看一个简单的传统负载均衡web服务</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170726184320855.jpg" alt="load balance web servers"></p><p>这个很好理解吧，client访问nginx，然后被转发到后端某一个web server上，传统的负载均衡。如果后端有添加/删除web server，运维手动改下nginx.conf，然后重新载入配置，就可以调整负载均衡了。</p><p>再看看我们基于微服务自动注册和发现模式下的负载均衡：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170726184628328.jpg" alt="Servies register and find"></p><p>负载均衡的方式没有变，只是多了一些外围的组件，当然这些组件对client是不可见的，client依然只能看到nginx入口，访问方式也没变化。</p><p>其中，我们用registrator来监控每个web server的状态。当有新的web server启动的时候，registrator会把它注册到consul这个注册中心上。由于consul_template已经订阅了该注册中心上的服务消息，此时consul注册中心会将新的web server信息推送给consul_template，consul_template则会去修改nginx.conf的配置文件，然后让nginx重新载入配置以达到自动修改负载均衡的目的。同样当一个web server挂了，registrator也能感知到，进而通知consul做出响应。</p><p>整个过程不需要运维人工的干预，自动完成。接下来我们找一台机器上实践下这个方案</p><h2 id="3-1-环境"><a href="#3-1-环境" class="headerlink" title="3.1 环境"></a>3.1 环境</h2><table><thead><tr><th>header</th><th>header</th></tr></thead><tbody><tr><td>操作系统</td><td>ubuntu：16.04 x86_64，内核：4.8.0-58-generic</td></tr><tr><td>主机ip</td><td>10.111.152.136</td></tr><tr><td>docker</td><td>Docker version 1.12.6, build 78d1802</td></tr><tr><td>docker-compose</td><td>docker-compose version 1.8.0, build unknown</td></tr></tbody></table><p>首先安装 docker 和 docker-compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install docker docker-compose -y1</span><br></pre></td></tr></table></figure><p>随便找个目录，创建模板文件 docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-1</span><br><span class="line">    MY_HOST: host-1</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line">#load balancer will automatically update the config using consul-template</span><br><span class="line">lb:</span><br><span class="line">  image: liberalman&#x2F;nginx-consul-template:latest</span><br><span class="line">  hostname: lb</span><br><span class="line">  links:</span><br><span class="line">  - consulserver:consul</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80:80&quot;</span><br><span class="line"></span><br><span class="line">consulserver:</span><br><span class="line">  image: progrium&#x2F;consul:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_TAGS: consul servers</span><br><span class="line">  hostname: consulserver</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;8300&quot;</span><br><span class="line">  - &quot;8400&quot;</span><br><span class="line">  - &quot;8500:8500&quot;</span><br><span class="line">  - &quot;53&quot;</span><br><span class="line">  command: -server -ui-dir &#x2F;ui -data-dir &#x2F;tmp&#x2F;consul -bootstrap-expect 1</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator</span><br><span class="line">  links:</span><br><span class="line">  - consulserver:consul</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command: -internal consul:&#x2F;&#x2F;consul:850012345678910111213141516171819202122232425262728293031323334353637383940</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> liberalman/helloworld和liberalman/nginx-consul-template这两个镜像我已经实现了，可以pull下来，大家可以直接使用。想要看他们怎么写的，访问<a href="https://github.com/liberalman">https://github.com/liberalman</a></p></blockquote><h2 id="3-2-启动"><a href="#3-2-启动" class="headerlink" title="3.2 启动"></a>3.2 启动</h2><p>进入模板所在目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up1</span><br></pre></td></tr></table></figure><p>没问题的话就启动成功了，其中的镜像自动被下。访问 <a href="http://localhost/">http://localhost</a> 可以看到一个 web 页面：</p><p>Hello World! I’m host-1 addr:172.17.0.2. I saw that you are 172.17.0.6:35612.</p><p>这个内容实际是后端web服务器helloworld所反馈的页面，它告诉我们它自己的地址是172.17.0.2(docker的内网地址)，它所看到的前端访问过来的ip是172.17.0.6，实际上这个前端是我们的nginx的负载均衡的代理转发的，所以它看到的实际是nginx的地址。</p><p>这里的host-1是我自己设置的物理机的名称，注释不是操作系统那hostname，纯粹是为了在页面上好显示，以及后期多个物理机实验的时候好区分不同物理机器，所以自定义了一个临时名称。它对应docker-compose.yml中的MY_HOST环境变量，会通过docker容器传递到helloworld的运行环境中。</p><p>要停止服务Ctrl + C就行了，如果有些没有停止，则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down1</span><br></pre></td></tr></table></figure><p>如果要在后台运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d1</span><br></pre></td></tr></table></figure><h2 id="3-3-负载均衡"><a href="#3-3-负载均衡" class="headerlink" title="3.3 负载均衡"></a>3.3 负载均衡</h2><p>回到正题，在浏览器上多次刷新，可以看到后端地址没有变化，这是因为只有一个 web 后端服务器。</p><p>如果要测试一下nginx负载均衡的效果，则调整后端为 3 个服务器。先停掉服务，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web&#x3D;3</span><br><span class="line">$ docker-compose up12</span><br></pre></td></tr></table></figure><p>再次访问 <a href="http://localhost/">http://localhost</a> ，多次刷新，可以看到页面的实际目标地址发生了变化，有3个ip轮换。新启动的 web 后端服务器被自动注册，并且 nginx 也把新的路由添加上了：</p><p>Hello World! I’m host-1 addr:172.17.0.2. I saw that you are 172.17.0.6:36710.<br>Hello World! I’m host-1 addr:172.17.0.3. I saw that you are 172.17.0.6:35210.<br>Hello World! I’m host-1 addr:172.17.0.4. I saw that you are 172.17.0.6:58678.</p><h2 id="3-4-查看服务状态"><a href="#3-4-查看服务状态" class="headerlink" title="3.4 查看服务状态"></a>3.4 查看服务状态</h2><p>要查看节点注册状况，到 <a href="http://localhost:8500/">http://localhost:8500</a> 可以看到 consul web ui 的管理端</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170719193700713.jpg" alt="consul ui"></p><p>点击SERVICES这个按钮，列出所有被注册的服务。</p><ul><li>consul server，看到有多个是因为监听多个端口，还有udp端口的。</li><li>my-web-server就是后端web服务，这个名称是要在docker-compose模板中设置SERVICE_80_NAME这个变量的，针对80端口，详情见registrator 用户指导手册<br><a href="https://gliderlabs.com/registrator/latest/user/services/%E3%80%82">https://gliderlabs.com/registrator/latest/user/services/。</a></li><li>nginx-consul-template就是nginx和consul-template的合体服务。</li></ul><p>点击my-web-server，可以看到它右侧的服务节点数，这里只有一个，有多个的话会依次列出</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170719195857208.jpg" alt="host-1 my-web-server"></p><h1 id="4-两台物理机"><a href="#4-两台物理机" class="headerlink" title="4. 两台物理机"></a>4. 两台物理机</h1><p>以上都是在单台物理机上完成的，下面我们要测试下多台物理机情况下，真正分布式的效果。</p><table><thead><tr><th>host name</th><th>real ip</th><th>services</th></tr></thead><tbody><tr><td>host-1</td><td>10.111.152.136</td><td>registrator、helloworld、consul-server、consul-template、nginx</td></tr><tr><td>host-2</td><td>10.111.152.135</td><td>registrator、helloworld</td></tr></tbody></table><p>第一台物理机host-1的docker-compse.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-1</span><br><span class="line">    MY_HOST: host-1</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line">#load balancer will automatically update the config using consul-template</span><br><span class="line">lb:</span><br><span class="line">  image: liberalman&#x2F;nginx-consul-template:latest</span><br><span class="line">  hostname: lb</span><br><span class="line">  links:</span><br><span class="line">  - consulserver:consul</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80:80&quot;</span><br><span class="line"></span><br><span class="line">consulserver:</span><br><span class="line">  image: progrium&#x2F;consul:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_TAGS: consul servers</span><br><span class="line">  hostname: consulserver-node1</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;8300&quot;</span><br><span class="line">  - &quot;8400&quot;</span><br><span class="line">  - &quot;8500:8500&quot;</span><br><span class="line">  - &quot;53&quot;</span><br><span class="line">  command: -server -ui-dir &#x2F;ui -data-dir &#x2F;tmp&#x2F;consul -bootstrap-expect 1</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator-1</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command: -ip&#x3D;10.111.152.136 consul:&#x2F;&#x2F;10.111.152.136:85001234567891011121314151617181920212223242526272829303132333435363738</span><br></pre></td></tr></table></figure><p>我们第二台机器host-2的yml文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-2</span><br><span class="line">    MY_HOST: host-2</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator-2</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command: -ip 10.111.152.135 consul:&#x2F;&#x2F;10.111.152.136:85001234567891011121314151617</span><br></pre></td></tr></table></figure><p>这是我们将MY_HOST改为host-2了，以便在页面查看的时候可以直观看到。另外的重要改变就是registrator的启动参数，我们去掉了上报docker内部ip的-internal，转而使用了外部ip，将自己本机的ip 10.111.152.135上报了。同时要访问的consul服务器参数配置成host-1的ip地址 10.111.152.136。还有registrator的hostname要和第一台机器的区别开，我改成registrator-2了，这样在注册到consul中的时候，不会覆盖掉。hostname一样consul无法区分是哪个机器的，这样两个机器的registrator会相互覆盖。</p><p>host-1启动方式不变，我们现在到host-2上启动，看看效果，是否新节点被加上了。</p><p>Hello World! I’m host-1 addr:172.17.0.2. I saw that you are 172.17.0.5:41464.</p><p>Hello World! I’m host-2 addr:172.17.0.2. I saw that you are 10.111.152.136:41578.</p><p>刷新两次，发现一会儿是host-1，一会儿是host-2，说明我们host-2物理机上的服务被添加进来了，并且被nginx路由到了。</p><p>同时consul ui，看到新的节点果然被添加上了</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170719195631318.jpg" alt="host-2 my-web-server"></p><p>不过发现个问题，如果在host-2上先将registrator关闭，再关闭host-2上的后端web，我们的consul服务器可以感知到，但是那个consul ui界面没更新，依然显示两个节点。</p><h1 id="5-Consul-Cluster"><a href="#5-Consul-Cluster" class="headerlink" title="5. Consul Cluster"></a>5. Consul Cluster</h1><p>以上我们的实验其实是个单点的consul服务，点击consul ui页面的NODES按钮可以看到</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170719191250809.jpg" alt="single node"></p><p>只有一个consul server节点，也就是在我们host-1上跑的节点consulserver，另外一个物理机上没有运行consul节点。一旦它挂了整个服务注册功能就歇菜了。既然是分布式，一定要发挥集群的优势以解决单点问题。所以，我们要建立Consul Cluster。</p><p>在Consul方案中，每个提供服务的节点上都要部署和运行一个agent，所有运行Consul agent节点的集合构成Consul Cluster。</p><p>Consul agent有两种运行模式：Server和Client。这里的Server和Client只是Consul集群层面的区分，与搭建在Cluster之上的应用服务无关。</p><p>以Server模式运行的Consul agent节点用于维护Consul集群的状态，官方建议每个Consul Cluster至少有3个或以上的运行在Server mode的Agent，Client节点不限。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/96681-82229e2c44b6e6ba.png" alt="这里写图片描述"></p><p>每个数据中心的Consul Cluster都会在运行于server模式下的agent节点中选出一个Leader节点，这个选举过程通过Consul实现的raft协议保证，多个 server节点上的Consul数据信息是强一致的。处于client mode的Consul agent节点比较简单，无状态，仅仅负责将请求转发给Server agent节点。</p><p>我们这次的架构有些调整，绘制一个服务器的逻辑上的部署图来说明下</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170727170455270.jpg" alt="Services register adn find, consul cluster"></p><p>这是一张逻辑上服务部署的图，我们找3台机器来实验。每台机器上部署几个web server，一个registrator和一个consul client，这是基本需求。另外再建立一个consul cluster集群，用来当我们的注册中心。当web server启动后，被registrator感知，进而将注册信息发送给consul client，consul client则访问注册中心的leader节点，上报新加入的服务信息。consul cluster会将新的服务信息推送给已经到它这里订阅了服务消息的consul-template，consul-template再去修改和自己同一台机器上的nginx，以达到动态调整负载均衡的目的。</p><blockquote><p>注意：由于资源有限，我们没有单独使用机器去搭建consul集群，所以图中的consul client和consul server节点其实是同一个节点，因为server模式同时可以提供client的功能嘛。那个consul cluster集群其实是分布到3个host中建立起来的，我们就在3个host中分别启动一个consul进程，每个都同时担任server和client的功能。</p></blockquote><h2 id="5-1-配置"><a href="#5-1-配置" class="headerlink" title="5.1 配置"></a>5.1 配置</h2><table><thead><tr><th>host name</th><th>real ip</th><th>services</th><th>note</th></tr></thead><tbody><tr><td>host-1</td><td>10.111.152.136</td><td>registrator、helloworld*n、consul-server、consul-template、nginx</td><td>放置consol web ui和nginx负载均衡</td></tr><tr><td>host-2</td><td>10.111.152.135</td><td>registrator、helloworld*n、consul-server</td><td></td></tr><tr><td>host-3</td><td>10.111.152.168</td><td>registrator、helloworld*n、consul-server</td><td></td></tr></tbody></table><p>host-1作为运行负载均衡的机器，部署consul-template和nginx。每个机器上都部署了consul-server节点，也就是我们有3个节点，接下来就研究这3个节点是如何选举leader的。</p><p><strong>host-1的docker-compose.yml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-1</span><br><span class="line">    MY_HOST: host-1</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line">#load balancer will automatically update the config using consul-template</span><br><span class="line">lb:</span><br><span class="line">  image: liberalman&#x2F;nginx-consul-template:latest</span><br><span class="line">  hostname: lb</span><br><span class="line">  links:</span><br><span class="line">  - consulserver:consul</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80:80&quot;</span><br><span class="line"></span><br><span class="line">consulserver:</span><br><span class="line">  image: progrium&#x2F;consul:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_TAGS: consul servers</span><br><span class="line">  hostname: consulserver-node1</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;8300:8300&quot;</span><br><span class="line">  - &quot;8301:8301&quot;</span><br><span class="line">  - &quot;8301:8301&#x2F;udp&quot;</span><br><span class="line">  - &quot;8302:8302&quot;</span><br><span class="line">  - &quot;8302:8302&#x2F;udp&quot;</span><br><span class="line">  - &quot;8400:8400&quot;</span><br><span class="line">  - &quot;8500:8500&quot;</span><br><span class="line">  - &quot;53:53&#x2F;udp&quot;</span><br><span class="line">  command: -server -ui-dir &#x2F;ui -advertise 10.111.152.136 -bootstrap-expect 3</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator-1</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command: -ip 10.111.152.136 consul:&#x2F;&#x2F;10.111.152.136:8500</span><br></pre></td></tr></table></figure><p>参数解释下</p><ul><li>hostname，将来consul节点都靠这个来标识了，所以每个物理机上的节点名称都要区别开，以免冲突。</li><li>-bootstrap-expect 3，这个参数的作用是，当consulserver-node1节点启动之后，等待另外两个节点的加入，3个节点聚齐后，之后才开始选举leader。</li><li>-advertise 10.111.152.136，如果要让节点在WAN网络中被发现，就要配置这个参数，暴露出外网ip。如果只在LAN中被发现，就不用配置这个了，默认绑定内网ip。</li><li>-ui-dir /ui，这个配置是指定当前节点支持consul ui的web页面。</li></ul><p><strong>host-2的docker-compose.yml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-2</span><br><span class="line">    MY_HOST: host-2</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line">consulserver:</span><br><span class="line">  image: progrium&#x2F;consul:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_TAGS: consul servers</span><br><span class="line">  hostname: consulserver-node2</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;8300:8300&quot;</span><br><span class="line">  - &quot;8301:8301&quot;</span><br><span class="line">  - &quot;8301:8301&#x2F;udp&quot;</span><br><span class="line">  - &quot;8302:8302&quot;</span><br><span class="line">  - &quot;8302:8302&#x2F;udp&quot;</span><br><span class="line">  - &quot;8400:8400&quot;</span><br><span class="line">  - &quot;8500:8500&quot;</span><br><span class="line">  - &quot;53:53&#x2F;udp&quot;</span><br><span class="line">  command: -server -advertise 10.111.152.135  -join 10.111.152.136</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator-2</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command:  -ip 10.111.152.135 consul:&#x2F;&#x2F;10.111.152.136:8500</span><br></pre></td></tr></table></figure><p>与host-1不同的是，host-2使用了参数<br>-join 10.111.152.136 意思是把本节点加入到10.111.152.136这个ip的节点中，这是consulserver-node1的地址。我们上一个host的配置中表明，consulserver-node1这个节点启动后，会等待另外两个节点的加入，我们这里就是加入它。</p><p><strong>host-3的docker-compose.yml文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#backend web application, scale this with docker-compose scale web&#x3D;3</span><br><span class="line">web:</span><br><span class="line">  image: liberalman&#x2F;helloworld:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_80_NAME: my-web-server</span><br><span class="line">    SERVICE_TAGS: backend-3</span><br><span class="line">    MY_HOST: host-3</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;80&quot;</span><br><span class="line"></span><br><span class="line">consulserver:</span><br><span class="line">  image: progrium&#x2F;consul:latest</span><br><span class="line">  environment:</span><br><span class="line">    SERVICE_TAGS: consul servers</span><br><span class="line">  hostname: consulserver-node3</span><br><span class="line">  ports:</span><br><span class="line">  - &quot;8300:8300&quot;</span><br><span class="line">  - &quot;8301:8301&quot;</span><br><span class="line">  - &quot;8301:8301&#x2F;udp&quot;</span><br><span class="line">  - &quot;8302:8302&quot;</span><br><span class="line">  - &quot;8302:8302&#x2F;udp&quot;</span><br><span class="line">  - &quot;8400:8400&quot;</span><br><span class="line">  - &quot;8500:8500&quot;</span><br><span class="line">  - &quot;53:53&#x2F;udp&quot;</span><br><span class="line">  command: -server -advertise 10.111.152.168 -join 10.111.152.136</span><br><span class="line"></span><br><span class="line"># listen on local docker sock to register the container with public ports to the consul service</span><br><span class="line">registrator:</span><br><span class="line">  image: gliderlabs&#x2F;registrator:master</span><br><span class="line">  hostname: registrator-3</span><br><span class="line">  volumes:</span><br><span class="line">  - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock&quot;</span><br><span class="line">  command: -ip 10.111.152.168 consul:&#x2F;&#x2F;10.111.152.136:8500</span><br></pre></td></tr></table></figure><blockquote><p>注意：到这里你可能有疑问，上文的3个节点都是server节点，那client节点哪里去了，没有client节点怎么访问集群啊？我们和集群交互可是访问client，client再转发到server节点的。</p><p>我们前篇也提到过，其实每个server节点，本身就具有client的功能，只是多了一些把所有的信息持久化的本地以及选举leader的功能呢，这样遇到故障，信息是可以被保留的。</p><p>所以，这里我们每个主机上部署registrator的时候，配置的访问consul服务的地址也是就近访问本机上的consul节点，把它当成一个consul client访问就可以了。当然也可以单独部署一个client节点，只是我们至少要保证有3个server节点，才能完成leader选举，如果再多一台机器我会考虑专门加一个client节点。</p></blockquote><h2 id="5-2-启动"><a href="#5-2-启动" class="headerlink" title="5.2 启动"></a>5.2 启动</h2><p>依次在host-1、host-2和host-3上启动3个节点。注意执行docker-compose up之后，不要关闭终端，让它一直打印，后续我们还要在这里看日志，别的操作都转到新开终端上执行。访问 <a href="http://10.111.152.136:8500/ui/#/dc1/nodes">http://10.111.152.136:8500/ui/#/dc1/nodes</a> 看到节点都被添加上了</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20170727151145406.jpg" alt="这里写图片描述"></p><p>除了查看ui界面外，也可以使用命令行看看有哪些服务注册了，在新终端下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">~# curl 10.111.152.136:8500&#x2F;v1&#x2F;catalog&#x2F;services|jq .</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   308  100   308    0     0  54892      0 --:--:-- --:--:-- --:--:-- 61600</span><br><span class="line">&#123;</span><br><span class="line">  &quot;consul&quot;: [],</span><br><span class="line">  &quot;consul-53&quot;: [</span><br><span class="line">    &quot;consul servers&quot;,</span><br><span class="line">    &quot;udp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;consul-8300&quot;: [</span><br><span class="line">    &quot;consul servers&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;consul-8301&quot;: [</span><br><span class="line">    &quot;consul servers&quot;,</span><br><span class="line">    &quot;udp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;consul-8302&quot;: [</span><br><span class="line">    &quot;consul servers&quot;,</span><br><span class="line">    &quot;udp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;consul-8400&quot;: [</span><br><span class="line">    &quot;consul servers&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;consul-8500&quot;: [</span><br><span class="line">    &quot;consul servers&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;my-web-server&quot;: [</span><br><span class="line">    &quot;backend-1&quot;,</span><br><span class="line">    &quot;backend-2&quot;,</span><br><span class="line">    &quot;backend-3&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;nginx-consul-template&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://10.111.152.136/">http://10.111.152.136</a> 查看nginx负载均衡的效果，依次刷新，得到</p><p>Hello World! I’m host-1 addr:172.17.0.2. I saw that you are 172.17.0.1:49728.<br>Hello World! I’m host-2 addr:172.17.0.3. I saw that you are 10.111.152.136:54640.<br>Hello World! I’m host-3 addr:172.17.0.3. I saw that you are 10.111.152.136:58660.</p><p>OK，看起来一切正常。那我们现在分析下到底哪个节点是leader，有节点退出会怎样？</p><p>现在新开一个终端，在host-1上，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f name&#x3D;consul1</span><br></pre></td></tr></table></figure><p>查到consul节点的容器id是4364cd41f2ba。登录这个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 4364cd41f2ba &#x2F;bin&#x2F;sh1</span><br></pre></td></tr></table></figure><p>然后就进入容器的操作系统环境了，在该环境下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; # consul members</span><br><span class="line">Node                Address              Status  Type    Build  Protocol  DC</span><br><span class="line">consulserver-node3  10.111.152.168:8301  alive   server  0.5.2  2         dc1</span><br><span class="line">consulserver-node1  10.111.152.136:8301  alive   server  0.5.2  2         dc1</span><br><span class="line">consulserver-node2  10.111.152.135:8301  alive   server  0.5.2  2         dc112345</span><br></pre></td></tr></table></figure><p>一目了然的看到了我们的3个consul节点。查看当前节点信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; # consul info</span><br><span class="line">......</span><br><span class="line">consul:</span><br><span class="line">        bootstrap &#x3D; false</span><br><span class="line">        known_datacenters &#x3D; 1</span><br><span class="line">        leader &#x3D; false</span><br><span class="line">        server &#x3D; true</span><br><span class="line">raft:</span><br><span class="line">        applied_index &#x3D; 192</span><br><span class="line">        commit_index &#x3D; 192</span><br><span class="line">        fsm_pending &#x3D; 0</span><br><span class="line">        last_contact &#x3D; 15.960533ms</span><br><span class="line">        last_log_index &#x3D; 192</span><br><span class="line">        last_log_term &#x3D; 2</span><br><span class="line">        last_snapshot_index &#x3D; 0</span><br><span class="line">        last_snapshot_term &#x3D; 0</span><br><span class="line">        num_peers &#x3D; 2</span><br><span class="line">        state &#x3D; Follower</span><br><span class="line">        term &#x3D; 2</span><br><span class="line">......1234567891011121314151617181920</span><br></pre></td></tr></table></figure><p>输出信息很多，省略掉，只给出重要的。server = true确实是server节点。看到leader=false，说明这个节点不是leader。state = Follower，看来确实是个Follower节点哦。last_contact = 15.960533ms心跳剩余时间，term = 2说是第二个term，已经选过2回了。</p><p>执行上述命令的同时，由于之前在host-1上执行docker-compose up命令的时候，日志是直接输出到屏幕上的，我们此时可以节点1输出的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 05:08:20 [INFO] agent.rpc: Accepted client: 127.0.0.1:47084</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 05:08:24 [INFO] agent.rpc: Accepted client: 127.0.0.1:47086</span><br><span class="line">......123</span><br></pre></td></tr></table></figure><p>我们刚才执行的命令都是客户端发到当前consul server上的。</p><p>同样的方式，在节点在conserver-node3上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">consul:</span><br><span class="line">        bootstrap &#x3D; false</span><br><span class="line">        known_datacenters &#x3D; 1</span><br><span class="line">        leader &#x3D; true</span><br><span class="line">        server &#x3D; true12345</span><br></pre></td></tr></table></figure><p>原来leader是节点3.</p><h2 id="5-3-去掉节点"><a href="#5-3-去掉节点" class="headerlink" title="5.3 去掉节点"></a>5.3 去掉节点</h2><p>让一个节点挂掉，看看会发生什么。</p><h3 id="5-3-1-关闭一个节点"><a href="#5-3-1-关闭一个节点" class="headerlink" title="5.3.1 关闭一个节点"></a>5.3.1 关闭一个节点</h3><p>在host-1上新开终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 4364cd41f2ba1</span><br></pre></td></tr></table></figure><p>看到host-1的日志滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gocode_consulserver_1 exited with code 1</span><br><span class="line">lb_1            | 2017&#x2F;07&#x2F;26 06:02:51.211894 [WARN] (view) health.service(my-web-server|passing): Get http:&#x2F;&#x2F;consul:8500&#x2F;v1&#x2F;health&#x2F;service&#x2F;my-web-server?index&#x3D;40&amp;passing&#x3D;1&amp;stale&#x3D;&amp;wait&#x3D;60000ms: dial tcp 172.17.0.4:8500: i&#x2F;o timeout (retry attempt 1 after &quot;250ms&quot;)</span><br><span class="line">ex&#x3D;40&amp;passing&#x3D;1&amp;stale&#x3D;&amp;wait&#x3D;60000ms: dial tcp 172.17.0.4:8500: i&#x2F;o timeout (retry attempt 1 after &quot;250ms&quot;)</span><br><span class="line">lb_1            | 2017&#x2F;07&#x2F;26 06:03:10.099572 [WARN] (view) health.service(my-web-server|passing): Get http:&#x2F;&#x2F;consul:8500&#x2F;v1&#x2F;health&#x2F;service&#x2F;my-web-server?index&#x3D;40&amp;passing&#x3D;1&amp;stale&#x3D;&amp;wait&#x3D;60000ms: dial tcp 172.17.0.4:8500: getsockopt: no route to host (retry attempt 2 after &quot;500ms&quot;)</span><br><span class="line">......12345</span><br></pre></td></tr></table></figure><p>lb_1会不断的打印重试到<a href="http://consul:8500/">http://consul:8500</a>的健康检查。</p><p>不过此时访问 <a href="http://10.111.152.136/">http://10.111.152.136</a> 发现nginx并没有被破坏，还是可以正常路由到后端三个节点的，后端的web server也正常可用。没有受到一个consul server节点挂掉的影响。</p><p>只是consul web ui无法访问了，<a href="http://10.111.152.136:8500/ui/#/dc1/services">http://10.111.152.136:8500/ui/#/dc1/services</a> 因为刚好把这个节点停掉了。</p><p>另外两个节点的日志情况</p><p>host-2机器上，consulserver-node2节点，也是一个Follower状态的节点上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:24 [INFO] memberlist: Suspect consulserver-node1 has failed, no acks received</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] memberlist: Suspect consulserver-node1 has failed, no acks received</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] memberlist: Marking consulserver-node1 as failed, suspect timeout reached</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] serf: EventMemberFailed: consulserver-node1 10.111.152.136</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] consul: removing server consulserver-node1 (Addr: 10.111.152.136:8300) (DC: dc1)</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:03:19 [INFO] serf: attempting reconnect to consulserver-node1 10.111.152.136:8301</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:03:49 [INFO] serf: attempting reconnect to consulserver-node1 10.111.152.136:8301</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:05:19 [INFO] serf: attempting reconnect to consulserver-node1 10.111.152.136:8301</span><br><span class="line">......123456789</span><br></pre></td></tr></table></figure><p>每隔30s尝试重连node1.</p><p>host-3机器上，consulserver-node3节点，我们的leader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [INFO] raft: aborting pipeline replication to peer 10.111.152.136:8300</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [ERR] raft: Failed to AppendEntries to 10.111.152.136:8300: EOF</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [ERR] raft: Failed to heartbeat to 10.111.152.136:8300: dial tcp 10.111.152.136:8300: connection refused</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [ERR] raft: Failed to AppendEntries to 10.111.152.136:8300: dial tcp 10.111.152.136:8300: connection refused</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [ERR] raft: Failed to heartbeat to 10.111.152.136:8300: dial tcp 10.111.152.136:8300: connection refused</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:21 [ERR] raft: Failed to AppendEntries to 10.111.152.136:8300: dial </span><br><span class="line">......1234567</span><br></pre></td></tr></table></figure><p>也在尝试重连，而且它间隔2s就尝试一次，频率上更快。由于一直连不上，后来干脆去掉node1节点了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] memberlist: Suspect consulserver-node1 has failed, no acks received</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] memberlist: Marking consulserver-node1 as failed, suspect timeout reached</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] serf: EventMemberFailed: consulserver-node1 10.111.152.136</span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:02:27 [INFO] consul: removing server consulserver-node1 (Addr: 10.111.152.136:8300) (DC: dc1)1234</span><br></pre></td></tr></table></figure><p>不过虽然去掉了node1，但是其他节点依然没有放弃尝试重连node1。重连的操作一直都在继续中。</p><h3 id="5-3-2-恢复节点"><a href="#5-3-2-恢复节点" class="headerlink" title="5.3.2 恢复节点"></a>5.3.2 恢复节点</h3><p>把刚才在host-1上关闭的容器重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 4364cd41f2ba1</span><br></pre></td></tr></table></figure><p>看看3个机器都会输出什么。</p><p>host-1上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  | &#x3D;&#x3D;&gt; Starting raft data migration...</span><br><span class="line">consulserver_1  | &#x3D;&#x3D;&gt; Starting Consul agent...</span><br><span class="line">consulserver_1  | &#x3D;&#x3D;&gt; Starting Consul agent RPC...</span><br><span class="line">consulserver_1  | &#x3D;&#x3D;&gt; Consul agent running!</span><br><span class="line">consulserver_1  |          Node name: &#39;consulserver-node1&#39;</span><br><span class="line">consulserver_1  |         Datacenter: &#39;dc1&#39;</span><br><span class="line">consulserver_1  |             Server: true (bootstrap: false)</span><br><span class="line">consulserver_1  |        Client Addr: 0.0.0.0 (HTTP: 8500, HTTPS: -1, DNS: 53, RPC: 8400)</span><br><span class="line">consulserver_1  |       Cluster Addr: 10.111.152.136 (LAN: 8301, WAN: 8302)</span><br><span class="line">consulserver_1  |     Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: false</span><br><span class="line">consulserver_1  |              Atlas: &lt;disabled&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:23:11 [INFO] consul: New leader elected: consulserver-node2</span><br><span class="line">......12345678910111213141516</span><br></pre></td></tr></table></figure><p>consulserver-node1节点又重新启动了，并且整个集群选举了新的leader上来：consulserver-node2</p><p>host-2上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:23:05 [INFO] consul: adding server consulserver-node1 (Addr: 10.111.152.136:8300) (DC: dc1)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:23:11 [INFO] consul: New leader elected: consulserver-node2</span><br><span class="line">......123456</span><br></pre></td></tr></table></figure><p>感知到了consulserver-node1的复活，并且也参与了选举，选出新leader，是自己，哈哈。</p><p>host-3上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:23:05 [INFO] consul: adding server consulserver-node1 (Addr: 10.111.152.136:8300) (DC: dc1)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">consulserver_1  |     2017&#x2F;07&#x2F;26 06:23:11 [INFO] consul: New leader elected: consulserver-node2</span><br><span class="line">......123456</span><br></pre></td></tr></table></figure><p>同样感知到了consulserver-node1的复活，并且也参与了选举，选出新leader。</p><p>此时ngxin依然没受影响，web服务正常。而且consul web ui也可以正常访问了。一切都恢复如初。具体这3个节点是如何选举leader和处理节点的退出和重入的</p><ul><li>原文<a href="https://blog.csdn.net/socho/article/details/75434733">https://blog.csdn.net/socho/article/details/75434733</a></li></ul><ul><li>[1] 引用 <a href="http://tonybai.com/2015/07/06/implement-distributed-services-registery-and-discovery-by-consul/">http://tonybai.com/2015/07/06/implement-distributed-services-registery-and-discovery-by-consul/</a></li><li>[2] 引用 <a href="http://alice.blog.51cto.com/707092/1896078">http://alice.blog.51cto.com/707092/1896078</a></li></ul><h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><p>文中架构图都是用graphviz绘制的，附上图源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;</span><br><span class="line">    size&#x3D;&quot;6,6&quot;;</span><br><span class="line">    label&#x3D;&quot;services register&quot;</span><br><span class="line">    node [colorscheme&#x3D;paired12, color&#x3D;1, style&#x3D;filled];</span><br><span class="line">    register_center    [label&#x3D;&quot;注册中心&quot;, color&#x3D;5, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    consumer    [label&#x3D;&quot;服务消费者&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    service    [label&#x3D;&quot;服务提供者&quot;, color&#x3D;2, shape&#x3D;&quot;record&quot;]</span><br><span class="line"></span><br><span class="line">    consumer -&gt; register_center [label&#x3D;&quot;2.订阅&quot;]</span><br><span class="line">    register_center -&gt; consumer [label&#x3D;&quot;5.通知&quot; style&#x3D;dashed]</span><br><span class="line"></span><br><span class="line">    consumer -&gt; service [label&#x3D;&quot;4.调用&quot;]</span><br><span class="line">    consumer -&gt; consumer [label&#x3D;&quot;3.缓存&quot; style&#x3D;dashed]</span><br><span class="line">    service -&gt; register_center [label&#x3D;&quot;1.注册&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">digraph G &#123;</span><br><span class="line">    size&#x3D;&quot;6,6&quot;;</span><br><span class="line">    label&#x3D;&quot;load balance web servers&quot;</span><br><span class="line">    node [colorscheme&#x3D;paired12, color&#x3D;1, style&#x3D;filled];</span><br><span class="line">    nginx    [label&#x3D;&quot;nginx&quot;, color&#x3D;3, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_1    [label&#x3D;&quot;my_web_server_1&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_2    [label&#x3D;&quot;my_web_server_2&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_3    [label&#x3D;&quot;my_web_server_3&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line"></span><br><span class="line">    &#123;Client1 Client2 Client3&#125; -&gt; nginx [label&#x3D;&quot;访问&quot;]</span><br><span class="line"></span><br><span class="line">    nginx -&gt; &#123;my_web_server_1 my_web_server_2 my_web_server_3&#125; [label&#x3D;&quot;转发&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">digraph G &#123;</span><br><span class="line">    size&#x3D;&quot;6,6&quot;;</span><br><span class="line">    label&#x3D;&quot;Services register and find&quot;</span><br><span class="line">    node [colorscheme&#x3D;paired12, color&#x3D;1, style&#x3D;filled];</span><br><span class="line">    consul     [label&#x3D;&quot;consul&quot;, color&#x3D;1]</span><br><span class="line">    consul_template     [label&#x3D;&quot;consul_template&quot;, color&#x3D;2]</span><br><span class="line">    nginx    [label&#x3D;&quot;nginx&quot;, color&#x3D;3, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    registrator    [label&#x3D;&quot;registrator&quot;, color&#x3D;5]</span><br><span class="line">    my_web_server_1    [label&#x3D;&quot;my_web_server_1&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_2    [label&#x3D;&quot;my_web_server_2&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_3    [label&#x3D;&quot;my_web_server_3&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line"></span><br><span class="line">    &#123;Client1 Client2 Client3&#125; -&gt; nginx [label&#x3D;&quot;访问&quot;]</span><br><span class="line">    nginx -&gt; &#123;my_web_server_1 my_web_server_2 my_web_server_3&#125; [label&#x3D;&quot;转发&quot;]</span><br><span class="line">    &#123;my_web_server_1 my_web_server_2 my_web_server_3&#125; -&gt; registrator [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;监控&quot;]</span><br><span class="line">    registrator -&gt; consul [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;注册&quot;]</span><br><span class="line">    consul -&gt; consul_template [dir&#x3D;both color&#x3D;red style&#x3D;&quot;dashed&quot; label&#x3D;&quot;订阅服务&quot;]</span><br><span class="line"></span><br><span class="line">    consul_template -&gt; nginx [color&#x3D;red,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;配置更新&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">digraph G &#123;</span><br><span class="line">    size&#x3D;&quot;6,6&quot;;</span><br><span class="line">    label&#x3D;&quot;Services register and find, consul cluster&quot;</span><br><span class="line">    node [colorscheme&#x3D;paired12, color&#x3D;1, style&#x3D;filled];</span><br><span class="line">    consul_node1     [label&#x3D;&quot;consul_node1(leader)&quot;, color&#x3D;7]</span><br><span class="line">    consul_node2     [label&#x3D;&quot;consul_node2&quot;, color&#x3D;7]</span><br><span class="line">    consul_node3     [label&#x3D;&quot;consul_ndoe3&quot;, color&#x3D;7]</span><br><span class="line">    consul_client1     [label&#x3D;&quot;consul_client1&quot;, color&#x3D;7]</span><br><span class="line">    consul_client2     [label&#x3D;&quot;consul_client2&quot;, color&#x3D;7]</span><br><span class="line">    consul_client3     [label&#x3D;&quot;consul_client3&quot;, color&#x3D;7]</span><br><span class="line">    consul_template     [label&#x3D;&quot;consul_template&quot;, color&#x3D;2]</span><br><span class="line">    nginx    [label&#x3D;&quot;nginx&quot;, color&#x3D;3, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    registrator_1    [label&#x3D;&quot;registrator_1&quot;, color&#x3D;5]</span><br><span class="line">    registrator_2    [label&#x3D;&quot;registrator_2&quot;, color&#x3D;5]</span><br><span class="line">    registrator_3    [label&#x3D;&quot;registrator_3&quot;, color&#x3D;5]</span><br><span class="line">    my_web_server_1    [label&#x3D;&quot;my_web_server_1&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_2    [label&#x3D;&quot;my_web_server_2&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_3    [label&#x3D;&quot;my_web_server_3&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_4    [label&#x3D;&quot;my_web_server_4&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_5    [label&#x3D;&quot;my_web_server_5&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line">    my_web_server_6    [label&#x3D;&quot;my_web_server_6&quot;, color&#x3D;4, shape&#x3D;&quot;record&quot;]</span><br><span class="line"></span><br><span class="line">    &#123;Client1 Client2 Client3&#125; -&gt; nginx [label&#x3D;&quot;访问&quot;]</span><br><span class="line">    nginx -&gt; &#123;my_web_server_1 my_web_server_2 my_web_server_3 my_web_server_4 my_web_server_5 my_web_server_6&#125; [label&#x3D;&quot;转发&quot;]</span><br><span class="line">    &#123;my_web_server_1 my_web_server_2&#125; -&gt; registrator_1 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;监控&quot;]</span><br><span class="line">    &#123;my_web_server_3 my_web_server_4&#125; -&gt; registrator_2 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;监控&quot;]</span><br><span class="line">    &#123;my_web_server_5 my_web_server_6&#125; -&gt; registrator_3 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;监控&quot;]</span><br><span class="line">    registrator_1 -&gt; consul_client1 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;注册&quot;]</span><br><span class="line">    registrator_2 -&gt; consul_client2 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;注册&quot;]</span><br><span class="line">    registrator_3 -&gt; consul_client3 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;注册&quot;]</span><br><span class="line">    &#123;consul_client1 consul_client2 consul_client3&#125; -&gt; consul_node1 [color&#x3D;&quot;red&quot;,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;注册&quot;]</span><br><span class="line">    consul_node1 -&gt; consul_node2 -&gt; consul_node3 [dir&#x3D;both style&#x3D;dashed color&#x3D;blue]</span><br><span class="line">    consul_node1 -&gt; consul_template [dir&#x3D;both color&#x3D;red style&#x3D;&quot;dashed&quot; label&#x3D;&quot;订阅服务&quot;]</span><br><span class="line"></span><br><span class="line">    consul_template -&gt; nginx [color&#x3D;red,style&#x3D;&quot;dashed&quot;,label&#x3D;&quot;配置更新&quot;]</span><br><span class="line"></span><br><span class="line">    subgraph cluster_host_1 &#123;</span><br><span class="line">        label&#x3D;&quot;host_1&quot;</span><br><span class="line">        my_web_server_1</span><br><span class="line">        my_web_server_2</span><br><span class="line">        registrator_1</span><br><span class="line">        consul_client1</span><br><span class="line">    &#125;</span><br><span class="line">    subgraph cluster_host_2 &#123;</span><br><span class="line">        label&#x3D;&quot;host_2&quot;</span><br><span class="line">        my_web_server_3</span><br><span class="line">        my_web_server_4</span><br><span class="line">        registrator_2</span><br><span class="line">        consul_client2</span><br><span class="line">    &#125;</span><br><span class="line">    subgraph cluster_host_3 &#123;</span><br><span class="line">        label&#x3D;&quot;host_3&quot;</span><br><span class="line">        my_web_server_5</span><br><span class="line">        my_web_server_6</span><br><span class="line">        registrator_3</span><br><span class="line">        consul_client3</span><br><span class="line">    &#125;</span><br><span class="line">    subgraph cluster_clu &#123;</span><br><span class="line">        label&#x3D;&quot;consul cluster&quot;</span><br><span class="line">        consul_node1</span><br><span class="line">        consul_node2</span><br><span class="line">        consul_node3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Registrator + Consul + Consul-template + nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell从入门到精通</title>
      <link href="/posts/15965/"/>
      <url>/posts/15965/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/lizhenliang/1881437">第一章 Shell基础知识</a></p><p><a href="https://blog.51cto.com/lizhenliang/1881836">第二章 Shell字符串处理之${}</a></p><p><a href="https://blog.51cto.com/lizhenliang/1882219">第三章 Shell表达式与运算符</a></p><p><a href="https://blog.51cto.com/lizhenliang/1882571">第四章 Shell流程控制</a></p><p><a href="https://blog.51cto.com/lizhenliang/1882962">第五章 Shell函数与数组</a></p><p><a href="https://blog.51cto.com/lizhenliang/1883937">第六章 Shell正则表达式</a></p><p><a href="https://blog.51cto.com/lizhenliang/1889166">第七章 Shell文本处理三剑客之grep</a></p><p><a href="https://blog.51cto.com/lizhenliang/1889195">第七章 Shell文本处理三剑客之sed 荐</a></p><p><a href="https://blog.51cto.com/lizhenliang/1892112">第七章 Shell文本处理三剑客之awk 荐</a></p><p><a href="https://blog.51cto.com/lizhenliang/1897997">第八章 Shell标准输入、输出和错误</a></p><p><a href="https://blog.51cto.com/lizhenliang/1899347">第九章 Shell信号发送与捕捉</a></p><p><a href="https://blog.51cto.com/lizhenliang/1902323">第十章 Shell编程时常用的系统文件</a></p><p><a href="https://blog.51cto.com/lizhenliang/1904786">第十一章 Shell常用命令与工具（一）</a></p><p><a href="https://blog.51cto.com/lizhenliang/1906324">第十一章 Shell常用命令与工具（二） 荐</a></p><p><a href="https://blog.51cto.com/lizhenliang/1929044">第十二章 Shell脚本编写及常见面试题（一）</a></p><p><a href="https://blog.51cto.com/lizhenliang/1929770">第十二章 Shell脚本编写及常见面试题（二）</a></p><p><a href="https://blog.51cto.com/lizhenliang/1930804">第十二章 Shell脚本编写及常见面试题（三）</a></p><p>原文-李振良</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制安装kubernetes落地实践</title>
      <link href="/posts/29675/"/>
      <url>/posts/29675/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制安装kubernetes（一）-环境准备及etcd组件安装及etcd管理软件etcdkeeper安装"><a href="#二进制安装kubernetes（一）-环境准备及etcd组件安装及etcd管理软件etcdkeeper安装" class="headerlink" title="二进制安装kubernetes（一） 环境准备及etcd组件安装及etcd管理软件etcdkeeper安装"></a>二进制安装kubernetes（一） 环境准备及etcd组件安装及etcd管理软件etcdkeeper安装</h1><p>实验环境：</p><p>架构图：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111143911357-804943981.png" alt="img"></p><p>主机环境：</p><p>操作系统：因docker对内核需要，本次部署操作系统全部采用centos7.6(需要内核3.8以上)</p><p>VM ：2C 2G 50G * 5 PS:因后面实验需要向k8s交付java服务，所以运算节点直接4c8g，如果不交付服务，全部2c2g即可。</p><p>IP及服务规划：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111151053586-610713573.png" alt="img"></p><p> 安装步骤：</p><p>所有机器上安装epel源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#yum -y install epel-release</span><br></pre></td></tr></table></figure><p>关闭防火墙以及selinux：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># systemctl stop firewalld</span><br><span class="line"># systemctl disable firewalld</span><br><span class="line">#setenforce 1</span><br><span class="line">vi &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">SELINUX&#x3D;disabled </span><br></pre></td></tr></table></figure><p>hdss7-11上安装bind9：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#yum -y install wget net-tools telnet tree nmap sysstat lrzsz dos2unix bind-utils -y</span><br><span class="line">#yum install bind -y</span><br></pre></td></tr></table></figure><p>配置bind：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#vi &#x2F;etc&#x2F;named.conf</span><br></pre></td></tr></table></figure><p>修改以下配置项：</p><p>注意此服务对配置文件格式要求比较严格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen-on port 53 &#123; 127.0.0.1; &#125;; ----&gt; listen-on port 53 &#123; 10.4.7.11; &#125;; #将127.0.0.1修改为当前主机IP</span><br><span class="line">allow-query     &#123; localhost; &#125;; ----&gt; allow-query &#123; any; &#125;; #为哪些服务器提供解析服务</span><br><span class="line">dnssec-enable yes; ----&gt; dnssec-enable no; # 是否支持DNSSEC开关 PS：dnssec作用：1.为DNS数据提供来源验证 2.为数据提供完整性性验证 3.为查询提供否定存在验证</span><br><span class="line">dnssec-validation yes; ----&gt; dnssec-validation no; #是否进行DNSSEC确认开关</span><br></pre></td></tr></table></figure><p>添加以下配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forwarders      &#123; 10.4.7.1; &#125;; #用来指定上一层DNS地址，一般指定网关，确保服务能够访问公网</span><br></pre></td></tr></table></figure><p>如果不适用IPV6，可以将以下配置删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-on-v6 port 53 &#123; ::1; &#125;;</span><br></pre></td></tr></table></figure><p>配置文件截图：（仅粘贴修改部分）</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111160549170-421438496.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111160352520-1184501218.png" alt="img"></p><p>检查配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#named-checkconf</span><br></pre></td></tr></table></figure><p>修改zons文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#vi &#x2F;etc&#x2F;named.rfc1912.zones</span><br></pre></td></tr></table></figure><p>在文件最后，添加本次需要用到的两个dns域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;host.com&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;host.com.zone&quot;;</span><br><span class="line">        allow-update &#123; 10.4.7.11; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;kococ.cn&quot; IN &#123;</span><br><span class="line">        type  master;</span><br><span class="line">        file  &quot;kococ.cn.zone&quot;;</span><br><span class="line">        allow-update &#123; 10.4.7.11; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编辑刚刚添加的两个域的配置文件：将用到的DNS域解析A记录添加到配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;host.com.zone</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN host.com.</span><br><span class="line">$TTL 600    ; 10 minutes</span><br><span class="line">@       IN SOA    dns.host.com. dnsadmin.host.com. (</span><br><span class="line">                2019111001 ; serial</span><br><span class="line">                10800      ; refresh (3 hours)</span><br><span class="line">                900        ; retry (15 minutes)</span><br><span class="line">                604800     ; expire (1 week)</span><br><span class="line">                86400      ; minimum (1 day)</span><br><span class="line">                )</span><br><span class="line">            NS   dns.host.com.</span><br><span class="line">$TTL 60    ; 1 minute</span><br><span class="line">dns                A    10.4.7.11</span><br><span class="line">HDSS7-11           A    10.4.7.11</span><br><span class="line">HDSS7-12           A    10.4.7.12</span><br><span class="line">HDSS7-21           A    10.4.7.21</span><br><span class="line">HDSS7-22           A    10.4.7.22</span><br><span class="line">HDSS7-200          A    10.4.7.200</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN kococ.cn.</span><br><span class="line">$TTL 600    ; 10 minutes</span><br><span class="line">@           IN SOA    dns.kococ.cn. dnsadmin.kococ.cn. (</span><br><span class="line">                2019111001 ; serial</span><br><span class="line">                10800      ; refresh (3 hours)</span><br><span class="line">                900        ; retry (15 minutes)</span><br><span class="line">                604800     ; expire (1 week)</span><br><span class="line">                86400      ; minimum (1 day)</span><br><span class="line">                )</span><br><span class="line">                NS   dns.kococ.cn.</span><br><span class="line">$TTL 60    ; 1 minute</span><br><span class="line">dns                A    10.4.7.11harbor             A    10.4.7.200</span><br></pre></td></tr></table></figure><p>修改主机dns：将nameserver 修改为bind9搭建的服务器地址（所有主机都要修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">search host.com</span><br><span class="line">nameserver 10.4.7.11</span><br></pre></td></tr></table></figure><p>修改网卡配置：PS：如果网卡指定了DNS1配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br><span class="line">DNS1&#x3D;10.4.7.11</span><br></pre></td></tr></table></figure><p>重启网卡(所有主机)，重启named服务(bind主机)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#systemctl restart network</span><br><span class="line"># systemctl enable named  #10.4.7.11上执行</span><br><span class="line"># systemctl restart named   #10.4.7.11上执行</span><br></pre></td></tr></table></figure><p>验证是否可以访问公网，以及是否是走的我们自己搭建的dns服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#nslookup www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111163932833-1936947965.png" alt="img"></p><p> PS：如果虚拟机vm的宿主机在自己的windows或者mac上，将宿主机的dns指向10.4.7.11，方便一会使用浏览器验证内容</p><p>配置CA证书服务：</p><p>使用cfssl</p><p>在主机hdss7-200上操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;bin</span><br><span class="line"># wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl_linux-amd64 -O &#x2F;usr&#x2F;bin&#x2F;cfssl</span><br><span class="line"># wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssljson_linux-amd64 -O &#x2F;usr&#x2F;bin&#x2F;cfssl-json</span><br><span class="line"># wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl-certinfo_linux-amd64 -O &#x2F;usr&#x2F;bin&#x2F;cfssl-certinfo</span><br></pre></td></tr></table></figure><p>给执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;usr&#x2F;bin&#x2F;cfssl*</span><br></pre></td></tr></table></figure><p>创建证书存放位置(可自己设置)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;certs</span><br><span class="line"># cd &#x2F;opt&#x2F;certs</span><br></pre></td></tr></table></figure><p>创建证书申请文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;certs&#x2F;ca-csr.json</span><br></pre></td></tr></table></figure><p>文件内容：#这里注意”expiry”: “175200h”，key，如果使用kubeadmin安装，默认证书有效期是1年，我们这里手动部署为20年，这里如果证书失效，会导致整个k8s集群瘫痪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;OldboyEdu&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ca&quot;: &#123;</span><br><span class="line">        &quot;expiry&quot;: &quot;175200h&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -initca ca-csr.json | cfssl-json -bare ca</span><br></pre></td></tr></table></figure><p>申请成功：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191111174928113-1795492364.png" alt="img"></p><p>PS:我们后面的所有证书，都是基于这套ca证书签发的。</p><p>接下来继续在hdss7-21,hdss7-22,hdss-7-200服务器上安装docker，配置私有仓库harbor(hdss7-200)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>编辑docker配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;etc&#x2F;docker</span><br><span class="line"># mkdir &#x2F;data&#x2F;docker</span><br><span class="line"># vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;graph&quot;: &quot;&#x2F;data&#x2F;docker&quot;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;registry.access.redhat.com&quot;,&quot;quay.io&quot;,&quot;harbor.kococ.cn&quot;],</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;q2gr04ke.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;bip&quot;: &quot;172.7.21.1&#x2F;24&quot;,</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],</span><br><span class="line">  &quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动docker并添加开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start docker</span><br><span class="line"># systemctl enable docker</span><br></pre></td></tr></table></figure><p>在opt下创建安装包存放目录：hdss7-200上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;src</span><br><span class="line"># cd &#x2F;opt&#x2F;src</span><br></pre></td></tr></table></figure><p>下面开始安装harbor私有仓库：</p><p>下载地址:</p><p><a href="https://github.com/goharbor/harbor/releases/tag/">https://github.com/goharbor/harbor/releases/tag/</a></p><p>我这里使用的是最新版本：1.9.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v1.9.2&#x2F;harbor-offline-installer-v1.9.2.tgz</span><br><span class="line"># tar -zxf harbor-offline-installer-v1.9.2.tgz -C &#x2F;opt&#x2F;</span><br><span class="line"># cd &#x2F;opt&#x2F;</span><br><span class="line"># mv harbor harbor-1.9.2</span><br><span class="line"># ln -s &#x2F;opt&#x2F;harbor-1.9.2 &#x2F;opt&#x2F;harbor  #方便版本管理</span><br></pre></td></tr></table></figure><p>编辑harbor配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;opt&#x2F;harbor&#x2F;harbor.yml</span><br></pre></td></tr></table></figure><p> 修改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostname: harbor.kococ.cn #这里添加的是我们开始在hdss7-11的自建dns上添加的域名解析</span><br><span class="line">port: 180 #避免和nginx端口冲突</span><br><span class="line">data_volume: &#x2F;data&#x2F;harbor</span><br><span class="line">location: &#x2F;data&#x2F;harbor&#x2F;logs</span><br><span class="line">external_url: http:&#x2F;&#x2F;harbor.kococ.cn:80</span><br></pre></td></tr></table></figure><p>创建数据目录和日志目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;harbor&#x2F;logs</span><br></pre></td></tr></table></figure><p>接下来安装docker-compose：</p><p>docker-compose介绍：</p><p><a href="https://links.jianshu.com/go?to=https://github.com/docker/compose">Docker Compose</a>是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。</p><p>简书链接：<a href="https://www.jianshu.com/p/ca1623ac7723">https://www.jianshu.com/p/ca1623ac7723</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#yum install docker-compose -y   #根据网络情况不同，可能需要一些时间</span><br></pre></td></tr></table></figure><p>执行harbor脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh &#x2F;opt&#x2F;harbor&#x2F;install.sh #根据网络情况不同，可能需要一些时间</span><br></pre></td></tr></table></figure><p>进入到harbor目录执行以下命令：如果报以下错误，请检查目录</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112105738149-964180777.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;harbor </span><br><span class="line"># docker-compose ps</span><br></pre></td></tr></table></figure><p>全是up表示正常：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112105822942-354513313.png" alt="img"></p><p>安装nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install nginx -y #可是直接yum，也可以安装源码安装</span><br></pre></td></tr></table></figure><p>编辑nginx配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;harbor.kococ.cn.conf</span><br></pre></td></tr></table></figure><p>反代harbor：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  harbor.kococ.cn;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 1000m;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:180;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动nginx并设置开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start nginx</span><br><span class="line"># systemctl enable nginx</span><br></pre></td></tr></table></figure><p>检查harbor端口及nginx端口：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112110514027-574218373.png" alt="img"></p><p> 试着访问harbor，使用宿主机浏览器打开harbor.kococ.cn，如果访问不了，检查dns是否是10.4.7.11，也就是部署bind服务的服务器IP,也可以做host解析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">harbor.kococ.cn</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112111201926-749548456.png" alt="img"></p><p>默认账号：admin</p><p>默认密码：Harbor12345</p><p>登录后创建一个新的仓库，一会测试用：</p><p> 使用docker下载一个nginx，测试私有仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker pull nginx:1.7.9</span><br><span class="line"># docker login harbor.kococ.cn</span><br><span class="line"># docker tag 84581e99d807 harbor.kococ.cn&#x2F;public&#x2F;nginx:v1.7.9</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;nginx:v1.7.9</span><br></pre></td></tr></table></figure><p>然后去私有仓库上看下：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112113755367-36111642.png" alt="img"></p><p>看到我们的镜像已经上传到私有仓库了</p><p>现在正式开始部署etcd组件：</p><p>首先申请证书，我们所有申请证书的操作，都在hdss7-200上操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;certs</span><br><span class="line"># vi &#x2F;opt&#x2F;certs&#x2F;ca-config.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;signing&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &#123;</span><br><span class="line">            &quot;expiry&quot;: &quot;175200h&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;profiles&quot;: &#123;</span><br><span class="line">            &quot;server&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;175200h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;server auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;client&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;175200h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;client auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;peer&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;175200h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;server auth&quot;,</span><br><span class="line">                    &quot;client auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi etcd-peer-csr.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s-etcd&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;10.4.7.11&quot;,</span><br><span class="line">        &quot;10.4.7.12&quot;,</span><br><span class="line">        &quot;10.4.7.21&quot;,</span><br><span class="line">        &quot;10.4.7.22&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行签发证书命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;certs　　</span><br><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;peer etcd-peer-csr.json |cfssl-json -bare etcd-peer</span><br></pre></td></tr></table></figure><p>按照架构设计，在hdss7-12，hdss7-21, hdss7-22三台上部署etcd服务：</p><p>首先创建etcd用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># useradd -s &#x2F;sbin&#x2F;nologin -M etcd</span><br></pre></td></tr></table></figure><p>创建应用包存放目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;opt&#x2F;src</span><br><span class="line"># cd &#x2F;opt&#x2F;src</span><br></pre></td></tr></table></figure><p>下载etcd组件：</p><p>地址：<a href="https://github.com/etcd-io/etcd/tags">https://github.com/etcd-io/etcd/tags</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases&#x2F;download&#x2F;v3.2.28&#x2F;etcd-v3.2.28-linux-amd64.tar.gz</span><br><span class="line"># tar -zxf etcd-v3.2.28-linux-amd64.tar.gz -C ..&#x2F;</span><br><span class="line"># ln -s &#x2F;opt&#x2F;etcd-v3.2.28-linux-amd64&#x2F; &#x2F;opt&#x2F;etcd</span><br><span class="line"># mkdir -p &#x2F;opt&#x2F;etcd&#x2F;certs &#x2F;data&#x2F;etcd &#x2F;data&#x2F;logs&#x2F;etcd-server</span><br></pre></td></tr></table></figure><p>编辑etcd启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;opt&#x2F;etcd&#x2F;etcd-server-startup.sh</span><br></pre></td></tr></table></figure><p>标红处在另外两台服务器上需要修改成对应自己的ip地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;etcd --name etcd-server-7-12 \</span><br><span class="line">       --data-dir &#x2F;data&#x2F;etcd&#x2F;etcd-server \</span><br><span class="line">       --listen-peer-urls https:&#x2F;&#x2F;10.4.7.12:2380 \</span><br><span class="line">       --listen-client-urls https:&#x2F;&#x2F;10.4.7.12:2379,http:&#x2F;&#x2F;127.0.0.1:2379 \</span><br><span class="line">       --quota-backend-bytes 8000000000 \</span><br><span class="line">       --initial-advertise-peer-urls https:&#x2F;&#x2F;10.4.7.12:2380 \</span><br><span class="line">       --advertise-client-urls https:&#x2F;&#x2F;10.4.7.12:2379,http:&#x2F;&#x2F;127.0.0.1:2379 \</span><br><span class="line">       --initial-cluster  etcd-server-7-12&#x3D;https:&#x2F;&#x2F;10.4.7.12:2380,etcd-server-7-21&#x3D;https:&#x2F;&#x2F;10.4.7.21:2380,etcd-server-7-22&#x3D;https:&#x2F;&#x2F;10.4.7.22:2380 \</span><br><span class="line">       --ca-file .&#x2F;certs&#x2F;ca.pem \</span><br><span class="line">       --cert-file .&#x2F;certs&#x2F;etcd-peer.pem \</span><br><span class="line">       --key-file .&#x2F;certs&#x2F;etcd-peer-key.pem \</span><br><span class="line">       --client-cert-auth  \</span><br><span class="line">       --trusted-ca-file .&#x2F;certs&#x2F;ca.pem \</span><br><span class="line">       --peer-ca-file .&#x2F;certs&#x2F;ca.pem \</span><br><span class="line">       --peer-cert-file .&#x2F;certs&#x2F;etcd-peer.pem \</span><br><span class="line">       --peer-key-file .&#x2F;certs&#x2F;etcd-peer-key.pem \</span><br><span class="line">       --peer-client-cert-auth \</span><br><span class="line">       --peer-trusted-ca-file .&#x2F;certs&#x2F;ca.pem \</span><br><span class="line">       --log-output stdout</span><br></pre></td></tr></table></figure><p>添加执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;opt&#x2F;etcd&#x2F;etcd-server-startup.sh</span><br></pre></td></tr></table></figure><p>创建证书存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;etcd&#x2F;certs</span><br><span class="line"># cd &#x2F;opt&#x2F;etcd&#x2F;certs</span><br></pre></td></tr></table></figure><p>拷贝证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;ca.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;etcd-peer.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;etcd-peer-key.pem .&#x2F;</span><br></pre></td></tr></table></figure><p>给目录授权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chown -R etcd.etcd &#x2F;opt&#x2F;etcd&#x2F;certs &#x2F;data&#x2F;etcd &#x2F;data&#x2F;logs&#x2F;etcd-server</span><br></pre></td></tr></table></figure><p>安装supervisor管理服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install supervisor -y</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start supervisord </span><br><span class="line"># systemctl enable supervisord</span><br></pre></td></tr></table></figure><p>编辑etcd启动脚本：红色部分根据主机修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;etcd-server.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:etcd-server-7-12]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;etcd&#x2F;etcd-server-startup.sh                        ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                      ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;etcd                                             ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                                  ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                                ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                    ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                                  ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                   ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                                 ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                                 ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;etcd                                                       ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                            ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;etcd-server&#x2F;etcd.stdout.log           ; stdout log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                    ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                        ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                     ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                     ; emit events on stdout writes (default false)killasgroup&#x3D;truestopasgroup&#x3D;true</span><br></pre></td></tr></table></figure><p>更新supervisord</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112163323903-385009522.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112163338054-1610372131.png" alt="img"></p><p> 检查etcd集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;etcd&#x2F;</span><br><span class="line"># .&#x2F;etcdctl member list</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191112164102130-115595684.png" alt="img"></p><p>etcd服务搭建完成后，里面其实存储了很多的key，如何查看和管理这些key，需要使用一个小工具，叫做etcdkeeper：</p><p>　　原文链接：<a href="https://www.cnblogs.com/gytangyao/p/11407205.html">https://www.cnblogs.com/gytangyao/p/11407205.html</a></p><h4 id="下载etcd-在etcd节点选一台"><a href="#下载etcd-在etcd节点选一台" class="headerlink" title="下载etcd,在etcd节点选一台"></a>下载etcd,在etcd节点选一台</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;evildecay&#x2F;etcdkeeper&#x2F;releases&#x2F;download&#x2F;v0.7.5&#x2F;etcdkeeper-v0.7.5-linux_x86_64.zip</span><br><span class="line">##解开压缩包，需安装unzip：  yum install unzip -y</span><br><span class="line"># unzip etcdkeeper-*-linux_x86_64.zip</span><br><span class="line"># rm etcdkeeper-*-linux_x86_64.zip</span><br><span class="line"># mv etcdkeeper ..&#x2F;etcdkeeper-0.7.5# ln -s &#x2F;opt&#x2F;etcdkeeper-0.7.5&#x2F; &#x2F;opt&#x2F;etcdkeeper# cd &#x2F;opt&#x2F;etcdkeeper</span><br><span class="line"># chmod +x etcdkeeper</span><br></pre></td></tr></table></figure><h5 id="编写一个服务文件"><a href="#编写一个服务文件" class="headerlink" title="编写一个服务文件"></a>编写一个服务文件</h5><p>该服务文件主要用于在后台运行etcd程序,用以提供http服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;lib&#x2F;systemd&#x2F;system</span><br><span class="line"># vim etcdkeeper.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;etcdkeeper service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;etcdkeeper&#x2F;etcdkeeper -h 10.4.7.12 -p 8800</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPID</span><br><span class="line">KillMode&#x3D;process</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>-h 指定etcdkeeper http监听的地址,这里监听的是IPV4地址10.4.7.12<br> -p 指定etcdkeeper http监听的端口</p><h5 id="服务的控制"><a href="#服务的控制" class="headerlink" title="服务的控制"></a>服务的控制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start etcdkeeper          启动etcdkeeper服务</span><br><span class="line"># systemctl stop etcdkeeper          停止etcdkeeper服务</span><br><span class="line"># systemctl enable etcdkeeper.service          设置开机自启动</span><br><span class="line"># systemctl disable etcdkeeper.service         停止开机自启动</span><br></pre></td></tr></table></figure><h5 id="访问安全"><a href="#访问安全" class="headerlink" title="访问安全"></a>访问安全</h5><p>如果启用了etcd自身的授权,无需特别关心<br> 如果没有自动,可以考虑使用Nginx反代,使用base auth授权.</p><h5 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h5><p>当发布到公网环境时,v2可以查看到数据,v3查看不到数据。 目前没查到原因.</p><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><p><a href="http://10.4.7.12:8800/">http://10.4.7.12:8800</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191205165335451-1336641427.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191205165345257-1843612752.png" alt="img"></p><p> 至此，etcd服务集群已经搭建完成了，接下来部署kube-apiserver服务，etcd属于服务端，kube-apiserver属于客户端，搭建kube-apiserver的过程将在下个章节。</p><h1 id="二进制安装kubernetes（二）-kube-apiserver组件安装"><a href="#二进制安装kubernetes（二）-kube-apiserver组件安装" class="headerlink" title="二进制安装kubernetes（二） kube-apiserver组件安装"></a>二进制安装kubernetes（二） kube-apiserver组件安装</h1><p>根据架构图，我们的apiserver部署在hdss7-21和hdss7-22上：</p><p>首先在hdss7-200上申请证书并拷贝到21和22上：</p><p>创建证书文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;certs</span><br><span class="line"># vi client-csr.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s-node&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;client client-csr.json |cfssl-json -bare client</span><br><span class="line"># vi apiserver-csr.json</span><br><span class="line">知识点：</span><br><span class="line">                这个证书目前专属于 apiserver加了一个 *.kubernetes.master 域名以便内部私有 DNS 解析使用(可删除)；至于很多人问过 kubernetes 这几个能不能删掉，答案是不可以的；因为当集群创建好后，default namespace 下会创建一个叫 kubenretes 的 svc，有一些组件会直接连接这个 svc 来跟 api 通讯的，证书如果不包含可能会出现无法连接的情况；其他几个 kubernetes 开头的域名作用相同</span><br><span class="line">                hosts包含的是授权范围，不在此范围的的节点或者服务使用此证书就会报证书不匹配错误。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s-apiserver&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;192.168.0.1&quot;,</span><br><span class="line">        &quot;kubernetes.default&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster.local&quot;,</span><br><span class="line">        &quot;10.4.7.10&quot;,</span><br><span class="line">        &quot;10.4.7.21&quot;,</span><br><span class="line">        &quot;10.4.7.22&quot;,</span><br><span class="line">        &quot;10.4.7.23&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;server apiserver-csr.json |cfssl-json -bare apiserver</span><br></pre></td></tr></table></figure><p>下载kubernetes，放到21，22服务器上，官方地址：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-curl">https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-curl</a></p><p>我这里用的是1.15版本，下载后操作：21,22上操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># tar -zxf kubernetes-server-linux-amd64-v1.15.4.tar.gz -C ..&#x2F;</span><br><span class="line"># cd ..</span><br><span class="line"># mv kubernetes&#x2F; kubernetes-1.15</span><br><span class="line"># ln -s &#x2F;opt&#x2F;kubernetes-1.15&#x2F; &#x2F;opt&#x2F;kubernete</span><br></pre></td></tr></table></figure><p>创建证书和配置文件存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;conf</span><br></pre></td></tr></table></figure><p>接下来拷贝证书，将apiserver证书拷贝到hdss7-21,7-22上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;ca.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;apiserver.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;apiserver-key.pem .&#x2F;# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;ca-key.pem .&#x2F;# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;client-key.pem .&#x2F;# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;client.pem .&#x2F;</span><br></pre></td></tr></table></figure><p>进入配置文件目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;conf</span><br></pre></td></tr></table></figure><p>编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi audit.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: audit.k8s.io&#x2F;v1beta1 # This is required.</span><br><span class="line">kind: Policy</span><br><span class="line"># Don&#39;t generate audit events for all requests in RequestReceived stage.</span><br><span class="line">omitStages:</span><br><span class="line">  - &quot;RequestReceived&quot;</span><br><span class="line">rules:</span><br><span class="line">  # Log pod changes at RequestResponse level</span><br><span class="line">  - level: RequestResponse</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot;</span><br><span class="line">      # Resource &quot;pods&quot; doesn&#39;t match requests to any subresource of pods,</span><br><span class="line">      # which is consistent with the RBAC policy.</span><br><span class="line">      resources: [&quot;pods&quot;]</span><br><span class="line">  # Log &quot;pods&#x2F;log&quot;, &quot;pods&#x2F;status&quot; at Metadata level</span><br><span class="line">  - level: Metadata</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot;</span><br><span class="line">      resources: [&quot;pods&#x2F;log&quot;, &quot;pods&#x2F;status&quot;]</span><br><span class="line"></span><br><span class="line">  # Don&#39;t log requests to a configmap called &quot;controller-leader&quot;</span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot;</span><br><span class="line">      resources: [&quot;configmaps&quot;]</span><br><span class="line">      resourceNames: [&quot;controller-leader&quot;]</span><br><span class="line"></span><br><span class="line">  # Don&#39;t log watch requests by the &quot;system:kube-proxy&quot; on endpoints or services</span><br><span class="line">  - level: None</span><br><span class="line">    users: [&quot;system:kube-proxy&quot;]</span><br><span class="line">    verbs: [&quot;watch&quot;]</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot; # core API group</span><br><span class="line">      resources: [&quot;endpoints&quot;, &quot;services&quot;]</span><br><span class="line"></span><br><span class="line">  # Don&#39;t log authenticated requests to certain non-resource URL paths.</span><br><span class="line">  - level: None</span><br><span class="line">    userGroups: [&quot;system:authenticated&quot;]</span><br><span class="line">    nonResourceURLs:</span><br><span class="line">    - &quot;&#x2F;api*&quot; # Wildcard matching.</span><br><span class="line">    - &quot;&#x2F;version&quot;</span><br><span class="line"></span><br><span class="line">  # Log the request body of configmap changes in kube-system.</span><br><span class="line">  - level: Request</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot; # core API group</span><br><span class="line">      resources: [&quot;configmaps&quot;]</span><br><span class="line">    # This rule only applies to resources in the &quot;kube-system&quot; namespace.</span><br><span class="line">    # The empty string &quot;&quot; can be used to select non-namespaced resources.</span><br><span class="line">    namespaces: [&quot;kube-system&quot;]</span><br><span class="line"></span><br><span class="line">  # Log configmap and secret changes in all other namespaces at the Metadata level.</span><br><span class="line">  - level: Metadata</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot; # core API group</span><br><span class="line">      resources: [&quot;secrets&quot;, &quot;configmaps&quot;]</span><br><span class="line"></span><br><span class="line">  # Log all other resources in core and extensions at the Request level.</span><br><span class="line">  - level: Request</span><br><span class="line">    resources:</span><br><span class="line">    - group: &quot;&quot; # core API group</span><br><span class="line">    - group: &quot;extensions&quot; # Version of group should NOT be included.</span><br><span class="line"></span><br><span class="line">  # A catch-all rule to log all other requests at the Metadata level.</span><br><span class="line">  - level: Metadata</span><br><span class="line">    # Long-running requests like watches that fall under this rule will not</span><br><span class="line">    # generate an audit event in RequestReceived.</span><br><span class="line">    omitStages:</span><br><span class="line">      - &quot;RequestReceived&quot;</span><br></pre></td></tr></table></figure><p>便携启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-apiserver.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">.&#x2F;kube-apiserver \</span><br><span class="line">  --apiserver-count 2 \</span><br><span class="line">  --audit-log-path &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-apiserver&#x2F;audit-log \</span><br><span class="line">  --audit-policy-file .&#x2F;conf&#x2F;audit.yaml \</span><br><span class="line">  --authorization-mode RBAC \</span><br><span class="line">  --client-ca-file .&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --requestheader-client-ca-file .&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --enable-admission-plugins NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota \</span><br><span class="line">  --etcd-cafile .&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --etcd-certfile .&#x2F;cert&#x2F;client.pem \</span><br><span class="line">  --etcd-keyfile .&#x2F;cert&#x2F;client-key.pem \</span><br><span class="line">  --etcd-servers https:&#x2F;&#x2F;10.4.7.12:2379,https:&#x2F;&#x2F;10.4.7.21:2379,https:&#x2F;&#x2F;10.4.7.22:2379 \</span><br><span class="line">  --service-account-key-file .&#x2F;cert&#x2F;ca-key.pem \</span><br><span class="line">  --service-cluster-ip-range 192.168.0.0&#x2F;16 \</span><br><span class="line">  --service-node-port-range 3000-29999 \</span><br><span class="line">  --target-ram-mb&#x3D;1024 \</span><br><span class="line">  --kubelet-client-certificate .&#x2F;cert&#x2F;client.pem \</span><br><span class="line">  --kubelet-client-key .&#x2F;cert&#x2F;client-key.pem \</span><br><span class="line">  --log-dir  &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-apiserver \</span><br><span class="line">  --tls-cert-file .&#x2F;cert&#x2F;apiserver.pem \</span><br><span class="line">  --tls-private-key-file .&#x2F;cert&#x2F;apiserver-key.pem \</span><br><span class="line">  --v 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-apiserver.sh</span><br></pre></td></tr></table></figure><p>编写supervisord启动文件：红色部分对应主机修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;kube-apiserver.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:kube-apiserver-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-apiserver.sh            ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                      ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin                            ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                                  ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                                ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                    ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                                  ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                   ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                                 ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                                 ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                                       ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                            ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-apiserver&#x2F;apiserver.stdout.log        ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                    ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                        ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                     ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                     ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><p>创建日志存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-apiserver</span><br></pre></td></tr></table></figure><p>更新supervisord：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br></pre></td></tr></table></figure><p>检查是否启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113161103150-1839664051.png" alt="img"></p><p>至此，kube-apiserver核心组件已经安装完成，接下来要对apiserver做高可用负载：</p><p>在hdss7-11,hdss7-12上部署nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum install nginx -y</span><br><span class="line"># vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><p>nginx四层负载，必须与http同级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream kube-apiserver &#123;</span><br><span class="line">        server 10.4.7.21:6443     max_fails&#x3D;3 fail_timeout&#x3D;30s;</span><br><span class="line">        server 10.4.7.22:6443     max_fails&#x3D;3 fail_timeout&#x3D;30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 7443;</span><br><span class="line">        proxy_connect_timeout 2s;</span><br><span class="line">        proxy_timeout 900s;</span><br><span class="line">        proxy_pass kube-apiserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># nginx -t</span><br><span class="line"># systemctl start nginx</span><br><span class="line"># systemctl enable nginx</span><br></pre></td></tr></table></figure><p>部署keepalived实现高可用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # yum install keepalived -y</span><br><span class="line"># vi &#x2F;etc&#x2F;keepalived&#x2F;check_port.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#keepalived 监控端口脚本</span><br><span class="line">#使用方法：</span><br><span class="line">#在keepalived的配置文件中</span><br><span class="line">#vrrp_script check_port &#123;#创建一个vrrp_script脚本,检查配置</span><br><span class="line">#    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_port.sh 6379&quot; #配置监听的端口</span><br><span class="line">#    interval 2 #检查脚本的频率,单位（秒）</span><br><span class="line">#&#125;</span><br><span class="line">CHK_PORT&#x3D;$1</span><br><span class="line">if [ -n &quot;$CHK_PORT&quot; ];then</span><br><span class="line">        PORT_PROCESS&#x3D;&#96;ss -lnt|grep $CHK_PORT|wc -l&#96;</span><br><span class="line">        if [ $PORT_PROCESS -eq 0 ];then</span><br><span class="line">                echo &quot;Port $CHK_PORT Is Not Used,End.&quot;</span><br><span class="line">                exit 1</span><br><span class="line">        fi</span><br><span class="line">else</span><br><span class="line">        echo &quot;Check Port Cant Be Empty!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;etc&#x2F;keepalived&#x2F;check_port.sh</span><br></pre></td></tr></table></figure><p>编辑keepalived配置文件，注意主从配置文件不一样：</p><p>hdss7-11 主：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id 10.4.7.11</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_port.sh 7443&quot;</span><br><span class="line">    interval 2</span><br><span class="line">    weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 251</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    mcast_src_ip 10.4.7.11</span><br><span class="line">    nopreempt   #非抢占式 ，当主节点挂了以后，从节点vip飘到从上，主节点恢复以后，不主动飘回主，需要手动重启keepalived</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">         chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.4.7.10</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hdss7-12 从：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id 10.4.7.12</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_port.sh 7443&quot;</span><br><span class="line">    interval 2</span><br><span class="line">    weight -20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 251</span><br><span class="line">    mcast_src_ip 10.4.7.12</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 11111111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.4.7.10</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动keepalived并配置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start keepalived</span><br><span class="line"># systemctl enable keepalived</span><br></pre></td></tr></table></figure><p>检查VIP情况：</p><p>7-11是主，现在vip绑定在主上，正常：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113163151886-1369051614.png" alt="img"></p><p> 如果keepalived出现脑裂问题，两台上面都有vip，可以加入以下配置，将多播修改成单播：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191209165848123-1526028674.png" alt="img"></p><p>至此，apiserver部署完成，并且配置了负载高可用。下一章节部署kube-controller-manager。</p><h1 id="二进制安装kubernetes（三）-kube-controller-manager组件安装"><a href="#二进制安装kubernetes（三）-kube-controller-manager组件安装" class="headerlink" title="二进制安装kubernetes（三） kube-controller-manager组件安装"></a>二进制安装kubernetes（三） kube-controller-manager组件安装</h1><h3 id="Controller-Manager简介"><a href="#Controller-Manager简介" class="headerlink" title="Controller Manager简介"></a>Controller Manager简介</h3><p>详细介绍请参考链接：<a href="https://blog.csdn.net/bbwangj/article/details/82557705">Kubernetes组件之kube-controller-manager</a></p><p>Controller Manager作为集群内部的管理控制中心，负责集群内的Node、Pod副本、服务端点（Endpoint）、命名空间（Namespace）、服务账号（ServiceAccount）、资源定额（ResourceQuota）的管理，当某个Node意外宕机时，Controller Manager会及时发现并执行自动化修复流程，确保集群始终处于预期的工作状态。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113170548235-2063928773.png" alt="img"></p><p> 每个Controller通过API Server提供的接口实时监控整个集群的每个资源对象的当前状态，当发生各种故障导致系统状态发生变化时，会尝试将系统状态修复到“期望状态”。</p><p>controller-manager安装在apiserver节点服务器上，hdss7-21，22：</p><p>编辑controller-manager启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-controller-manager.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;kube-controller-manager \</span><br><span class="line">  --cluster-cidr 172.7.0.0&#x2F;16 \</span><br><span class="line">  --leader-elect true \</span><br><span class="line">  --log-dir &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-controller-manager \</span><br><span class="line">  --master http:&#x2F;&#x2F;127.0.0.1:8080 \</span><br><span class="line">  --service-account-private-key-file .&#x2F;cert&#x2F;ca-key.pem \</span><br><span class="line">  --service-cluster-ip-range 192.168.0.0&#x2F;16 \</span><br><span class="line">  --root-ca-file .&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --v 2</span><br></pre></td></tr></table></figure><p>执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-controller-manager.sh</span><br></pre></td></tr></table></figure><p>创建日志存储目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-controller-manager</span><br></pre></td></tr></table></figure><p>编辑supervisord启动脚本：红色字体部分根据部署主机修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;kube-conntroller-manager.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:kube-controller-manager-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-controller-manager.sh                     ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                                        ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin                                              ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                                                    ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                                                  ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                                      ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                                                    ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                                     ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                                                   ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                                                   ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                                                         ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                                              ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-controller-manager&#x2F;controller.stdout.log  ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                                      ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                                          ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                                       ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                                       ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><p>添加supervisord：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113172600977-1718819197.png" alt="img"></p><p>至此 controller manager已经部署完成，接下来部署kube-scheduler。</p><h1 id="二进制安装kubernetes（四）-kube-scheduler组件安装"><a href="#二进制安装kubernetes（四）-kube-scheduler组件安装" class="headerlink" title="二进制安装kubernetes（四） kube-scheduler组件安装"></a>二进制安装kubernetes（四） kube-scheduler组件安装</h1><p>介绍资料转载地址：<a href="https://www.jianshu.com/p/c4c60ccda8d0">https://www.jianshu.com/p/c4c60ccda8d0</a></p><p>kube-scheduler在集群中的作用</p><p>kube-scheduler是以插件形式存在的组件，正因为以插件形式存在，所以其具有可扩展可定制的特性。kube-scheduler相当于整个集群的调度决策者，其通过预选和优选两个过程决定容器的最佳调度位置。</p><p>kube-scheduler源码中的关键性调用链</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113173136155-1364045240.png" alt="img"></p><p>kube-scheduler部署在hdss7-21,22上：</p><p>创建启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-scheduler.sh</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;kube-scheduler \</span><br><span class="line">  --leader-elect  \</span><br><span class="line">  --log-dir &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-scheduler \</span><br><span class="line">  --master http:&#x2F;&#x2F;127.0.0.1:8080 \</span><br><span class="line">  --v 2</span><br></pre></td></tr></table></figure><p>执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-scheduler.sh</span><br></pre></td></tr></table></figure><p>创建日志存储目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-scheduler</span><br></pre></td></tr></table></figure><p>编辑supervisord脚本：红色部分第二台需要修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;kube-scheduler.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:kube-scheduler-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-scheduler.sh                     ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                               ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin                                     ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                                           ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                                         ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                             ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                                           ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                            ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                                          ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                                          ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                                                ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                                     ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-scheduler&#x2F;scheduler.stdout.log ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                             ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                                 ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                              ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                              ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><p>更新supervisord：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113174157245-1579314383.png" alt="img"></p><p> 检查一下状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ln -s &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kubectl &#x2F;usr&#x2F;bin&#x2F;kubectl</span><br><span class="line"># kubectl get cs</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113174511829-1730805155.png" alt="img"></p><p>至此kube-scheduler已经安装完成，接下来安装kubelet。</p><h1 id="二进制安装kubernetes（五）-kubelet组件安装"><a href="#二进制安装kubernetes（五）-kubelet组件安装" class="headerlink" title="二进制安装kubernetes（五） kubelet组件安装"></a>二进制安装kubernetes（五） kubelet组件安装</h1><p>概述资料地址：<a href="https://blog.csdn.net/bbwangj/article/details/81904350">https://blog.csdn.net/bbwangj/article/details/81904350</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113174751232-1888238592.png" alt="img"></p><p>Kubelet组件运行在Node节点上，维持运行中的Pods以及提供kuberntes运行时环境，主要完成以下使命：<br>１．监视分配给该Node节点的pods<br>２．挂载pod所需要的volumes<br>３．下载pod的secret<br>４．通过docker/rkt来运行pod中的容器<br>５．周期的执行pod中为容器定义的liveness探针<br>６．上报pod的状态给系统的其他组件<br>７．上报Node的状态</p><p>kubelet安装在node节点，我们的node跟apiserver在一起，这里安装在hdss7-21,22上：</p><p>首先，kubernetes依赖pause，我们先将此服务上传到们自己的docker私有仓库：</p><p>kubernetes中的pause容器主要为每个业务容器提供以下功能：</p><ul><li>在pod中担任Linux命名空间共享的基础；</li><li>启用pid命名空间，开启init进程。</li></ul><p>HDSS7-200上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull kubernetes&#x2F;pause</span><br><span class="line"># docker tag f9d5de079539 harbor.kococ.cn&#x2F;public&#x2F;pause:latest</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;pause:latest</span><br></pre></td></tr></table></figure><p>首先在hdss7-200上申请证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;certs&#x2F;kubelet-csr.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s-kubelet&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;10.4.7.10&quot;,</span><br><span class="line">    &quot;10.4.7.21&quot;,</span><br><span class="line">    &quot;10.4.7.22&quot;,</span><br><span class="line">    &quot;10.4.7.23&quot;,</span><br><span class="line">    &quot;10.4.7.24&quot;,</span><br><span class="line">    &quot;10.4.7.25&quot;,</span><br><span class="line">    &quot;10.4.7.26&quot;,</span><br><span class="line">    &quot;10.4.7.27&quot;,</span><br><span class="line">    &quot;10.4.7.28&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;server kubelet-csr.json | cfssl-json -bare kubelet</span><br></pre></td></tr></table></figure><p>拷贝证书到21，22上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;kubelet.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;kubelet-key.pem .&#x2F;</span><br></pre></td></tr></table></figure><p>进入到conf目录执行以下命令：21，22上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cert]# cd ..&#x2F;conf&#x2F;</span><br><span class="line"># kubectl config set-cluster myk8s \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;https:&#x2F;&#x2F;10.4.7.10:7443 \</span><br><span class="line">  --kubeconfig&#x3D;kubelet.kubeconfig</span><br><span class="line"># kubectl config set-credentials k8s-node \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;client.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;client-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;kubelet.kubeconfig </span><br><span class="line"># kubectl config set-context myk8s-context \</span><br><span class="line">  --cluster&#x3D;myk8s \</span><br><span class="line">  --user&#x3D;k8s-node \</span><br><span class="line">  --kubeconfig&#x3D;kubelet.kubeconfig</span><br><span class="line"># kubectl config use-context myk8s-context --kubeconfig&#x3D;kubelet.kubeconfig</span><br></pre></td></tr></table></figure><p>hdss7-21上执行：PS：因为不论在哪个节点创建，已经同步到etcd上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf]# vi k8s-node.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-node</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:node</span><br><span class="line">subjects:</span><br><span class="line">- apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: User</span><br><span class="line">  name: k8s-node</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f k8s-node.yaml</span><br></pre></td></tr></table></figure><p>检查k8s-node资源创建状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get clusterrolebinding k8s-node -o yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113180538172-2055028227.png" alt="img"></p><p>编辑kubelet启动脚本：标红部分第二台要修改成对应的主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kubelet.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;kubelet \</span><br><span class="line">  --anonymous-auth&#x3D;false \</span><br><span class="line">  --cgroup-driver systemd \</span><br><span class="line">  --cluster-dns 192.168.0.2 \</span><br><span class="line">  --cluster-domain cluster.local \</span><br><span class="line">  --runtime-cgroups&#x3D;&#x2F;systemd&#x2F;system.slice \</span><br><span class="line">  --kubelet-cgroups&#x3D;&#x2F;systemd&#x2F;system.slice \</span><br><span class="line">  --fail-swap-on&#x3D;&quot;false&quot; \</span><br><span class="line">  --client-ca-file .&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --tls-cert-file .&#x2F;cert&#x2F;kubelet.pem \</span><br><span class="line">  --tls-private-key-file .&#x2F;cert&#x2F;kubelet-key.pem \</span><br><span class="line">  --hostname-override hdss7-21.host.com \</span><br><span class="line">  --image-gc-high-threshold 20 \</span><br><span class="line">  --image-gc-low-threshold 10 \</span><br><span class="line">  --kubeconfig .&#x2F;conf&#x2F;kubelet.kubeconfig \</span><br><span class="line">  --log-dir &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-kubelet \</span><br><span class="line">  --pod-infra-container-image harbor.kococ.cn&#x2F;public&#x2F;pause:latest \</span><br><span class="line">  --root-dir &#x2F;data&#x2F;kubelet</span><br></pre></td></tr></table></figure><p>执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod u+x &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kubelet.sh</span><br></pre></td></tr></table></figure><p>创建日志存储目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-kubelet</span><br></pre></td></tr></table></figure><p>编辑supervisord启动文件：红色部分自行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;kube-kubelet.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:kube-kubelet-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kubelet.sh     ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                        ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin              ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                    ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                      ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                    ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                     ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                   ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                   ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                         ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                              ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-kubelet&#x2F;kubelet.stdout.log   ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                      ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                          ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                       ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                       ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113184508160-1125579373.png" alt="img"></p><p>给node打tag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl label node hdss7-21.host.com node-role.kubernetes.io&#x2F;master&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191113191113083-612100625.png" alt="img"></p><h1 id="二进制安装kubernetes（六）-kube-proxy组件安装"><a href="#二进制安装kubernetes（六）-kube-proxy组件安装" class="headerlink" title="二进制安装kubernetes（六） kube-proxy组件安装"></a>二进制安装kubernetes（六） kube-proxy组件安装</h1><p><strong>Kube-Proxy简述</strong></p><p>参考文献：<br><a href="https://ywnz.com/linuxyffq/2530.html">https://ywnz.com/linuxyffq/2530.html</a></p><p>运行在每个节点上，监听 API Server 中服务对象的变化，再通过管理 IPtables 来实现网络的转发<br>Kube-Proxy 目前支持三种模式：</p><ul><li><p>UserSpace</p><ul><li>k8s v1.2 后就已经淘汰</li></ul></li><li><p>IPtables</p><ul><li>目前默认方式</li></ul></li><li><p>IPVS–推荐，支持7层</p><ul><li>需要安装ipvsadm、ipset 工具包和加载 ip_vs 内核模块</li></ul></li></ul><p>kube-proxy部署在hdss7-21,hdss7-22上：</p><p>首先安装ipset，ipvsadm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum install   ipset  -y </span><br><span class="line"># yum -y install ipvsadm</span><br></pre></td></tr></table></figure><p>然后在hdss7-200上申请证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;certs&#x2F;kube-proxy-csr.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;client kube-proxy-csr.json |cfssl-json -bare kube-proxy-client</span><br></pre></td></tr></table></figure><p>拷贝证书到21，22上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;kube-proxy-client-key.pem .&#x2F;</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;kube-proxy-client.pem .&#x2F;</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;conf</span><br><span class="line"># kubectl config set-cluster myk8s \</span><br><span class="line">  --certificate-authority&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;https:&#x2F;&#x2F;10.4.7.10:7443 \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.kubeconfig</span><br><span class="line"># kubectl config set-credentials kube-proxy \</span><br><span class="line">  --client-certificate&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;kube-proxy-client.pem \</span><br><span class="line">  --client-key&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;cert&#x2F;kube-proxy-client-key.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.kubeconfig</span><br><span class="line"># kubectl config set-context myk8s-context \</span><br><span class="line">  --cluster&#x3D;myk8s \</span><br><span class="line">  --user&#x3D;kube-proxy \</span><br><span class="line">  --kubeconfig&#x3D;kube-proxy.kubeconfig</span><br><span class="line"># kubectl config use-context myk8s-context --kubeconfig&#x3D;kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p>编辑开启ipvs内核的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;root&#x2F;ipvs.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ipvs_mods_dir&#x3D;&quot;&#x2F;usr&#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;net&#x2F;netfilter&#x2F;ipvs&quot;</span><br><span class="line">for i in $(ls $ipvs_mods_dir|grep -o &quot;^[^.]*&quot;)</span><br><span class="line">do</span><br><span class="line">  &#x2F;sbin&#x2F;modinfo -F filename $i &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">  if [ $? -eq 0 ];then</span><br><span class="line">    &#x2F;sbin&#x2F;modprobe $i</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># chmod u+x &#x2F;root&#x2F;ipvs.sh</span><br><span class="line"># sh &#x2F;root&#x2F;ipvs.sh</span><br></pre></td></tr></table></figure><p>编辑kube-proxy启动脚本：红色部分根据IP修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-proxy.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;kube-proxy \</span><br><span class="line">  --cluster-cidr 172.7.0.0&#x2F;16 \</span><br><span class="line">  --hostname-override hdss7-21.host.com \</span><br><span class="line">  --proxy-mode&#x3D;ipvs \</span><br><span class="line">  --ipvs-scheduler&#x3D;nq \</span><br><span class="line">  --kubeconfig .&#x2F;conf&#x2F;kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p>执行权限并创建日志存储目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x &#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-proxy.sh</span><br><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-proxy</span><br></pre></td></tr></table></figure><p>编辑supervisord启动文件：红色部分根据IP修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;kube-proxy.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:kube-proxy-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin&#x2F;kube-proxy.sh                     ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                           ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;server&#x2F;bin                                 ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                                       ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                                     ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                         ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                                       ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                        ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                                      ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                                      ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                                            ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                                 ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;kubernetes&#x2F;kube-proxy&#x2F;proxy.stdout.log     ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                         ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                             ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                          ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                          ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><p>更新supervisord：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br><span class="line"># supervisorctl status</span><br></pre></td></tr></table></figure><p>创建nginx-ds pod：（21上执行就行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;root&#x2F;nginx-ds.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;nginx:v1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f nginx-ds.yaml</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pods </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191114150438957-101353459.png" alt="img"></p><p>最后验证集群状态：</p><p>etcd controller-manager scheduler状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl get cs</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191114150543989-1361893568.png" alt="img"></p><p>nodes状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get nodes</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191114150712395-165764939.png" alt="img"></p><p> pods状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#kubectl get pods</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191114150712395-165764939.png" alt="img"></p><p>至此，kubernets的核心组件已经安装部署完成，接下来会部署附加组件。</p><h1 id="二进制安装kubernetes（七）-部署知识点总结"><a href="#二进制安装kubernetes（七）-部署知识点总结" class="headerlink" title="二进制安装kubernetes（七） 部署知识点总结"></a>二进制安装kubernetes（七） 部署知识点总结</h1><p>1、k8s各个组件之间通信，在高版本中，基本都是使用TSL通信，所以申请证书，是必不可少的，而且建议使用二进制安装，或者在接手一套K8S集群的时候，第一件事情是检查证书有效期，证书过期或者TSL通信问题会报x509相关错误。</p><p>可以从k8s kubelet-kuberconfig 使用 echo ‘证书’ | base64 -d 反解获得k8s证书(比如阿里云)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl-certinfo -domain&#x3D;ca.pem -cert&#x3D;client.pem</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120110308446-345298667.png" alt="img"></p><p>2、在安装k8s运算节点的时候，建议关闭kubelet节点的swap交换分区，否则要在启动脚本中指定–fail-swap-on=”false”，在屋里内存足够大的情况下，建议关闭交换分区。</p><p>3、etcd在大规模集群中，可以跟apiserver、controller-manager、scheduler分开部署，但是apiserver、controller-manager、scheduler这三个服务，尽量部署在一起，因为controller-manager、scheduler跟apiserver通信是使用本机的127.0.0.1:8080端口进行通信，这样会节省网络资源。</p><p>4、linux内核版本大于3.8.X</p><p>5、使用supervisord管理服务的时候，为了避免在重启的时候出现端口存在(默认supervisord不会stop子进程)，需要在服务的.ini配置文件中添加以下两项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">killasgroup&#x3D;true  #这个东西主要用于，supervisord管理的子进程，这个子进程本身还有，子进程。那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程，有可能会变成孤儿进程。所以咱们可以设置可个选项，把整个该子进程的，整个进程组都干掉。 设置为true的话，一般killasgroup也会被设置为true。需要注意的是，该选项发送的是stop信号，默认为false。。非必须设置。</span><br><span class="line">stopasgroup&#x3D;true  #这个和上面的stopasgroup类似，不过发送的是kill信号</span><br></pre></td></tr></table></figure><h1 id="kubernetes进阶（一）-kubectl工具使用详解"><a href="#kubernetes进阶（一）-kubectl工具使用详解" class="headerlink" title="kubernetes进阶（一） kubectl工具使用详解"></a>kubernetes进阶（一） kubectl工具使用详解</h1><p><strong>管理k8s核心资源的三种基本方法：</strong></p><p>一、陈述式-主要依赖命令行工具 –可以满足90%以上的使用场景，但是缺点也很明显：</p><p>　　命令冗长，复杂，难以记忆</p><p>　　特定场景下，无法实现管理需求</p><p>　　对资源的增、删、查操作比较容易，改比较麻烦，需要patch来使用json串来更改。</p><p>　　<strong>1.1 查看名称空间</strong> 查询时，为了避免重名，需要指定名称空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get namespace</span><br><span class="line">简写：</span><br><span class="line"># kubectl get ns</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120162038299-1719142838.png" alt="img"></p><p>　　<strong>1.2 查询命名空间中的资源</strong>，使用-n 指定命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get all -n default</span><br><span class="line"># kubectl get pods -n default</span><br><span class="line"># kubectl get nodes -n default</span><br></pre></td></tr></table></figure><p>　　<strong>1.3 创建命名空间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create ns app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120163051927-1329056471.png" alt="img"></p><p>　　<strong>1.4 删除命名空间</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete ns app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120163157819-1947277387.png" alt="img"></p><p> 　<strong>1.5 创建一个deployment类型的pod控制器</strong>：PS:1.16版本以后，控制器有变化，具体变化参考k8s官网。</p><p>　　 pod控制器类型参考：<a href="https://www.cnblogs.com/weiyiming007/p/10246118.html">https://www.cnblogs.com/weiyiming007/p/10246118.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create deployment nginx-dp --image&#x3D;harbor.kococ.cn&#x2F;public&#x2F;nginx:v1.7.9 -n kube-public</span><br><span class="line"># kubectl get deploy -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120181727487-1964819809.png" alt="img"></p><p>　　<strong>1.6 查看pod控制器或者pod概览信息</strong> : -o wide</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get deploy -o wide -n kube-public</span><br><span class="line"># kubectl get pod -o wide -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120182326063-1712655305.png" alt="img"></p><p>　　<strong>1.7 查看pod控制器、pod、service等资源的详细信息</strong>：describe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe deploy nginx-dp -n kube-public</span><br><span class="line"># kubectl describe pod nginx-dp-5dfc689474-4bhfh -n kube-public</span><br><span class="line"># kubectl describe svc nginx-dp -n kube-public　</span><br></pre></td></tr></table></figure><p>　详细信息太多，就不截图了。</p><p>　　<strong>1.8 进入pod容器，用法和docker exec一致</strong>，但是需要使用-n 指定命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl exec -ti nginx-dp-5dfc689474-4bhfh &#x2F;bin&#x2F;bash -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120183446194-77387750.png" alt="img"></p><p>　　<strong>1.9 删除pod容器</strong>，此删除，只是删除了pod容器，并没有删除pod控制器，所以此操作相当于删除pod后，pod控制器在拉起一个新的pod。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete pods nginx-dp-5dfc689474-4bhfh -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120184142792-1084906192.png" alt="img"></p><p> 可以看到我们删除pod以后，pod控制器又帮我们从新拉起了一个新的pod，想要完全删除，需要删除pod控制器。</p><p>　　<strong>1.10 删除pod控制器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete deploy nginx-dp -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120184830277-1576468381.png" alt="img"></p><p>可以看到，当我们删除了pod控制器以后，pod容器也随之被删除了。</p><p>　　<strong>1.11 扩容pod –replicas=数量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl scale deployment nginx-dp --replicas&#x3D;2 -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120191239821-1469821172.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120191254127-1868023507.png" alt="img"></p><p>　　<strong>1.12 管理service资源 service资源</strong>：为pod资源提供稳定的接入点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create deploy nginx-dp --image&#x3D;harbor.kococ.cn&#x2F;public&#x2F;nginx:v1.7.9</span><br><span class="line"># kubectl expose deploy nginx-dp --port&#x3D;80 -n kube-public</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120190417014-1885879823.png" alt="img"></p><p> 看到我们已经创建了一个service资源，可以通过192.168.234.234的80，访问到后面pod，为了解决pod漂移导致IP变化的问题。</p><p>可以使用ipvsadm -Ln来查看：nq为ipvs调度算法中的一种，其他调度算法请自行查阅。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120190609614-39153588.png" alt="img"></p><p>我们通过删除pod的方式，让pod漂移到另一台node节点，再来查看一下：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120190907800-107826727.png" alt="img"></p><p> 可以看到，虽然pod漂移了，但是service资源提供的接入点是不变的，这得益于ipvs的强大。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120191007242-742957714.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120191351319-1327643689.png" alt="img"></p><p> 　<strong>1.13 查看资源配置清单详细信息</strong>：-o yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod nginx-dp-5dfc689474-c5r9r -o yaml -n kube-public</span><br><span class="line"># kubectl get deploy nginx-dp -o yaml -n kube-public</span><br><span class="line"># kubectl get svc -o yaml -n kube-public</span><br></pre></td></tr></table></figure><p>　　<strong>1.14 查看属性的定义及用法</strong>：例：查看service资源下metadata的定义及用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl explain service.metadata</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191120192527111-2002912807.png" alt="img"></p><p><strong>2、声明式-依赖统一资源配置清单(manifest) yaml/json</strong></p><p>　　<strong>2.1 创建一个svc资源配置清单</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi nginx-ds-svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  type: ClusterIP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f nginx-ds-svc.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191121151749735-1039780189.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get svc nginx-ds -o yaml -n default</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191121152848475-1793715531.png" alt="img"></p><p> 　<strong>2.2 离线修改资源配置清单：</strong></p><p>　　修改资源配置清单后可以使用apply应用。</p><p>这里增加一个知识点，就是kube-apiserver这个服务当中，有一个限制端口范围的参数：–service-node-port-range 10-29999，这个参数在使用apply修改资源配置清单的时候，会有作用</p><p>如果修改后的资源配置清单中的port不在这个范围，会报错，修改这个以后，重启kube-apiserver即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi nginx-ds-svc.yaml #将对外暴露的端口改为881</span><br><span class="line"># kubectl apply -f nginx-ds-svc.yaml</span><br></pre></td></tr></table></figure><p>可以看到端口从80变成了881</p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191121183313312-407916940.png" alt="img"></p><p> 修改资源配置清单分为在线修改和离线修改（推荐离线修改）：</p><p>　　<strong>2.3 在线修改：</strong>我这里使用在线修改，将端口修改为888</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl edit svc nginx-ds -n default</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191121184355023-942641319.png" alt="img"></p><p> 　2.4 删除资源：</p><p>　　　　2.4.1 陈述式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete svc nginx-ds -n default</span><br></pre></td></tr></table></figure><p>　　　　2.4.2 声明式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete -f nginx-ds-svc.yaml</span><br></pre></td></tr></table></figure><p>3、GUI式-主要依赖图形化操作界面(web界面)</p><h1 id="kubernetes进阶（二）核心网络插件Flannel"><a href="#kubernetes进阶（二）核心网络插件Flannel" class="headerlink" title="kubernetes进阶（二）核心网络插件Flannel"></a>kubernetes进阶（二）核心网络插件Flannel</h1><p><strong>网络插件Flannel介绍：<a href="https://www.kubernetes.org.cn/3682.html">https://www.kubernetes.org.cn/3682.html</a></strong></p><p>首先，flannel利用Kubernetes API或者etcd用于存储整个集群的网络配置，其中最主要的内容为设置集群的网络地址空间。例如，设定整个集群内所有容器的IP都取自网段“10.1.0.0/16”。</p><p>接着，flannel在每个主机中运行flanneld作为agent，它会为所在主机从集群的网络地址空间中，获取一个小的网段subnet，本主机内所有容器的IP地址都将从中分配。</p><p>然后，flanneld再将本主机获取的subnet以及用于主机间通信的Public IP，同样通过kubernetes API或者etcd存储起来。</p><p>最后，flannel利用各种backend mechanism，例如udp，vxlan等等，跨主机转发容器间的网络流量，完成容器间的跨主机通信。</p><p>一、下载flannel插件</p><p>在所有node节点安装flannel插件，本次环境在hdss7-21，hdss7-22上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;flannel&#x2F;releases&#x2F;download&#x2F;v0.11.0&#x2F;flannel-v0.11.0-linux-amd64.tar.gz</span><br><span class="line"># mkdir &#x2F;opt&#x2F;flannel-v0.11.0</span><br><span class="line"># tar xf flannel-v0.11.0-linux-amd64.tar.gz -C &#x2F;opt&#x2F;flannel-v0.11.0&#x2F;</span><br><span class="line"># ln -s &#x2F;opt&#x2F;flannel-v0.11.0&#x2F; &#x2F;opt&#x2F;flannel</span><br><span class="line"># cd &#x2F;opt&#x2F;flannel</span><br><span class="line"># mkdir cert</span><br></pre></td></tr></table></figure><p>因为要和apiserver通信，所以要配置client证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cert]# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;ca.pem . </span><br><span class="line"></span><br><span class="line">cert]# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;client.pem .</span><br><span class="line"></span><br><span class="line">cert]# scp hdss7-200:&#x2F;opt&#x2F;certs&#x2F;client-key.pem .</span><br></pre></td></tr></table></figure><p>编辑环境变量env文件：红色部分根据node节点信息修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vi subnet.env</span><br><span class="line"></span><br><span class="line">FLANNEL_NETWORK&#x3D;172.7.0.0&#x2F;16</span><br><span class="line">FLANNEL_SUBNET&#x3D;172.7.21.1&#x2F;24</span><br><span class="line">FLANNEL_MTU&#x3D;1500</span><br><span class="line">FLANNEL_IPMASQ&#x3D;false</span><br></pre></td></tr></table></figure><p>编辑启动脚本：红色部分根据node节点信息修改，并且eth0信息根据本机网卡信息修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi flanneld.sh </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">.&#x2F;flanneld \</span><br><span class="line">  --public-ip&#x3D;10.4.7.21 \</span><br><span class="line">  --etcd-endpoints&#x3D;https:&#x2F;&#x2F;10.4.7.12:2379,https:&#x2F;&#x2F;10.4.7.21:2379,https:&#x2F;&#x2F;10.4.7.22:2379 \</span><br><span class="line">  --etcd-keyfile&#x3D;.&#x2F;cert&#x2F;client-key.pem \</span><br><span class="line">  --etcd-certfile&#x3D;.&#x2F;cert&#x2F;client.pem \</span><br><span class="line">  --etcd-cafile&#x3D;.&#x2F;cert&#x2F;ca.pem \</span><br><span class="line">  --iface&#x3D;eth0 \</span><br><span class="line">  --subnet-file&#x3D;.&#x2F;subnet.env \</span><br><span class="line">  --healthz-port&#x3D;2401</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod u+x flanneld.sh</span><br></pre></td></tr></table></figure><p>创建日志存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;logs&#x2F;flanneld</span><br></pre></td></tr></table></figure><p>在etcd中增加网络配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;etcd</span><br></pre></td></tr></table></figure><p>测试使用 host-gw模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;etcdctl set &#x2F;coreos.com&#x2F;network&#x2F;config &#39;&#123;&quot;Network&quot;: &quot;172.7.0.0&#x2F;16&quot;, &quot;Backend&quot;: &#123;&quot;Type&quot;: &quot;host-gw&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>查看网络模型配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;etcdctl get &#x2F;coreos.com&#x2F;network&#x2F;config</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019112120002239-1697140830.png" alt="img"></p><p>编辑supervisor启动脚本：红色部分记得修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;supervisord.d&#x2F;flannel.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[program:flanneld-7-21]</span><br><span class="line">command&#x3D;&#x2F;opt&#x2F;flannel&#x2F;flanneld.sh                             ; the program (relative uses PATH, can take args)</span><br><span class="line">numprocs&#x3D;1                                                   ; number of processes copies to start (def 1)</span><br><span class="line">directory&#x3D;&#x2F;opt&#x2F;flannel                                       ; directory to cwd to before exec (def no cwd)</span><br><span class="line">autostart&#x3D;true                                               ; start at supervisord start (default: true)</span><br><span class="line">autorestart&#x3D;true                                             ; retstart at unexpected quit (default: true)</span><br><span class="line">startsecs&#x3D;30                                                 ; number of secs prog must stay running (def. 1)</span><br><span class="line">startretries&#x3D;3                                               ; max # of serial start failures (default 3)</span><br><span class="line">exitcodes&#x3D;0,2                                                ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">stopsignal&#x3D;QUIT                                              ; signal used to kill process (default TERM)</span><br><span class="line">stopwaitsecs&#x3D;10                                              ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">user&#x3D;root                                                    ; setuid to this UNIX account to run the program</span><br><span class="line">redirect_stderr&#x3D;true                                         ; redirect proc stderr to stdout (default false)</span><br><span class="line">stdout_logfile&#x3D;&#x2F;data&#x2F;logs&#x2F;flanneld&#x2F;flanneld.stdout.log       ; stderr log path, NONE for none; default AUTO</span><br><span class="line">stdout_logfile_maxbytes&#x3D;64MB                                 ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">stdout_logfile_backups&#x3D;4                                     ; # of stdout logfile backups (default 10)</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB                                  ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">stdout_events_enabled&#x3D;false                                  ; emit events on stdout writes (default false)</span><br></pre></td></tr></table></figure><p>更新supervisor配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl update</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019112200204515-28730350.png" alt="img"></p><p><strong>这里需要修改iptables优化SNAT规则，否则在访问时，其他节点记录的是node节点的ip 10.4.7.21，而不是pod集群内部的172.7.21.x，红色部分按需修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># yum install iptables-services -y</span><br><span class="line"># iptables -t nat -D POSTROUTING -s 172.7.21.0&#x2F;24 ! -o docker0 -j MASQUERADE</span><br><span class="line"># iptables -t nat -I POSTROUTING -s 172.7.21.0&#x2F;24 ! -d 172.7.0.0&#x2F;16 ! -o docker0 -j MASQUERADE</span><br><span class="line"># iptables-save |grep -i postrouting</span><br><span class="line"># iptables-save &gt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br></pre></td></tr></table></figure><p>修改后会影响到docker原本的iptables链的规则，所以需要重启docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure><p>配置vxlan模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;etcd</span><br><span class="line"># .&#x2F;etcdctl set &#x2F;coreos.com&#x2F;network&#x2F;config  &#39;&#123;&quot;Network&quot;: &quot;172.7.0.0&#x2F;16&quot;, &quot;Backend&quot;: &#123;&quot;Type&quot;: &quot;vxlan&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>重启flanneld：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl restart flanneld-7-21</span><br></pre></td></tr></table></figure><p>可以发现多了一块网卡，这块网卡就是vxlan用于隧道通信的虚拟网卡：</p><h1 id="kubernetes进阶（三）服务发现-coredns"><a href="#kubernetes进阶（三）服务发现-coredns" class="headerlink" title="kubernetes进阶（三）服务发现-coredns"></a>kubernetes进阶（三）服务发现-coredns</h1><p>服务发现需要解决的问题：</p><p>　　1、服务动态性强–容器在k8s中ip变化或迁移</p><p>　　2、更新发布频繁–版本迭代快</p><p>　　3、支持自动伸缩–大促或流量高峰</p><p>我们为了解决pod地址变化的问题，我们之前部署了service资源，将pod地址通过service资源暴露的固定地址，来解决以上问题，</p><p>那么，如何解决service资源名称和service资源暴露出来的集群网络IP做自动的对应呢，从而达到服务的自动发现呢？</p><p>在k8s中，coredns就是为了解决以上问题。</p><p>从coredns开始，我们采用向k8s中交付容器的方式，来部署服务，并且使用声明式的方式，来部署服务。</p><p>首先在hdss7-200上创建一个nginx虚拟主机，用来获取资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;k8s-yaml.kococ.cn.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  k8s-yaml.kococ.cn;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        default_type text&#x2F;plain;</span><br><span class="line">        root &#x2F;data&#x2F;k8s-yaml;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;k8s-yaml&#x2F;coredns# nginx -t</span><br><span class="line"># nginx -s reload</span><br></pre></td></tr></table></figure><p>添加域名解析：hdss-11上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br><span class="line">在最后添加一条解析记录</span><br><span class="line"></span><br><span class="line">$ORIGIN kococ.cn.</span><br><span class="line">$TTL 600        ; 10 minutes</span><br><span class="line">@               IN SOA  dns.kococ.cn. dnsadmin.kococ.cn. (</span><br><span class="line">                                2019061803 ; serial</span><br><span class="line">                                10800      ; refresh (3 hours)</span><br><span class="line">                                900        ; retry (15 minutes)</span><br><span class="line">                                604800     ; expire (1 week)</span><br><span class="line">                                86400      ; minimum (1 day)</span><br><span class="line">                                )</span><br><span class="line">                                NS   dns.kococ.cn.</span><br><span class="line">$TTL 60 ; 1 minute</span><br><span class="line">dns                A    10.4.7.11</span><br><span class="line">harbor             A    10.4.7.200</span><br><span class="line">k8s-yaml           A    10.4.7.200</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart named</span><br></pre></td></tr></table></figure><p>coredns github地址：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/coredns/coredns.yaml.base">https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/coredns/coredns.yaml.base</a></p><p>在hdss7-200上部署coredns：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;coredns</span><br><span class="line"># docker pull docker.io&#x2F;coredns&#x2F;coredns:1.6.1</span><br><span class="line"># docker tag c0f6e815079e harbor.kococ.cn&#x2F;public&#x2F;coredns:v1.6.1</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;coredns:v1.6.1</span><br></pre></td></tr></table></figure><p>然后编辑资源配置清单：可以从官网上参考资源配置清单</p><p>1.rbac.yaml–拿到集群相关权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi rbac.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">      kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">      addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io&#x2F;bootstrapping: rbac-defaults</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">  name: system:coredns</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - endpoints</span><br><span class="line">  - services</span><br><span class="line">  - pods</span><br><span class="line">  - namespaces</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io&#x2F;autoupdate: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io&#x2F;bootstrapping: rbac-defaults</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: EnsureExists</span><br><span class="line">  name: system:coredns</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:coredns</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p>2.cm.yaml–configmap 对集群的相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi cm.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        log</span><br><span class="line">        health</span><br><span class="line">        ready</span><br><span class="line">        kubernetes cluster.local 192.168.0.0&#x2F;16  #service资源cluster地址</span><br><span class="line">        forward . 10.4.7.11   #上级DNS地址</span><br><span class="line">        cache 30</span><br><span class="line">        loop</span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>3.dp.yaml—pod控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: coredns</span><br><span class="line">    kubernetes.io&#x2F;name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: coredns</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: coredns</span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: coredns</span><br><span class="line">      containers:</span><br><span class="line">      - name: coredns</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;coredns:v1.6.1</span><br><span class="line">        args:</span><br><span class="line">        - -conf</span><br><span class="line">        - &#x2F;etc&#x2F;coredns&#x2F;Corefile</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: &#x2F;etc&#x2F;coredns</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns-tcp</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9153</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: &#x2F;health</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">      dnsPolicy: Default</span><br><span class="line">      volumes:</span><br><span class="line">        - name: config-volume</span><br><span class="line">          configMap:</span><br><span class="line">            name: coredns</span><br><span class="line">            items:</span><br><span class="line">            - key: Corefile</span><br><span class="line">              path: Corefile</span><br></pre></td></tr></table></figure><p>4.svc.yaml—service资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: coredns</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">    kubernetes.io&#x2F;name: &quot;CoreDNS&quot;</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: coredns</span><br><span class="line">  clusterIP: 192.168.0.2</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">  - name: metrics</span><br><span class="line">    port: 9153</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure><p>然后使用http请求资源配置清单yaml的方式来创建资源：在任意node节点上创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;coredns&#x2F;rbac.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;coredns&#x2F;cm.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;coredns&#x2F;dp.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;coredns&#x2F;svc.yaml</span><br></pre></td></tr></table></figure><p>查看运行情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get all -n kube-system</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019112317511586-952619728.png" alt="img"></p><p> 查看coredns的cluster ip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get svc -o wide -n kube-system</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019123171846178-306539553.png" alt="img"></p><p> 测试coredns：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># dig -t A www.baidu.com @192.168.0.2 +short</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019112372154297-518829231.png" alt="img"></p><p> 看到已经可以解析到百度。</p><p>测试coredns解析service资源名称，首先查看kube-public下是否有service资源，如果没有，创建一个，使用kubectl expose nginx-dp –port=80 -n kube-public</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl expose nginx-dp --port&#x3D;80 -n kube-public</span><br></pre></td></tr></table></figure><p>测试：使用coredns测试解析，需要使用SQDN规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># dig -t A nginx-dp.kube-public.svc.cluster.local. @192.168.0.2 +short</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019123173004191-1776516653.png" alt="img"></p><p> 可以看到我们没有手动添加任何解析记录，我们nginx-dp的service资源的IP，已经被解析了：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-2019112373122519-900176878.png" alt="img"></p><p> 那么为什么呢？</p><p>推荐大家了解一下coredns都做了什么：<a href="http://ccnuo.com/2019/08/25/CoreDNS%EF%BC%9AKubernetes%E5%86%85%E9%83%A8%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86%E3%80%81%E5%BC%8A%E7%AB%AF%E5%8F%8A%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/">Kubernetes内部域名解析原理、弊端及优化方式</a></p><p>大家可以看到，当我进入到pod内部以后，我们会发现我们的dns地址是我们的coredns地址，以及搜索域：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191174517612-971806757.png" alt="img"></p><p>现在，我们已经解决了在集群内部解析的问题，但是我们怎么做到在集群外部访问我们的服务呢？</p><p>接下来我们来学习k8s服务暴露。</p><h1 id="kubernetes进阶（四）服务暴露-ingress控制器之traefik"><a href="#kubernetes进阶（四）服务暴露-ingress控制器之traefik" class="headerlink" title="kubernetes进阶（四）服务暴露-ingress控制器之traefik"></a>kubernetes进阶（四）服务暴露-ingress控制器之traefik</h1><p>上一章我们测试了在集群内部解析service名称，</p><p>下面我们测试在集群外部解析：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191123175410495-632059730.png" alt="img"></p><p> 根本解析不到，因为我们外部用的dns是10.4.7.11，也就是我们的自建bind dns，这个DNS服务器上也没有响应的搜索域。</p><p>如何能让集群外部访问nginx-dp？</p><p>这里有两种服务暴露方式：修改工作模式，在kube-proxy中修改，并重启</p><p>1、使用nodeport方式，但是这种方式不能使用ipvs，只能使用iptables，iptables只能使用rr调度方式。原理相当于端口映射，将容器内的端口映射到宿主机上的某个端口。</p><p>2、使用ingress，但是只能工作在七层网络下，建议暴露http, https可以使用前端nginx来做证书方面的卸载 —推荐使用</p><p>Ingress是基于域名和URL路径，将用户的请求转发至特定的service资源。</p><p>下面我们部署traefik：<a href="https://github.com/containous/traefik">GITHUB官方地址</a>  在hdss7-200上执行：</p><p>下载镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull traefik:v1.7.2-alpine</span><br><span class="line"># docker tag add5fac61ae5 harbor.kococ.cn&#x2F;public&#x2F;traefik:v1.7.2</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;traefik:v1.7.</span><br></pre></td></tr></table></figure><p>创建资源配置清单：</p><p>1.rbac.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;traefik&#x2F;</span><br><span class="line"># vi rbac.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">      - endpoints</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - extensions</span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p>2.ds.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi ds.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress</span><br><span class="line">        name: traefik-ingress</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: traefik-ingress-controller</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - image: harbor.kococ.cn&#x2F;public&#x2F;traefik:v1.7.2</span><br><span class="line">        name: traefik-ingress</span><br><span class="line">        ports:</span><br><span class="line">        - name: controller</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 81</span><br><span class="line">        - name: admin-web</span><br><span class="line">          containerPort: 8080</span><br><span class="line">        securityContext:</span><br><span class="line">          capabilities:</span><br><span class="line">            drop:</span><br><span class="line">            - ALL</span><br><span class="line">            add:</span><br><span class="line">            - NET_BIND_SERVICE</span><br><span class="line">        args:</span><br><span class="line">        - --api</span><br><span class="line">        - --kubernetes</span><br><span class="line">        - --logLevel&#x3D;INFO</span><br><span class="line">        - --insecureskipverify&#x3D;true</span><br><span class="line">        - --kubernetes.endpoint&#x3D;https:&#x2F;&#x2F;10.4.7.10:7443</span><br><span class="line">        - --accesslog</span><br><span class="line">        - --accesslog.filepath&#x3D;&#x2F;var&#x2F;log&#x2F;traefik_access.log</span><br><span class="line">        - --traefiklog</span><br><span class="line">        - --traefiklog.filepath&#x3D;&#x2F;var&#x2F;log&#x2F;traefik.log</span><br><span class="line">        - --metrics.prometheus</span><br></pre></td></tr></table></figure><p>3.svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-service</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      name: controller</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 8080</span><br><span class="line">      name: admin-web</span><br></pre></td></tr></table></figure><p>4.ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi ingress.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io&#x2F;ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-ingress-service</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>然后到node节点上创建资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;traefik&#x2F;rbac.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;traefik&#x2F;ds.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;traefik&#x2F;svc.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;traefik&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p>配置nginx解析：hdss7-11,hdss7-12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;kococ.cn.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream default_backend_traefik &#123;</span><br><span class="line">    server 10.4.7.21:81    max_fails&#x3D;3 fail_timeout&#x3D;10s;</span><br><span class="line">    server 10.4.7.22:81    max_fails&#x3D;3 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    server_name *.kococ.cn;</span><br><span class="line">  </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;default_backend_traefik;</span><br><span class="line">        proxy_set_header Host       $http_host;</span><br><span class="line">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在hdss7-11上添加域名解析：在ingress.yaml中的host值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br></pre></td></tr></table></figure><p>在最后加上traefik的域名解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN kococ.cn.</span><br><span class="line">$TTL 600        ; 10 minutes</span><br><span class="line">@               IN SOA  dns.kococ.cn. dnsadmin.kococ.cn. (</span><br><span class="line">                                2019061804 ; serial</span><br><span class="line">                                10800      ; refresh (3 hours)</span><br><span class="line">                                900        ; retry (15 minutes)</span><br><span class="line">                                604800     ; expire (1 week)</span><br><span class="line">                                86400      ; minimum (1 day)</span><br><span class="line">                                )</span><br><span class="line">                                NS   dns.kococ.cn.</span><br><span class="line">$TTL 60 ; 1 minute</span><br><span class="line">dns                A    10.4.7.11</span><br><span class="line">harbor             A    10.4.7.200</span><br><span class="line">k8s-yaml           A    10.4.7.200</span><br><span class="line">traefik            A    10.4.7.10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart named</span><br></pre></td></tr></table></figure><p>然后我们就可以在集群外，通过浏览器访问这个域名了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;traefik.kococ.cn  #我们的宿主机的虚拟网卡指定了bind域名解析服务器</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191123195126520-796246549.png" alt="img"></p><h1 id="kubernetes进阶（五）dashboard–WEB管理"><a href="#kubernetes进阶（五）dashboard–WEB管理" class="headerlink" title="kubernetes进阶（五）dashboard–WEB管理"></a>kubernetes进阶（五）dashboard–WEB管理</h1><p>dashboard是k8s的可视化管理平台，是三种管理k8s集群方法之一</p><p>首先下载镜像上传到我们的私有仓库中：hdss7-200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull k8scn&#x2F;kubernetes-dashboard-amd64:v1.8.3</span><br><span class="line"># docker tag fcac9aa03fd6 harbor.kococ.cn&#x2F;public&#x2F;dashboard:v1.8.3</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;dashboard:v1.8.3</span><br></pre></td></tr></table></figure><p>编辑dashboard资源配置清单：</p><p>1、rbac.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi rbac.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;k8s-yaml&#x2F;dashboard</span><br><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;dashboard</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">  name: kubernetes-dashboard-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard-admin</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io&#x2F;critical-pod: &#39;&#39;</span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;dashboard:v1.8.3</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 300Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 50m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">          protocol: TCP</span><br><span class="line">        args:</span><br><span class="line">          # PLATFORM-SPECIFIC ARGS HERE</span><br><span class="line">          - --auto-generate-certificates</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp-volume</span><br><span class="line">          mountPath: &#x2F;tmp</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            scheme: HTTPS</span><br><span class="line">            path: &#x2F;</span><br><span class="line">            port: 8443</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: tmp-volume</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      serviceAccountName: kubernetes-dashboard-admin</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: &quot;CriticalAddonsOnly&quot;</span><br><span class="line">        operator: &quot;Exists&quot;</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  ports:</span><br><span class="line">  - port: 443</span><br><span class="line">    targetPort: 8443</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi ingress.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io&#x2F;ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: dashboard.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: kubernetes-dashboard</span><br><span class="line">          servicePort: 443</span><br></pre></td></tr></table></figure><p>创建资源：任意node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dashboard&#x2F;rbac.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dashboard&#x2F;dp.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dashboard&#x2F;svc.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dashboard&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p>添加域名解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br><span class="line">dashboard          A    10.4.7.10</span><br><span class="line"># systemctl restart named</span><br></pre></td></tr></table></figure><p>通过浏览器访问：</p><p><a href="http://dashboard.kococ.cn/">http://dashboard.kococ.cn</a></p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191125193911658-1073438860.png" alt="img"></p><p>美好的点点点运维开始了~</p><p>但是，我们可以看到我们安装1.8版本的dashboard，默认是可以跳过验证的：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126161244510-1269371002.png" alt="img"></p><p>很显然，跳过登录，是不科学的，因为我们在配置dashboard的rbac权限时，绑定的角色是system:admin，这个是集群管理员的角色，权限很大，所以这里我们把版本换成1.10以上版本</p><p>下载1.10.1版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull loveone&#x2F;kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line"># docker tag f9aed6605b81 harbor.kococ.cn&#x2F;public&#x2F;dashboard:v1.10.1</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;dashboard:v1.10.1</span><br></pre></td></tr></table></figure><p>修改dp.yaml重新应用，我直接用edit修改了，没有使用apply</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl edit deploy kubernetes-dashboard -n kube-system</span><br></pre></td></tr></table></figure><p>等待滚动发布完成后，在刷新dashboard页面：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126163610063-918814879.png" alt="img"></p><p> 可以看到这里原来的skip跳过已经没有了，我们如果想登陆，必须输入token，那我们如何获取token呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get secret  -n kube-system</span><br><span class="line"># kubectl describe secret kubernetes-dashboard-admin-token-pg77n  -n kube-system</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126172440979-1913961041.png" alt="img"></p><p> 这样我们就拿到了token，接下来我们试试能不能登录：</p><p>我们发现我们还是无法登录，原因是必须使用https登录，接下来我们需要申请证书：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126172608230-363720611.png" alt="img"></p><p>接下来我们申请证书：</p><p>依然使用cfssl来申请证书：hdss7-200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;certs&#x2F;</span><br><span class="line"># vi dashboard-csr.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;*.kococ.cn&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;od&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;ops&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;server dashboard-csr.json |cfssl-json -bare dashboard</span><br></pre></td></tr></table></figure><p>然后拷贝到我们nginx的服务器上：7-11 7-12 都需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;etc&#x2F;nginx&#x2F;</span><br><span class="line"># mkdir certs</span><br><span class="line"># cd certs</span><br><span class="line"># scp hdss7-200:&#x2F;opt&#x2F;cert&#x2F;dash* .&#x2F;</span><br><span class="line"># cd &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line"># vi dashboard.kococ.cn.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  dashboard.kococ.cn;</span><br><span class="line"></span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$&#123;server_name&#125;$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  dashboard.kococ.cn;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &quot;certs&#x2F;dashboard.pem&quot;;</span><br><span class="line">    ssl_certificate_key &quot;certs&#x2F;dashboard-key.pem&quot;;</span><br><span class="line">    ssl_session_cache shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;default_backend_traefik;</span><br><span class="line">        proxy_set_header Host       $http_host;</span><br><span class="line">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nginx -t</span><br><span class="line"># nginx -s reload</span><br></pre></td></tr></table></figure><p>然后刷新页面：虽然证书无效(因为是自签证书)，但是已经是https了，试下我们刚才的token能不能登录了</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126183554740-658611982.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191126183711805-835833813.png" alt="img"></p><p>可以登录了~</p><p>登录是登录了，但是我们要思考一个问题，我们使用rbac授权来访问dashboard,如何做到权限精细化呢？比如开发，只能看，不能摸，不同的项目组，看到的资源应该是不一样的，测试看到的应该是测试相关的资源。</p><p>我们在下一章详解sa授权和ua授权。</p><h1 id="kubernetes进阶（六）k8s平滑升级"><a href="#kubernetes进阶（六）k8s平滑升级" class="headerlink" title="kubernetes进阶（六）k8s平滑升级"></a>kubernetes进阶（六）k8s平滑升级</h1><p>当我们遇到K8S有漏洞的时候，或者为了满足需求，有时候可能会需要升级或者降级版本，</p><p>为了减少对业务的影响，尽量选择在业务低谷的时候来升级：</p><p>首先准备好文件：我这里选择的是内网文件服务器上下载的，请自行下载所需的k8s源文件：3</p><p>这里演示更换一个节点：7-21</p><p>查看版本：将7-21更换成1.15.2</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128181938447-420585628.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br></pre></td></tr></table></figure><p>\</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># wget http:&#x2F;&#x2F;192.168.1.60:8080&#x2F;day1&#x2F;kubernetes-server-linux-amd64-v1.15.2.tar.gz</span><br><span class="line"># tar -zxf kubernetes-server-linux-amd64-v1.15.2.tar.gz</span><br><span class="line"># cd .. </span><br><span class="line"># cp -r kubernetes &#x2F;opt&#x2F;kubernetes-v1.15.2</span><br><span class="line"># cd kubernetes-v1.15.2&#x2F;</span><br><span class="line"># rm -rf kubernetes-src.tar.gz</span><br><span class="line"># cd server&#x2F;bin&#x2F; </span><br><span class="line"># rm -rf *.tar</span><br><span class="line"># rm -rf *tag</span><br><span class="line"># mkdir cert conf</span><br><span class="line"># cp &#x2F;opt&#x2F;kubernetes-v1.15.4&#x2F;server&#x2F;bin&#x2F;cert&#x2F;* .&#x2F;cert&#x2F;</span><br><span class="line"># cp &#x2F;opt&#x2F;kubernetes-v1.15.4&#x2F;server&#x2F;bin&#x2F;conf&#x2F;* .&#x2F;conf&#x2F;</span><br><span class="line"># cp &#x2F;opt&#x2F;kubernetes-v1.15.4&#x2F;server&#x2F;bin&#x2F;*.sh &#x2F;opt&#x2F;kubernetes-v1.15.2&#x2F;server&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>\</p><p>然后在nginx上摘除api-server的四层负载：7-11，7-12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><p>把我们要升级的apiserver节点注释掉：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128181520668-1713984935.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nginx -t</span><br><span class="line"># nginx -s reload</span><br></pre></td></tr></table></figure><p>准备好后，摘除node，先看下哪个node上跑的pod少：我们这里一样多，那我们就搞7-21，</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128182818349-1528346077.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete node hdss7-21.host.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128183109611-326242097.png" alt="img"></p><p>我们的coredns已经从node7-21迁移到了7-22上，接下来我们更换软连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rm -rf kubernetes</span><br><span class="line"># ln -s &#x2F;opt&#x2F;kubernetes-v1.15.2 &#x2F;opt&#x2F;kubernetes</span><br></pre></td></tr></table></figure><p>然后重启使用supervisor重启服务：生产上记得一个一个重启，我们这里为了方便，直接重启所有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># supervisorctl restart all</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128183955698-809875028.png" alt="img"></p><p> 启动成功后，查看版本：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128184043612-695283976.png" alt="img"></p><p> 可以看到node版本已经从1.15.4变更为了1.15.2，并且kubelet已经自动帮我们把节点加入到了集群，然后打开nginx负载，即可。</p><h1 id="kubernetes实战-交付dubbo服务到k8s集群（一）准备工作"><a href="#kubernetes实战-交付dubbo服务到k8s集群（一）准备工作" class="headerlink" title="kubernetes实战-交付dubbo服务到k8s集群（一）准备工作"></a>kubernetes实战-交付dubbo服务到k8s集群（一）准备工作</h1><p>本次交付的服务架构图：因为zookeeper属于有状态服务，不建议将有状态服务，交付到k8s，如mysql，zk等。</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128190859232-1477530286.png" alt="img"></p><p>首先部署zk集群：zk是java服务，需要依赖jdk，jdk请自行下载：</p><p>集群分布：7-11，7-12，7-21</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;opt&#x2F;src</span><br><span class="line"># mkdir &#x2F;usr&#x2F;jav</span><br><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># tar -xf jdk-8u221-linux-x64.tar.gz -C &#x2F;usr&#x2F;java&#x2F;</span><br><span class="line"># ln -s &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_221&#x2F; &#x2F;usr&#x2F;java&#x2F;jdk</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">#JAVA HOME</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;$CLASSPATH:$JAVA_HOME&#x2F;lib:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># source &#x2F;etc&#x2F;profile</span><br><span class="line"># java -version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128192651792-1828529411.png" alt="img"></p><p> 下载zookeeper：<a href="https://archive.apache.org/dist/zookeeper/">下载地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br></pre></td></tr></table></figure><p>我这里使用的内网地址下载的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># wget http:&#x2F;&#x2F;192.168.1.60:8080&#x2F;day3&#x2F;zookeeper-3.4.14.tar.gz</span><br><span class="line"># tar -zxf zookeeper-3.4.14.tar.gz -C ..&#x2F;</span><br><span class="line"># ln -s &#x2F;opt&#x2F;zookeeper-3.4.14&#x2F; &#x2F;opt&#x2F;zookeeper</span><br><span class="line"># mkdir -pv &#x2F;data&#x2F;zookeeper&#x2F;data &#x2F;data&#x2F;zookeeper&#x2F;logs</span><br></pre></td></tr></table></figure><p>编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;zookeeper&#x2F;conf&#x2F;zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime&#x3D;2000</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line">dataDir&#x3D;&#x2F;data&#x2F;zookeeper&#x2F;data</span><br><span class="line">dataLogDir&#x3D;&#x2F;data&#x2F;zookeeper&#x2F;logs</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line">server.1&#x3D;zk1.kococ.cn:2888:3888</span><br><span class="line">server.2&#x3D;zk2.kococ.cn:2888:3888</span><br><span class="line">server.3&#x3D;zk3.kococ.cn:2888:3888</span><br></pre></td></tr></table></figure><p>修改dns：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br></pre></td></tr></table></figure><p>添加zk1，zk2,zk3的解析：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128193931699-456528467.png" alt="img"></p><p> 修改zk集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7-11</span><br><span class="line"># echo 1 &gt; &#x2F;data&#x2F;zookeeper&#x2F;data&#x2F;myid</span><br><span class="line">7-12</span><br><span class="line"># echo 2 &gt; &#x2F;data&#x2F;zookeeper&#x2F;data&#x2F;myid</span><br><span class="line">7-21</span><br><span class="line"># echo 3 &gt; &#x2F;data&#x2F;zookeeper&#x2F;data&#x2F;myid</span><br></pre></td></tr></table></figure><p>启动zookeeper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;opt&#x2F;zookeeper&#x2F;bin&#x2F;zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128194348892-1300121134.png" alt="img"></p><p> 查看集群情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;opt&#x2F;zookeeper&#x2F;bin&#x2F;zkServer.sh status</span><br></pre></td></tr></table></figure><p>可以看到我们的7-12是leader：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128195441749-1928316302.png" alt="img"></p><p> 到此，zookeeper集群就搭建好了。</p><h1 id="Kubernetes实战-交付dubbo服务到k8s集群（二）交付jenkins到k8s集群"><a href="#Kubernetes实战-交付dubbo服务到k8s集群（二）交付jenkins到k8s集群" class="headerlink" title="Kubernetes实战-交付dubbo服务到k8s集群（二）交付jenkins到k8s集群"></a>Kubernetes实战-交付dubbo服务到k8s集群（二）交付jenkins到k8s集群</h1><p>首先下载jenkins镜像并上传到我们自己的私有仓库：7-200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull jenkins&#x2F;jenkins:2.190.3</span><br><span class="line"># docker tag 22b8b9a84dbe harbor.kococ.cn&#x2F;public&#x2F;jenkins:v2.190.3</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;jenkins:v2.190.3</span><br></pre></td></tr></table></figure><p>为了适应我们的环境，我们的jenkins不能直接使用，需要进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;dockerfile&#x2F;jenkins&#x2F;</span><br><span class="line"># cd &#x2F;data&#x2F;dockerfile&#x2F;jenkins</span><br><span class="line"># vi Dockerfile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM harbor.kococ.cn&#x2F;public&#x2F;jenkins:v2.190.3</span><br><span class="line">USER root  #定义启动jenkins的用户</span><br><span class="line">RUN &#x2F;bin&#x2F;cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp;\ </span><br><span class="line">    echo &#39;Asia&#x2F;Shanghai&#39; &gt;&#x2F;etc&#x2F;timezone  #修改时区 改成东八区</span><br><span class="line">ADD id_rsa &#x2F;root&#x2F;.ssh&#x2F;id_rsa  #加载用户密钥，dubbo服务拉取代码使用的ssh</span><br><span class="line">ADD config.json &#x2F;root&#x2F;.docker&#x2F;config.json  #加载宿主机的docker配置文件，登录远程仓库的认证信息加载到容器里面。</span><br><span class="line">ADD get-docker.sh &#x2F;get-docker.sh # 在jenkins容器内安装docker 客户端，jenkins要执行docker build，docker引擎用的是宿主机的docker引擎</span><br><span class="line">RUN echo &quot;    StrictHostKeyChecking no&quot; &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config &amp;&amp;\</span><br><span class="line">    &#x2F;get-docker.sh  # 跳过 ssh时候输入 yes 步骤，并执行安装docker</span><br></pre></td></tr></table></figure><p>首先创建密钥：<strong>邮箱请根据自己的邮箱自行修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa -b 2048 -C &quot;xxx@xx.xxx&quot; -N &quot;&quot; -f &#x2F;root&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><p>将私钥加载到jenkins，将公钥配置到git仓库中，否则不能拉取代码：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128201131435-718180792.png" alt="img"></p><p> 接下来创建Dockerfile中需要的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -fsSL get.docker.com -o get-docker.sh</span><br></pre></td></tr></table></figure><p>添加执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># chmod u+x get-docker.sh</span><br><span class="line"># cp &#x2F;root&#x2F;.ssh&#x2F;id_rsa .&#x2F;</span><br><span class="line"># cp &#x2F;root&#x2F;.docker&#x2F;config.json .&#x2F;</span><br></pre></td></tr></table></figure><p>创建运维私有仓库，打开我们的harbor.kococ.cn创建一个infra的私有仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128202309113-723672747.png" alt="img"></p><p> 然后build镜像：过程漫长，可以抽根烟，喝杯茶了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker build . -t harbor.kococ.cn&#x2F;infra&#x2F;jenkins:v2.190.3</span><br></pre></td></tr></table></figure><p>build完以后将镜像上传到我们的私有仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker push harbor.kococ.cn&#x2F;infra&#x2F;jenkins:v2.190.3</span><br></pre></td></tr></table></figure><p>为jenkins创建名称空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create ns infra</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128204331330-1829762592.png" alt="img"></p><p>创建一条secret，用于访问我们的私有仓库infra：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create secret docker-registry harbor --docker-server&#x3D;harbor.kococ.cn --docker-username&#x3D;admin --docker-password&#x3D;Harbor12345 -n infra</span><br></pre></td></tr></table></figure><p>解释一下上面的命令：创建一条secret，资源类型是docker-registry，名字是 harbor，docker-server=harbor.kococ.cn ，docker-username=admin ，docker-password=Harbor12345 -n 指定私有仓库名称infra</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128204425675-681258493.png" alt="img"></p><p> 为了让jenkins中一些需要持久化的数据，能够存储，我们需要使用共享存储，然后进行挂载：这里使用最简单的NFS共享存储，因为k8s默认支持nfs模块</p><p>在运维主机和所有的node节点安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install nfs-utils -y</span><br></pre></td></tr></table></figure><p>使用7-200作为服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;exports</span><br><span class="line">&#x2F;data&#x2F;nfs-volume 10.4.7.0&#x2F;24(rw,no_root_squash)</span><br><span class="line"># mkdir -p mkdir &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home</span><br><span class="line"># systemctl start nfs</span><br><span class="line"># systemctl enable nfs</span><br></pre></td></tr></table></figure><p>准备jenkins资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;</span><br><span class="line"># mkdir jenkins# cd jenkins</span><br></pre></td></tr></table></figure><p>1、dp.yaml</p><p>这里挂载了宿主机的docker.sock，使容器内的docker客户端可以直接与宿主机的docker引擎进行通信</p><p>在使用私有仓库的时候，资源清单中，一定要声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> imagePullSecrets:</span><br><span class="line"> - name: harbor</span><br><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: infra</span><br><span class="line">  labels: </span><br><span class="line">    name: jenkins</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: jenkins</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: jenkins </span><br><span class="line">        name: jenkins</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        nfs: </span><br><span class="line">          server: hdss7-200</span><br><span class="line">          path: &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home</span><br><span class="line">      - name: docker</span><br><span class="line">        hostPath: </span><br><span class="line">          path: &#x2F;run&#x2F;docker.sock   </span><br><span class="line">          type: &#39;&#39;</span><br><span class="line">      containers:</span><br><span class="line">      - name: jenkins</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;jenkins:v2.190.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: JAVA_OPTS</span><br><span class="line">          value: -Xmx512m -Xms512m</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: data</span><br><span class="line">          mountPath: &#x2F;var&#x2F;jenkins_home</span><br><span class="line">        - name: docker</span><br><span class="line">          mountPath: &#x2F;run&#x2F;docker.sock</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>2、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: jenkins</span><br></pre></td></tr></table></figure><p>3、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata: </span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: jenkins.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend: </span><br><span class="line">          serviceName: jenkins</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure><p>应用资源配置清单：node节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;jenkins&#x2F;dp.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;jenkins&#x2F;svc.yaml</span><br><span class="line"># kubectl create -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;jenkins&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p>查看我们创建的pod：这个启动时间还是挺长的，大概要几分钟时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n infra</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191128211126421-1682620137.png" alt="img"></p><p> 检查jenkins需要持久化的数据是否保存下来了：7-200</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191128211422046-837137067.png" alt="img"></p><p> 已经起来了：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128211515695-254028924.png" alt="img"></p><p> 添加解析：7-11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br><span class="line"># systemctl restart named</span><br></pre></td></tr></table></figure><p>浏览器访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;jenkins.kococ.cn</span><br></pre></td></tr></table></figure><p>经过配置我们已经部署好了jenkins：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128212009048-1239442402.png" alt="img"></p><p>安全配置：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128212139087-374243948.png" alt="img"></p><p> 允许跨域：</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191128212152398-811156861.png" alt="img"></p><p> 安装插件：</p><p>替换jenkins更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">###hdss7-200</span><br><span class="line"># cd &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home&#x2F;updates</span><br><span class="line"># sed -i &#39;s&#x2F;http:\&#x2F;\&#x2F;updates.jenkins-ci.org\&#x2F;download&#x2F;https:\&#x2F;\&#x2F;mirrors.tuna.tsinghua.edu.cn\&#x2F;jenkins&#x2F;g&#39; default.json &amp;&amp; sed -i &#39;s&#x2F;http:\&#x2F;\&#x2F;www.google.com&#x2F;https:\&#x2F;\&#x2F;www.baidu.com&#x2F;g&#39; default.json</span><br></pre></td></tr></table></figure><p>搜索蓝海插件并安装：blue ocean</p><p>验证jenkins容器状态：</p><p>1、是否是root用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker ps -a | grep jenkins</span><br><span class="line"># docker exec -it 8ff92f08e3aa &#x2F;bin&#x2F;bash</span><br><span class="line"># whoami</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203165445440-610903170.png" alt="img"></p><p>2、时区是否是东八区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># date</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203165507623-1969196294.png" alt="img"></p><p>3、是否使用宿主机docker引擎,在容器内查看宿主机上的docker资源情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker ps </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203165556025-1179815135.png" alt="img"></p><p>4、是否能免密访问gitee</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa -T git@gitee.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203170039528-832937712.png" alt="img"></p><p>5、是否能访问harbor私有仓库 ：原因是我们挂载了宿主机的docker config.json</p><p> <img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203165845072-313858884.png" alt="img"></p><p>完成验证以上内容后，证明我们基于本次实验环境的jenkins容器已经安装配置完成了。</p><h1 id="kubernetes实战-交付dubbo服务到k8s集群（三）安装配置maven和java运行时环境的底包镜像"><a href="#kubernetes实战-交付dubbo服务到k8s集群（三）安装配置maven和java运行时环境的底包镜像" class="headerlink" title="kubernetes实战-交付dubbo服务到k8s集群（三）安装配置maven和java运行时环境的底包镜像"></a>kubernetes实战-交付dubbo服务到k8s集群（三）安装配置maven和java运行时环境的底包镜像</h1><p>maven 官方地址： <a href="https://archive.apache.org/dist/maven/maven-3/">官方地址</a></p><p>下载maven，shdd7-200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;maven&#x2F;maven-3&#x2F;3.6.1&#x2F;binaries&#x2F;apache-maven-3.6.1-bin.tar.gz</span><br><span class="line"># mkdir &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home&#x2F;maven-3.6.1-8u232</span><br><span class="line"># tar -zxf apache-maven-3.6.1-bin.tar.gz -C &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home&#x2F;maven-3.6.1-8u232&#x2F;</span><br><span class="line"># cd &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home&#x2F;maven-3.6.1-8u232</span><br><span class="line"># mv apache-maven-3.6.1&#x2F;* .&#x2F;</span><br><span class="line"># rm -rf apache-maven-3.6.1&#x2F;</span><br></pre></td></tr></table></figure><p>初始化maven配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;data&#x2F;nfs-volume&#x2F;jenkins_home&#x2F;maven-3.6.1-8u232&#x2F;conf&#x2F;settings.xml </span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1034759-20191203171903321-603678527.png" alt="img"></p><p>制作dubbo微服务底包镜像：JAVA运行时环境的底包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker push stanleyws&#x2F;jre8:8u112</span><br><span class="line"># docker tag fa3a085d6ef1 harbor.kococ.cn&#x2F;public&#x2F;jre:8u112</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;jre:8u112</span><br></pre></td></tr></table></figure><p>创建Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;dockerfile&#x2F;</span><br><span class="line"># mkdir jre8</span><br><span class="line"># cd jre8</span><br><span class="line"># vi Dockerfile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM harbor.kococ.cn&#x2F;public&#x2F;jre:8u112</span><br><span class="line">RUN &#x2F;bin&#x2F;cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp;\</span><br><span class="line">    echo &#39;Asia&#x2F;Shanghai&#39; &gt;&#x2F;etc&#x2F;timezone</span><br><span class="line">ADD config.yml &#x2F;opt&#x2F;prom&#x2F;config.yml</span><br><span class="line">ADD jmx_javaagent-0.3.1.jar &#x2F;opt&#x2F;prom&#x2F;</span><br><span class="line">WORKDIR &#x2F;opt&#x2F;project_dir</span><br><span class="line">ADD entrypoint.sh &#x2F;entrypoint.sh</span><br><span class="line">CMD [&quot;&#x2F;entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure><p>创建Dockerfile所需文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vi config.yml</span><br><span class="line">--- </span><br><span class="line">rules: </span><br><span class="line"> - pattern: &#39;.*&#39;</span><br></pre></td></tr></table></figure><p>下载jmx_javaagent,监控jvm信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;io&#x2F;prometheus&#x2F;jmx&#x2F;jmx_prometheus_javaagent&#x2F;0.3.1&#x2F;jmx_prometheus_javaagent-0.3.1.jar -O jmx_javaagent-0.3.1.jar</span><br></pre></td></tr></table></figure><p>创建entrypoint.sh：<strong>使用exec 来运行java的jar包，能够使脚本将自己的pid 为‘1’ 传递给java进程，避免docker容器因没有前台进程而退出。并且不要加&amp;符。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi entrypoint.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">M_OPTS&#x3D;&quot;-Duser.timezone&#x3D;Asia&#x2F;Shanghai -javaagent:&#x2F;opt&#x2F;prom&#x2F;jmx_javaagent-0.3.1.jar&#x3D;$(hostname -i):$&#123;M_PORT:-&quot;12346&quot;&#125;:&#x2F;opt&#x2F;prom&#x2F;config.yml&quot;</span><br><span class="line">C_OPTS&#x3D;$&#123;C_OPTS&#125;</span><br><span class="line">JAR_BALL&#x3D;$&#123;JAR_BALL&#125;</span><br><span class="line">exec java -jar $&#123;M_OPTS&#125; $&#123;C_OPTS&#125; $&#123;JAR_BALL&#125;</span><br></pre></td></tr></table></figure><p>执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod u+x entrypoint.sh</span><br></pre></td></tr></table></figure><p>执行docker build：base仓库自行创建，权限公开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker build . -t harbor.kococ.cn&#x2F;base&#x2F;jre8:8u112</span><br></pre></td></tr></table></figure><h1 id="kubernetes实战-交付dubbo服务到k8s集群（四）使用blue-ocean流水线构建dubbo-demo-service"><a href="#kubernetes实战-交付dubbo服务到k8s集群（四）使用blue-ocean流水线构建dubbo-demo-service" class="headerlink" title="kubernetes实战-交付dubbo服务到k8s集群（四）使用blue ocean流水线构建dubbo-demo-service"></a>kubernetes实战-交付dubbo服务到k8s集群（四）使用blue ocean流水线构建dubbo-demo-service</h1><p>使用jenkins创建一个新的项目：dubbo-demo,选择流水线构建</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203180042177-1510394754.png" alt="img"></p><p> 勾选保存构建历史和指定项目为参数化构建项目：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203180042177-1510394754.png" alt="img"></p><p>添加构建参数：以下配置项，是王导根据多年生产经验总结出来的<strong>甩锅大法</strong>：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203181514853-2140160446.png" alt="img"></p><p>除了base_image和maven是choice parameter，其他都是string parameter</p><p>添加完成后，效果如图：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203184033235-840482716.png" alt="img"></p><p> 编写pipeline:仔细查看这个pipeline，里面都是我们上面编写的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any </span><br><span class="line">    stages &#123;</span><br><span class="line">      stage(&#39;pull&#39;) &#123; &#x2F;&#x2F;get project code from repo </span><br><span class="line">        steps &#123;</span><br><span class="line">          sh &quot;git clone $&#123;params.git_repo&#125; $&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125; &amp;&amp; cd $&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125; &amp;&amp; git checkout $&#123;params.git_ver&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(&#39;build&#39;) &#123; &#x2F;&#x2F;exec mvn cmd</span><br><span class="line">        steps &#123;</span><br><span class="line">          sh &quot;cd $&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125;  &amp;&amp; &#x2F;var&#x2F;jenkins_home&#x2F;maven-$&#123;params.maven&#125;&#x2F;bin&#x2F;$&#123;params.mvn_cmd&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(&#39;package&#39;) &#123; &#x2F;&#x2F;move jar file into project_dir</span><br><span class="line">        steps &#123;</span><br><span class="line">          sh &quot;cd $&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125; &amp;&amp; cd $&#123;params.target_dir&#125; &amp;&amp; mkdir project_dir &amp;&amp; mv *.jar .&#x2F;project_dir&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(&#39;image&#39;) &#123; &#x2F;&#x2F;build image and push to registry</span><br><span class="line">        steps &#123;</span><br><span class="line">          writeFile file: &quot;$&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125;&#x2F;Dockerfile&quot;, text: &quot;&quot;&quot;FROM harbor.kococ.cn&#x2F;$&#123;params.base_image&#125;</span><br><span class="line">ADD $&#123;params.target_dir&#125;&#x2F;project_dir &#x2F;opt&#x2F;project_dir&quot;&quot;&quot;</span><br><span class="line">          sh &quot;cd  $&#123;params.app_name&#125;&#x2F;$&#123;env.BUILD_NUMBER&#125; &amp;&amp; docker build -t harbor.kococ.cn&#x2F;$&#123;params.image_name&#125;:$&#123;params.git_ver&#125;_$&#123;params.add_tag&#125; . &amp;&amp; docker push harbor.kococ.cn&#x2F;$&#123;params.image_name&#125;:$&#123;params.git_ver&#125;_$&#123;params.add_tag&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203184959067-708998069.png" alt="img"></p><p> <strong>完成第一次构建：填写我们刚才配置的参数化构建参数：</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203185132374-366958806.png" alt="img"></p><p><strong>填写完以后执行bulid：第一次构建需要下载很多依赖包，时间很长，抽根烟，喝杯茶~</strong></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203185726935-8648216.png" alt="img"></p><p> 经过漫长的等待后，已经构建完成了，可以点击open blue ocean 查看构建历史及过程：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203192252033-1883276642.png" alt="img"></p><p> 检查harbor是否已经有这版镜像：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203192356152-1303859737.png" alt="img"></p><p>已经有了，接下来交付dubbo-demo-service服务到个人\个人\k8s：</p><p>准备个人\个人\k8s资源配置清单：7-200 <strong>红色部分，需要根据自己构建镜像的tag来进行修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-server&#x2F;</span><br><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-server</span><br><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-service</span><br><span class="line">  namespace: app</span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-service</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-service</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-service</span><br><span class="line">        name: dubbo-demo-service</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-service</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-service:master_191201_1200</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-server.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>由于我们使用的harbor私有镜像的项目是app，是个私有项目，所以需要创建secret资源：</p><p>创建 app命名空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create ns app</span><br></pre></td></tr></table></figure><p>创建secret资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create secret docker-registry harbor --docker-server&#x3D;harbor.kococ.cn --docker-username&#x3D;admin --docker-password&#x3D;Harbor12345 -n app</span><br></pre></td></tr></table></figure><p>应用资源配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-server&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p>检查pod是否创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203194609759-1456128063.png" alt="img"></p><p> 检查是否启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl logs dubbo-demo-service-77b687c6f8-v556v -n app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203194700522-516827915.png" alt="img"></p><p> 检查dubbo-server服务是否已经注册到了zookeeper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sh &#x2F;opt&#x2F;zookeeper&#x2F;bin&#x2F;zkCli.sh</span><br><span class="line"># ls &#x2F;</span><br><span class="line"># ls &#x2F;dubbo</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191203195337128-394541579.png" alt="img"></p><p>至此，dubbo-demo-service就已经交付到个人\个人\k8s中了。</p><h1 id="kubernetes实战-交付dubbo服务到k8s集群（五）交付dubbo-monitor监控服务到k8s"><a href="#kubernetes实战-交付dubbo服务到k8s集群（五）交付dubbo-monitor监控服务到k8s" class="headerlink" title="kubernetes实战-交付dubbo服务到k8s集群（五）交付dubbo-monitor监控服务到k8s"></a>kubernetes实战-交付dubbo服务到k8s集群（五）交付dubbo-monitor监控服务到k8s</h1><p>首先下载 <a href="https://github.com/Jeromefromcn/dubbo-monitor.git">dubbo-monitor源码包 </a>7-200</p><p>dubbo-monitor是监控zookeeper状态的一个服务，另外还有dubbo-admin，效果一样，感兴趣的可以自己研究一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;opt&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;github.com&#x2F;Jeromefromcn&#x2F;dubbo-monitor&#x2F;archive&#x2F;master.zip</span><br><span class="line"># yum -y install unzip</span><br><span class="line"># unzip master.zip</span><br><span class="line"># mv dubbo-monitor-mster dubbo-monitor</span><br><span class="line"># cd &#x2F;opt&#x2F;src&#x2F;dubbo-monitor</span><br></pre></td></tr></table></figure><p>修改配置文件：对应修改，不要全部删除内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;opt&#x2F;src&#x2F;dubbo-monitor&#x2F;dubbo-monitor-simple&#x2F;conf&#x2F;dubbo_origin.properties</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;zk1.kococ.cn:2181?backup&#x3D;zk2.kococ.cn:2181,zk3.kococ.cn:2181</span><br><span class="line">dubbo.protocol.port&#x3D;20880</span><br><span class="line">dubbo.jetty.port&#x3D;8080</span><br><span class="line">dubbo.jetty.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;monitor</span><br><span class="line">dubbo.statistics.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;statistics</span><br><span class="line">dubbo.charts.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;charts</span><br><span class="line">dubbo.log4j.file&#x3D;logs&#x2F;dubbo-monitor.log</span><br></pre></td></tr></table></figure><p>优化修改Dockerfile并限制jvm资源，将最后的exec命令的后台&amp;符号删除，并且将exec命令下面的都干掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -r -i -e &#39;&#x2F;^nohup&#x2F;&#123;p;:a;N;$!ba;d&#125;&#39;  .&#x2F;dubbo-monitor-simple&#x2F;bin&#x2F;start.sh &amp;&amp; sed  -r -i -e &quot;s%^nohup(.*)%exec \1%&quot;  .&#x2F;dubbo-monitor-simple&#x2F;bin&#x2F;start.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204170257428-630090879.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204170348252-2119039276.png" alt="img"></p><p>执行docker build并上传镜像到我们的私有仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cp -a dubbo-monitor&#x2F; &#x2F;data&#x2F;dockerfile&#x2F;</span><br><span class="line"># cd &#x2F;data&#x2F;dockerfile&#x2F;dubbo-monitor</span><br><span class="line"># docker build . -t harbor.kococ.cn&#x2F;infra&#x2F;dubbo-monitor:latest</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;infra&#x2F;dubbo-monitor:latest</span><br></pre></td></tr></table></figure><p>制作资源配置清单：</p><p>1、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-monitor</span><br><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-monitor</span><br><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-monitor</span><br><span class="line">  namespace: infra</span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-monitor</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-monitor</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-monitor</span><br><span class="line">        name: dubbo-monitor</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-monitor</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;dubbo-monitor:latest</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>2、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-monitor</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector: </span><br><span class="line">    app: dubbo-monitor</span><br></pre></td></tr></table></figure><p>3、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi ingress.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-monitor</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: dubbo-monitor.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend: </span><br><span class="line">          serviceName: dubbo-monitor</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>应用资源配置清单：node节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n infra</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204172205205-1999264565.png" alt="img"></p><p>这个服务是有web页面的，我们添加dns解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204172558908-1186059488.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl restart named</span><br><span class="line"># dig -t A dubbo-monitor.kococ.cn @10.4.7.11 +short</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204172706557-975888331.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204172824046-788139848.png" alt="img"></p><p> 这里已经可以看到我们之前部署的dubbo-demo-service服务了，启动了两个进程来提供服务。</p><p> 至此，dubbo-monitor监控服务已经部署完成。</p><h1 id="kubernetes实战-交付dubbo服务到k8s集群（六）使用blue-ocean流水线构建dubbo-consumer服务"><a href="#kubernetes实战-交付dubbo服务到k8s集群（六）使用blue-ocean流水线构建dubbo-consumer服务" class="headerlink" title="kubernetes实战-交付dubbo服务到k8s集群（六）使用blue ocean流水线构建dubbo-consumer服务"></a>kubernetes实战-交付dubbo服务到k8s集群（六）使用blue ocean流水线构建dubbo-consumer服务</h1><p>我们这里的dubbo-consumer是dubbo-demo-service的消费者：</p><p>我们之前已经在jenkins配置好了流水线，只需要填写参数就行了。</p><p>由于dubbo-consumer用的gitee的私有仓库，需要添加公钥，这里大家可以自己找个client服务来做实验。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204182953280-549617155.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204182149184-1988121109.png" alt="img"></p><p>下面是我们通过jenkins构建的镜像，已经上传到我们的harbor私有仓库当中了：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204184217980-511779709.png" alt="img"></p><p> 这里我们构建了两次，构建了两个镜像，11bb9cd这个用来做模拟生产发版更新实验。</p><p>准备资源配置清单：</p><p>1、dp.yaml <strong>红色部分根据实际镜像tag修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-consumer</span><br><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;dubbo-consumer</span><br><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: app</span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-consumer</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-consumer</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-consumer</span><br><span class="line">        name: dubbo-demo-consumer</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-consumer</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-consumer:master_191201_1600</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-client.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>2、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi svc.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: app</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector: </span><br><span class="line">    app: dubbo-demo-consumer</span><br></pre></td></tr></table></figure><p>3、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi ingress.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: app</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: demo.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend: </span><br><span class="line">          serviceName: dubbo-demo-consumer</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-consumer&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-consumer&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-consumer&#x2F;ingress.yaml</span><br><span class="line"># kubectl get pod -n app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204185606980-173323108.png" alt="img"></p><p> 查看log，是否启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl logs dubbo-demo-consumer-f8d5f5f74-dgmqd -n app</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204185706184-726464405.png" alt="img"></p><p>检查dubbo-monitor是否已经注册成功：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204185901594-1794752720.png" alt="img"></p><p>添加个dns解析，来验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br><span class="line"># systemctl restart named</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190330710-1152106839.png" alt="img"></p><p> 浏览器访问<a href="http://demo.kococ.cn/hello?name=slim">http://demo.kococ.cn/hello?name=slim</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190424208-1227852511.png" alt="img"></p><p> 接下来我们模拟升级发版，我们提前修改了代码，并提交到了git仓库，发版的前提是使用jenkins提前构建了镜像并且上传到了我们的私有harbor仓库中，具体的构建流程不在赘述，只需要将远程git仓库的版本修改后构建就行了。</p><p>修改dp.yaml资源配置清单，修改harbor镜像仓库中对应的tag版本：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190648470-1335170472.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190718713-1299242715.png" alt="img"></p><p> 应用修改后的资源配置清单，当然也可以在dashboard中进行在线修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-consumer&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190846796-129289757.png" alt="img"></p><p> 已经启动起来了，使用浏览器验证：<a href="http://demo.kococ.cn/hello?name=slim">http://demo.kococ.cn/hello?name=slim</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191204190916621-98388740.png" alt="img"></p><p>至此，我们一套完成的dubbo服务就已经交付到k8s集群当中了，并且也演示了如何发版。</p><h1 id="kubernetes实战-配置中心（一）configmap资源"><a href="#kubernetes实战-配置中心（一）configmap资源" class="headerlink" title="kubernetes实战-配置中心（一）configmap资源"></a>kubernetes实战-配置中心（一）configmap资源</h1><p>在我们的环境中测试使用configmap资源，需要先对我们的环境进行一些准备，首先将dubbo服务调整为0个pod ，然后把zookeeper进行拆分：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206152200951-1152409322.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206152906998-1949229974.png" alt="img"></p><p> 拆分zk环境，模拟测试环境跟生产环境：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206152002087-1033990054.png" alt="img"></p><p>停止zookeeper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># sh &#x2F;opt&#x2F;zookeeper&#x2F;bin&#x2F;zkServer.sh stop</span><br><span class="line"># rm -rf &#x2F;data&#x2F;zookeeper&#x2F;data&#x2F;*</span><br><span class="line"># rm -rf &#x2F;data&#x2F;zookeeper&#x2F;logs&#x2F;*</span><br><span class="line"># vi &#x2F;opt&#x2F;zookeeper&#x2F;conf&#x2F;zoo.cfg</span><br></pre></td></tr></table></figure><p>注释掉集群配置：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206160332428-705993688.png" alt="img"></p><p> 启动zookeeper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh &#x2F;opt&#x2F;zookeeper&#x2F;bin&#x2F;zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206160503691-1722226541.png" alt="img"></p><p> 创建资源配置清单：</p><p>1、cm.yaml 红色部分是配置文件的name，下面的是内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-monitor-cm</span><br><span class="line">  namespace: infra</span><br><span class="line">data:</span><br><span class="line">  dubbo.properties: |</span><br><span class="line">    dubbo.container&#x3D;log4j,spring,registry,jetty</span><br><span class="line">    dubbo.application.name&#x3D;simple-monitor</span><br><span class="line">    dubbo.application.owner&#x3D;OldboyEdu</span><br><span class="line">    dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;zk1.kococ.cn:2181</span><br><span class="line">    dubbo.protocol.port&#x3D;20880</span><br><span class="line">    dubbo.jetty.port&#x3D;8080</span><br><span class="line">    dubbo.jetty.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;monitor</span><br><span class="line">    dubbo.charts.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;charts</span><br><span class="line">    dubbo.statistics.directory&#x3D;&#x2F;dubbo-monitor-simple&#x2F;statistics</span><br><span class="line">    dubbo.log4j.file&#x3D;&#x2F;dubbo-monitor-simple&#x2F;logs&#x2F;dubbo-monitor.log</span><br><span class="line">    dubbo.log4j.level&#x3D;WARN</span><br></pre></td></tr></table></figure><p>2、dp-cm.yaml</p><p>在dp里面如何使用configmap资源：</p><p>首先声明一个卷，卷的名字叫configmap-volume,然后指定这个卷使用的configmap</p><p>然后定义这个卷的挂载，挂载到哪里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi dp-cm.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-monitor</span><br><span class="line">  namespace: infra</span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-monitor</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-monitor</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-monitor</span><br><span class="line">        name: dubbo-monitor</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-monitor</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;dubbo-monitor:latest</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">          - name: configmap-volume</span><br><span class="line">            mountPath: &#x2F;dubbo-monitor-simple&#x2F;conf</span><br><span class="line">      volumes:</span><br><span class="line">        - name: configmap-volume</span><br><span class="line">          configMap:</span><br><span class="line">            name: dubbo-monitor-cm</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;cm.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;dp-cm.yaml</span><br></pre></td></tr></table></figure><p>去dashboard查看configmap资源：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206162727749-1572811779.png" alt="img"></p><p>我们可以创建多个configmap资源，然后在dp中去挂载应用这些configmap资源，达到修改配置的功能。</p><p>我们检查一下我们的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n infra</span><br></pre></td></tr></table></figure><p>已经起来了</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206163613708-1755986854.png" alt="img"></p><p> 我们检查一下我们挂载的配置是不是我们定义的configmap资源中的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl exec -it dubbo-monitor-6676dd74cc-pvf2f -n infra &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>我们把配置文件挂载到了**/dubbo-monitor-simple/<strong>**conf</strong> 这里，我们去看一下。（上面的dp-cm.yaml中声明的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;dubbo-monitor-simple&#x2F;conf&#x2F;dubbo.properties</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206163854491-1881028587.png" alt="img"></p><p> 跟我们定义的一模一样。</p><p>这里如果想更换配置，有两种方法：</p><p>　　一、修改configmap 资源，然后apply一下更新资源，然后重启挂载这个configmap资源的dp。</p><p>　　二、准备多个configmap资源，然后在dp中更改挂载的configmap,apply以后，dp自动重启。</p><p>检查dubbo-monitor页面的注册信息：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206165345407-471585294.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206165403504-1421689285.png" alt="img"></p><p>连接的zk1.kococ.cn，下面我们模拟更换configmap资源，来切换环境：</p><p>这里使用第二种方法，准备多个configmap，我们在准备一个configmap,就叫cm-pro.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp cm.yaml cm-pro.yaml</span><br><span class="line"># vi cm-pro.yaml</span><br></pre></td></tr></table></figure><p>然后我们把服务注册到zk2.kococ.cn上：</p><p>把资源名字改成dubbo-monitor-cm-pro</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206165858875-962602223.png" alt="img"></p><p> 把服务注册到zk2上：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206165703012-1393173343.png" alt="img"></p><p> 应用一下cm-pro.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;cm-pro.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170016686-52804254.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170032252-234364529.png" alt="img"></p><p> 然后我们修改dp-cm.yaml:</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170127881-234365593.png" alt="img"></p><p> 然后apply这个dp-cm.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-monitor&#x2F;dp-cm.yaml</span><br></pre></td></tr></table></figure><p>新的已经起来了，我们进去看看是不是应用的新的configmap配置：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170323857-307632334.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl exec -it dubbo-monitor-5cb756cc6c-xtnrt -n infra &#x2F;bin&#x2F;bash</span><br><span class="line"># cat &#x2F;dubbo-monitor-simple&#x2F;conf&#x2F;dubbo.properties </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170428519-1061937897.png" alt="img"></p><p> 已经生效了。</p><p><strong>更新configmap资源来更改配置需要更新(删除/apply/update)pod，否则无效。</strong></p><p>看下dubbo-monitor的页面：已经是zk2了。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206170524240-1778093972.png" alt="img"></p><p>但是注意，我们这里使用的是mountPath，这个是挂载整个目录，会使容器内的被挂载目录中原有的文件不可见，可以看见我们原来脚本中的命令已经无法对挂载的目录操作了。</p><p>查看我们pod容器启动的命令可以看见：如果想单独挂载一个配置配件，而不是整个目录，如何操作：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206163227083-533233850.png" alt="img"></p><p>这里我使用之前的nginx:curl来做如何挂载单个的文件：</p><p>查看资源key的使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl explain pod.spec.containers.volumeMounts</span><br></pre></td></tr></table></figure><p>这里有个挂载方法是：subPath,使用这个方法，可以挂载指定的文件，要结合mountPath来使用：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206174308385-1399833041.png" alt="img"></p><p>查看我们原来实验做的nginx:curl这个容器：在default命名空间里。</p><p>我们实验的需求，把<strong>dubbo.properties</strong>这个配置文件挂载到/usr/lib/目录下，并且保证原来容器内/usr/lib/目录下的文件都还在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206174637314-738116987.png" alt="img"></p><p> 进入容器查看容器内/usr/lib/下有哪些文件：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206175137440-354418017.png" alt="img"></p><p>在default命名空间下创建configmap资源：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206175731510-1447265675.png" alt="img"></p><p> 应用configmap资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;nginx-ds&#x2F;cm.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206175920895-1307672044.png" alt="img"></p><p>然后修改这个容器的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl edit ds nginx-ds -n default</span><br></pre></td></tr></table></figure><p>挂载configmap资源：一定要注意格式跟缩进<del>~</del></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206182032491-2128792466.png" alt="img"></p><p> 然后重启pod</p><p>登录进容器中，查看：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191206182217982-1739358712.png" alt="img"></p><p><img src="C:\Users\mu77ops\Desktop\个人\个人\k8s\img\1034759-20191206175137440-354418017.png" alt="img"></p><p> 经过对比，我们原来/usr/lib/下的文件还在，并且新增了一个配置文件dubbo-properties这个配置文件。</p><h1 id="kubernetes实战-配置中心（二）交付apollo配置中心到k8s"><a href="#kubernetes实战-配置中心（二）交付apollo配置中心到k8s" class="headerlink" title="kubernetes实战-配置中心（二）交付apollo配置中心到k8s"></a>kubernetes实战-配置中心（二）交付apollo配置中心到k8s</h1><p>apollo官网：<a href="https://github.com/ctripcorp/apollo">官方地址</a></p><p>apollo架构图：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211110416988-457984528.png" alt="img"></p><p>apollo需要使用数据库，这里使用mysql，注意版本需要在5.6以上：</p><p>本次环境mysql部署在10.4.7.11上，使用mariadb：10.1以上版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo</span><br><span class="line">[mariadb]</span><br><span class="line">name &#x3D; MariaDB</span><br><span class="line">baseurl &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;10.1&#x2F;centos7-amd64&#x2F;</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck&#x3D;1</span><br></pre></td></tr></table></figure><p>导入key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># rpm --import https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line"># yum install MariaDB-server -y</span><br></pre></td></tr></table></figure><p>简单配置mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;my.cnf.d&#x2F;server.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server &#x3D; utf8mb4</span><br><span class="line">collation_server &#x3D; utf8mb4_general_ci</span><br><span class="line">init_connect &#x3D; &quot;SET NAMES &#39;utf8mb4&#39;&quot;</span><br><span class="line"># vi &#x2F;etc&#x2F;my.cnf.d&#x2F;mysql-clients.cnf</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"># systemctl start mariadb</span><br><span class="line"># systemctl enable mariadb</span><br><span class="line"># mysqladmin -u root password </span><br></pre></td></tr></table></figure><p>登录检查字符集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">&gt; \s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211112612161-1900642767.png" alt="img"></p><p> 执行数据库初始化脚本：<a href="https://github.com/ctripcorp/apollo/blob/1.5.1/scripts/db/migration/configdb/V1.0.0__initialization.sql">configdb初始化脚本</a></p><p>下载脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ctripcorp&#x2F;apollo&#x2F;1.5.1&#x2F;scripts&#x2F;db&#x2F;migration&#x2F;configdb&#x2F;V1.0.0__initialization.sql -O apolloconfig.sql</span><br></pre></td></tr></table></figure><p>执行初始化脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p &lt; apolloconfig.sql</span><br></pre></td></tr></table></figure><p>检查数据库：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211113247771-1778301598.png" alt="img"></p><p> 给数据库授权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># grant INSERT,DELETE,UPDATE,SELECT on ApolloConfigDB.* to &#39;apolloconfig&#39;@&#39;10.4.7.%&#39;  identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211114116673-2001410083.png" alt="img"></p><p> 修改初始化数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; update ServerConfig set Value&#x3D;&#39;http:&#x2F;&#x2F;config.kococ.cn&#x2F;eureka&#39; where Id&#x3D;1;</span><br><span class="line">也可以使用下面的sql：执行一个即可</span><br></pre></td></tr></table></figure><h1 id="kubernetes实战-配置中心（三）配置服务使用apollo配置中心"><a href="#kubernetes实战-配置中心（三）配置服务使用apollo配置中心" class="headerlink" title="kubernetes实战-配置中心（三）配置服务使用apollo配置中心"></a>kubernetes实战-配置中心（三）配置服务使用apollo配置中心</h1><p>使用配置中心，需要开发对代码进行调整，将一些配置，通过变量的形式配置到apollo中，服务通过配置中心来获取具体的配置</p><p>在配置中心修改新增如下配置：</p><p>项目信息：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211191509591-224073067.png" alt="img"></p><p> 配置：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211191453532-1276390692.png" alt="img"></p><p> 重新打包镜像，使用apollo版本的代码：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191211191820356-768052077.png" alt="img"></p><p> 修改dp.yaml，将镜像使用我们刚刚打包的这个：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212165021897-875544258.png" alt="img"></p><p> 应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;dubbo-server&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p>创建dubbo服务消费者：</p><p>apollo中新建一个项目：dubbo-demo-web,新建配置dubbo.registry,值为zookeeper地址</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212171234674-1033346701.png" alt="img"></p><p>使用jenkins重新打包构建一版镜像： <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#101;&#x65;&#x2e;&#x63;&#x6f;&#109;</a>:stanleywang/dubbo-demo-web.git</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212171435845-1940297947.png" alt="img"></p><p> 构建完成后，修改资源配置清单并应用：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212172433630-1495231734.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212172612084-965629920.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212172635322-132994833.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191212172732355-402822084.png" alt="img"></p><p> kubernetes实战-配置中心（四）分环境使用apollo配置中心</p><p>要进行分环境，需要将现有实验环境进行拆分</p><p><strong>portal服务，可以各个环境共用，但是apollo-adminservice和apollo-configservice必须要分开。</strong></p><p>1、zk环境拆分为test和prod环境</p><p>添加dns解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br></pre></td></tr></table></figure><p>zk-test.kococ.cn    A    10.4.7.11</p><p>zk-prod.kococ.cn   A    10.4.7.12</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214163421698-1711732614.png" alt="img"></p><p>2、namespace 分环境，创建test 和prod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create ns test</span><br><span class="line"># kubectl create ns prod</span><br></pre></td></tr></table></figure><p>创建secret：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl create secret docker-registry harbor --docker-server&#x3D;harbor.kococ.cn --docker-username&#x3D;harbor --docker-password&#x3D;Harbor12345 -n test</span><br><span class="line"></span><br><span class="line"># kubectl create secret docker-registry harbor --docker-server&#x3D;harbor.kococ.cn --docker-username&#x3D;harbor --docker-password&#x3D;Harbor12345 -n prod</span><br></pre></td></tr></table></figure><p>3、数据库进行拆分，因实验资源有限，故使用分库的形式模拟分环境</p><p>修改数据库初始化脚本，分别创建ApolloConfigTestDB和ApolloConfigProdDB</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214165050503-1289549000.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214165155176-1839439337.png" alt="img"></p><p> 修改数据库中eureka的地址，这里用到了两个新的域名，自行在bind9中添加解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; update ApolloConfigProdDB.ServerConfig set ServerConfig.Value&#x3D;&quot;http:&#x2F;&#x2F;config-prod.kococ.cn&#x2F;eureka&quot; where ServerConfig.Key&#x3D;&quot;eureka.service.url&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; grant INSERT,DELETE,UPDATE,SELECT on ApolloConfigProdDB.* to &quot;apolloconfig&quot;@&quot;10.4.7.%&quot; identified by &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">&gt; update ApolloConfigTestDB.ServerConfig set ServerConfig.Value&#x3D;&quot;http:&#x2F;&#x2F;config-test.kococ.cn&#x2F;eureka&quot; where ServerConfig.Key&#x3D;&quot;eureka.service.url&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; grant INSERT,DELETE,UPDATE,SELECT on ApolloConfigTestDB.* to &quot;apolloconfig&quot;@&quot;10.4.7.%&quot; identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214165539852-746921994.png" alt="img"></p><p>修改portal数据，支持fat和pro环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; update ServerConfig set Value&#x3D;&#39;fat,pro&#39; where Id&#x3D;1;</span><br></pre></td></tr></table></figure><p>修改portal的cm资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;data&#x2F;k8s-yaml&#x2F;apollo-portal&#x2F;cm.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214170042505-861528126.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;apollo-portal&#x2F;cm.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214170419427-36077926.png" alt="img"></p><p>分别创建修改两个环境的资源配置文件：</p><p>test：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml</span><br><span class="line"># mkdir -p test&#x2F;&#123;apollo-adminservice,apollo-configservice,dubbo-demo-server,dubbo-demo-consumer&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># mkdir -p prod&#x2F;&#123;apollo-adminservice,apollo-configservice,dubbo-demo-server,dubbo-demo-consumer&#125;</span><br></pre></td></tr></table></figure><p>将之前的资源配置清单cp到对应环境的目录中，进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd  test&#x2F;apollo-configservice&#x2F;</span><br><span class="line"># cp ..&#x2F;..&#x2F;apollo-configservice&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、cm.yaml 修改ns，数据库库名，eureka地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice-cm</span><br><span class="line">  namespace: test</span><br><span class="line">data:</span><br><span class="line">  application-github.properties: |</span><br><span class="line">    # DataSource</span><br><span class="line">    spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;mysql.kococ.cn:3306&#x2F;ApolloConfigTestDB?characterEncoding&#x3D;utf8</span><br><span class="line">    spring.datasource.username &#x3D; apolloconfig</span><br><span class="line">    spring.datasource.password &#x3D; 123456</span><br><span class="line">    eureka.service.url &#x3D; http:&#x2F;&#x2F;config-test.kococ.cn&#x2F;eureka</span><br><span class="line">  app.properties: |</span><br><span class="line">    appId&#x3D;100003171</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: test </span><br><span class="line">  labels: </span><br><span class="line">    name: apollo-configservice</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: apollo-configservice</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: apollo-configservice </span><br><span class="line">        name: apollo-configservice</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: configmap-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: apollo-configservice-cm</span><br><span class="line">      containers:</span><br><span class="line">      - name: apollo-configservice</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;apollo-configservice:v1.5.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: configmap-volume</span><br><span class="line">          mountPath: &#x2F;apollo-configservice&#x2F;config</span><br><span class="line">        terminationMessagePath: &#x2F;dev&#x2F;termination-log</span><br><span class="line">        terminationMessagePolicy: File</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: test </span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector: </span><br><span class="line">    app: apollo-configservice</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata: </span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: test </span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: config-test.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend: </span><br><span class="line">          serviceName: apollo-configservice</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214204757028-115716474.png" alt="img"></p><p> 服务已经注册进来了</p><p>接下来部署apollo-adminservice</p><p>修改apollo-adminservice的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;test&#x2F;apollo-adminservice</span><br><span class="line"># cp ..&#x2F;..&#x2F;apollo-adminservice&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、cm.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-adminservice-cm</span><br><span class="line">  namespace: test</span><br><span class="line">data:</span><br><span class="line">  application-github.properties: |</span><br><span class="line">    # DataSource</span><br><span class="line">    spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;mysql.kococ.cn:3306&#x2F;ApolloConfigTestDB?characterEncoding&#x3D;utf8</span><br><span class="line">    spring.datasource.username &#x3D; apolloconfig</span><br><span class="line">    spring.datasource.password &#x3D; 123456</span><br><span class="line">    eureka.service.url &#x3D; http:&#x2F;&#x2F;config-test.kococ.cn&#x2F;eureka</span><br><span class="line">  app.properties: |</span><br><span class="line">    appId&#x3D;100003172</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-adminservice</span><br><span class="line">  namespace: test </span><br><span class="line">  labels: </span><br><span class="line">    name: apollo-adminservice</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: apollo-adminservice</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        name: apollo-adminservice</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: configmap-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: apollo-adminservice-cm</span><br><span class="line">      containers:</span><br><span class="line">      - name: apollo-adminservice</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;apollo-adminservice:v1.5.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: configmap-volume</span><br><span class="line">          mountPath: &#x2F;apollo-adminservice&#x2F;config</span><br><span class="line">        terminationMessagePath: &#x2F;dev&#x2F;termination-log</span><br><span class="line">        terminationMessagePolicy: File</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;apollo-adminservice&#x2F;cm.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;apollo-adminservice&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214205736284-1671020943.png" alt="img"></p><p>接下来部署prod环境的apollo-configservice，还是一样的套路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd ..&#x2F;..&#x2F;prod&#x2F;apollo-configservice&#x2F;</span><br><span class="line"># cp ..&#x2F;..&#x2F;apollo-configservice&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>修改资源配置清单：</p><p>1、cm.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice-cm</span><br><span class="line">  namespace: prod</span><br><span class="line">data:</span><br><span class="line">  application-github.properties: |</span><br><span class="line">    # DataSource</span><br><span class="line">    spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;mysql.kococ.cn:3306&#x2F;ApolloConfigProdDB?characterEncoding&#x3D;utf8</span><br><span class="line">    spring.datasource.username &#x3D; apolloconfig</span><br><span class="line">    spring.datasource.password &#x3D; 123456</span><br><span class="line">    eureka.service.url &#x3D; http:&#x2F;&#x2F;config-prod.kococ.cn&#x2F;eureka</span><br><span class="line">  app.properties: |</span><br><span class="line">    appId&#x3D;100003171</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: prod </span><br><span class="line">  labels: </span><br><span class="line">    name: apollo-configservice</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: apollo-configservice</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: apollo-configservice </span><br><span class="line">        name: apollo-configservice</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: configmap-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: apollo-configservice-cm</span><br><span class="line">      containers:</span><br><span class="line">      - name: apollo-configservice</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;apollo-configservice:v1.5.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: configmap-volume</span><br><span class="line">          mountPath: &#x2F;apollo-configservice&#x2F;config</span><br><span class="line">        terminationMessagePath: &#x2F;dev&#x2F;termination-log</span><br><span class="line">        terminationMessagePolicy: File</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: prod</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: apollo-configservice</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-configservice</span><br><span class="line">  namespace: prod</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: config-prod.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: apollo-configservice</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-configservice&#x2F;cm.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-configservice&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-configservice&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-configservice&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p>修改apollo-adminservice的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd ..&#x2F;apollo-adminservice&#x2F;</span><br><span class="line"># cp ..&#x2F;..&#x2F;apollo-adminservice&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、cm.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-adminservice-cm</span><br><span class="line">  namespace: prod</span><br><span class="line">data:</span><br><span class="line">  application-github.properties: |</span><br><span class="line">    # DataSource</span><br><span class="line">    spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;mysql.kococ.cn:3306&#x2F;ApolloConfigProdDB?characterEncoding&#x3D;utf8</span><br><span class="line">    spring.datasource.username &#x3D; apolloconfig</span><br><span class="line">    spring.datasource.password &#x3D; 123456</span><br><span class="line">    eureka.service.url &#x3D; http:&#x2F;&#x2F;config-prod.kococ.cn&#x2F;eureka</span><br><span class="line">  app.properties: |</span><br><span class="line">    appId&#x3D;100003172</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: apollo-adminservice</span><br><span class="line">  namespace: prod </span><br><span class="line">  labels: </span><br><span class="line">    name: apollo-adminservice</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: apollo-adminservice</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        name: apollo-adminservice</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: configmap-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: apollo-adminservice-cm</span><br><span class="line">      containers:</span><br><span class="line">      - name: apollo-adminservice</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;apollo-adminservice:v1.5.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: configmap-volume</span><br><span class="line">          mountPath: &#x2F;apollo-adminservice&#x2F;config</span><br><span class="line">        terminationMessagePath: &#x2F;dev&#x2F;termination-log</span><br><span class="line">        terminationMessagePolicy: File</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-adminservice&#x2F;cm.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;apollo-adminservice&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214212310351-1011324990.png" alt="img"></p><p>两个服务都已经注册进来了，删除portal数据库中存储的关于之前项目的配置，接下来启动portal项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">&gt; use ApolloPortalDB ;</span><br><span class="line">&gt; truncate table App;</span><br><span class="line">&gt; truncate table AppNamespace;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214212517854-1153075154.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214213528868-1456818381.png" alt="img"></p><p>打开portal.kococ.cn验证，并且创建两个项目：</p><p>首先创建dubbo-demo-service</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214213803923-653264700.png" alt="img"></p><p> 添加配置：两个环境都添加上：注意连接地址一个是test.kococ.cn,一个是prod.kococ.cn</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214214212905-915228782.png" alt="img"></p><p> 接下来创建dubbo-demo-web项目：同样是两个环境都发布，注意一个是test.kococ.cn,一个是prod.kococ.cn</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214214541219-415571329.png" alt="img"></p><p>接下来交付dubbo服务分环境交付：</p><p>同样操作，修改之前项目的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;test&#x2F;dubbo-demo-server</span><br><span class="line"># cp ..&#x2F;..&#x2F;dubbo-server&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-service</span><br><span class="line">  namespace: test </span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-service</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-service</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-service</span><br><span class="line">        name: dubbo-demo-service</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-service</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-service:apollo_191211_1916</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: C_OPTS</span><br><span class="line">          value: -Denv&#x3D;fat -Dapollo.meta&#x3D;http:&#x2F;&#x2F;config-test.kococ.cn</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-server.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;dubbo-demo-server&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214214859225-1098759731.png" alt="img"></p><p> 接下来交付dubbo-demo-consumer:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;test&#x2F;dubbo-demo-consumer</span><br><span class="line"># cp ..&#x2F;..&#x2F;dubbo-consumer&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: test </span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-consumer</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-consumer</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-consumer</span><br><span class="line">        name: dubbo-demo-consumer</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-consumer</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-web:apollo_191212_1715</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: C_OPTS</span><br><span class="line">          value: -Denv&#x3D;fat -Dapollo.meta&#x3D;http:&#x2F;&#x2F;config-test.kococ.cn</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-client.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>2、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: test</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: dubbo-demo-consumer</span><br></pre></td></tr></table></figure><p>3、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: test</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: demo-test.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: dubbo-demo-consumer</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>这里会用到两个新的域名，添加解析：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214215712256-1053122700.png" alt="img"></p><p> 应用test环境的dubbo-consumer资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;dubbo-demo-consumer&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;dubbo-demo-consumer&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;dubbo-demo-consumer&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214215942748-1280830276.png" alt="img"></p><p>接下来交付prod环境的dubbo-demo-server和dubbo-demo-consumer服务：</p><p>同样套路，复制资源配置清单，然后修改成prod环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;k8s-yaml&#x2F;prod&#x2F;dubbo-demo-server</span><br><span class="line"># cp ..&#x2F;..&#x2F;dubbo-server&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-service</span><br><span class="line">  namespace: prod </span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-service</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-service</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-service</span><br><span class="line">        name: dubbo-demo-service</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-service</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-service:apollo_191211_1916</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: C_OPTS</span><br><span class="line">          value: -Denv&#x3D;pro -Dapollo.meta&#x3D;http:&#x2F;&#x2F;config-prod.kococ.cn</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-server.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;dubbo-demo-server&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214220552006-1254762527.png" alt="img"></p><p> 接下来做dubbo-demo-consumer的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;k8s-yaml&#x2F;prod&#x2F;dubbo-demo-consumer</span><br><span class="line"># cp ..&#x2F;..&#x2F;dubbo-consumer&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>1、dp.yaml  <strong><a href="http://apollo-configservice:8080/">http://apollo-configservice:8080</a> 这里可以直接使用svc资源名称调用，不用走ingress，因为svc资源只在当前namespace中生效。</strong></p><p><strong><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214222349710-562062556.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: prod </span><br><span class="line">  labels: </span><br><span class="line">    name: dubbo-demo-consumer</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels: </span><br><span class="line">      name: dubbo-demo-consumer</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        app: dubbo-demo-consumer</span><br><span class="line">        name: dubbo-demo-consumer</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: dubbo-demo-consumer</span><br><span class="line">        image: harbor.kococ.cn&#x2F;app&#x2F;dubbo-demo-web:apollo_191212_1715</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 20880</span><br><span class="line">          protocol: TCP</span><br><span class="line">        env:</span><br><span class="line">        - name: C_OPTS</span><br><span class="line">          value: -Denv&#x3D;pro -Dapollo.meta&#x3D;http:&#x2F;&#x2F;apollo-configservice:8080</span><br><span class="line">        - name: JAR_BALL</span><br><span class="line">          value: dubbo-client.jar</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      securityContext: </span><br><span class="line">        runAsUser: 0</span><br><span class="line">      schedulerName: default-scheduler</span><br><span class="line">  strategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">    rollingUpdate: </span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  progressDeadlineSeconds: 600</span><br></pre></td></tr></table></figure><p>2、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: prod </span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector: </span><br><span class="line">    app: dubbo-demo-consumer</span><br></pre></td></tr></table></figure><p>3、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: prod </span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector: </span><br><span class="line">    app: dubbo-demo-consumer</span><br><span class="line">[root@hdss7-200 dubbo-demo-consumer]# cat ingress.yaml </span><br><span class="line">kind: Ingress</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata: </span><br><span class="line">  name: dubbo-demo-consumer</span><br><span class="line">  namespace: prod </span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: demo-prod.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend: </span><br><span class="line">          serviceName: dubbo-demo-consumer</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;dubbo-demo-consumer&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;dubbo-demo-consumer&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prod&#x2F;dubbo-demo-consumer&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214221038814-2061052893.png" alt="img"></p><p>访问两个环境的不同url：</p><p><a href="http://demo-test.kococ.cn/">http://demo-test.kococ.cn</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214221153725-1544677039.png" alt="img"></p><p> <a href="http://demo-prod.kococ.cn/">http://demo-prod.kococ.cn</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214221216571-965731507.png" alt="img"></p><p>模拟发版：</p><p>使用jenkins构建新的镜像：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214224525002-320211269.png" alt="img"></p><p> 构建成功，然后我们在测试环境发布此版本镜像：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214224834931-992581230.png" alt="img"></p><p> 修改测试环境的dp.yaml</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214224922504-230549710.png" alt="img"></p><p> 应用修改后的资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;test&#x2F;dubbo-demo-consumer&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214225241007-949796109.png" alt="img"></p><p>已经成功将新代码上线到test环境，接下来上线到prod环境</p><p>同样修改prod环境的dp.yaml,并且应用该资源配置清单：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191214225558477-850571422.png" alt="img"></p><p> 已经上线到生产环境，这样一套完整的分环境使用apollo配置中心发布流程已经可以使用了，并且真正做到了一次构建，多平台使用。</p><h1 id="kubernetes生态–交付prometheus监控及grafana炫酷dashboard到k8s集群"><a href="#kubernetes生态–交付prometheus监控及grafana炫酷dashboard到k8s集群" class="headerlink" title="kubernetes生态–交付prometheus监控及grafana炫酷dashboard到k8s集群"></a>kubernetes生态–交付prometheus监控及grafana炫酷dashboard到k8s集群</h1><p>由于docker容器的特殊性，传统的zabbix无法对k8s集群内的docker状态进行监控，所以需要使用prometheus来进行监控：</p><h2 id="什么是Prometheus"><a href="#什么是Prometheus" class="headerlink" title="什么是Prometheus?"></a>什么是Prometheus?</h2><p>Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)。Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。<br>2016年由Google发起Linux基金会旗下的原生云基金会(Cloud Native Computing Foundation), 将Prometheus纳入其下第二大开源项目。<br>Prometheus目前在开源社区相当活跃。<br>Prometheus和Heapster(Heapster是K8S的一个子项目，用于获取集群的性能数据。)相比功能更完善、更全面。Prometheus性能也足够支撑上万台规模的集群。</p><h2 id="Prometheus的特点"><a href="#Prometheus的特点" class="headerlink" title="Prometheus的特点"></a>Prometheus的特点</h2><ul><li><ul><li>多维度数据模型。</li><li>灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点是自主的。</li><li>通过基于HTTP的pull方式采集时序数据。</li><li>可以通过中间网关进行时序列数据推送。</li><li>通过服务发现或者静态配置来发现目标服务对象。</li><li>支持多种多样的图表和界面展示，比如Grafana等。</li></ul></li></ul><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217174524209-1830352204.png" alt="img"></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p><h2 id="服务过程"><a href="#服务过程" class="headerlink" title="服务过程"></a>服务过程</h2><ul><li>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。</li><li>Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</li><li>Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</li><li>PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</li><li>Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</li></ul><h2 id="三大套件"><a href="#三大套件" class="headerlink" title="三大套件"></a>三大套件</h2><ul><li>Server 主要负责数据采集和存储，提供PromQL查询语言的支持。</li><li>Alertmanager 警告管理器，用来进行报警。</li><li>Push Gateway 支持临时性Job主动推送指标的中间网关。</li></ul><p>prometheus不同于zabbix，没有agent，使用的是针对不同服务的exporter：</p><p>prometheus官网：<a href="https://prometheus.io/">官网地址</a></p><p>正常情况下，监控k8s集群及node，pod，常用的exporter有四个：</p><ul><li><strong>kube-state-metrics – 收集k8s集群master&amp;etcd等基本状态信息</strong></li><li><strong>node-exporter – 收集k8s集群node信息</strong></li><li><strong>cadvisor – 收集k8s集群docker容器内部使用资源信息</strong></li><li><strong>blackbox-exporte – 收集k8s集群docker容器服务是否存活</strong></li></ul><p>接下来逐一创建以上exporter：</p><p>老套路，下载docker镜像，准备资源配置清单，应用资源配置清单：</p><p><strong>一、kube-state-metrics</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull quay.io&#x2F;coreos&#x2F;kube-state-metrics:v1.5.0</span><br><span class="line"># docker tag 91599517197a harbor.kococ.cn&#x2F;public&#x2F;kube-state-metrics:v1.5.0</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;kube-state-metrics:v1.5.0</span><br></pre></td></tr></table></figure><p>准备资源配置清单：</p><p>1、rbac.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;k8s-yaml&#x2F;kube-state-metrics &amp;&amp; cd &#x2F;data&#x2F;k8s-yaml&#x2F;kube-state-metrics</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  - secrets</span><br><span class="line">  - nodes</span><br><span class="line">  - pods</span><br><span class="line">  - services</span><br><span class="line">  - resourcequotas</span><br><span class="line">  - replicationcontrollers</span><br><span class="line">  - limitranges</span><br><span class="line">  - persistentvolumeclaims</span><br><span class="line">  - persistentvolumes</span><br><span class="line">  - namespaces</span><br><span class="line">  - endpoints</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - policy</span><br><span class="line">  resources:</span><br><span class="line">  - poddisruptionbudgets</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - daemonsets</span><br><span class="line">  - deployments</span><br><span class="line">  - replicasets</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - apps</span><br><span class="line">  resources:</span><br><span class="line">  - statefulsets</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - batch</span><br><span class="line">  resources:</span><br><span class="line">  - cronjobs</span><br><span class="line">  - jobs</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - autoscaling</span><br><span class="line">  resources:</span><br><span class="line">  - horizontalpodautoscalers</span><br><span class="line">  verbs:</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    deployment.kubernetes.io&#x2F;revision: &quot;2&quot;</span><br><span class="line">  labels:</span><br><span class="line">    grafanak8sapp: &quot;true&quot;</span><br><span class="line">    app: kube-state-metrics</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      grafanak8sapp: &quot;true&quot;</span><br><span class="line">      app: kube-state-metrics</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 25%</span><br><span class="line">      maxUnavailable: 25%</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        grafanak8sapp: &quot;true&quot;</span><br><span class="line">        app: kube-state-metrics</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-state-metrics</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;kube-state-metrics:v1.5.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          name: http-metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        readinessProbe:</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          httpGet:</span><br><span class="line">            path: &#x2F;healthz</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">      serviceAccountName: kube-state-metrics</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;kube-state-metrics&#x2F;rbac.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;kube-state-metrics&#x2F;dp.yaml</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get pod -n kube-system -o wide</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217180718964-1295555935.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl http:&#x2F;&#x2F;172.7.22.10:8080&#x2F;healthz</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217180813579-382804868.png" alt="img"></p><p> 已经成功运行。</p><p><strong>二、**</strong>node-exporter**</p><p><strong>由于node-exporter是监控node的，所有需要每个节点启动一个，所以使用ds控制器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker pull prom&#x2F;node-exporter:v0.15.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker tag 12d51ffa2b22 harbor.kococ.cn&#x2F;public&#x2F;node-exporter:v0.15.0</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;node-exporter:v0.15.0</span><br></pre></td></tr></table></figure><p>准备资源配置清单：</p><p>1、ds.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir node-exporter &amp;&amp; cd node-exporter</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">kind: DaemonSet</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    daemon: &quot;node-exporter&quot;</span><br><span class="line">    grafanak8sapp: &quot;true&quot;</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      daemon: &quot;node-exporter&quot;</span><br><span class="line">      grafanak8sapp: &quot;true&quot;</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: node-exporter</span><br><span class="line">      labels:</span><br><span class="line">        daemon: &quot;node-exporter&quot;</span><br><span class="line">        grafanak8sapp: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: proc</span><br><span class="line">        hostPath: </span><br><span class="line">          path: &#x2F;proc</span><br><span class="line">          type: &quot;&quot;</span><br><span class="line">      - name: sys</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;sys</span><br><span class="line">          type: &quot;&quot;</span><br><span class="line">      containers:</span><br><span class="line">      - name: node-exporter</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;node-exporter:v0.15.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:</span><br><span class="line">        - --path.procfs&#x3D;&#x2F;host_proc</span><br><span class="line">        - --path.sysfs&#x3D;&#x2F;host_sys</span><br><span class="line">        ports:</span><br><span class="line">        - name: node-exporter</span><br><span class="line">          hostPort: 9100</span><br><span class="line">          containerPort: 9100</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: sys</span><br><span class="line">          readOnly: true</span><br><span class="line">          mountPath: &#x2F;host_sys</span><br><span class="line">        - name: proc</span><br><span class="line">          readOnly: true</span><br><span class="line">          mountPath: &#x2F;host_proc</span><br><span class="line">      hostNetwork: true</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;node-exporter&#x2F;ds.yaml</span><br><span class="line"># kubectl get pod -n kube-system -o wide</span><br></pre></td></tr></table></figure><p>我们有两个node，每个node节点启动一个：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217181605759-1998938636.png" alt="img"></p><p> <strong>三、cadvisor</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull google&#x2F;cadvisor:v0.28.3</span><br><span class="line"># docker tag 75f88e3ec333 harbor.kococ.cn&#x2F;public&#x2F;cadvisor:0.28.3</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;cadvisor:0.28.3</span><br></pre></td></tr></table></figure><p>准备资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir cadvisor &amp;&amp; cd cadvisor</span><br></pre></td></tr></table></figure><p>1、ds.yaml <strong>标红部分是k8s资源配置清单中一个重要的高级属性，下一篇博客着重介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: cadvisor</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: cadvisor</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: cadvisor</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: cadvisor</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      containers:</span><br><span class="line">      - name: cadvisor</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;cadvisor:v0.28.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: rootfs</span><br><span class="line">          mountPath: &#x2F;rootfs</span><br><span class="line">          readOnly: true</span><br><span class="line">        - name: var-run</span><br><span class="line">          mountPath: &#x2F;var&#x2F;run</span><br><span class="line">        - name: sys</span><br><span class="line">          mountPath: &#x2F;sys</span><br><span class="line">          readOnly: true</span><br><span class="line">        - name: docker</span><br><span class="line">          mountPath: &#x2F;var&#x2F;lib&#x2F;docker</span><br><span class="line">          readOnly: true</span><br><span class="line">        ports:</span><br><span class="line">          - name: http</span><br><span class="line">            containerPort: 4194</span><br><span class="line">            protocol: TCP</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 4194</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        args:</span><br><span class="line">          - --housekeeping_interval&#x3D;10s</span><br><span class="line">          - --port&#x3D;4194</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: rootfs</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;</span><br><span class="line">      - name: var-run</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;var&#x2F;run</span><br><span class="line">      - name: sys</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;sys</span><br><span class="line">      - name: docker</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;data&#x2F;docker</span><br></pre></td></tr></table></figure><p>针对挂载资源，做一些调整：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mount -o remount,rw &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;</span><br><span class="line"># ln -s &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpuacct,cpu</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;cadvisor&#x2F;ds.yaml</span><br></pre></td></tr></table></figure><p>检查：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217184252982-1773513807.png" alt="img"></p><p><strong>四、blackbox-exporter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull prom&#x2F;blackbox-exporter:v0.15.1</span><br><span class="line"># docker tag 81b70b6158be  harbor.kococ.cn&#x2F;public&#x2F;blackbox-exporter:v0.15.1</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;public&#x2F;blackbox-exporter:v0.15.1</span><br></pre></td></tr></table></figure><p>创建资源配置清单：</p><p>1、cm.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: blackbox-exporter</span><br><span class="line">  name: blackbox-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  blackbox.yml: |-</span><br><span class="line">    modules:</span><br><span class="line">      http_2xx:</span><br><span class="line">        prober: http</span><br><span class="line">        timeout: 2s</span><br><span class="line">        http:</span><br><span class="line">          valid_http_versions: [&quot;HTTP&#x2F;1.1&quot;, &quot;HTTP&#x2F;2&quot;]</span><br><span class="line">          valid_status_codes: [200,301,302]</span><br><span class="line">          method: GET</span><br><span class="line">          preferred_ip_protocol: &quot;ip4&quot;</span><br><span class="line">      tcp_connect:</span><br><span class="line">        prober: tcp</span><br><span class="line">        timeout: 2s</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: blackbox-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: blackbox-exporter</span><br><span class="line">  annotations:</span><br><span class="line">    deployment.kubernetes.io&#x2F;revision: 1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: blackbox-exporter</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: blackbox-exporter</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: config</span><br><span class="line">        configMap:</span><br><span class="line">          name: blackbox-exporter</span><br><span class="line">          defaultMode: 420</span><br><span class="line">      containers:</span><br><span class="line">      - name: blackbox-exporter</span><br><span class="line">        image: harbor.kococ.cn&#x2F;public&#x2F;blackbox-exporter:v0.15.1</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:</span><br><span class="line">        - --config.file&#x3D;&#x2F;etc&#x2F;blackbox_exporter&#x2F;blackbox.yml</span><br><span class="line">        - --log.level&#x3D;info</span><br><span class="line">        - --web.listen-address&#x3D;:9115</span><br><span class="line">        ports:</span><br><span class="line">        - name: blackbox-port</span><br><span class="line">          containerPort: 9115</span><br><span class="line">          protocol: TCP</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 256Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 50Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: config</span><br><span class="line">          mountPath: &#x2F;etc&#x2F;blackbox_exporter</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 9115</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 3</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: blackbox-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: blackbox-exporter</span><br><span class="line">  ports:</span><br><span class="line">    - name: blackbox-port</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 9115</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: blackbox-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: blackbox.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: blackbox-exporter</span><br><span class="line">          servicePort: blackbox-port</span><br></pre></td></tr></table></figure><p>这里用到了一个域名，添加解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;var&#x2F;named&#x2F;kococ.cn.zone</span><br><span class="line">blackbox       A    10.4.7.10</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;blackbox-exporter&#x2F;cm.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;blackbox-exporter&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;blackbox-exporter&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;blackbox-exporter&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217185516382-1860732768.png" alt="img"></p><p>访问域名测试：</p><p>访问到以下界面，表示blackbox已经运行成功</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217185636620-1445438345.png" alt="img"></p><p> <strong>接下来部署prometheus server：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull prom&#x2F;prometheus:v2.14.0</span><br><span class="line"># docker tag 7317640d555e harbor.kococ.cn&#x2F;infra&#x2F;prometheus:v2.14.0</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;infra&#x2F;prometheus:v2.14.0</span><br></pre></td></tr></table></figure><p>准备资源配置清单：</p><p>1、rbac.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: infra</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes&#x2F;metrics</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">- nonResourceURLs:</span><br><span class="line">  - &#x2F;metrics</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: infra</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><p>加上–web.enable-lifecycle启用远程热加载配置文件<br>调用指令是curl -X POST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p><p>storage.tsdb.min-block-duration=10m #只加载10分钟数据到内</p><p>storage.tsdb.retention=72h #保留72小时数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    deployment.kubernetes.io&#x2F;revision: &quot;5&quot;</span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  progressDeadlineSeconds: 600</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: prometheus</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;prometheus:v2.14.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        command:</span><br><span class="line">        - &#x2F;bin&#x2F;prometheus</span><br><span class="line">        args:</span><br><span class="line">        - --config.file&#x3D;&#x2F;data&#x2F;etc&#x2F;prometheus.yml</span><br><span class="line">        - --storage.tsdb.path&#x3D;&#x2F;data&#x2F;prom-db</span><br><span class="line">        - --storage.tsdb.min-block-duration&#x3D;10m</span><br><span class="line">        - --storage.tsdb.retention&#x3D;72h</span><br><span class="line">        - --web.enable-lifecycle</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &#x2F;data</span><br><span class="line">          name: data</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: &quot;1000m&quot;</span><br><span class="line">            memory: &quot;1.5Gi&quot;</span><br><span class="line">          limits:</span><br><span class="line">            cpu: &quot;2000m&quot;</span><br><span class="line">            memory: &quot;3Gi&quot;</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      serviceAccountName: prometheus</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        nfs:</span><br><span class="line">          server: hdss7-200</span><br><span class="line">          path: &#x2F;data&#x2F;nfs-volume&#x2F;prometheus</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9090</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 9090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io&#x2F;ingress.class: traefik</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus</span><br><span class="line">          servicePort: 9090</span><br></pre></td></tr></table></figure><p>这里用到一个域名，添加解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prometheus         A    10.4.7.10</span><br></pre></td></tr></table></figure><p>记得重启named服务</p><p>创建需要的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p &#x2F;data&#x2F;nfs-volume&#x2F;prometheus&#x2F;&#123;etc,prom-db&#125;</span><br></pre></td></tr></table></figure><p>修改prometheus配置文件：别问为啥这么写，问就是不懂~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;data&#x2F;nfs-volume&#x2F;prometheus&#x2F;etc&#x2F;prometheus.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     15s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: &#39;etcd&#39;</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: &#x2F;data&#x2F;etc&#x2F;ca.pem</span><br><span class="line">    cert_file: &#x2F;data&#x2F;etc&#x2F;client.pem</span><br><span class="line">    key_file: &#x2F;data&#x2F;etc&#x2F;client-key.pem</span><br><span class="line">  scheme: https</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - &#39;10.4.7.12:2379&#39;</span><br><span class="line">    - &#39;10.4.7.21:2379&#39;</span><br><span class="line">    - &#39;10.4.7.22:2379&#39;</span><br><span class="line">- job_name: &#39;kubernetes-apiservers&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt</span><br><span class="line">  bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: default;kubernetes;https</span><br><span class="line">- job_name: &#39;kubernetes-pods&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: true</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    regex: (.+)</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">    action: replace</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: $1:$2</span><br><span class="line">    target_label: __address__</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_pod_name</span><br><span class="line">- job_name: &#39;kubernetes-kubelet&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">    regex: (.+)</span><br><span class="line">    target_label: __address__</span><br><span class="line">    replacement: $&#123;1&#125;:10255</span><br><span class="line">- job_name: &#39;kubernetes-cadvisor&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">    regex: (.+)</span><br><span class="line">    target_label: __address__</span><br><span class="line">    replacement: $&#123;1&#125;:4194</span><br><span class="line">- job_name: &#39;kubernetes-kube-state&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_pod_name</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]</span><br><span class="line">    regex: .*true.*</span><br><span class="line">    action: keep</span><br><span class="line">  - source_labels: [&#39;__meta_kubernetes_pod_label_daemon&#39;, &#39;__meta_kubernetes_pod_node_name&#39;]</span><br><span class="line">    regex: &#39;node-exporter;(.*)&#39;</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: nodename</span><br><span class="line">- job_name: &#39;blackbox_http_pod_probe&#39;</span><br><span class="line">  metrics_path: &#x2F;probe</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  params:</span><br><span class="line">    module: [http_2xx]</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_blackbox_scheme]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: http</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_pod_annotation_blackbox_port,  __meta_kubernetes_pod_annotation_blackbox_path]</span><br><span class="line">    action: replace</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+);(.+)</span><br><span class="line">    replacement: $1:$2$3</span><br><span class="line">    target_label: __param_target</span><br><span class="line">  - action: replace</span><br><span class="line">    target_label: __address__</span><br><span class="line">    replacement: blackbox-exporter.kube-system:9115</span><br><span class="line">  - source_labels: [__param_target]</span><br><span class="line">    target_label: instance</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_pod_name</span><br><span class="line">- job_name: &#39;blackbox_tcp_pod_probe&#39;</span><br><span class="line">  metrics_path: &#x2F;probe</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  params:</span><br><span class="line">    module: [tcp_connect]</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_blackbox_scheme]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: tcp</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_pod_annotation_blackbox_port]</span><br><span class="line">    action: replace</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: $1:$2</span><br><span class="line">    target_label: __param_target</span><br><span class="line">  - action: replace</span><br><span class="line">    target_label: __address__</span><br><span class="line">    replacement: blackbox-exporter.kube-system:9115</span><br><span class="line">  - source_labels: [__param_target]</span><br><span class="line">    target_label: instance</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_pod_name</span><br><span class="line">- job_name: &#39;traefik&#39;</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: traefik</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    regex: (.+)</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">    action: replace</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: $1:$2</span><br><span class="line">    target_label: __address__</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_pod_name</span><br></pre></td></tr></table></figure><p>拷贝配置文件中用到的证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;nfs-volume&#x2F;prometheus&#x2F;etc&#x2F;# cp &#x2F;opt&#x2F;certs&#x2F;ca.pem .&#x2F;</span><br><span class="line"># cp &#x2F;opt&#x2F;certs&#x2F;client.pem .&#x2F;</span><br><span class="line"># cp &#x2F;opt&#x2F;certs&#x2F;client-key.pem .&#x2F;</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prometheus-server&#x2F;rbac.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prometheus-server&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prometheus-server&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;prometheus-server&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217193646033-135940431.png" alt="img"></p><p>浏览器验证：prometheus.kococ.cn</p><p>这里点击status-targets，这里展示的就是我们在prometheus.yml中配置的job-name，这些targets基本可以满足我们收集数据的需求。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191217193825301-1559250334.png" alt="img"></p><p>点击status-configuration就是我们的配置文件</p><p><img src="C:\Users\mu77ops\Desktop\个人\k8s\img\1034759-20191217193951620-86033895.png" alt="img"></p><p> 我们在配置文件中，除了etcd使用的静态配置以外，其他job都是使用的自动发现。</p><p> 静态配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     15s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line">scrape_configs:</span><br><span class="line">- job_name: &#39;etcd&#39;</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: &#x2F;data&#x2F;etc&#x2F;ca.pem</span><br><span class="line">    cert_file: &#x2F;data&#x2F;etc&#x2F;client.pem</span><br><span class="line">    key_file: &#x2F;data&#x2F;etc&#x2F;client-key.pem</span><br><span class="line">  scheme: https</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - &#39;10.4.7.12:2379&#39;</span><br><span class="line">    - &#39;10.4.7.21:2379&#39;</span><br><span class="line">    - &#39;10.4.7.22:2379&#39;</span><br></pre></td></tr></table></figure><p>自动发现：自动发现资源是pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &#39;blackbox_http_pod_probe&#39;</span><br><span class="line">  metrics_path: &#x2F;probe</span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: pod</span><br><span class="line">  params:</span><br><span class="line">    module: [http_2xx]</span><br><span class="line">  relabel_configs:</span><br></pre></td></tr></table></figure><p>这里还有很多数据没有收集到，是因为我们在启动服务的时候，没有添加annotations，下面给需要收集数据的服务添加annotations</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218105127737-1378083314.png" alt="img"></p><p> 1、traefik：</p><p>修改traefik的yaml：</p><p>从dashboard里找到traefik的yaml，跟labels同级添加annotations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;annotations&quot;: &#123;</span><br><span class="line">  &quot;prometheus_io_scheme&quot;: &quot;traefik&quot;,</span><br><span class="line">  &quot;prometheus_io_path&quot;: &quot;&#x2F;metrics&quot;,</span><br><span class="line">  &quot;prometheus_io_port&quot;: &quot;8080&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218105807546-605452742.png" alt="img"></p><p> 等待pod重启以后，在去prometheus上去看</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218110258286-969134963.png" alt="img"></p><p> 2、blackbox：</p><p>这个是检测容器内服务存活性的，也就是端口健康状态检查，分为tcp和http</p><p>首先准备两个服务，将dubbo-demo-service和dubbo-demo-consumer都调整为使用master镜像，不依赖apollo的（节省资源）</p><p>等两个服务起来以后，首先在dubbo-demo-service资源中添加一个TCP的annotation：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;annotations&quot;: &#123;</span><br><span class="line">  &quot;blackbox_port&quot;: &quot;20880&quot;,</span><br><span class="line">  &quot;blackbox_scheme&quot;: &quot;tcp&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218114049185-289549656.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218114215347-1007468579.png" alt="img"></p><p>这里会自动发现我们服务中，运行tcp port端口为20880的服务，并监控其状态</p><p>接下来在dubbo-demo-consumer资源中添加一个HTTP的annotation：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;annotations&quot;: &#123;</span><br><span class="line">  &quot;blackbox_path&quot;: &quot;&#x2F;hello?name&#x3D;health&quot;,</span><br><span class="line">  &quot;blackbox_port&quot;: &quot;8080&quot;,</span><br><span class="line">  &quot;blackbox_scheme&quot;: &quot;http&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218114140050-1303905475.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218114226257-429843371.png" alt="img"></p><p> 去检查blackbox.kococ.cn</p><p><a href="http://blackbox.kococ.cn/">http://blackbox.kococ.cn/</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218114841470-1455492210.png" alt="img"></p><p> 接下来添加监控jvm信息的annotation：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;annotations&quot;: &#123;</span><br><span class="line">  &quot;prometheus_io_scrape&quot;: &quot;true&quot;,</span><br><span class="line">  &quot;prometheus_io_port&quot;: &quot;12346&quot;,</span><br><span class="line">  &quot;prometheus_io_path&quot;: &quot;&#x2F;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dubbo-demo-service和dubbo-demo-consumer都添加：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218115419279-1197993355.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218115443784-1236702705.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218115505536-1101147354.png" alt="img"></p><p> 匹配规则，要去prometheus.yml中去看。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218115652344-500964534.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218115708456-1158104936.png" alt="img"></p><p> 接下来部署炫酷的dashboard工具grafana：</p><p> 下载镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull grafana&#x2F;grafana:5.4.2</span><br><span class="line"># docker tag 6f18ddf9e552 harbor.kococ.cn&#x2F;infra&#x2F;grafana:v5.4.2</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;infra&#x2F;grafana:v5.4.2</span><br></pre></td></tr></table></figure><p>准备资源配置清单：</p><p>1、rbac.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: grafana</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;*&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - namespaces</span><br><span class="line">  - deployments</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io&#x2F;mode: Reconcile</span><br><span class="line">    kubernetes.io&#x2F;cluster-service: &quot;true&quot;</span><br><span class="line">  name: grafana</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: grafana</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: k8s-node</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">    name: grafana</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  progressDeadlineSeconds: 600</span><br><span class="line">  replicas: 1</span><br><span class="line">  revisionHistoryLimit: 7</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: grafana</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: grafana</span><br><span class="line">        name: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;grafana:v5.4.2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3000</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &#x2F;var&#x2F;lib&#x2F;grafana</span><br><span class="line">          name: data</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      volumes:</span><br><span class="line">      - nfs:</span><br><span class="line">          server: hdss7-200</span><br><span class="line">          path: &#x2F;data&#x2F;nfs-volume&#x2F;grafana</span><br><span class="line">        name: data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;nfs-volume&#x2F;grafana</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3000</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 3000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br></pre></td></tr></table></figure><p>4、ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana.kococ.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br></pre></td></tr></table></figure><p>域名解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grafana            A    10.4.7.10</span><br></pre></td></tr></table></figure><p>应用资源配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;grafana&#x2F;rbac.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;grafana&#x2F;dp.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;grafana&#x2F;svc.yaml</span><br><span class="line"># kubectl apply -f http:&#x2F;&#x2F;k8s-yaml.kococ.cn&#x2F;grafana&#x2F;ingress.yaml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218145402221-1808300862.png" alt="img"></p><p> 浏览器访问验证：</p><p>grafana.kococ.cn</p><p>默认用户名密码admin</p><p>进入容器安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># kubectl exec  -it grafana-d6588db94-xr4s6 &#x2F;bin&#x2F;bash -n infra</span><br><span class="line">grafana-cli plugins install grafana-kubernetes-app</span><br><span class="line">grafana-cli plugins install grafana-clock-panel</span><br><span class="line">grafana-cli plugins install grafana-piechart-panel</span><br><span class="line">grafana-cli plugins install briangann-gauge-panel</span><br><span class="line">grafana-cli plugins install natel-discrete-panel</span><br></pre></td></tr></table></figure><p>配置数据源：选择prometheus，把三个证书添加进来</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218150843677-574385113.png" alt="img"></p><p> 重启grafana</p><p>找到我们刚才安装的插件里面的kubernetes,启用，然后新建cluster</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218151453446-763104384.png" alt="img"></p><p> 添加完需要稍等几分钟，在没有取到数据之前，会报http forbidden，没关系，等一会就好。大概2-5分钟。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218151955768-1516493063.png" alt="img"></p><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218152034611-252542525.png" alt="img"></p><p>配置alert告警插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker pull docker.io&#x2F;prom&#x2F;alertmanager:v0.14.0</span><br><span class="line"># docker tag 30594e96cbe8 harbor.kococ.cn&#x2F;infra&#x2F;alertmanager:v0.14.0</span><br><span class="line"># docker push harbor.kococ.cn&#x2F;infra&#x2F;alertmanager:v0.14.0</span><br></pre></td></tr></table></figure><p>资源配置清单：</p><p>1、cm.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-config</span><br><span class="line">  namespace: infra</span><br><span class="line">data:</span><br><span class="line">  config.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      # 在没有报警的情况下声明为已解决的时间</span><br><span class="line">      resolve_timeout: 5m</span><br><span class="line">      # 配置邮件发送信息</span><br><span class="line">      smtp_smarthost: &#39;smtp.163.com:25&#39;</span><br><span class="line">      smtp_from: &#39;xxx@163.com&#39;</span><br><span class="line">      smtp_auth_username: &#39;xxx@163.com&#39;</span><br><span class="line">      smtp_auth_password: &#39;xxxxxx&#39;</span><br><span class="line">      smtp_require_tls: false</span><br><span class="line">    # 所有报警信息进入后的根路由，用来设置报警的分发策略</span><br><span class="line">    route:</span><br><span class="line">      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster&#x3D;A 和 alertname&#x3D;LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面</span><br><span class="line">      group_by: [&#39;alertname&#39;, &#39;cluster&#39;]</span><br><span class="line">      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。</span><br><span class="line">      group_wait: 30s</span><br><span class="line"></span><br><span class="line">      # 当第一个报警发送后，等待&#39;group_interval&#39;时间来发送新的一组报警信息。</span><br><span class="line">      group_interval: 5m</span><br><span class="line"></span><br><span class="line">      # 如果一个报警信息已经发送成功了，等待&#39;repeat_interval&#39;时间来重新发送他们</span><br><span class="line">      repeat_interval: 5m</span><br><span class="line"></span><br><span class="line">      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器</span><br><span class="line">      receiver: default</span><br><span class="line"></span><br><span class="line">    receivers:</span><br><span class="line">    - name: &#39;default&#39;</span><br><span class="line">      email_configs:</span><br><span class="line">      - to: &#39;xxxx@qq.com&#39;</span><br><span class="line">        send_resolved: true</span><br></pre></td></tr></table></figure><p>2、dp.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: alertmanager</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: alertmanager</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: alertmanager</span><br><span class="line">        image: harbor.kococ.cn&#x2F;infra&#x2F;alertmanager:v0.14.0</span><br><span class="line">        args:</span><br><span class="line">          - &quot;--config.file&#x3D;&#x2F;etc&#x2F;alertmanager&#x2F;config.yml&quot;</span><br><span class="line">          - &quot;--storage.path&#x3D;&#x2F;alertmanager&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - name: alertmanager</span><br><span class="line">          containerPort: 9093</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: alertmanager-cm</span><br><span class="line">          mountPath: &#x2F;etc&#x2F;alertmanager</span><br><span class="line">      volumes:</span><br><span class="line">      - name: alertmanager-cm</span><br><span class="line">        configMap:</span><br><span class="line">          name: alertmanager-config</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor</span><br></pre></td></tr></table></figure><p>3、svc.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager</span><br><span class="line">  namespace: infra</span><br><span class="line">spec:</span><br><span class="line">  selector: </span><br><span class="line">    app: alertmanager</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 9093</span><br></pre></td></tr></table></figure><p>基础报警规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;data&#x2F;nfs-volume&#x2F;prometheus&#x2F;etc&#x2F;rules.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: hostStatsAlert</span><br><span class="line">  rules:</span><br><span class="line">  - alert: hostCpuUsageAlert</span><br><span class="line">    expr: sum(avg without (cpu)(irate(node_cpu&#123;mode!&#x3D;&#39;idle&#39;&#125;[5m]))) by (instance) &gt; 0.85</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; CPU usage above 85% (current value: &#123;&#123; $value &#125;&#125;%)&quot;</span><br><span class="line">  - alert: hostMemUsageAlert</span><br><span class="line">    expr: (node_memory_MemTotal - node_memory_MemAvailable)&#x2F;node_memory_MemTotal &gt; 0.85</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; MEM usage above 85% (current value: &#123;&#123; $value &#125;&#125;%)&quot;</span><br><span class="line">  - alert: OutOfInodes</span><br><span class="line">    expr: node_filesystem_free&#123;fstype&#x3D;&quot;overlay&quot;,mountpoint &#x3D;&quot;&#x2F;&quot;&#125; &#x2F; node_filesystem_size&#123;fstype&#x3D;&quot;overlay&quot;,mountpoint &#x3D;&quot;&#x2F;&quot;&#125; * 100 &lt; 10</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Out of inodes (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk is almost running out of available inodes (&lt; 10% left) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: OutOfDiskSpace</span><br><span class="line">    expr: node_filesystem_free&#123;fstype&#x3D;&quot;overlay&quot;,mountpoint &#x3D;&quot;&#x2F;rootfs&quot;&#125; &#x2F; node_filesystem_size&#123;fstype&#x3D;&quot;overlay&quot;,mountpoint &#x3D;&quot;&#x2F;rootfs&quot;&#125; * 100 &lt; 10</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Out of disk space (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk is almost full (&lt; 10% left) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualNetworkThroughputIn</span><br><span class="line">    expr: sum by (instance) (irate(node_network_receive_bytes[2m])) &#x2F; 1024 &#x2F; 1024 &gt; 100</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual network throughput in (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Host network interfaces are probably receiving too much data (&gt; 100 MB&#x2F;s) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualNetworkThroughputOut</span><br><span class="line">    expr: sum by (instance) (irate(node_network_transmit_bytes[2m])) &#x2F; 1024 &#x2F; 1024 &gt; 100</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual network throughput out (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Host network interfaces are probably sending too much data (&gt; 100 MB&#x2F;s) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualDiskReadRate</span><br><span class="line">    expr: sum by (instance) (irate(node_disk_bytes_read[2m])) &#x2F; 1024 &#x2F; 1024 &gt; 50</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual disk read rate (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk is probably reading too much data (&gt; 50 MB&#x2F;s) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualDiskWriteRate</span><br><span class="line">    expr: sum by (instance) (irate(node_disk_bytes_written[2m])) &#x2F; 1024 &#x2F; 1024 &gt; 50</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual disk write rate (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk is probably writing too much data (&gt; 50 MB&#x2F;s) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualDiskReadLatency</span><br><span class="line">    expr: rate(node_disk_read_time_ms[1m]) &#x2F; rate(node_disk_reads_completed[1m]) &gt; 100</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual disk read latency (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk latency is growing (read operations &gt; 100ms) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: UnusualDiskWriteLatency</span><br><span class="line">    expr: rate(node_disk_write_time_ms[1m]) &#x2F; rate(node_disk_writes_completedl[1m]) &gt; 100</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Unusual disk write latency (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Disk latency is growing (write operations &gt; 100ms) (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">- name: http_status</span><br><span class="line">  rules:</span><br><span class="line">  - alert: ProbeFailed</span><br><span class="line">    expr: probe_success &#x3D;&#x3D; 0</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: error</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Probe failed (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Probe failed (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: StatusCode</span><br><span class="line">    expr: probe_http_status_code &lt;&#x3D; 199 OR probe_http_status_code &gt;&#x3D; 400</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: error</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Status Code (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;HTTP status code is not 200-399 (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: SslCertificateWillExpireSoon</span><br><span class="line">    expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 30</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;SSL certificate will expire soon (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;SSL certificate expires in 30 days (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: SslCertificateHasExpired</span><br><span class="line">    expr: probe_ssl_earliest_cert_expiry - time()  &lt;&#x3D; 0</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: error</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;SSL certificate has expired (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;SSL certificate has expired already (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: BlackboxSlowPing</span><br><span class="line">    expr: probe_icmp_duration_seconds &gt; 2</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Blackbox slow ping (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Blackbox ping took more than 2s (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: BlackboxSlowRequests</span><br><span class="line">    expr: probe_http_duration_seconds &gt; 2 </span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Blackbox slow requests (instance &#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class="line">      description: &quot;Blackbox request took more than 2s (current value: &#123;&#123; $value &#125;&#125;)&quot;</span><br><span class="line">  - alert: PodCpuUsagePercent</span><br><span class="line">    expr: sum(sum(label_replace(irate(container_cpu_usage_seconds_total[1m]),&quot;pod&quot;,&quot;$1&quot;,&quot;container_label_io_kubernetes_pod_name&quot;, &quot;(.*)&quot;))by(pod) &#x2F; on(pod) group_right kube_pod_container_resource_limits_cpu_cores *100 )by(container,namespace,node,pod,severity) &gt; 80</span><br><span class="line">    for: 5m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;Pod cpu usage percent has exceeded 80% (current value: &#123;&#123; $value &#125;&#125;%)&quot;</span><br></pre></td></tr></table></figure><p>在prometheus.yml中添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># vi prometheus.yml</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&quot;alertmanager&quot;]</span><br><span class="line">rule_files:</span><br><span class="line"> - &quot;&#x2F;data&#x2F;etc&#x2F;rules.yml&quot;</span><br></pre></td></tr></table></figure><p>重载配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -X POST http:&#x2F;&#x2F;prometheus.kococ.cn&#x2F;-&#x2F;reload</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218173411675-688635972.png" alt="img"></p><p> 以上这些就是我们的告警规则</p><p>测试告警：</p><p>把app命名空间里的dubbo-demo-service给停掉：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218173935193-1795591117.png" alt="img"></p><p> 看下blackbox里的信息：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218174004624-1646255779.png" alt="img"></p><p>看下alert：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218174052248-183200263.png" alt="img"></p><p> 红色的时候就开会发邮件告警：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218174118507-915764907.png" alt="img"></p><p> 已经收到告警了，后续上生产，还会更新如何添加微信、钉钉、短信告警</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/1034759-20191218174253105-950989449.png" alt="img"></p><p> 如果需要自己定制告警规则和告警内容，需要研究一下promql，自己修改配置文件。</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins汉化并修改插件源为国内源</title>
      <link href="/posts/39737/"/>
      <url>/posts/39737/</url>
      
        <content type="html"><![CDATA[<h1 id="jenkins插件安装更换为国内源"><a href="#jenkins插件安装更换为国内源" class="headerlink" title="jenkins插件安装更换为国内源"></a>jenkins插件安装更换为国内源</h1><p>1.在jenkins登陆后进入“系统管理”-“插件管理”-“高级”中，设置升级站点</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/22988262-5fa9df82a2f0e033.png" alt="22988262-5fa9df82a2f0e033"></p><p>2.设置升级站点为如下地址：</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>3.提交</p><p>4.在后台服务器中找到jenkins的安装路径下的update配置文件</p><p>路径/var/lib/jenkins/updates</p><p>找到default.json文件</p><p>替换updates.jenkins-ci.org/download为mirrors.tuna.tsinghua.edu.cn/jenkins</p><p>替换 <a href="http://www.google.com为www.baidu.com/">www.google.com为www.baidu.com</a></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/22988262-00136718ba2d05b6.png" alt="22988262-00136718ba2d05b6"></p><p>5.重启jenkins服务service jenkins restart,重新登录，速度飞快</p><h1 id="Jenkins汉化"><a href="#Jenkins汉化" class="headerlink" title="Jenkins汉化"></a>Jenkins汉化</h1><p>一、安装插件</p><p>主界面–&gt;系统管理–&gt;插件管理–&gt;可选插件</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20180910113325335.png" alt="20180910113325335"></p><p>安装插件locale plugin（上图已经安装完成）</p><p>二、配置语言</p><p>系统管理–&gt;系统设置–&gt;Locale</p><p>填入：zh_CN</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20180910113839172.png" alt="20180910113839172"></p><p>三、应用保存。</p><h3 id="汉化第二种方法-支持最新版本全部汉化"><a href="#汉化第二种方法-支持最新版本全部汉化" class="headerlink" title="汉化第二种方法,支持最新版本全部汉化"></a>汉化第二种方法,支持最新版本全部汉化</h3><p>在jenkins插件中安装以下插件后 重启jenkins即可</p><p>Localization:Chinese</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK+Redis+Grafana监控分析Nginx生产日志终极版</title>
      <link href="/posts/20924/"/>
      <url>/posts/20924/</url>
      
        <content type="html"><![CDATA[<h2 id="先上架构图"><a href="#先上架构图" class="headerlink" title="先上架构图"></a>先上架构图</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/74899ea95827d087e0f86d034cfbaea6.png" alt="74899ea95827d087e0f86d034cfbaea6"></p><ul><li>Nginx 会将我们定义的log<em>format写入/var/log/nginx/access</em>json.log文件，Filebeat会将其作为输入项。</li><li>Filebeat会将数据输出到Redis</li><li>Logstash作为Redis数据的过滤将数据存储Elasticsearch</li><li>Grafana读取Elasticsearch数据源</li></ul><h2 id="简单介绍下Grafana"><a href="#简单介绍下Grafana" class="headerlink" title="简单介绍下Grafana"></a>简单介绍下Grafana</h2><blockquote><p>grafana 是一款采用 go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库,官网（<a href="http://docs.grafana.org/%EF%BC%89">http://docs.grafana.org/）</a>.</p></blockquote><h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><p>针对入口Nginx，我设计了如下的监控指标：</p><ul><li>最近的24小时内访问量Top10的国家</li><li>最近24小时最受欢迎的页面</li><li>200状态码和404状态码的比例</li><li>最受欢迎的世界题图展示</li><li>等等</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>关闭安全机制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>配置repo源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install</span><br></pre></td></tr></table></figure><p>替换nginx输入日志格式为json格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  log_format  main &#39;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">  &#39;&quot;host&quot;:&quot;$hostname&quot;,&#39;</span><br><span class="line">  &#39;&quot;server_ip&quot;:&quot;$server_addr&quot;,&#39;</span><br><span class="line">  &#39;&quot;client_ip&quot;:&quot;$remote_addr&quot;,&#39;</span><br><span class="line">  &#39;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">  &#39;&quot;domain&quot;:&quot;$host&quot;,&#39;</span><br><span class="line">  &#39;&quot;url&quot;:&quot;$uri&quot;,&#39;</span><br><span class="line">  &#39;&quot;referer&quot;:&quot;$http_referer&quot;,&#39;</span><br><span class="line">  &#39;&quot;args&quot;:&quot;$args&quot;,&#39;</span><br><span class="line">  &#39;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#39;</span><br><span class="line">  &#39;&quot;responsetime&quot;:&quot;$request_time&quot;,&#39;</span><br><span class="line">  &#39;&quot;request_method&quot;:&quot;$request_method&quot;,&#39;</span><br><span class="line">  &#39;&quot;status&quot;:&quot;$status&quot;,&#39;</span><br><span class="line">  &#39;&quot;size&quot;:&quot;$body_bytes_sent&quot;,&#39;</span><br><span class="line">  &#39;&quot;request_body&quot;:&quot;$request_body&quot;,&#39;</span><br><span class="line">  &#39;&quot;request_length&quot;:&quot;$request_length&quot;,&#39;</span><br><span class="line">  &#39;&quot;protocol&quot;:&quot;$server_protocol&quot;,&#39;</span><br><span class="line">  &#39;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#39;</span><br><span class="line">  &#39;&quot;file_dir&quot;:&quot;$request_filename&quot;,&#39;</span><br><span class="line">  &#39;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;&#39;</span><br><span class="line">&#39;&#125;&#39;;</span><br></pre></td></tr></table></figure><p>#不知道怎么替换的可以查百度,如果您用的是虚拟主机,请在虚拟主机conf文件中配置引用你主配置文件的log输入定义.</p><p>虚拟主机配置文件修改log输入写法如下#如果您没有虚拟主机请跳过这一步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main ;</span><br></pre></td></tr></table></figure><p>配置完成后启动Nginx.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1</span><br><span class="line">tail -1 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br><span class="line">检测是否输入格式为json</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install redis</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;redis.conf</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1 192.168.1.101 #只有这里需要配置为您的内网IP地址</span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize no</span><br><span class="line">supervised no</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;var&#x2F;lib&#x2F;redis</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><p>启动redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure><h2 id="安装ELK"><a href="#安装ELK" class="headerlink" title="安装ELK"></a>安装ELK</h2><p>ELK的安装前提是需要java环境的,这里图省事,直接用yum安装java</p><p>安装java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install java</span><br></pre></td></tr></table></figure><p>验证java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="ELK版本需要统一不然会出大问题-这里统一采用最新版7-9-1"><a href="#ELK版本需要统一不然会出大问题-这里统一采用最新版7-9-1" class="headerlink" title="ELK版本需要统一不然会出大问题,这里统一采用最新版7.9.1"></a>ELK版本需要统一不然会出大问题,这里统一采用最新版7.9.1</h3><h4 id="安装ES-elasticsearch"><a href="#安装ES-elasticsearch" class="headerlink" title="安装ES(elasticsearch)"></a>安装ES(elasticsearch)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 opt]# ls</span><br><span class="line">elasticsearch-7.9.1-x86_64.rpm  grafana-7.0.1-1.x86_64.rpm  logstash-7.9.1.rpm</span><br><span class="line">filebeat-7.9.1-x86_64.rpm       kibana-7.9.1-x86_64.rpm</span><br><span class="line">[root@master1 opt]# rpm -ivh elasticsearch-7.9.1-x86_64.rpm </span><br></pre></td></tr></table></figure><p>不要着急启动,先修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 opt]# cat &#x2F;etc&#x2F;elasticsearch&#x2F;elasticsearch.yml | grep -v &quot;^$&quot; | grep -v &quot;^#&quot;</span><br><span class="line">#节点名称</span><br><span class="line">node.name: node-1</span><br><span class="line">#程序工作目录</span><br><span class="line">path.data: &#x2F;var&#x2F;lib&#x2F;elasticsearch</span><br><span class="line">#程序日志产生目录</span><br><span class="line">path.logs: &#x2F;var&#x2F;log&#x2F;elasticsearch</span><br><span class="line">#内存锁定</span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line">#你的本地IP跟本地回环</span><br><span class="line">network.host: 192.168.1.101,127.0.0.1  </span><br><span class="line">#端口</span><br><span class="line">http.port: 9200</span><br><span class="line">#7.0以后都需要加的配置项</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;] </span><br></pre></td></tr></table></figure><p>由于我们配置了锁定内存所以在系统文件里也要有相应的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">官方解决方案</span><br><span class="line">https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;6.4&#x2F;setup-configuration-memory.html</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;6.4&#x2F;setting-system-settings.html#sysconfig</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;elasticsearch.service</span><br><span class="line">### 增加如下参数</span><br><span class="line">[Service]</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br></pre></td></tr></table></figure><p>保存后重载系统配置,启动ES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart elasticsearch</span><br></pre></td></tr></table></figure><p>检测ES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检测端口是否开启</span><br><span class="line">netstat -apunt | grep 9200</span><br><span class="line">或者</span><br><span class="line">curl 127.0.0.1:9200</span><br></pre></td></tr></table></figure><h4 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 opt]# rpm -ivh filebeat-7.9.1-x86_64.rpm</span><br></pre></td></tr></table></figure><p>配置文件修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@QLaliyun ~]# cat &#x2F;etc&#x2F;filebeat&#x2F;filebeat.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.overwrite_keys: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;&#x2F;modules.d&#x2F;*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;127.0.0.1:5601&quot;</span><br><span class="line">output.redis:</span><br><span class="line">  hosts: [&quot;localhost&quot;] </span><br><span class="line">  db: 0</span><br><span class="line">  key: &quot;nginx_logs&quot; </span><br><span class="line">  timeout: 5</span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata:</span><br><span class="line">      when.not.contains.tags: forwarded</span><br><span class="line">  - add_cloud_metadata: ~</span><br><span class="line">  - add_docker_metadata: ~</span><br><span class="line">  - add_kubernetes_metadata: ~</span><br></pre></td></tr></table></figure><p>启动filebeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebeat</span><br></pre></td></tr></table></figure><h4 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 opt]# rpm -ivh logstash-7.9.1.rpm </span><br></pre></td></tr></table></figure><p>修改logstash配置文件,后期用nohup方式启动,不知道的话不用关心 跟着操作就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# cat &#x2F;etc&#x2F;logstash&#x2F;conf.d&#x2F;yh_nginx_redis.conf</span><br><span class="line">input &#123;</span><br><span class="line">  # redis nginx key</span><br><span class="line">  redis &#123;</span><br><span class="line">    data_type &#x3D;&gt;&quot;list&quot;</span><br><span class="line">    key &#x3D;&gt;&quot;nginx_logs&quot;</span><br><span class="line">    host &#x3D;&gt;&quot;127.0.0.1&quot;</span><br><span class="line">    port &#x3D;&gt; 6379</span><br><span class="line">   # password &#x3D;&gt; &quot;password&quot;</span><br><span class="line">    db &#x3D;&gt; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  geoip &#123;</span><br><span class="line">    #multiLang &#x3D;&gt; &quot;zh-CN&quot;</span><br><span class="line">    target &#x3D;&gt; &quot;geoip&quot;</span><br><span class="line">    source &#x3D;&gt; &quot;client_ip&quot;</span><br><span class="line">    #下面这个IP库请一定要配置到位,不然装不了逼</span><br><span class="line">    database &#x3D;&gt; &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;GeoLite2-City.mmdb&quot;</span><br><span class="line">    add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ]</span><br><span class="line">    add_field &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot; ]</span><br><span class="line">    remove_field &#x3D;&gt; [&quot;[geoip][latitude]&quot;, &quot;[geoip][longitude]&quot;, &quot;[geoip][country_code]&quot;, &quot;[geoip][country_code2]&quot;, &quot;[geoip][country_code3]&quot;, &quot;[geoip][timezone]&quot;, &quot;[geoip][continent_code]&quot;, &quot;[geoip][region_code]&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert &#x3D;&gt; [ &quot;size&quot;, &quot;integer&quot; ]</span><br><span class="line">    convert &#x3D;&gt; [ &quot;status&quot;, &quot;integer&quot; ]</span><br><span class="line">    convert &#x3D;&gt; [ &quot;responsetime&quot;, &quot;float&quot; ]</span><br><span class="line">    convert &#x3D;&gt; [ &quot;upstreamtime&quot;, &quot;float&quot; ]</span><br><span class="line">    convert &#x3D;&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot; ]</span><br><span class="line">    remove_field &#x3D;&gt; [ &quot;ecs&quot;,&quot;agent&quot;,&quot;host&quot;,&quot;cloud&quot;,&quot;@version&quot;,&quot;input&quot;,&quot;logs_type&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">  useragent &#123;</span><br><span class="line">    source &#x3D;&gt; &quot;http_user_agent&quot;</span><br><span class="line">    target &#x3D;&gt; &quot;ua&quot;</span><br><span class="line">    remove_field &#x3D;&gt; [ &quot;[ua][minor]&quot;,&quot;[ua][major]&quot;,&quot;[ua][build]&quot;,&quot;[ua][patch]&quot;,&quot;[ua][os_minor]&quot;,&quot;[ua][os_major]&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; &quot;http:&#x2F;&#x2F;127.0.0.1:9200&quot;</span><br><span class="line">#    user &#x3D;&gt; &quot;elastic&quot;</span><br><span class="line">#    password &#x3D;&gt; &quot;password&quot;</span><br><span class="line">    index &#x3D;&gt; &quot;logstash-nginx-%&#123;+YYYY.MM&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@lyecs ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动logstash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup &#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#x2F;logstash -f &#x2F;etc&#x2F;logstash&#x2F;conf.d&#x2F;yh_nginx_redis.conf &amp;</span><br></pre></td></tr></table></figure><h4 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h4><p>推荐使用7.0以下版本,否则可能会和部分插件不兼容,这里用的是6.3.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 opt]# rpm -ivh grafana-7.0.1-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p>由于我们后期会用到某些插件所以在这里提前安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grafana-cli plugins install grafana-piechart-panel</span><br><span class="line">grafana-cli plugins install grafana-world-map</span><br></pre></td></tr></table></figure><p>国内服务器可能安装不上,那就自己想办法好吧</p><p>由于某些不可抗力因素如果后期在模板导入后出现地图图片不能正常显示的原因可以.采用以下做法</p><p>参考博客:<a href="https://www.cnblogs.com/xuewenlong/p/12929443.html">https://www.cnblogs.com/xuewenlong/p/12929443.html</a></p><p>好的我们直接打开Grafana奥里给</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start grafana-server</span><br></pre></td></tr></table></figure><h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201013131436778.png" alt="image-20201013131436778"></p><p>点击Save&amp;test测试成功后Back</p><p>导入监控模板</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201013131610205.png" alt="image-20201013131610205"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201013131647199.png" alt="image-20201013131647199"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/image-20201013131729032.png" alt="image-20201013131729032"></p><p>下面直接出图<img src="https://gitee.com/xoxoyun/img/raw/master/image/123.png" alt="123"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/456.png" alt="456"></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK+Redis+Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7安装配置Shadowsocks客户端</title>
      <link href="/posts/10899/"/>
      <url>/posts/10899/</url>
      
        <content type="html"><![CDATA[<p>环境：CentOS7.3 64位<br>1.确认Python已安装，如果未安装，参考2<br><code>python –version</code></p><p>2.安装Python<br><code>yum install python-setuptools &amp;&amp; easy_install pip</code></p><p>3.安装shadowsocks<br><code>pip install shadowsocks</code></p><p>4.创建shadowsocks.json配置文件<br><code>vim /etc/shadowsocks.json</code></p><p>配置文件内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">&quot;port_password&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;10000&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10001&quot;</span>: <span class="string">&quot;ceshi&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10002&quot;</span>: <span class="string">&quot;ceshi&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10003&quot;</span>: <span class="string">&quot;ceshi&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10004&quot;</span>: <span class="string">&quot;ceshi&quot;</span>,</span><br><span class="line"><span class="attr">&quot;10005&quot;</span>: <span class="string">&quot;ceshi&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;timeout&quot;</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line"><span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件说明：<br>server：服务器 IP地址 (这里填0.0.0.0，而不是服务器的外网ip)<br>server_port：服务器监听的端口，建议443，避免被查封（同时注意登陆阿里云配置安全组规则，添加入方向的443端口，包括tcp,udp两个协议类型）<br>password：设置密码，自定义</p><p>注：端口号放行要登陆阿里云，配置安全组策略，包括tcp,udp协议。<br><img src="https://i1.wp.com/blog.shijiusui.com/wp-content/uploads/2018/10/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-10-04-%E4%B8%8A%E5%8D%8811.19.11.png?resize=660,157" alt="img"></p><p>5.启动shadowsocks<br><code>ssserver -c /etc/shadowsocks.json -d start</code></p><p>注：通过netstat -lnp查看对应端口有没有在监听，如图<br><img src="https://i0.wp.com/blog.shijiusui.com/wp-content/uploads/2018/10/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2018-10-04-%E4%B8%8A%E5%8D%8810.48.25.png?resize=660,296" alt="img"></p><p>如果要关闭shadowsocks，命令如下<br><code>ssserver -d stop</code></p><p>6.测试<br>Android手机可安装软件shadowsocks测试<br>链接: <a href="https://pan.baidu.com/s/1bppWO4B">https://pan.baidu.com/s/1bppWO4B</a> 密码: w56j</p><p>安装后，简单配置服务器ip，远程端口，密码即可，完成后点击右上方的悬浮纸飞机应用。<br><img src="https://i2.wp.com/blog.shijiusui.com/wp-content/uploads/2018/10/Screenshot_20181004-105119.jpg?resize=287,510" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux find 命令详解</title>
      <link href="/posts/41171/"/>
      <url>/posts/41171/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux 上的 <code>find</code> 命令是 <code>findutil</code> 软件包的一部分，一般已经默认集成在了几乎所有的发行版中。<br> find 命令有非常大的灵活性，可以向其指定丰富的搜索条件（如<strong>文件权限</strong>、<strong>属主</strong>、<strong>属组</strong>、<strong>文件类型</strong>、<strong>日期</strong>和<strong>大小</strong>等）来定位系统中的文件和目录。<br> 此外，find 还支持对搜索到的结果进行多种类型的<strong>命令</strong>操作。</p></blockquote><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>find 命令的基本结构如下：<br> <code>find [paths] [expression] [actions]</code></p><p>find 命令接受一个或多个<strong>路径</strong>（<em>paths</em>）作为搜索范围，并在该路径下<strong>递归</strong>地搜索。即检索完指定的目录后，还会对该目录下的子目录进行检索，以及子目录下的子目录。。。直到到达目录树底部。</p><p>默认情况下（不带任何搜索条件），find 命令会返回指定目录下的<strong>所有文件</strong>，所以常常需要通过特定的 <code>expression</code> 对结果进行<strong>筛选</strong>。</p><p>find 命令默认的 <code>action</code> 是将所有检索结果打印至标准输出。可以通过自定义 <code>action</code> ，让 find 命令对搜索到的结果执行特定的操作。</p><p>这里先不做详细解释，简单地测试下 find 命令：</p><ol><li>有如下结构的示例目录 directory</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ tree directory</span><br><span class="line">directory</span><br><span class="line">├── file1</span><br><span class="line">├── file2</span><br><span class="line">├── sub-dir1</span><br><span class="line">│   ├── file1</span><br><span class="line">│   ├── file2</span><br><span class="line">│   └── file3</span><br><span class="line">└── sub-dir2</span><br><span class="line">    ├── file2</span><br><span class="line">    └── sub-subdir1</span><br><span class="line">        └── file1</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> directories, <span class="number">7</span> files</span><br></pre></td></tr></table></figure><ol><li>默认的 find 命令会列出该目录下的所有文件</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ find directory</span><br><span class="line">directory</span><br><span class="line">directory/sub-dir1</span><br><span class="line">directory/sub-dir1/file3</span><br><span class="line">directory/sub-dir1/file2</span><br><span class="line">directory/sub-dir1/file1</span><br><span class="line">directory/file2</span><br><span class="line">directory/sub-dir2</span><br><span class="line">directory/sub-dir2/file2</span><br><span class="line">directory/sub-dir2/sub-subdir1</span><br><span class="line">directory/sub-dir2/sub-subdir1/file1</span><br><span class="line">directory/file1</span><br></pre></td></tr></table></figure><ol><li>为 find 命令指定 expression 以筛选出特定的文件</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ find directory -name file2</span><br><span class="line">directory/sub-dir1/file2</span><br><span class="line">directory/file2</span><br><span class="line">directory/sub-dir2/file2</span><br></pre></td></tr></table></figure><ol><li>为 find 命令指定特殊的 action（此处 <code>-delete</code> 表示删除搜索结果）</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ find directory -name file2 -delete</span><br><span class="line">$ find directory</span><br><span class="line">directory</span><br><span class="line">directory/sub-dir1</span><br><span class="line">directory/sub-dir1/file3</span><br><span class="line">directory/sub-dir1/file1</span><br><span class="line">directory/sub-dir2</span><br><span class="line">directory/sub-dir2/sub-subdir1</span><br><span class="line">directory/sub-dir2/sub-subdir1/file1</span><br><span class="line">directory/file1</span><br></pre></td></tr></table></figure><h4 id="二、搜索条件（expression）"><a href="#二、搜索条件（expression）" class="headerlink" title="二、搜索条件（expression）"></a>二、搜索条件（expression）</h4><h5 id="1-根据文件名检索"><a href="#1-根据文件名检索" class="headerlink" title="1. 根据文件名检索"></a>1. 根据文件名检索</h5><p>find 命令中的 <code>-name</code> 选项可以根据文件名称进行检索（<strong>区分大小写</strong>）。如需要忽略文件名中的大小写，可以使用 <code>-iname</code> 选项。</p><p><code>-name</code> 和 <code>-iname</code> 两个选项都支持 <strong>wildcards</strong> 。如：</p><ul><li><code>?</code> 可以表示任意一个单一的符号</li><li><code>*</code> 可以表示任意数量（包括 0）的未知符号</li></ul><p><code>find /usr -name &#39;*.txt&#39;</code> 查找 /usr 目录下所有文件名以 <code>.txt</code> 结尾的文件<br> <code>find /usr -name &#39;????&#39;</code> 查找 /usr 目录下所有文件名刚好为 4 个字符的文件</p><p>有些时候，你需要在搜索时匹配某个文件或目录的<strong>完整路径</strong>，而不仅仅是匹配文件名。可以使用 <code>-path</code> 或 <code>-ipath</code> 选项。</p><p>如查找 /usr 下所有文件名以 <code>.txt</code> 结尾的文件或目录，且该文件的父目录必须是 <code>src</code>。可以使用以下命令：<br> <code>find /usr -path &#39;*/src/*.txt&#39;</code></p><h5 id="2-根据文件类型检索"><a href="#2-根据文件类型检索" class="headerlink" title="2. 根据文件类型检索"></a>2. 根据文件类型检索</h5><p>如果只想搜索得到文件<strong>或</strong>目录，即不想它们同时出现在结果中。可以使用 <code>-type</code> 选项指定文件类型。</p><p><code>-type</code> 选项最常用的参数如下：</p><ul><li>f: 文件</li><li>d: 目录</li><li>l: 符号链接</li></ul><p><code>find /usr -type d -name &#39;python*&#39;</code> 检索 /usr 下所有文件名以 <code>python</code> 开头的<strong>目录</strong></p><h5 id="3-检索空文件"><a href="#3-检索空文件" class="headerlink" title="3. 检索空文件"></a>3. 检索空文件</h5><p>find 命令支持 <code>-empty</code> 选项用来检索<strong>为空</strong>的文件或目录。空文件即文件里没有任何内容，空目录即目录中没有任何文件或子目录。</p><p><code>find ~ -type d -empty</code> 检索用户主目录下所有的空目录</p><h5 id="4-反义匹配"><a href="#4-反义匹配" class="headerlink" title="4. 反义匹配"></a>4. 反义匹配</h5><p>find 命令也允许用户对当前的匹配条件进行<strong>“反义”</strong>（类似于<strong>逻辑非</strong>操作）。</p><p>如需要检索 /usr 下所有文件名<strong>不</strong>以 <code>.txt</code> 为后缀的文件。可以使用以下命令：<br> <code>find /usr -type f ! -name &#39;*.txt&#39;</code></p><p>也可以“翻转”任何其他的筛选条件，如：<br> <code>find /usr -type f ! -empty</code> 检索 /usr 下所有内容不为空的文件</p><h5 id="5-根据文件的所属权检索"><a href="#5-根据文件的所属权检索" class="headerlink" title="5. 根据文件的所属权检索"></a>5. 根据文件的所属权检索</h5><p>为了检索归属于特定用户的文件或目录，可以使用 <code>-user</code> 选项。</p><p><code>find / -type f -user starky</code> 检索根目录下所有属主为 starky 的文件</p><p>类似于 <code>-user</code>选项，<code>-group</code> 选项则可以根据文件或目录的<strong>属组</strong>进行检索。</p><h5 id="6-根据时间日期进行检索"><a href="#6-根据时间日期进行检索" class="headerlink" title="6. 根据时间日期进行检索"></a>6. 根据时间日期进行检索</h5><p>有些时候，需要根据文件创建或修改的时间进行检索。</p><p>Linux 系统中，与文件相关联的时间参数有以下三种：</p><ul><li>修改时间（Modification time）：最后一次文件内容有过更改的时间点</li><li>访问时间（Access time）：最后一次文件有被读取过的时间点</li><li>变更时间（Change time）：最后一次文件有被<strong>变更</strong>过的时间点（如内容被修改，或权限等 metadata 被修改）</li></ul><p>与此对应的是 find 命令中的 <code>-mtime</code>，<code>-atime</code> 和 <code>-ctime</code> 三个选项。</p><p>这三个选项的使用遵循以下示例中的规则：</p><ul><li><code>-mtime 2</code>：该文件 2 天前被修改过</li><li><code>-mtime -2</code>：该文件 2 天<strong>以内</strong>被修改过</li><li><code>-mtime +2</code>：该文件距离上次修改已经<strong>超过</strong> 2 天时间</li></ul><p><code>find /usr -type f -mtime 2</code> 检索 /usr 下两天前被修改过的文件</p><p>如果觉得 <code>-mtime</code> 等选项以<strong>天</strong>为单位时间有点长，还可以使用 <code>-mmin</code>，<code>-amin</code>，<code>-cmin</code> 三个选项：<br> <code>find /usr -type f -mtime +50 -mtime -100</code> 检索 /usr 下 50 到 100 天之前修改过的文件<br> <code>find /usr -type f -mtime 2 -amin 5</code> 检索 /usr 下两天前被修改过且 5 分钟前又读取过的文件</p><h5 id="7-根据文件大小检索"><a href="#7-根据文件大小检索" class="headerlink" title="7. 根据文件大小检索"></a>7. 根据文件大小检索</h5><p><code>-size</code> 选项允许用户通过文件大小进行搜索（只适用于文件，目录没有大小……）。</p><p>表示文件大小的单位由以下字符组成：</p><ul><li><code>c</code>：字节</li><li><code>k</code>：Kb</li><li><code>M</code>：Mb</li><li><code>G</code>：Gb</li></ul><p>另外，还可以使用 <code>+</code> 或 <code>-</code> 符号表示<strong>大于</strong>或<strong>小于</strong>当前条件。</p><p><code>find / -size +1G</code> 检索文件大小高于 1 GB 的文件</p><h5 id="8-根据文件权限检索"><a href="#8-根据文件权限检索" class="headerlink" title="8. 根据文件权限检索"></a>8. 根据文件权限检索</h5><p>find 命令可以使用 <code>-perm</code> 选项以文件权限为依据进行搜索。</p><h6 id="使用符号形式"><a href="#使用符号形式" class="headerlink" title="使用符号形式"></a>使用符号形式</h6><p>如需要检索 /usr 目录下权限为 <code>rwxr-xr-x</code> 的文件，可以使用以下命令：<br> <code>find /usr -perm u=rwx,g=rx,o=rx</code></p><p>搜索 /usr 目录下所有权限为 <code>r-xr-xr-x</code>（即系统中的所有用户都只有读写权限）的文件和目录，可以使用以下命令：<br> <code>find /usr -perm a=rx</code></p><p>很多时候，我们只想匹配文件权限的一个<strong>子集</strong>。比如，检索可以直接被任何用户执行的文件，即只关心文件的执行权限，而不用管其读写权限是什么。</p><p>上述的需求可以通过以下命令实现：<code>find / -type f -perm /a=x</code><br> 其中 <code>a=x</code> 前面的 <code>/</code> 符号即用来表示只匹配权限的某个子集（执行权限），而不用关心其他权限的具体设置。</p><h6 id="使用数字形式"><a href="#使用数字形式" class="headerlink" title="使用数字形式"></a>使用数字形式</h6><p><code>-perm</code> 选项也支持数字形式的文件权限标记。</p><p><code>find /usr -perm 644</code> 搜索 /usr 目录下权限为 <strong>644</strong>（即 <code>rwxr-xr-x</code>）的文件</p><h5 id="9-限制遍历的层数"><a href="#9-限制遍历的层数" class="headerlink" title="9. 限制遍历的层数"></a>9. 限制遍历的层数</h5><p>find 命令默认是以<strong>递归</strong>的方式检索项目的，这有时候会导致得到的结果数量非常巨大。可以使用 <code>-maxdepth</code> 限制 find 命令递归的层数。</p><p><code>find / -maxdepth 3</code> 搜索时向下递归的层数最大为 3</p><h5 id="10-逻辑组合"><a href="#10-逻辑组合" class="headerlink" title="10. 逻辑组合"></a>10. 逻辑组合</h5><p>在之前的例子中有出现多个搜索条件的<strong>组合</strong>以及对某个搜索条件的<strong>反转</strong>。<br> 实际上 find 命令支持 <strong>“and”</strong> 和 <strong>“or”</strong> 两种逻辑运算，对应的命令选项分别是 <code>-a</code> 和 <code>-o</code>。通过这两个选项可以对搜索条件进行更复杂的组合。</p><p>此外还可以使用<strong>小括号</strong>对搜索条件进行<strong>分组</strong>。注意 <code>find</code> 命令中的小括号常需要用<strong>单引号</strong>包裹起来。因小括号在 Shell 中有特殊的含义。</p><p>如检索 /usr 下文件名以 <code>python</code> 开头且类型为目录的文件<br> <code>find /usr -type d -name &#39;python*&#39;</code></p><p>该命令等同于：<br> <code>find /usr -type d -a -name &#39;python*&#39;</code></p><p>更复杂的组合形式如：<br> <code>find / &#39;(&#39; -mmin -5 -o -mtime +50 &#39;)&#39; -a -type f</code></p><h4 id="三、对搜索结果执行命令"><a href="#三、对搜索结果执行命令" class="headerlink" title="三、对搜索结果执行命令"></a>三、对搜索结果执行命令</h4><h5 id="1-删除文件"><a href="#1-删除文件" class="headerlink" title="1. 删除文件"></a>1. 删除文件</h5><p><code>-delete</code> 选项可以用来删除搜索到的文件和目录。</p><p>如删除 home 目录下所有的空目录：<br> <code>find ~ -type d -empty -delete</code></p><h5 id="2-执行自定义命令"><a href="#2-执行自定义命令" class="headerlink" title="2. 执行自定义命令"></a>2. 执行自定义命令</h5><p><code>-exec</code> 选项可以对搜索到的结果执行特定的命令。</p><p>如需要将 home 目录下所有的 MP3 音频文件复制到移动存储设备（假设路径是 <code>/media/MyDrive</code>），可使用下面的命令：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec cp &#123;&#125; /media/MyDrive &#39;;&#39;</code></p><p>其中的<strong>大括号</strong>（<code>&#123;&#125;</code>）作为检索到的文件的 <strong>占位符</strong> ，而分号（ <code>;</code>）作为命令结束的标志。因为分号是 Shell 中有特殊含义的符号，所以需要使用单引号括起来。<br> 每当 find 命令检索到一个符合条件的文件，会使用其完整路径取代命令中的 <code>&#123;&#125;</code>，然后执行 <code>-exec</code> 后面的命令一次。</p><p>另一个很重要的用法是，在多个文件中检索某个指定的字符串。<br> 如在用户主目录下的所有文件中检索字符串 <code>hello</code> ，可以使用如下命令：<br> <code>find ~ -type f -exec grep -l hello &#123;&#125; &#39;;&#39;</code></p><h6 id="exec-选项中的-符号"><a href="#exec-选项中的-符号" class="headerlink" title="-exec 选项中的 + 符号"></a>-exec 选项中的 + 符号</h6><p>创建 Gzip 格式的压缩文件的命令为：<code>tar -czvf filename.tar.gz &lt;list of files&gt;</code></p><p>现在假设需要将用户主目录下所有的 MP3 文件添加到压缩包 <code>music.tar.gz</code> 中，直观的感觉是，其命令应为如下形式：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz &#123;&#125; &#39;;&#39;</code></p><p>实际情况是，这样得到的 <code>music.tar.gz</code> 其实只包含一个 MP3 文件。<br> 原因是 find 命令<strong>每次</strong>发现一个音频文件，都会再执行一次 <code>-exec</code> 选项后面的压缩命令。导致先前生成的压缩包被覆盖。</p><p>可以先让 find 命令检索出所有符合条件的音频文件，再将得到的<strong>文件列表</strong>传递给后面的压缩命令。完整的命令如下：<br> <code>find ~ -type f -name &#39;*.mp3&#39; -exec tar -czvf music.tar.gz &#123;&#125; +</code></p><h6 id="显示文件信息"><a href="#显示文件信息" class="headerlink" title="显示文件信息"></a>显示文件信息</h6><p>如果想浏览搜索到的文件（目录）的详细信息（如权限和大小等），可以直接使用 <code>-ls</code> 选项。</p><p><code>find / -type file -size +1G -ls</code> 浏览所有 1G 以上大小的文件的详细信息</p><h4 id="四、常用参数汇总"><a href="#四、常用参数汇总" class="headerlink" title="四、常用参数汇总"></a>四、常用参数汇总</h4><table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>-atime <em>n[smhdw]</em></td><td>距离文件上次被访问时的时间间隔</td></tr><tr><td>-ctime <em>n[smhdw]</em></td><td>距离文件创建时的时间间隔</td></tr><tr><td>-delete</td><td>删除检索到的文件</td></tr><tr><td>-depth <em>n</em></td><td>检索深度为 n 的文件，即位于指定目录以下 n 层的文件</td></tr><tr><td>-empty</td><td>检索空文件或空目录</td></tr><tr><td>-fstype <em>type</em></td><td>指定文件所在的文件系统的类型</td></tr><tr><td>-group <em>gname</em></td><td>指定文件的属组</td></tr><tr><td>-iname <em>pattern</em></td><td>同 <code>-name</code>，忽略大小写</td></tr><tr><td>-ipath <em>pattern</em></td><td>同 <code>-path</code>，忽略大小写</td></tr><tr><td>-ls</td><td>打印搜索到的文件的详细信息</td></tr><tr><td>-maxdepth <em>n</em></td><td>指定递归的最大层数为 n</td></tr><tr><td>-mtime <em>n[smhdw]</em></td><td>距离文件上次发生变更时的时间间隔</td></tr><tr><td>-name <em>pattern</em></td><td>搜索时使用 <code>pattern</code> 对文件名进行匹配</td></tr><tr><td>-path <em>pattern</em></td><td>搜索时使用 <code>pattern</code> 对文件路径进行匹配</td></tr><tr><td>-perm <em>mode</em></td><td>根据文件权限搜索</td></tr><tr><td>-size <em>n[ckMGTP]</em></td><td>根据文件大小搜索</td></tr><tr><td>-type <em>t</em></td><td>根据文件类型搜索</td></tr><tr><td>-user <em>uname</em></td><td>指定文件的属主</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 部署文档</title>
      <link href="/posts/4652/"/>
      <url>/posts/4652/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在日常运维工作中，对于系统和业务日志的处理尤为重要。尤其是分布式架构，每个服务都会有很多节点，如果要手工一个一个的去取日志，运维怕是要累死。 </p><p><strong>简单介绍：</strong></p><p>ELK 是 elasticsearch + logstash + kibana 三款开源软件的简称。</p><p>elasticsearch：是个开源的分布式搜索引擎，特点是：分布式、配置简单、自动发现、索引自动分片、索引副本机制、restful风格接口，多数据源，自动搜索负载等</p><p>logstash：可以对日志进行收集、滤过、并将其存储在 elasticsearch中</p><p>kibana：可以为 elasticsearch提供友好的用户交互界面，用户可以通过 kibana来分析、搜索甚至绘图来分析数据。</p><p>这里介绍下目前使用比较多的架构：</p><p>ELK + filebeat</p><p>Filebeat 是一个轻量级开源日志文件数据收集器，可以将它安装到需要收集的节点上，它会将日志输送到 logstash 或 elasticsearch</p><p>有了 ELK 就可以将分布到多台的日志统一规划起来。</p><p>网络上有很多关于 ELK 的部署方案，参考了很多发现要不就是老版本的，要不就是不太完善，因此自己做下记录。</p><p>注意：在安装 ELK 的时候，这三个软件的版本必须保持支持，否则出现各种bug</p><h2 id="2-ELK搭建过程"><a href="#2-ELK搭建过程" class="headerlink" title="2. ELK搭建过程"></a>2. ELK搭建过程</h2><p>实验拓扑图：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914132209462-937984345.png" alt="img"></p><p>实验环境主机服务介绍：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914132222075-940189767.png" alt="img"></p><p>本次实验是收集 nginx 日志，并存储在 elasticsearch中。将 elasticsearch 和 kibana 安装在同一主机上可以避免不必要的网络IO操作，直接本机交互。</p><h3 id="2-1-Elasticsearch-的安装过程"><a href="#2-1-Elasticsearch-的安装过程" class="headerlink" title="2.1 Elasticsearch 的安装过程"></a>2.1 Elasticsearch 的安装过程</h3><p>（1）初始化工作</p><ul><li>selinux、firewall 关闭</li><li>时间同步</li><li>主机名修改</li><li>修改打开文件最大数</li></ul><p> 时间同步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~]&#96;&#96;#ntpdate tiger.sina.com.cn</span><br></pre></td></tr></table></figure><p>修改主机名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~]&#96;&#96;#hostnamectl set-hostname node1&#96;&#96;修改完主机名别忘记在 &#96;&#96;&#x2F;etc&#x2F;hosts&#96; &#96;中申明&#96;&#96;192.168.118.14 node1</span><br></pre></td></tr></table></figure><p>修改文件打开最大数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~]&#96;&#96;#vim &#x2F;etc&#x2F;security&#x2F;limits.conf&#96;&#96;*        soft  nproc    655350&#96;&#96;*        hard  nproc    655350&#96;&#96;*        soft  nofile    655350&#96;&#96;*        hard  nofile    655350&#96; &#96;[root@192.168.118.14 ~]&#96;&#96;#ulimit -SHn 655350</span><br></pre></td></tr></table></figure><p> （2）配置 java 环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 &#96;&#96;&#x2F;usr&#x2F;local&#x2F;src&#96;&#96;]&#96;&#96;#tar xf jdk-8u77-linux-x64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;&#96; &#96;在 &#96;&#96;&#x2F;etc&#x2F;profile&#96; &#96;文件中追加&#96;&#96;JAVA_HOME&#x3D;&#96;&#96;&#x2F;usr&#x2F;local&#x2F;jdk1&#96;&#96;.8.0_77&#96;&#96;JAVA_BIN&#x3D;$JAVA_HOME&#96;&#96;&#x2F;bin&#96;&#96;PATH&#x3D;$PATH:$JAVA_BIN&#96;&#96;CLASSPATH&#x3D;$JAVA_HOME&#96;&#96;&#x2F;lib&#x2F;dt&#96;&#96;.jar:$JAVA_HOME&#96;&#96;&#x2F;lib&#x2F;tools&#96;&#96;.jar&#96;&#96;export&#96; &#96;JAVA_HOME JAVA_BIN PATH CLASSPATH&#96; &#96;[root@192.168.118.14 &#96;&#96;&#x2F;usr&#x2F;local&#x2F;src&#96;&#96;]&#96;&#96;#source &#x2F;etc&#x2F;profile&#96;&#96;[root@192.168.118.14 &#96;&#96;&#x2F;usr&#x2F;local&#x2F;src&#96;&#96;]&#96;&#96;#ln -vs &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_77&#x2F;bin&#x2F;java &#x2F;usr&#x2F;bin&#x2F;&#96;&#96;[root@192.168.118.14 &#96;&#96;&#x2F;usr&#x2F;local&#x2F;src&#96;&#96;]&#96;&#96;#java -version&#96;&#96;java version &#96;&#96;&quot;1.8.0_77&quot;&#96;&#96;Java(TM) SE Runtime Environment (build 1.8.0_77-b03)&#96;&#96;Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)</span><br></pre></td></tr></table></figure><p> （3）安装 elasticsearch</p><p>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p>这里下载的是 6.8 的 rpm 包</p><p>直接安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#yum localinstall elasticsearch-6.8.2.rpm&#96;&#96;修改配置文件如下：&#96;&#96;[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#egrep ^[a-z] &#x2F;etc&#x2F;elasticsearch&#x2F;elasticsearch.yml&#96;&#96;cluster.name: super-cluster&#96;&#96;node.name: node1&#96;&#96;path.data: &#96;&#96;&#x2F;var&#x2F;lib&#x2F;elasticsearch&#96;&#96;path.logs: &#96;&#96;&#x2F;var&#x2F;log&#x2F;elasticsearch&#96;&#96;bootstrap.memory_lock: &#96;&#96;true&#96;&#96;network.host: 0.0.0.0&#96;&#96;http.port: 9200&#96;&#96;discovery.zen.&#96;&#96;ping&#96;&#96;.unicast.hosts: [&#96;&#96;&quot;192.168.118.14&quot;&#96;&#96;]&#96;&#96;http.cors.enabled: &#96;&#96;true&#96;&#96;http.cors.allow-origin: &#96;&#96;&quot;*&quot;</span><br></pre></td></tr></table></figure><p> <img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914132531738-1407142167.png" alt="img"></p><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#systemctl enable elasticsearch ; systemctl start elasticsearch</span><br></pre></td></tr></table></figure><p>首次启动可能会启动失败，查看日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#tail &#x2F;var&#x2F;log&#x2F;elasticsearch&#x2F;super-cluster.log&#96;&#96;…&#96;&#96;[1]: memory locking requested &#96;&#96;for&#96; &#96;elasticsearch process but memory is not locked&#96;&#96;…</span><br></pre></td></tr></table></figure><p>如上报错，需要修改启动脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;elasticsearch.service&#96;&#96;在 [Service] 配置段添加：&#96;&#96;…&#96;&#96;LimitMEMLOCK&#x3D;infinity&#96;&#96;…&#96; &#96;[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#systemctl daemon-reload&#96;&#96;[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#systemctl start elasticsearch</span><br></pre></td></tr></table></figure><p>查看端口，如果 9200 和 9300 监听，则说明 elasticsearch启动成功。</p><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#curl http:&#x2F;&#x2F;localhost:9200&#x2F;&#96;&#96;&#123;&#96;&#96; &#96;&#96;&quot;name&quot;&#96; &#96;: &#96;&#96;&quot;node1&quot;&#96;&#96;,&#96;&#96; &#96;&#96;&quot;cluster_name&quot;&#96; &#96;: &#96;&#96;&quot;super-cluster&quot;&#96;&#96;,&#96;&#96; &#96;&#96;&quot;cluster_uuid&quot;&#96; &#96;: &#96;&#96;&quot;1FD-KmYMTVCzWVPI9vn8zw&quot;&#96;&#96;,&#96;&#96; &#96;&#96;&quot;version&quot;&#96; &#96;: &#123;&#96;&#96;  &#96;&#96;&quot;number&quot;&#96; &#96;: &#96;&#96;&quot;6.8.2&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;build_flavor&quot;&#96; &#96;: &#96;&#96;&quot;default&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;build_type&quot;&#96; &#96;: &#96;&#96;&quot;rpm&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;build_hash&quot;&#96; &#96;: &#96;&#96;&quot;b506955&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;build_date&quot;&#96; &#96;: &#96;&#96;&quot;2019-07-24T15:24:41.545295Z&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;build_snapshot&quot;&#96; &#96;: &#96;&#96;false&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;lucene_version&quot;&#96; &#96;: &#96;&#96;&quot;7.7.0&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;minimum_wire_compatibility_version&quot;&#96; &#96;: &#96;&#96;&quot;5.6.0&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;minimum_index_compatibility_version&quot;&#96; &#96;: &#96;&#96;&quot;5.0.0&quot;&#96;&#96; &#96;&#96;&#125;,&#96;&#96; &#96;&#96;&quot;tagline&quot;&#96; &#96;: &#96;&#96;&quot;You Know, for Search&quot;&#96;&#96;&#125;</span><br></pre></td></tr></table></figure><p>到此，elasticsearch安装成功。</p><p>这里多安装一个elasticsearch-head 用来调试和查看数据是非常方便的。</p><p>程序下载地址：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>首先安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum &#96;&#96;install&#96; &#96;git nodejs openssl-devel &#96;&#96;screen&#96; &#96;-y&#96; &#96;克隆 elasticsearch-&#96;&#96;head&#96;&#96;项目&#96;&#96;[root@192.168.118.14 ~]&#96;&#96;# git clone https:&#x2F;&#x2F;github.com&#x2F;mobz&#x2F;elasticsearch-head.git&#96;&#96;[root@192.168.118.14 ~]&#96;&#96;# cd elasticsearch-head&#x2F;&#96; &#96;此时忽略phantomjs-prebuilt@2.1.16，执行命令如下&#96;&#96;[root@node1 elasticsearch-&#96;&#96;head&#96;&#96;]&#96;&#96;# npm install phantomjs-prebuilt --ignore-scripts&#96; &#96;[root@node1 elasticsearch-&#96;&#96;head&#96;&#96;]&#96;&#96;# npm install&#96;&#96;…</span><br></pre></td></tr></table></figure><p>这里是一个非常缓慢的过程。</p><p>启动 elasticsearch-head 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~]&#96;&#96;#cd elasticsearch-head&#x2F;&#96;&#96;[root@192.168.118.14 ~&#96;&#96;&#x2F;elasticsearch-head&#96;&#96;]&#96;&#96;#screen&#96;&#96;[root@node1 elasticsearch-&#96;&#96;head&#96;&#96;]&#96;&#96;# npm run start&#96;&#96;Ctrl+a Ctrl+d 将进程放置到后台，这里不懂的查下 &#96;&#96;screen&#96; &#96;命令，很好使。</span><br></pre></td></tr></table></figure><p>查看端口 只要 9100 被监听，说明启动成功。</p><p>浏览器访问：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914132738040-373062108.png" alt="img"></p><p>妥了，安装成功。通过 elasticsearch-head 可以查看 elasticsearch 中的所有数据。目前就一个 node1 索引。如果要深入学习 elasticsearch 推荐一本书《elasticsearch-the-definitive-guide-cn》 网上有 PDF 可以下载。</p><p>接下来，安装 kibana 。Kibana 和 elasticsearch安装到同一台主机的</p><p>Kibana 下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a></p><p>直接rpm包安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~&#96;&#96;&#x2F;ELK&#96;&#96;]&#96;&#96;#yum localinstall kibana-6.8.2-x86_64.rpm -y</span><br></pre></td></tr></table></figure><p> 修改配置文件：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914132823879-2055244822.png" alt="img"></p><p>这里注意，如果将 kibana 端口修改为 80 ，这里是需要修改kibana启动用户为 root 因为普通用户是不能启动 1024 以下端口的。</p><p>修改启动配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.14 ~]&#96;&#96;#vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kibana.service&#96;&#96;User&#x3D;root&#96;&#96;Group&#x3D;root&#96; &#96;再次启动服务&#96;&#96;[root@192.168.118.14 ~]&#96;&#96;#systemctl daemon-reload&#96;&#96;[root@192.168.118.14 ~]&#96;&#96;#systemctl restart kibana</span><br></pre></td></tr></table></figure><p>查看 80 端口如果被监听就说明启动成功。</p><h3 id="2-2-logstash-安装过程"><a href="#2-2-logstash-安装过程" class="headerlink" title="2.2 logstash 安装过程"></a>2.2 logstash 安装过程</h3><p>根据规划，logstash 应该被安装到一台独立的主机上，logstash安装非常简单。</p><p>Logstash 下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#logstash">https://www.elastic.co/cn/downloads/past-releases#logstash</a></p><p>和上面一样，初始化工作不要忘记，这里就不再描述了。</p><p>安装 jdk 也和上面一样的，jdk验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 &#96;&#96;&#x2F;usr&#x2F;local&#x2F;src&#96;&#96;]&#96;&#96;#java -version&#96;&#96;java version &#96;&#96;&quot;1.8.0_77&quot;&#96;&#96;Java(TM) SE Runtime Environment (build 1.8.0_77-b03)&#96;&#96;Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)</span><br></pre></td></tr></table></figure><p>安装 logstash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 ~]&#96;&#96;#yum localinstall logstash-6.8.2.rpm -y&#96; &#96;将 logstash 命令添加到 PATH 环境变量中&#96;&#96;[root@192.168.118.15 &#96;&#96;&#x2F;etc&#x2F;logstash&#96;&#96;]&#96;&#96;#vim &#x2F;etc&#x2F;profile.d&#x2F;logstash.sh&#96;&#96;export&#96; &#96;PATH&#x3D;&#96;&#96;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;bin&#96;&#96;:$PATH</span><br></pre></td></tr></table></figure><p>Ok, 到这里已经安装完成，是不是很简单。</p><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 ~]&#96;&#96;#logstash -e &#39;input &#123; stdin &#123;&#125; &#125; output &#123; stdout&#123;&#125; &#125;&#39;&#96;&#96;只要出现 Successfully started Logstash API endpoint &#123;:port&#x3D;&gt;9600&#125; 就表示启动成功。&#96;&#96;你好，中国&#96;&#96;&#123;&#96;&#96;   &#96;&#96;&quot;@version&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;1&quot;&#96;&#96;,&#96;&#96;    &#96;&#96;&quot;message&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;你好，中国&quot;&#96;&#96;,&#96;&#96;     &#96;&#96;&quot;host&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;logstash-node1&quot;&#96;&#96;,&#96;&#96;  &#96;&#96;&quot;@timestamp&quot;&#96; &#96;&#x3D;&gt; 2019-09-14T04:14:35.035Z</span><br></pre></td></tr></table></figure><p>测试通过，logstash验证成功。</p><h3 id="2-3-Filebeat-和-nginx-安装"><a href="#2-3-Filebeat-和-nginx-安装" class="headerlink" title="2.3 Filebeat 和 nginx 安装"></a>2.3 Filebeat 和 nginx 安装</h3><p>Filebeat 下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#filebeat">https://www.elastic.co/cn/downloads/past-releases#filebeat</a></p><p>首先安装 nginx 直接yum安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96;#yum install nginx -y&#96;&#96;启动nginx&#96;&#96;[root@192.168.118.16 ~]&#96;&#96;#nginx</span><br></pre></td></tr></table></figure><p>安装 filebeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96;#yum localinstall filebeat-6.8.2-x86_64.rpm -y&#96;&#96;开启nginx模块&#96;&#96;[root@192.168.118.16 ~]&#96;&#96;#cd &#x2F;etc&#x2F;filebeat&#x2F;&#96;&#96;[root@192.168.118.16 &#96;&#96;&#x2F;etc&#x2F;filebeat&#96;&#96;]&#96;&#96;#filebeat modules enable nginx&#96;&#96;Enabled nginx</span><br></pre></td></tr></table></figure><p> 修改 filebeat主配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96;#vim &#x2F;etc&#x2F;filebeat&#x2F;filebeat.yml&#96;&#96;注释掉输出到 elasticsearch&#96;&#96;#output.elasticsearch:&#96;&#96; &#96;&#96;# Array of hosts to connect to.&#96;&#96; &#96;&#96;#hosts: [&quot;localhost:9200&quot;]&#96; &#96;开启输出到 logstash&#96;&#96;output.logstash:&#96;&#96; &#96;&#96;# The Logstash hosts&#96;&#96; &#96;&#96;hosts: [&#96;&#96;&quot;192.168.118.16:5044&quot;&#96;&#96;]</span><br></pre></td></tr></table></figure><p>注意这里的 hosts 要写 logstash 主机的 IP</p><p>修改 nginx 模块配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96;#vim &#x2F;etc&#x2F;filebeat&#x2F;modules.d&#x2F;nginx.yml</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133218360-1373188441.png" alt="img"></p><p>启动 filebeat 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96;#systemctl start filebeat&#96;&#96;Filebeat 服务是没有监听端口的，只要状态是 running 就表示启动成功，可以查看 filebeat 日志&#96;&#96;&#x2F;var&#x2F;log&#x2F;filebeat&#x2F;filebeat</span><br></pre></td></tr></table></figure><p>到此，ELK + filebeat 已经部署完毕，接下来就可以安装需求来进行调整和收集数据，而这一块的工作都集中在 logstash，因此 ELK 编写 logstash 才是难点。Logstash 配置语法，强力建议查看官方文档，非常全面了。</p><h3 id="2-4-编写-logstash-配置文件"><a href="#2-4-编写-logstash-配置文件" class="headerlink" title="2.4 编写 logstash 配置文件"></a>2.4 编写 logstash 配置文件</h3><p>这里采用循序渐进的方式展开，可以先写一个简单的测试。</p><p>编写一个将数据输出到屏幕的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 &#96;&#96;&#x2F;etc&#x2F;logstash&#x2F;conf&#96;&#96;.d]&#96;&#96;#vim test.conf</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133348056-757315483.png" alt="img"></p><p>Logstash 可以根据配置文件来启动，启动方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 &#96;&#96;&#x2F;etc&#x2F;logstash&#x2F;conf&#96;&#96;.d]&#96;&#96;#logstash -f test.conf&#96;&#96;出现 Successfully started Logstash API endpoint 就表示启动成功。</span><br></pre></td></tr></table></figure><p>启动成功后，我们尝试访问 nginx 生成日志数据。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133413721-1077865656.png" alt="img"></p><p>日志文件已经传输过来了，接下来就是把这些数据写入到 elasticsearch 中。</p><p>继续修改配置文件：</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133428819-800242405.png" alt="img"></p><p>通过配置文件启动 logstash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 &#96;&#96;&#x2F;etc&#x2F;logstash&#x2F;conf&#96;&#96;.d]&#96;&#96;#logstash -f test.conf</span><br></pre></td></tr></table></figure><p>尝试访问 nginx 查看 elasticsearch-head中是否有新的索引被创建出来。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133459096-999337824.png" alt="img"></p><p> 如上图，一个新的索引被创建出来，可以通过 elasticsearch-head 查看该索引中的数据。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133507826-994463079.png" alt="img"></p><p>目前已经将日志数据写入到 elasticsearch中了， 然后通过 kibana 展示出来，浏览器访问上面装好的 kibana</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133516828-996668443.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133533459-1057666429.png" alt="img"></p><p>设置完成，直接点击 Discover</p><p>多访问几次nginx，查看日志是否展示出来。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/828019-20190914133554679-219380505.png" alt="img"></p><p>ok，到此， ELK + filebeat 获取 nginx 日志就完成了。虽然将日志展示出来了， 但是这样杂乱无章的日志数据看着还是很难受的，这就需要进一步的规整。</p><p>下一篇再写如果更详细的通过 logstash获取nginx日志数据，然后通过kibana展示更规整的数据及绘图。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的未来格外沉重</title>
      <link href="/posts/18538/"/>
      <url>/posts/18538/</url>
      
        <content type="html"><![CDATA[<h1 id="敬所有因为买房而连累家人的人-你们的未来-格外沉重"><a href="#敬所有因为买房而连累家人的人-你们的未来-格外沉重" class="headerlink" title="敬所有因为买房而连累家人的人 你们的未来 格外沉重"></a>敬所有因为买房而连累家人的人 你们的未来 格外沉重</h1><p>!!!<br><video src="https://www.kococ.cn/fangzi.mp4" controls="controls" poster="https://cdn.jsdelivr.net/gh/kococ/IMAGE/30.jpg"    playsinline></video><br>!!!</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 房子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Registrator+Consul+Consul-template+HaProxy实现动态修改Haproty配置文件</title>
      <link href="/posts/39164/"/>
      <url>/posts/39164/</url>
      
        <content type="html"><![CDATA[<h1 id="Registrator-Consul-Consul-template-HaProxy实现动态修改Haproty配置文件"><a href="#Registrator-Consul-Consul-template-HaProxy实现动态修改Haproty配置文件" class="headerlink" title="Registrator+Consul+Consul-template+HaProxy实现动态修改Haproty配置文件"></a>Registrator+Consul+Consul-template+HaProxy实现动态修改Haproty配置文件</h1><p><strong>实现需求：</strong></p><p>用Haproxy做负载均衡，手动方式在配置文件中添加或删除节点服务器信息，比较麻烦。</p><p>通过Registrator收集需要注册到Consul作为Haproxy节点服务器的信息，然后注册到Consul key/value。</p><p>Consul-template去Consul key/value中读取信息,然后自动修改Haproxy配置文件，并重载Haproxy。不需要修改haproxy.cfg。</p><p><strong>集群环境：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKioL1ePH8TyP4vwAAA_diaQRtU606.png" alt="wKioL1ePH8TyP4vwAAA_diaQRtU606"></p><p>Postil：Mesos集群搭建过程此处省略</p><p>关闭selinux和防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>ZK-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">容器来做consul：</span><br><span class="line">获取Consul-server镜像</span><br><span class="line">[root@zk-server ~]<span class="comment"># docker pull docker.io/gliderlabs/consul-server</span></span><br><span class="line">启动Consul-server</span><br><span class="line">[root@zk-server ~]<span class="comment"># docker run -d --name=consul --net=host docker.io/gliderlabs/consul-server -bootstrap -bind=192.168.200.8</span></span><br></pre></td></tr></table></figure><p>宿主机来做consul</p><p>下载consul包，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># wget https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_386.zip</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># unzip consul_0.6.4_linux_386.zip</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># mv consul /usr/bin/</span></span><br></pre></td></tr></table></figure><p>下载consul-template包，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># wget https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_386.zip</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># unzip consul-template_0.15.0_linux_386.zip</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># mv consul-template /usr/bin/</span></span><br></pre></td></tr></table></figure><p>安装HaProxy并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># yum -y install haproxy</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># systemctl start haproxy</span></span><br></pre></td></tr></table></figure><p>创建consul服务器配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># mkdir /config</span></span><br></pre></td></tr></table></figure><p>编写agent和server的json文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># vi /config/agent.json </span></span><br><span class="line">添加内容如下：</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;client_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data_dir&quot;</span>: <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;leave_on_terminate&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;dns_config&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;allow_stale&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;max_stale&quot;</span>: <span class="string">&quot;1s&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@zk-server ~]<span class="comment"># vi /config/server.json</span></span><br><span class="line">添加内容如下：</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;dns_config&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;allow_stale&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动consul单节点服务器，当然，你consul服务器节点多的话也可以做consul集群。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># consul agent -server -config-dir=/config -bootstrap -bind=192.168.200.8 &amp;</span></span><br></pre></td></tr></table></figure><p>Postil：可用consul members 查看consul集群节点</p><p>Slave1-server</p><p>获取Registrator镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># docker pull gliderlabs/registrator:latest</span></span><br></pre></td></tr></table></figure><p>启动Registrator</p><p>Postil：这种启动方式是注册到Consul的key/value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># docker run -d --restart=always --name=registrator --net=host --volume=/var/run/docker.sock:/tmp/docker.sock docker.io/gliderlabs/registrator -ip 192.168.200.10 consulkv://192.168.200.8:8500/hello</span></span><br></pre></td></tr></table></figure><p>Postil：-ip后面跟registration 所属的主机 IP, 一定要设置此属性, 否则服务IP会显示为127.0.0.1</p><p>测试Registrator是否把本机容器注册到Consul key/value</p><p>启动个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># docker run -d -P --name=test --net=bridge p_w_picpath/nginx</span></span><br></pre></td></tr></table></figure><p>进入Consul UI界面查看</p><p><a href="http://192.168.200.8:8500/ui/#/dc1/kv/">http://192.168.200.8:8500/ui/#/dc1/kv/</a></p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKioL1eN2n-BKahmAAAlbgipA10864.png" alt="wKioL1eN2n-BKahmAAAlbgipA10864"></p><p>ZK-server</p><p>创建consul配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># mkdir -p /data/cfg/consul</span></span><br><span class="line">[root@zk-server ~]<span class="comment"># vi /data/cfg/consul/tmpl.json</span></span><br><span class="line">添加内容如下：</span><br><span class="line">consul = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line"> </span><br><span class="line">template &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;/etc/haproxy/haproxy.ctmpl&quot;</span></span><br><span class="line">  destination = <span class="string">&quot;/etc/haproxy/haproxy.cfg&quot;</span></span><br><span class="line">  <span class="built_in">command</span> = <span class="string">&quot;systemctl reload haproxy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写haproxy模版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment"># vi /etc/haproxy/haproxy.ctmpl</span></span><br><span class="line">添加内容如下：</span><br><span class="line">global</span><br><span class="line">    <span class="built_in">log</span>         127.0.0.1 local2</span><br><span class="line"> </span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># turn on stats unix socket</span></span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    <span class="built_in">log</span>                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"> </span><br><span class="line">frontend  main *:80</span><br><span class="line">    acl url_static       path_beg       -i /static /p_w_picpaths /javascript /stylesheets</span><br><span class="line">    acl url_static       path_end       -i .jpg .gif .png .css .js</span><br><span class="line"> </span><br><span class="line">    use_backend static          <span class="keyword">if</span> url_static</span><br><span class="line">    default_backend             app</span><br><span class="line"> </span><br><span class="line">backend static</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server      static 127.0.0.1:4331 check</span><br><span class="line"> </span><br><span class="line">backend app</span><br><span class="line">    balance     roundrobin</span><br><span class="line">     &#123;&#123;range <span class="variable">$key</span>, <span class="variable">$pairs</span> := tree <span class="string">&quot;hello/&quot;</span> | byKey&#125;&#125;&#123;&#123;range <span class="variable">$serverid</span>, <span class="variable">$pair</span> := <span class="variable">$pairs</span>&#125;&#125;</span><br><span class="line">     server app ``.`Value` check inter 2000 fall 3 weight 1 `end``end`</span><br></pre></td></tr></table></figure><p>启动consul-template</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zk-server ~]<span class="comment">#consul-template -config /data/cfg/consul/tmpl.json &gt; consul-template.out 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><p>用marathon启动一个nginx容器，看registrator是否注册到consul,然后看consul-template是否自动添加了这个后端服务器到/etc/haproxy/haproxy.cfg</p><p><a href="https://s5.51cto.com/wyfs02/M01/84/5A/wKiom1eN29Ch92f1AAAn-FZu8sk782.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKiom1eN29Ch92f1AAAn-FZu8sk782.png" alt="wKiom1eN29Ch92f1AAAn-FZu8sk782.png"></a></p><p><a href="https://s5.51cto.com/wyfs02/M01/84/59/wKioL1eN29DSwwZMAABEjcHBKnE132.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKioL1eN29DSwwZMAABEjcHBKnE132.png" alt="wKioL1eN29DSwwZMAABEjcHBKnE132.png"></a></p><p><a href="https://s2.51cto.com/wyfs02/M01/84/5A/wKiom1eN29HBhfyIAAFS6Sq96qE500.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKiom1eN29HBhfyIAAFS6Sq96qE500.png" alt="wKiom1eN29HBhfyIAAFS6Sq96qE500.png"></a></p><p>访问HaProxy_IP</p><p><a href="https://s4.51cto.com/wyfs02/M02/84/59/wKioL1eN2_DwH-usAABMZxBsa6s864.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/wKioL1eN2_DwH-usAABMZxBsa6s864.png" alt="wKioL1eN2_DwH-usAABMZxBsa6s864.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Registrator+Consul+Consul-template+HaProxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统负载总结</title>
      <link href="/posts/15537/"/>
      <url>/posts/15537/</url>
      
        <content type="html"><![CDATA[<p>一般在我们发现系统有问题的时候，大家的第一反应肯定都是看下当前的CPU使用状态，看下当前的内存使用状态，看下当前的磁盘使用状态。那么不可避免的大家肯定会使用<code>top</code>这个命令,那么我们今天看下top中的load值是如何计算的。</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/1.png" alt="1"></p><p>首先，我们简单的理解下这个指标<br> <code>load average: 0.00, 0.01, 0.05</code><br> load average 有3个指标，分别是,1分钟平均负载、5分钟平均负载、15分钟平均负载 ，我们可以根据这三个指标，看到我们当前的系统负载整体是下降的，还是上升的。</p><p>好，理解了3个指标的含义后，我们来看下这3个指标是如何计算的。<br> 平均负载是指单位时间内，系统处于<strong>可运行状态</strong>和<strong>不可中断状态</strong>的平均进程数，他和CPI使用率并没有直接的关系，那么可运行状态和不可中断状态怎么理解呢？</p><p>可运行状态：指正在使用CPU或者正在等待CPU的进程，也就是我们常用<code>ps aux</code>命令看到的处于R(running,runnable)状态的进程。</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/2.png" alt="2"></p><p>可运行状态</p><p>不可中断状态：指进程正处于内核态关键流程中的进程，并且这些流程是不可被打断的，比如最长久的是等待硬件设备的I/O响应，也就是我们在<code>ps aux</code>命令中看到的D(Uniterruptible,Disk Sleep)状态的进程。</p><p>比如，当一个进程向磁盘写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态，如果此时的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。</p><p>所以，不可中断状态，实际上是系统对进程和硬件设备的一种保护机制。</p><p>因此，你可以简单的理解为，平均负载其实就是平均活跃进程数，平均活跃进程数，直观上的理解就是单位时间内的活跃进程数。但他实际上是活跃进程数的指数衰减平均值。这“指数衰减平均”可以不用计较，只是一种更快速的计算方式，你可以把它直接当成活跃进程数的平均值即可。</p><p>既然平均的是活跃进程数，那么最理想的就是每个CPU上刚好运行着一个进程，这样每个CPU都得到了充分的利用，比如当平均负载为2时，意味着什么呢？</p><ul><li>CPU核心数，指逻辑CPU，即一个CPU不开超线程时为2个物理核心，开了超线程后就变成了4个逻辑核心。</li><li>在只有2个CPU核心的系统上，意味着所有CPU核心数都刚好被完全占用。</li><li>在有4个CPU核心的系统上，意味着CPU有50%的空闲。</li><li>而在只有2个CPU核心的系统中，则意味着有一半的进程竞争不到CPU。</li></ul><h2 id="平均负载多少时合理？"><a href="#平均负载多少时合理？" class="headerlink" title="平均负载多少时合理？"></a>平均负载多少时合理？</h2><p>在评估这个值的时候，首先我们要看下当前有多少个逻辑CPU，一般我们直接看<code>/proc/cpuinfo</code>的数据即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># cat /proc/cpuinfo |grep <span class="meta-string">&quot;model name&quot;</span>|wc -l</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><p>那么比如我这台机器，看到的就是16个逻辑核心了。<br> 有了CPU个数，我们就可以判断出，当平均负载比CPU个数还大的时候，系统已经出现了过载。</p><p>不过这个观察也是要评估多个指标的，我们要同时用1分钟5分钟15分钟的值来大概的估算这个设备的负载是呈现上升或者下降的趋势，其实最好的方式是通过监控的手段，采集足够多的load值，这样可以更精准的知道自己设备的负载情况。</p><h2 id="平均负载与CPU使用率"><a href="#平均负载与CPU使用率" class="headerlink" title="平均负载与CPU使用率"></a>平均负载与CPU使用率</h2><p>在日常使用中，我们经常容易把平均负载和CPU使用率混淆，这里我们做下区分。<br> 可能我们会有疑惑，既然平均负载代表的是活跃进程数，那么平均负载搞了，不就意味着CPU使用率高了吗？</p><p>这里我们还得回到平均负载的含义上来，平均负载是指单位时间内，处于可运行状态和不可中断状态的进程数，所以，他不仅包扩了<strong>正在使用CPU</strong>的进程，还包括<strong>等待CPU</strong>和<strong>等待I/O</strong>的进程。</p><p>而CPU使用率，是单位时间内CPU繁忙情况的统计，和平均负载并不一定完全对应。比如：</p><ul><li>CPU密集型进程，使用大量CPU会导致平均负载升高，此时这两者是一致的。</li><li>I/O 密集型进程， 等待I/O也会导致平均负载升高，但是CPU使用率不一定很高。</li><li>大量等待CPU的进程调用也会导致平均负载升高，此时的CPU使用率也会比较高。</li></ul><h2 id="平均负载案例分析"><a href="#平均负载案例分析" class="headerlink" title="平均负载案例分析"></a>平均负载案例分析</h2><p>这里会用到2个工具，stress和sysstat<br> stress是一个Linux系统压力测试工具，这里我们用作异常进程模拟平均负载升高的场景。</p><p>sysstat是一个linux性能工具，用来监控和分析系统的性能，以下案例中会用到这个包的2个命令mpstat和pidstat。</p><ul><li>mpstat 是一个常用的多核CPU性能分析工具用来实时查看每个CPU的性能指标，一级所有CPI的平均指标。</li><li>pidstat 是一个常用的进程性能分析工具，用来实时查看进程的CPU、内存、I/O以及上下文切换等性能指标。</li></ul><h3 id="场景1：CPU密集型进程"><a href="#场景1：CPU密集型进程" class="headerlink" title="场景1：CPU密集型进程"></a>场景1：CPU密集型进程</h3><p>我们打开终端一运行stree命令，模拟一个CPU使用率100%的场景：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># stress --cpu 1 --timeout 600</span></span><br><span class="line">stress: info: [<span class="number">5399</span>] dispatching hogs: <span class="number">1</span> cpu, <span class="number">0</span> io, <span class="number">0</span> vm, <span class="number">0</span> hdd</span><br></pre></td></tr></table></figure><p>我们打开终端二，查看CPU负载的上升状态</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 01<span class="selector-pseudo">:50</span><span class="selector-pseudo">:42</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:42</span>,  3 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 0<span class="selector-class">.68</span>, 0<span class="selector-class">.22</span>, 0<span class="selector-class">.11</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 01<span class="selector-pseudo">:50</span><span class="selector-pseudo">:45</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:42</span>,  3 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 0<span class="selector-class">.71</span>, 0<span class="selector-class">.23</span>, 0<span class="selector-class">.12</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 01<span class="selector-pseudo">:51</span><span class="selector-pseudo">:10</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:43</span>,  3 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 0<span class="selector-class">.81</span>, 0<span class="selector-class">.29</span>, 0<span class="selector-class">.14</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 01<span class="selector-pseudo">:54</span><span class="selector-pseudo">:58</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:47</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 1<span class="selector-class">.03</span>, 0<span class="selector-class">.68</span>, 0<span class="selector-class">.33</span></span><br><span class="line"></span><br><span class="line">一段时间后，我们发现1分钟的平均<span class="selector-tag">load</span>值超过了1，为啥？ 设备上还有些其他进程运行啊。</span><br></pre></td></tr></table></figure><p>打开终端三，查看CPU使用状态</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># mpstat -P ALL 5</span></span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-514.16</span><span class="number">.1</span>.el7.x86_64 (localhost.localdomain)    <span class="number">11</span>/<span class="number">24</span>/<span class="number">2018</span>  _x86_64_    (<span class="number">16</span> CPU)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">08</span> AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM  all    <span class="number">6.24</span>    <span class="number">0.00</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">93.73</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">1</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">2</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">3</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">4</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">5</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">6</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">7</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">8</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM    <span class="number">9</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">10</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">11</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">12</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">13</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">14</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">01</span>:<span class="number">53</span>:<span class="number">13</span> AM   <span class="number">15</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">这里我们可以看到，在CPU15上 CPU的使用率一直处于<span class="number">100</span>%状态，使用这个工具可以持续看到状态的变化。</span><br></pre></td></tr></table></figure><p>从终端二中可以看到，1分钟的平均负载慢慢会增加到1，而从终端三中可以看到，正好有一个CPU的使用率为100%，但他的iowait为0，这说明，平均负载的升高正是由于CPU使用率为100%。</p><p>那么，到底是哪个进程导致了CPU使用率为100%呢？ 你可以使用pidstat来查询：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># pidstat -u 5 1</span></span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-514.16</span><span class="number">.1</span>.el7.x86_64 (localhost.localdomain)    <span class="number">11</span>/<span class="number">24</span>/<span class="number">2018</span>  _x86_64_    (<span class="number">16</span> CPU)</span><br><span class="line"></span><br><span class="line"><span class="number">02</span>:<span class="number">00</span>:<span class="number">20</span> AM   <span class="built_in">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line"><span class="number">02</span>:<span class="number">00</span>:<span class="number">25</span> AM     <span class="number">0</span>      <span class="number">8451</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>     <span class="number">2</span>  stress</span><br><span class="line"><span class="number">02</span>:<span class="number">00</span>:<span class="number">25</span> AM     <span class="number">0</span>      <span class="number">8456</span>    <span class="number">0.00</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.20</span>     <span class="number">3</span>  pidstat</span><br><span class="line"><span class="number">02</span>:<span class="number">00</span>:<span class="number">25</span> AM     <span class="number">0</span>      <span class="number">8457</span>    <span class="number">0.20</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.40</span>    <span class="number">15</span>  client</span><br><span class="line"></span><br><span class="line">Average:      <span class="built_in">UID</span>       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">Average:        <span class="number">0</span>      <span class="number">8451</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>     -  stress</span><br><span class="line">Average:        <span class="number">0</span>      <span class="number">8456</span>    <span class="number">0.00</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.20</span>     -  pidstat</span><br><span class="line">Average:        <span class="number">0</span>      <span class="number">8457</span>    <span class="number">0.20</span>    <span class="number">0.20</span>    <span class="number">0.00</span>    <span class="number">0.40</span>     -  client</span><br></pre></td></tr></table></figure><p>从这里，可以明显看到，stress进程的CPU使用率为100%。</p><h3 id="场景二：I-O-密集型进程"><a href="#场景二：I-O-密集型进程" class="headerlink" title="场景二：I/O 密集型进程"></a>场景二：I/O 密集型进程</h3><p>首先还是运行stress命令，但这次模拟I/O压力，即不停的执行sync：<br> 打开终端一，执行stress</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># stress -i 1 --timeout 3600</span></span><br><span class="line">stress: info: [<span class="number">8817</span>] dispatching hogs: <span class="number">0</span> cpu, <span class="number">1</span> io, <span class="number">0</span> vm, <span class="number">0</span> hdd</span><br></pre></td></tr></table></figure><p>打开终端二</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 02<span class="selector-pseudo">:02</span><span class="selector-pseudo">:36</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:54</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 0<span class="selector-class">.83</span>, 0<span class="selector-class">.85</span>, 0<span class="selector-class">.56</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 02<span class="selector-pseudo">:05</span><span class="selector-pseudo">:27</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  1<span class="selector-pseudo">:57</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 0<span class="selector-class">.99</span>, 0<span class="selector-class">.92</span>, 0<span class="selector-class">.63</span></span><br><span class="line"></span><br><span class="line">这里，也会看到，<span class="selector-tag">load</span>会不断的升高</span><br></pre></td></tr></table></figure><p>打开终端三</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># mpstat -P ALL 5</span></span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-514.16</span><span class="number">.1</span>.el7.x86_64 (localhost.localdomain)    <span class="number">11</span>/<span class="number">24</span>/<span class="number">2018</span>  _x86_64_    (<span class="number">16</span> CPU)</span><br><span class="line">Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">Average:     all    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">5.93</span>    <span class="number">0.34</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">93.63</span></span><br><span class="line">Average:       <span class="number">0</span>    <span class="number">0.16</span>    <span class="number">0.00</span>    <span class="number">0.48</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.14</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.22</span></span><br><span class="line">Average:       <span class="number">1</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.09</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.84</span></span><br><span class="line">Average:       <span class="number">2</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.09</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.88</span></span><br><span class="line">Average:       <span class="number">3</span>    <span class="number">0.09</span>    <span class="number">0.00</span>    <span class="number">0.23</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.65</span></span><br><span class="line">Average:       <span class="number">4</span>    <span class="number">0.13</span>    <span class="number">0.00</span>    <span class="number">0.53</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.29</span></span><br><span class="line">Average:       <span class="number">5</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.88</span></span><br><span class="line">Average:       <span class="number">6</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.35</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.08</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.56</span></span><br><span class="line">Average:       <span class="number">7</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.90</span></span><br><span class="line">Average:       <span class="number">8</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.14</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.80</span></span><br><span class="line">Average:       <span class="number">9</span>    <span class="number">0.10</span>    <span class="number">0.00</span>    <span class="number">0.28</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.59</span></span><br><span class="line">Average:      <span class="number">10</span>    <span class="number">0.09</span>    <span class="number">0.00</span>    <span class="number">0.34</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.52</span></span><br><span class="line">Average:      <span class="number">11</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.06</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.90</span></span><br><span class="line">Average:      <span class="number">12</span>    <span class="number">0.03</span>    <span class="number">0.00</span>   <span class="number">33.73</span>    <span class="number">1.96</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.05</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">64.23</span></span><br><span class="line">Average:      <span class="number">13</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.02</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.92</span></span><br><span class="line">Average:      <span class="number">14</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">2.43</span>    <span class="number">0.12</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">97.37</span></span><br><span class="line">Average:      <span class="number">15</span>    <span class="number">0.04</span>    <span class="number">0.00</span>   <span class="number">56.38</span>    <span class="number">3.30</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.17</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">40.12</span></span><br><span class="line"></span><br><span class="line">这里看到，CPU的use使用不是很高，反而sys使用的比较高，分布在了<span class="number">2</span>个CPU上，约等于<span class="number">100</span>%</span><br><span class="line">同时可以看到iowait的值也升高了一些，由于我的设备全是ssd磁盘，所以这个io的性能可能会稍微好一些。</span><br></pre></td></tr></table></figure><p>从以上操作中，我们看到1分钟的平均负载会慢慢的增加，其中一个CPU的系统CPU使用率提升到了56，同时iowait也提升到了3，这说明平均负载的升高是由于系统资源使用和iowait导致。</p><p>这里更新了最新版的sysstat包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># wget http://pagesperso-orange.fr/sebastien.godard/sysstat-12.1.1-1.x86_64.rpm</span></span><br><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># rpm -Uvh sysstat-12.1.1-1.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p>那么到底是哪个进程，导致系统CPU使用率特别高，及iowait特别高呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pidstat -u 5 1</span></span><br><span class="line">Linux 3.10.0-514.16.1.el7.x86_64 (localhost.localdomain)    11/24/2018  _x86_64_    (16 CPU)</span><br><span class="line"></span><br><span class="line">02:34:53 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">02:34:58 AM     0       730    0.00    0.20    0.00    0.00    0.20    12  xfsaild/vda6</span><br><span class="line">02:34:58 AM     0      1471    0.00    0.20    0.00    0.00    0.20    10  kworker/10:2</span><br><span class="line">02:34:58 AM     0      3042    0.00    0.40    0.00    0.00    0.40     7  kworker/7:1H</span><br><span class="line">02:34:58 AM     0     11617    0.00    1.59    0.00    0.00    1.59     2  kworker/u32:1</span><br><span class="line">02:34:58 AM     0     15272    0.00   91.43    0.00    0.40   91.43     7  stress</span><br><span class="line">02:34:58 AM     0     15273    0.00    0.20    0.00    0.00    0.20    14  kworker/u32:0</span><br><span class="line">02:34:58 AM     0     15274    0.20    0.40    0.00    0.00    0.60     5  pidstat</span><br></pre></td></tr></table></figure><p>通过以上的信息，可以很清晰的看到，是由于stress进程出现了大量的系统使用。</p><h3 id="场景三：大量进程的场景"><a href="#场景三：大量进程的场景" class="headerlink" title="场景三：大量进程的场景"></a>场景三：大量进程的场景</h3><p>当系统中运行进程超出CPU运行能力时，就会出现等待CPU的进程。<br> 我们打开终端一：使用stress模拟24个进程：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@localhost ~</span>]<span class="meta"># stress -c 24 --timeout 3600</span></span><br><span class="line">stress: info: [<span class="number">11726</span>] dispatching hogs: <span class="number">24</span> cpu, <span class="number">0</span> io, <span class="number">0</span> vm, <span class="number">0</span> hdd</span><br></pre></td></tr></table></figure><p>打开终端二：看下当前的负载值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 02<span class="selector-pseudo">:20</span><span class="selector-pseudo">:36</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  2<span class="selector-pseudo">:12</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 17<span class="selector-class">.22</span>, 5<span class="selector-class">.98</span>, 2<span class="selector-class">.61</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 02<span class="selector-pseudo">:20</span><span class="selector-pseudo">:52</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  2<span class="selector-pseudo">:13</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 18<span class="selector-class">.72</span>, 6<span class="selector-class">.86</span>, 2<span class="selector-class">.95</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"> 02<span class="selector-pseudo">:24</span><span class="selector-pseudo">:03</span> <span class="selector-tag">up</span> 1 <span class="selector-tag">day</span>,  2<span class="selector-pseudo">:16</span>,  4 <span class="selector-tag">users</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 23<span class="selector-class">.77</span>, 14<span class="selector-class">.94</span>, 6<span class="selector-class">.85</span></span><br></pre></td></tr></table></figure><p>打开终端三：看下进程的资源使用信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pidstat -u 5 1</span></span><br><span class="line">Linux 3.10.0-514.16.1.el7.x86_64 (localhost.localdomain)    11/24/2018  _x86_64_    (16 CPU)</span><br><span class="line"></span><br><span class="line">02:28:14 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">02:28:19 AM     0        43    0.00    0.20    0.00    0.00    0.20     7  ksoftirqd/7</span><br><span class="line">02:28:19 AM     0      2292    0.20    0.00    0.00    0.00    0.20    11  dstat</span><br><span class="line">02:28:19 AM     0     11727   48.81    0.00    0.00   44.05   48.81     5  stress</span><br><span class="line">02:28:19 AM     0     11728   44.64    0.00    0.00    0.00   44.64    12  stress</span><br><span class="line">02:28:19 AM     0     11729   41.27    0.00    0.00   49.60   41.27    11  stress</span><br><span class="line">02:28:19 AM     0     11730   46.03    0.00    0.00   41.27   46.03     2  stress</span><br><span class="line">02:28:19 AM     0     11731   59.92    0.00    0.00   30.16   59.92    15  stress</span><br><span class="line">02:28:19 AM     0     11732   47.62    0.00    0.00   25.60   47.62    13  stress</span><br><span class="line">02:28:19 AM     0     11733   65.67    0.00    0.00   22.02   65.67     2  stress</span><br><span class="line">02:28:19 AM     0     11734   41.67    0.00    0.00   50.40   41.67    10  stress</span><br><span class="line">02:28:19 AM     0     11735   54.17    0.00    0.00   32.34   54.17    15  stress</span><br><span class="line">02:28:19 AM     0     11736   42.06    0.00    0.00   50.20   42.06     6  stress</span><br><span class="line">02:28:19 AM     0     11737   35.91    0.00    0.00   29.96   35.91     3  stress</span><br><span class="line">02:28:19 AM     0     11738   50.20    0.00    0.00    5.16   50.20    10  stress</span><br><span class="line">02:28:19 AM     0     11739   42.06    0.00    0.00   49.60   42.06     6  stress</span><br><span class="line">02:28:19 AM     0     11740   58.73    0.00    0.00   34.92   58.73     4  stress</span><br><span class="line">02:28:19 AM     0     11741   46.63    0.00    0.00   13.49   46.63     1  stress</span><br><span class="line">02:28:19 AM     0     11742   43.45    0.00    0.00   50.79   43.45    14  stress</span><br><span class="line">02:28:19 AM     0     11743   44.05    0.00    0.00   45.24   44.05     7  stress</span><br><span class="line">02:28:19 AM     0     11744   56.55    0.00    0.00   12.70   56.55     0  stress</span><br><span class="line">02:28:19 AM     0     11745   46.23    0.00    0.00   49.80   46.23     5  stress</span><br><span class="line">02:28:19 AM     0     11746   49.40    0.00    0.00   41.27   49.40    11  stress</span><br><span class="line">02:28:19 AM     0     11747   43.65    0.00    0.00   49.40   43.65    14  stress</span><br><span class="line">02:28:19 AM     0     11748   59.33    0.00    0.00    0.99   59.33     8  stress</span><br><span class="line">02:28:19 AM     0     11749   46.43    0.00    0.00   45.24   46.43     4  stress</span><br><span class="line">02:28:19 AM     0     11750   51.19    0.00    0.00   24.60   51.19     9  stress</span><br><span class="line">02:28:19 AM     0     14276    0.00    0.40    0.00    0.20    0.40    10  pidstat</span><br></pre></td></tr></table></figure><p>我们发现，运行的24个stress进程，出现了资源争抢的问题，既然出现了资源争抢，就会出现等待时间wait。</p>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8.1搭建LAMP(YUM)</title>
      <link href="/posts/40783/"/>
      <url>/posts/40783/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS8-1-yum安装LAMP"><a href="#CentOS8-1-yum安装LAMP" class="headerlink" title="CentOS8.1 yum安装LAMP"></a>CentOS8.1 yum安装LAMP</h1><p>在Linux公社看到类似的文章，于是想自己动手搭建一下LAMP，于是分享给大家。</p><p>LAMP是Linux，Apache，MySQL和PHP的首字母缩写，之前也见过LNMP,即Linux，Nginx，MySQL和PHP,本文是LAMP搭建教程<br>在进行搭建环境之前，我们先检查一下我的系统版本信息，以便大家在同样的环境下进行同样的实验<img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/20200228115354539.png" alt="在这里插入图片描述"></p><h2 id="第一步：更新CentOS-8软件包"><a href="#第一步：更新CentOS-8软件包" class="headerlink" title="第一步：更新CentOS 8软件包"></a>第一步：更新CentOS 8软件包</h2><p>这里我是从阿里镜像里面更新的，分别更新了基础yum源CentOS-Base.repo跟扩展yum源epel.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum优化方法：</span><br></pre></td></tr></table></figure><p>通过阿里镜像源进行优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01.优化基础的yum源：</span><br><span class="line">curl-o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">02.优化扩展的yum源</span><br><span class="line">  wget-O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line">打开阿里镜像网站，找到我们需要的系统</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/2020022810551388.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到与我们系统版本号相同的基础yum源，这里阿里镜像着实做的不错，我们只需要</span><br><span class="line">复制运行就OK啦</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228105130139.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228141544257.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">扩展源也一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/20200228110257592.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/20200228141622432.png" alt="在这里插入图片描述"><br>这样，我们就做好yum源的装备工作了。</p><h2 id="第二步：安装Apache-Web-服务器"><a href="#第二步：安装Apache-Web-服务器" class="headerlink" title="第二步：安装Apache Web 服务器"></a>第二步：安装Apache Web 服务器</h2><p>安装完成后，使用以下命令启用Apache在系统启动时自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install  -y httpd  httpd-tools</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl  start  httpd</span></span><br><span class="line">[root@localhost ~]<span class="comment">#systemctl enable httpd</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/20200228113943574.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看httpd运行状态</span><br><span class="line">[root@localhost ~]# systemctl status httpd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228114827698.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来我们测试一下Apache Web 服务器是否安装成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228115823938.png" alt="在这里插入图片描述"></p><p>本页面是在 Apache HTTP 服务器测试页 ，完成安装后用来测试它的正常运作。如果你能阅读此页面，此网站已能正常运作</p><h2 id="第三步：安装MariaDB"><a href="#第三步：安装MariaDB" class="headerlink" title="第三步：安装MariaDB"></a>第三步：安装MariaDB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y mariadb-server mariadb</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228120607740.png" alt="在这里插入图片描述"><br>然后启动并在启动时启用MariaDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start mariadb.service </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable  mariadb.service </span></span><br><span class="line">Created symlink /etc/systemd/system/mysql.service → /usr/lib/systemd/system/mariadb.service.</span><br><span class="line">Created symlink /etc/systemd/system/mysqld.service → /usr/lib/systemd/system/mariadb.service.</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/mariadb.service → /usr/lib/systemd/system/mariadb.service.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228120827924.png" alt="在这里插入图片描述"><br>查看MariaDB运行状态<br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228121000918.png" alt="在这里插入图片描述"><br>最后，我们需要通过secure来保护MariaDB数据库引擎，做好数据库安全<br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/1232020022812113467.png" alt="在这里插入图片描述">此过程我们输入root密码，其他选项都选y即可</p><h2 id="第四步：安装PHP7"><a href="#第四步：安装PHP7" class="headerlink" title="第四步：安装PHP7"></a>第四步：安装PHP7</h2><p>我们需要使用Remi信息库安装最新版本的PHP，同样，我们得去阿里镜像网站去找</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/12320200228124929309.png" alt="在这里插入图片描述"><br>点进去我们会发现这个。点进去<br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77202002281306132.png" alt="在这里插入图片描述"><br>然后你会发现这个，我找了一会。复制链接<br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228130702645.png" alt="在这里插入图片描述"><br>安装Remi信息库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install  https://mirrors.aliyun.com/remi/enterprise/remi-release-8.rpm</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228130908594.png" alt="在这里插入图片描述"></p><p>接下来，安装yum utils并使用以下命令启用remi-repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install dnf-utils </span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228131357269.png" alt="在这里插入图片描述"><br>安装好yum-utils和Remi-packages之后，通过运行命令搜索可下载的PHP模块</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228131741997.png" alt="在这里插入图片描述"><br>输出表明当前安装的PHP版本是PHP 7.2。要安装较新的版本PHP 7.4，请重置PHP模块</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228132820566.png" alt="在这里插入图片描述"><br>重置PHP模块后，通过运行启用PHP 7.4模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dnf module enable php:remi-7.4</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228133101251.png" alt="在这里插入图片描述"><br>最后，安装PHP，PHP-FPM（FastCGI进程管理器）和关联的PHP模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y  php php-opcache php-gd php-curl php-mysqlnd</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228133246911.png" alt="在这里插入图片描述"><br>检验安装版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># php -v</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228133430866.png" alt="在这里插入图片描述"><br>我们看到已经安装好PHP7.4,同时我们需要启用并使之开机启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start php-fpm</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable  php-fpm</span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/php-fpm.service → /usr/lib/systemd/system/php-fpm.service.12</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228134001332.png" alt="在这里插入图片描述"><br>我们仍需检查一下它的运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status   php-fpm</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228134136443.png" alt="在这里插入图片描述"><br>使SELinux允许Apache通过PHP-FPM运行来执行PHP代码<br>最后，重新启动Apache Web服务器以使PHP与Apache Web服务器一起使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># setsebool -P httpd_execmem </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart httpd1</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228134327428.png" alt="在这里插入图片描述"></p><h2 id="第五步：测试PHP信息"><a href="#第五步：测试PHP信息" class="headerlink" title="第五步：测试PHP信息"></a>第五步：测试PHP信息</h2><p>要在网络服务器上测试PHP，您必须在文档根目录中创建一个A.php文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim   /var/www/html/A.php</span></span><br></pre></td></tr></table></figure><p>在此文件中插入<br>&lt;?php</p><p>phpinfo ();</p><p>?&gt;<br><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/2020022813581788.png" alt="在这里插入图片描述"><br>然后转到浏览器，并在下面输入URL。使用用服务器的实际IP地址替换服务器本文测试的地址。<img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/20200228140346635.png" alt="在这里插入图片描述"></p><p>我们能够在Web浏览器上查看有关PHP的信息。此时，我们已经在CentOS 8系统上安装了Apache，PHP和MariaDB。想做此实验的小白可根据这篇进行相应的步骤，实现该实验。</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus+Grafana全方位监控系统</title>
      <link href="/posts/33168/"/>
      <url>/posts/33168/</url>
      
        <content type="html"><![CDATA[<h1 id="Prometheus-Grafana全方位监控系统"><a href="#Prometheus-Grafana全方位监控系统" class="headerlink" title="Prometheus+Grafana全方位监控系统"></a>Prometheus+Grafana全方位监控系统</h1><p><code>emmm</code>，前段时间写了一篇关于使用<code>Prometheus+grafana+node-exporter</code>监控<code>k8s</code>的文章，那篇写的很简单，只是单纯的搭建出来了，目前我对这东西一点都不了解，所以先来了解一下<code>Prometheus</code>和他常用的组件吧，包括<code>Prometheus/Grafana/node-exports/Alertmanager</code>，开始吧。</p><p>本文包括<code>Prometheus</code>概述、部署、配置、监控、告警、之前我做监控用的都是<code>zabbix</code>，<code>zabbix</code>也算是一个全面型的监控系统，但是他不太适合容器监控，他对容器监控集成欠缺很多，他比较偏向于非容器监控。</p><p><code>Prometheus</code>算是一个全能型选手，原生支持容器监控，当然监控传统应用也不是吃干饭的，所以就是容器和非容器他都支持，所有的监控系统都具备这个流程，数据采集→数据处理→数据存储→数据展示→告警，本文就是针对<code>Prometheus</code>展开的，所以先看看<code>Prometheus</code>概述</p><h2 id="Prometheus概述"><a href="#Prometheus概述" class="headerlink" title="Prometheus概述"></a>Prometheus概述</h2><p>先来看一下<code>Prometheus</code>是个啥</p><h3 id="Prometheus是什么"><a href="#Prometheus是什么" class="headerlink" title="Prometheus是什么"></a>Prometheus是什么</h3><p>中文名普罗米修斯，最初在<code>SoundCloud</code>上构建的监控系统，自<code>2012</code>年成为社区开源项目，用户非常活跃的开发人员和用户社区，2016年加入<code>CNCF</code>，成为继<code>kubernetes</code>之后的第二个托管项目，<a href="https://prometheus.io/">官方网站</a></p><h3 id="Prometheus特点"><a href="#Prometheus特点" class="headerlink" title="Prometheus特点"></a>Prometheus特点</h3><p>官方扒过来的</p><ul><li>多维数据模型：由度量名称和键值对标识的时间序列数据</li><li>PromSQL: —种灵活的查询语言，可以利用多维数据完成复杂的查询</li><li>不依赖分布式存储，单个服务器节点可直接工作</li><li>基于HTTP的pull方式釆集时间序列数据</li><li>推送时间序列数据通过PushGateway组件支持</li><li>通过服务发现或静态配罝发现目标</li><li>多种图形模式及仪表盘支持(grafana)</li></ul><h3 id="Prometheus-组成与架构"><a href="#Prometheus-组成与架构" class="headerlink" title="Prometheus 组成与架构"></a>Prometheus 组成与架构</h3><p>来看一张图，官方扒到的</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190702133835.png" alt="20190702133835"></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Prometheus Server</td><td>收集指标和存储时间序列数据，并提供查询接口</td></tr><tr><td>Push Gateway</td><td>短期存储指标数据，主要用于临时性任务</td></tr><tr><td>Exporters</td><td>采集已有的三方服务监控指标并暴露metrics</td></tr><tr><td>Alertmanager</td><td>告警</td></tr><tr><td>Web UI</td><td>简单的WEB控制台</td></tr></tbody></table><p>集成了数据的采集，处理，存储，展示，告警一系列流程都已经具备了</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p><code>Prometheus</code>将所有数据存储为时间序列，具有相同度量名称以及标签属于同个指标，也就是说<code>Prometheus</code>从数据源拿到数据之后都会存到内置的<code>TSDB</code>中，这里存储的就是时间序列数据，它存储的数据会有一个度量名称，譬如你现在监控一个<code>nginx</code>，首先你要给他起个名字，这个名称也就是度量名，还会有<code>N</code>个标签，你可以理解名称为表名，标签为字段，所以，每个时间序列都由度量标准名称和一组键值对(也称为标签)唯一标识。</p><p>时间序列的格式是这样的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metrice name&gt; &#123;&lt;label name&gt;&#x3D;&lt;label value&gt;,...&#125;</span><br></pre></td></tr></table></figure><p><code>metrice name</code>指的就是度量标准名称，<code>label name</code>也就是标签名，这个标签可以有多个，栗子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx_http_access&#123;method&#x3D;&quot;GET&quot;,uri&#x3D;&quot;&#x2F;index.html&quot;&#125;</span><br></pre></td></tr></table></figure><p>这个度量名称为<code>nginx_http_access</code>，后面是两个标签，和他们各对应的值，当然你还可以继续指定标签，你指定的标签越多查询的维度就越多。</p><h3 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h3><p>看表格吧</p><table><thead><tr><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>Counter</td><td>递增计数器，适合收集接口请求次数</td></tr><tr><td>Guage</td><td>可以任意变化的数值，适用CPU使用率</td></tr><tr><td>Histogram</td><td>对一段时间内数据进行采集，并对有所数值求和于统计数量</td></tr><tr><td>Summary</td><td>与Histogram类型类似</td></tr></tbody></table><h3 id="作业和实例"><a href="#作业和实例" class="headerlink" title="作业和实例"></a>作业和实例</h3><p>实例指的就是你可以抓取的目标，这个会在<code>Prometheus </code>配置文件中提现，作业是具有相同目标的实例集合称为作业，你可以理解为是一个组，一会写配置文件的时候会详细解析，下面开始安装<code>Prometheus</code>。</p><h2 id="Prometheus部署"><a href="#Prometheus部署" class="headerlink" title="Prometheus部署"></a>Prometheus部署</h2><p>先通过二进制来部署<code>Prometheus</code>吧，<a href="https://down.kococ.cn/Devops/Prometheus/prometheus-v2.12.0.tar">下载地址</a>，我们要下载服务端，也就是这个包</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190702152359.png" alt="20190702152359"></p><p>我在服务器上直接下载了，下载完后解压移动到别的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]<span class="comment"># wget https://github.com/prometheus/prometheus/releases/download/v2.10.0/prometheus-2.10.0.linux-amd64.tar.gz</span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># tar zxf prometheus-2.10.0.linux-amd64.tar.gz </span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># mv prometheus-2.10.0.linux-amd64 /usr/local/prometheus</span></span><br><span class="line">[root@rj-bai ~]<span class="comment"># cd /usr/local/prometheus/ &amp;&amp; ls</span></span><br><span class="line">console_libraries  consoles  LICENSE  NOTICE  prometheus  prometheus.yml  promtool</span><br></pre></td></tr></table></figure><p>先配置一下监控本机吧，它默认的配置文件是<code>prometheus.yml</code>，已经配置好了，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">  <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>targets</code>就是一个作业，也就是被监控端，监控本机的<code>9090</code>端口，启动选项也有很多，了解一下，主要是关注两点，分别如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--storage.tsdb.path=&quot;data/&quot;   ##存储数据的目录，默认/data</span><br><span class="line">--storage.tsdb.retention.time ##数据存储时间，默认15天</span><br></pre></td></tr></table></figure><p>这里提一下存储的问题，<code>TSDB</code>不太适合长期去存储数据，数据量大了支持并不是很好，官方声明也是不会对这一块存储进行改善，给你的建议是使用外部存储，譬如使用<code>InfluxDB</code>，这里暂时就不改他的默认存储了，把他进入系统服务吧，写一个<code>systemd</code>的配置文件，直接启动了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># cat &gt; /usr/lib/systemd/system/prometheus.service &lt;&lt;OEF </span></span><br><span class="line">&gt; [Unit]</span><br><span class="line">&gt; Description=prometheus server daemon</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Service]</span><br><span class="line">&gt; Restart=on-failure</span><br><span class="line">&gt; ExecStart=/usr/<span class="built_in">local</span>/prometheus/prometheus --config.file=/usr/<span class="built_in">local</span>/prometheus/prometheus.yml</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Install]</span><br><span class="line">&gt; WantedBy=multi-user.target</span><br><span class="line">&gt; OEF</span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># systemctl daemon-reload &amp;&amp; systemctl start prometheus.service</span></span><br></pre></td></tr></table></figure><p>这样就启动了撒，去访问<code>9090</code>端口就可以看到页面了，这个页面能看到的东西很多，自己点点看吧，能看到这个页面就表示莫得问题。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190702163712.png" alt="20190702163712"></p><p>目前使用二进制部署主要是因为方便改配置文件，下面开始看配置文件。</p><h2 id="全局配置文件介绍"><a href="#全局配置文件介绍" class="headerlink" title="全局配置文件介绍"></a>全局配置文件介绍</h2><p><code>prometheus</code> 已经安装起来了，下面看一下配置文件与核心功能，很多功能都是通过配置文件去实现的，比较多，所以先熟悉一下他的配置文件。</p><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p>也就是<code>prometheus.yml</code>，官方说明<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">地址</a>，大概分为这几块，我把注释去掉了，全局配置选项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  [ <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> ]      <span class="comment">##采集间隔</span></span><br><span class="line">  [ <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">10s</span> ]      <span class="comment">##采集超时时间</span></span><br><span class="line">  [ <span class="attr">evaluation_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> ]  <span class="comment">##告警评估周期</span></span><br><span class="line">  <span class="attr">external_labels:</span>                                    <span class="comment">##外部标签             </span></span><br><span class="line">    [ <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>指定告警规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;filepath_glob&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>配置被监控端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;scrape_config&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>配置告警方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alert_relabel_configs:</span></span><br><span class="line">    [ <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> ]</span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    [ <span class="bullet">-</span> <span class="string">&lt;alertmanager_config&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>指定远程存储</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;remote_write&gt;</span> <span class="string">...</span> ]</span><br><span class="line"><span class="attr">remote_read:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;remote_read&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>这就是一个整体的配置文件，现在再看默认的配置文件就能看懂某一段是干啥的了，现在开始配置<code>scrape_configs</code></p><h3 id="scrape-configs"><a href="#scrape-configs" class="headerlink" title="scrape_configs"></a>scrape_configs</h3><p>这块就是来配置我们要监控的东西，在这一块中配置的东西又有很多了，看一下官方的，一堆，我还是去掉注释分段贴出来吧。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job_name:</span> <span class="string">&lt;job_name&gt;</span>  <span class="comment">##指定job名字</span></span><br><span class="line">[ <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_interval&gt;</span> ]</span><br><span class="line">[ <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_timeout&gt;</span> ]  <span class="comment">##这两段指定采集时间，默认继承全局</span></span><br><span class="line">[ <span class="attr">metrics_path:</span> <span class="string">&lt;path&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">/metrics</span> ]  <span class="comment">##metrics路径，默认metrics</span></span><br><span class="line">[ <span class="attr">honor_labels:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="literal">false</span> ]  <span class="comment">##默认附加的标签，默认不覆盖</span></span><br></pre></td></tr></table></figure><p>它默认暴露监控数据的接口就是<code>ip:9090/metrics</code>，你可以去指定这个名称，访问一下这里看看，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190702171903.png" alt="20190702171903"></p><p>在<code>ip:9090/targets</code>能看到当前监控的主机，现在只有本机一个，标签显示也在这里。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190702171956.png" alt="20190702171956"></p><p>在看下一段，这里定义的是要如何去访问采集目标</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="attr">scheme:</span> <span class="string">&lt;scheme&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">http</span> ]  <span class="comment">## 默认使用http方式去访问</span></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  [ <span class="string">&lt;string&gt;:</span> [<span class="string">&lt;string&gt;</span>, <span class="string">...</span>] ]        <span class="comment">## 配置访问时携带的参数</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  [ <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> ]</span><br><span class="line">  [ <span class="attr">password:</span> <span class="string">&lt;secret&gt;</span> ]</span><br><span class="line">  [ <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> ]          <span class="comment">## 配置访问接口的用户名密码</span></span><br><span class="line">[ <span class="attr">bearer_token:</span> <span class="string">&lt;secret&gt;</span> ]</span><br><span class="line">[ <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> ]  <span class="comment">##指定认证token</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  [ <span class="string">&lt;tls_config&gt;</span> ]                     <span class="comment">## 指定CA证书</span></span><br><span class="line">[ <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> ]                <span class="comment">## 使用代理模式访问目标</span></span><br></pre></td></tr></table></figure><p>下一段，服务发现配置，贴了几个，不是完整的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">consul_sd_configs:</span>                   <span class="comment">##通过consul去发现</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;consul_sd_config&gt;</span> <span class="string">...</span> ]</span><br><span class="line"><span class="attr">dns_sd_configs:</span>                      <span class="comment">##通过DNS去发现</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;dns_sd_config&gt;</span> <span class="string">...</span> ]</span><br><span class="line"><span class="attr">file_sd_configs:</span>                   <span class="comment">##通过文件去发现</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;file_sd_config&gt;</span> <span class="string">...</span> ]</span><br><span class="line"><span class="attr">kubernetes_sd_configs:</span>               <span class="comment">##通过kubernetes去发现</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;kubernetes_sd_config&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>静态配置被监控端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;static_config&gt;</span> <span class="string">...</span> ]</span><br></pre></td></tr></table></figure><p>刚刚监控本机的就是静态配置去监控的，也是就这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><p>最后标签配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> ]          <span class="comment">##在数据采集前对标签进行重新标记</span></span><br><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line">  [ <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> ]          <span class="comment">##在数据采集之后对标签进行重新标记</span></span><br><span class="line">[ <span class="attr">sample_limit:</span> <span class="string">&lt;int&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="number">0</span> ] <span class="comment">##采集样本数量，默认0</span></span><br></pre></td></tr></table></figure><p>下面看一下<code>relabel_configs</code></p><h3 id="relabel-configs"><a href="#relabel-configs" class="headerlink" title="relabel_configs"></a>relabel_configs</h3><p>就是用来重新打标记的，对于<code>prometheus</code> 数据模型最关键点就是一个指标名称和一组标签来组成一个多维度的数据模型，你想完成一个复杂的查询就需要你有很多维度，<code>relabel_configs</code> 就是对标签进行处理的，他能帮你在数据采集之前对任何目标的标签进行修改，重打标签的意义就是如果标签有重复的可以帮你重命名，看一哈现在的，上面铁锅</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708111918.png" alt="20190708111918"></p><p>现在<code>instance</code>是他默认给我加的标签，想改的话就需要<code>relabel_configs</code>去帮你重打标签，他也可以删除标签，如果某个标签用不到了也可以删掉，再就是过滤标签，再看一下<code>relabel_configs</code>的配置有哪些，也就是这一段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span> </span><br><span class="line">  [ <span class="attr">source_labels:</span> <span class="string">&#x27;[&#x27;</span> <span class="string">&lt;labelname&gt;</span> [, <span class="string">...</span>] <span class="string">&#x27;]&#x27;</span> ]   <span class="comment">##源标签，指定对哪个现有标签进行操作</span></span><br><span class="line">  [ <span class="attr">separator:</span> <span class="string">&lt;string&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">;</span> ]            <span class="comment">##多个源标签时连接的分隔符</span></span><br><span class="line">  [ <span class="attr">target_label:</span> <span class="string">&lt;labelname&gt;</span> ]                    <span class="comment">##要将源标签换成什么名字</span></span><br><span class="line">  [ <span class="attr">regex:</span> <span class="string">&lt;regex&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">(.*)</span> ]              <span class="comment">##怎么来匹配源标签，默认匹配所有</span></span><br><span class="line">  [ <span class="attr">modulus:</span> <span class="string">&lt;uint64&gt;</span> ]                            <span class="comment">##不怎么会用到</span></span><br><span class="line">  [ <span class="attr">replacement:</span> <span class="string">&lt;string&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">$1</span> ]         <span class="comment">##替换正则表达式匹配到的分组，分组引用$1,$2,$3</span></span><br><span class="line">  [ <span class="attr">action:</span> <span class="string">&lt;relabel_action&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">replace</span> ] <span class="comment">##基于正则表达式匹配执行的操作，默认替换</span></span><br></pre></td></tr></table></figure><p>这东西到底怎么用，做个演示，根据两台服务器聚合查看<code>CPU</code>使用率，说白了就是同时去查看这两台服务器的<code>CPU</code>利用率，用这个标签就可以实现了。</p><h4 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h4><p>去<code>WEB</code>界面看一下当前被监控端<code>CPU</code>使用率，用<code>sql</code>去查，也就是这个值。</p><p><img src="https://res.rj-bai.com/201907/20190708111918.png" alt="20190708111918"></p><p>可以看到一个度量名称和两个默认附加的标签，我现在想统计两台服务器的<code>CPU</code>使用率，就需要加一个标签了，说白了就是添加一个维度去获取这两台服务器<code>CPU</code>使用率，接下来去改配置文件吧，给他加个标签，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">static_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">local</span> </span><br></pre></td></tr></table></figure><p>热更新一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># ps aux | grep prometheus.yml  | grep -v grep  | awk &#123;&#x27;print $2&#x27;&#125; | xargs kill -hup</span></span><br></pre></td></tr></table></figure><p>看一下有没有生效，刷新一下页面就能看到了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708113120.png" alt="20190708113120"></p><p>然后可以根据这个标签去查了，语法是这样的，内置函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(process_cpu_seconds_total&#123;server&#x3D;&quot;local&quot;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708113824.png" alt="201907081124"></p><p>所以就算你有<code>N</code>个被监控的服务器打上这个标签之后在这里就可以看到总数了，添加标签很简单，下面看一下重命名标签，就是将现有的标签进行重命名。</p><h4 id="标签重命名"><a href="#标签重命名" class="headerlink" title="标签重命名"></a>标签重命名</h4><p>就是将一个已有的标签重命名一个新的标签，实际操作一下，之前的标签去掉了，现在要把<code>job_name</code>改个名字，也就是这一块的配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><p>目前<code>job_name</code>为<code>prometheus</code>，当前这个虚拟机是跑在<code>IP</code>地址为<code>21</code>的物理机上，所以现在把他的<code>job_name</code>改成<code>server21</code>，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;server21&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><p>重启一下，刷新页面就可以看到了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708160319.png" alt="20190708160319"></p><p>我现在要将<code>job</code>这个标签标记为<code>local</code>，也就是将<code>job=&quot;server21</code>改为<code>local=&quot;server21</code>，下面开始用<code>relabel</code>进行重命名，改完之后的配置是这样的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;server21&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> [<span class="string">&#x27;job&#x27;</span>]  <span class="comment">##源标签</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span>             <span class="comment">##正则，会匹配到job值，也就是server21</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span>         <span class="comment">##引用正则匹配到的内容，也就是server21</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span>     <span class="comment">##赋予新的标签，名为local</span></span><br></pre></td></tr></table></figure><p>这样就可以了撒，重新加载一下，看页面，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708161317.png" alt="20190708161317"></p><p>新的数据已经有了，之前的标签还会保留，因为没有配置删除他，这样就可以了，现在就可以聚合了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708161530.png" alt="20190708161530"></p><p>这样他就会将所有实例使用率相加求和。</p><h4 id="action重新打标签动作"><a href="#action重新打标签动作" class="headerlink" title="action重新打标签动作"></a>action重新打标签动作</h4><p>如表所示，上面就是用了一个默认的。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>replace</td><td>默认，通过正则匹配source_label的值，使用replacement来引用表达式匹配的分组</td></tr><tr><td>keep</td><td>删除regex于链接不匹配的目标source_labels</td></tr><tr><td>drop</td><td>删除regex与连接匹配的目标source_labels</td></tr><tr><td>labeldrop</td><td>匹配Regex所有标签名称</td></tr><tr><td>labelkeep</td><td>匹配regex所有标签名称</td></tr><tr><td>hashmod</td><td>设置target_label为modulus连接的哈希值source_lanels</td></tr><tr><td>labelmap</td><td>匹配regex所有标签名称，复制匹配标签的值分组，replacement分组引用(${1},${2})替代</td></tr></tbody></table><p>比如说我现在不想采集本机的数据了，就可以用上面的标签进行操作了，加点东西就行了，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;server21&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    <span class="attr">relabel_configs:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> [<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">drop</span></span><br><span class="line">      <span class="attr">source_labels:</span> [<span class="string">&quot;job&quot;</span>]</span><br></pre></td></tr></table></figure><p>删除标签为<code>job</code>的节点，目前只有一个节点，所以这个跑了之后就看不到数据了，如果真的要用这个给不需要监控的节点打一个标签，然后在这里匹配就行了，所以现在重新载入的话就没数据了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708164048.png" alt="20190708164048"></p><p>最后看一下删除标签。</p><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><p>刚刚我新打了一个标签，也就是<code>local</code>标签，所以之前的<code>job</code>标签可以不要了，下面直接给他删了吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;server21&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    <span class="attr">relabel_configs:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">      <span class="attr">source_labels:</span> [<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">      <span class="attr">regex:</span> <span class="string">(.*)</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">$1</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">local</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labeldrop</span> </span><br><span class="line">      <span class="attr">regex:</span> <span class="string">job</span></span><br></pre></td></tr></table></figure><p>重载一下就看到<code>job</code>的标签了。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708164600.png" alt="20190708164600"></p><p>这样就可以了撒，下面看看基于文件的服务发现功能</p><h3 id="基于文件的服务发现"><a href="#基于文件的服务发现" class="headerlink" title="基于文件的服务发现"></a>基于文件的服务发现</h3><p>下面会涉及到基于文件的服务发现，还有就是基于<code>kubernetes</code>的服务发现，这个到监控<code>k8s</code>集群的时候再说吧，先看基于文件的吧，现在还没准备别的服务器，还是发现本身吧，先把配置文件改成这样，重载之后就看不到本机了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus</span>]<span class="comment"># cat prometheus.yml</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708171041.png" alt="20190708171041"></p><p>然后就可以去改配置文件了，通过服务发现将自身加入进去，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus</span>]<span class="comment"># cat prometheus.yml</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">file_sd_configs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">files:</span> [<span class="string">&#x27;/usr/local/prometheus/files_sd_configs/*.yaml&#x27;</span>]  <span class="comment">##指定服务发现文件位置</span></span><br><span class="line">        <span class="attr">refresh_interval:</span> <span class="string">5s</span>                                      <span class="comment">##刷新间隔改为5秒</span></span><br></pre></td></tr></table></figure><p>重载服务，然后去写服务发现的<code>YAML</code>文件吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus/files_sd_configs</span>]<span class="comment"># cat configs.yml </span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>] </span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">server21</span></span><br></pre></td></tr></table></figure><p>这样就可以了，文件保存五秒后就能看到发现的主机了，查数据也没问题</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708173554.png" alt="20190708173554"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708173611.png" alt="20190708173611"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190708173654.png" alt="20190708173654"></p><p>就是这种原理，下面开始监控<code>linux</code>和一些服务吧</p><h2 id="监控栗子"><a href="#监控栗子" class="headerlink" title="监控栗子"></a>监控栗子</h2><h3 id="监控linux服务器"><a href="#监控linux服务器" class="headerlink" title="监控linux服务器"></a>监控linux服务器</h3><p><code>emmmm</code>，在被监控端需要装一个名为<code>node_exporter</code>的导出器，他会帮你收集系统指标和一些软件运行的指标，把指标暴露出去，这样<code>prometheus</code>就可以去采集了，具体<code>node_exporter</code>能采集哪些东西，看官方的<a href="https://github.com/prometheus/node_exporter"><code>github</code></a>吧，还是蛮多的，现在随便找个服务器下载一下<code>node_exporter</code>运行起来就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># tar zxf node_exporter-0.18.1.linux-amd64.tar.gz </span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># mv node_exporter-0.18.1.linux-amd64 /usr/local/node_exporter</span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># cd /usr/local/node_exporter</span></span><br></pre></td></tr></table></figure><p>在启动之前看一下他的启动参数，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># ./node_exporter --help</span></span><br></pre></td></tr></table></figure><p>可以看到一堆，她就是一个收集器，配置你要收集或不收集哪些信息，看<code>default</code>就能看出来撒，加到系统服务中吧，用<code>systemctl</code>去管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># cat &gt; /usr/lib/systemd/system/node_exporter.service &lt;&lt;OEF </span></span><br><span class="line">&gt; [Unit]</span><br><span class="line">&gt; Description=node_exporter</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Service]</span><br><span class="line">&gt; Restart=on-failure</span><br><span class="line">&gt; ExecStart=/usr/<span class="built_in">local</span>/node_exporter/node_exporter</span><br><span class="line">&gt; </span><br><span class="line">&gt; [Install]</span><br><span class="line">&gt; WantedBy=multi-user.target</span><br><span class="line">&gt; OEF</span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># systemctl daemon-reload </span></span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># systemctl start node_exporter.service</span></span><br><span class="line">[root@kubeadm-node /usr/<span class="built_in">local</span>/node_exporter]<span class="comment"># curl -s 127.0.0.1:9100/metrics | head </span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709105800.png" alt="20190709105800"></p><p>正常启动了撒，现在要配置<code>prometheus</code>来监控这个主机了，之前配置过动态发现了，现在再加一个，把服务端和被监控端分开，所以新加了这个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># cat prometheus.yml</span></span><br><span class="line">  - job_name: <span class="string">&#x27;nodes&#x27;</span></span><br><span class="line">    file_sd_configs: </span><br><span class="line">      - files: [<span class="string">&#x27;/usr/local/prometheus/nodes_sd_configs/*.yml&#x27;</span>]</span><br><span class="line">        refresh_interval: 5s </span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># mkdir nodes_sd_configs &amp;&amp; cd nodes_sd_configs</span></span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus]<span class="comment"># ps aux | grep prometheus.yml  | grep -v grep  | awk &#123;&#x27;print $2&#x27;&#125; | xargs kill -hup</span></span><br><span class="line">[root@rj-bai /usr/<span class="built_in">local</span>/prometheus/nodes_sd_configs]<span class="comment"># cat nodes.yml</span></span><br><span class="line">- targets: [<span class="string">&#x27;192.168.1.248:9100&#x27;</span>] </span><br><span class="line">  labels:</span><br><span class="line">    name: server20</span><br></pre></td></tr></table></figure><p>直接去看页面吧，应该已经添加进去了，顺便查一下数据</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709111843.png" alt="20190709111843"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709112040.png" alt="20190709112040"></p><p>这样就可以了，莫得问题，下面用<code>PromSQL</code>获取<code>CPU&amp;</code>内存硬盘使用率</p><h3 id="使用PromSQL"><a href="#使用PromSQL" class="headerlink" title="使用PromSQL"></a>使用PromSQL</h3><p>想查数据就需要写<code>PromSQL</code>去查询了，</p><h4 id="查询CPU使用率"><a href="#查询CPU使用率" class="headerlink" title="查询CPU使用率"></a>查询CPU使用率</h4><p>比如果我想查看刚刚加进来的<code>nodes CPU</code>利用率，以<code>node</code>开头的<code>sql</code>都是<code>node_expores</code>采集的指标，度量很多，看<code>CPU</code>使用率看着一个指标就够了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709112714.png"></p><p>总<code>CPU</code>使用情况，会列出你处理器多少核，每个核的使用情况，这个CPU是干什么使用的，用户态还是内核态还是操作<code>IO</code>等待的时间，还有优先级调度使用的<code>CPU</code>，他会通过一个名为<code>mode</code>的标签去区分这些，一般不会这么去统计，现在统计一下刚刚加进去的那个<code>nodes</code>五分钟之内<code>CPU</code>平均使用率是多少，还是得写<code>PromSQL</code>，大概是这样，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 - irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])*100</span><br></pre></td></tr></table></figure><p><code>emmm</code>，<code>node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m]</code>这一段是统计出了服务器最近5分钟<code>CPU</code>的空闲率，执行之后是这种效果，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709114438.png" alt="20190709114438"></p><p>这是五分钟之内所有值，然后使用了<code>irate</code>函数来统计它的平均值，转化成了百分比，乘了一百，所以执行结果如下。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709114935.png" alt="20190709114935"></p><p>这就是所有<code>CPU</code>的空闲率了，我要取的是所有CPU的使用率，所以又一百减去了空闲率的值就是使用率了，所以上面第一条<code>sql</code>执行发回的结果如下。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709115136.png" alt="20190709115136"></p><p>这就是五分钟之内总的<code>CPU</code>的平均使用率了，我的那个节点就是四核<code>CPU</code>，每个都被列出来了，真鸡儿麻烦，再看一下内存使用率，和上面其实一样，值都有了，求出他的百分比就行了，</p><h4 id="查询内存使用率"><a href="#查询内存使用率" class="headerlink" title="查询内存使用率"></a>查询内存使用率</h4><p><code>linux</code>内核有一个内存缓存机制，所以<code>buff/cache</code>的占用不算是已被使用的物理内存，所以计算方式就是将这三个值加到一起就是剩余内存了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709134042.png" alt="20190709134042"></p><p><code>sql</code>的话这样写，直接查一下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709134504.png" alt="20190709134504"></p><p>这就是总共剩余的内存，单位是<code>bite</code>，现在我要计算使用内存百分比，和上面看<code>CPU</code>使用率的方法一致，<code>sql</code>如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 - (node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes) / node_memory_MemTotal_bytes *100</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709135149.png" alt="20190709135149"></p><p>下面看看硬盘使用率</p><h4 id="查询硬盘使用率"><a href="#查询硬盘使用率" class="headerlink" title="查询硬盘使用率"></a>查询硬盘使用率</h4><p>你的磁盘和挂载点可能不止一个，先看一下目前收集到的信息，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709145758.png" alt="20190709145758"></p><p>所以就要指定分区进行计算了，所以匹配这里写了一个正则去匹配你挂载的磁盘，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100- (node_filesystem_free_bytes&#123;mountpoint=&quot;/&quot;,fstype=~&quot;ext4|xfs&quot;&#125; / node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;,fstype=~&quot;ext4|xfs&quot;&#125; *100)</span><br></pre></td></tr></table></figure><p><code>node_filesystem_size_bytes</code>查的是<code>/</code>总大小，<code>node_filesystem_free_bytes</code>查的是剩余大小，只匹配<code>ext4&amp;xfs</code>类型的，像是什么<code>tmpfs&amp;shm</code>类型的都不匹配，还是算出了剩余的百分比，所以执行后的结果是这样，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709150539.png" alt="20190709150539"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709150559.png" alt="20190709150559"></p><p>计算方式大概就是这样，现在还没涉及到图形展示这一块，下面看一下获取系统服务运行状态。</p><h4 id="查询系统服务运行状态"><a href="#查询系统服务运行状态" class="headerlink" title="查询系统服务运行状态"></a>查询系统服务运行状态</h4><p>就是监控系统服务运行状态，说白了就是监控以<code>systemctl</code>启动的服务，现在监控一下这个，<code>node_exports</code>就支持对这种服务进行监控，目前还没有启用这个功能，现在启动一下撒，直接去改<code>node_exports</code>的启动文件，加两条参数即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]# cat /usr/lib/systemd/system/node_exporter.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">ExecStart=/usr/local/node_exporter/node_exporter --collector.systemd --collector.systemd.unit-whitelist=(docker|sshd).service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>第二段就是制定我要监控哪些系统服务，我写了<code>docker&amp;sshd</code>，重启后可以去查询了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># systemctl daemon-reload         </span></span><br><span class="line">[root@kubeadm-node ~]<span class="comment"># systemctl restart node_exporter.service </span></span><br></pre></td></tr></table></figure><p>我查一下当前<code>docker&amp;sshd</code>的运行状态是什么，可以直接这样写了，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_systemd_unit_state&#123;exported_name=~&quot;(docker|sshd).service&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709153503.png" alt="20190709153503"></p><p>目前<code>state=active</code>的值为<code>0</code>，说明正常运行，所以之后写告警规则的时候就去判断这个值是不是<code>1</code>，如果不是就要进行某些操作了，下面装一下<code>grafana</code>吧</p><h3 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h3><p><code>grafana</code>就是一个图形展示系统，他主要是对度量指标进行分析可视化，他本身不会存储任何数据，他只会展示数据库里面的数据，支持很多类型的数据库，<a href="https://grafana.com/">官网</a>，刚好我装有<code>docker</code>，其实目前在操作的这两台服务是一个<code>k8s</code>集群，用<code>kubeadm</code>启动的，所以我直接用<code>docker</code>启动了，还是写个<code>deployment</code>，算了直接用<code>docker</code>命令启吧，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@kubeadm-node ~]<span class="comment"># docker run \</span></span><br><span class="line">&gt; -u 0 \</span><br><span class="line">&gt; -d \</span><br><span class="line">&gt; -p 3000:3000  \</span><br><span class="line">&gt; --name=grafana   \</span><br><span class="line">&gt; -v /var/lib/grafana:/var/lib/grafana \</span><br><span class="line">&gt; grafana/grafana</span><br></pre></td></tr></table></figure><p>这样就行了，直接访问<code>3000</code>端口就好了，用户名密码默认<code>admin/admin</code>，初次登陆会让你修改密码，就可以看到主页了，然后直接添加数据源，把<code>prometheus</code>加进去，保存就行了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709163321.png" alt="20190709163321"></p><p>然后直接导入一个仪表盘进来吧，<code>ID</code>是<code>9276</code>，大概是这种效果，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709173630.png" alt="img"></p><p>然后网络带宽那里没数据，我看了一下他的<code>sql</code>，只需要将<code>$nic</code>改为你的网卡名就有数据了，所以现在监控<code>linux</code>服务器是没问题了，下面试试监控<code>docker</code>。</p><h3 id="监控docker"><a href="#监控docker" class="headerlink" title="监控docker"></a>监控docker</h3><p>想要监控<code>docker</code>需要用到名为<code>cadvisor</code>的工具，是谷歌开源的，它用于收集正在运行的容器资源使用和性能信息，<a href="https://github.com/google/cadvisor">github</a>地址，你需要在要监控的服务器上部署<code>cadvisor</code>，直接用<code>docker</code>去启动就完了，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --volume=/:/rootfs:ro \</span><br><span class="line">  --volume=/var/run:/var/run:ro \</span><br><span class="line">  --volume=/sys:/sys:ro \</span><br><span class="line">  --volume=/var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  --volume=/dev/disk/:/dev/disk:ro \</span><br><span class="line">  --publish=8080:8080 \</span><br><span class="line">  --detach=<span class="literal">true</span> \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  google/cadvisor:latest</span><br></pre></td></tr></table></figure><p>容器启动后也是会暴露一个指标接口，默认是<code>8080/metrics</code>，这里就不访问了，下一步就是加入到普罗米修斯中进行监控了，去改他的配置文件，静态配置一个吧，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;docker&#x27;</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.248:8080&#x27;</span>]</span><br></pre></td></tr></table></figure><p>加完直接重载，页面直接导入一个图表吧，<code>ID</code>是<code>193</code>，效果是这样的，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709181607.png" alt="20190709181607"></p><p>主要就是监控容器的<code>CPU</code>内存网络流量的，都可看到，目前我<code>248</code>就运行了六个容器，就是这样，下面在看看监控<code>mysql</code></p><h3 id="监控mysql"><a href="#监控mysql" class="headerlink" title="监控mysql"></a>监控mysql</h3><p>监控<code>mysql</code>就会用到<code>mysql_exporter</code>，这个也能在官网下到，也就是<a href="https://prometheus.io/download/#mysqld_exporter">这里</a>，这个东西需要你安装到运行<code>mysql</code>的实例上，本地的<code>mysql</code>比较多，我随便找了一个扔了上去，先去<code>mysql</code>创建一个用户吧，这个程序需要连接明月三千里才能获取到指标。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;exporter&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;exporter&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#x27;exporter&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709184630.png" alt="20190709184630"></p><p>用户创建好了去解压包吧，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql ~]# tar zxf mysqld_exporter-0.11.0.linux-amd64.tar.gz -C /usr/local/ &amp;&amp; cd /usr/local/</span><br><span class="line">[root@mysql local]# mv mysqld_exporter-0.11.0.linux-amd64/ mysqld_exporter &amp;&amp; cd mysqld_exporter</span><br></pre></td></tr></table></figure><p>需要写一个文件，<code>mysqld_exporter</code>直接读这个文件就可以连接<code>mysql</code>了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql mysqld_exporter]<span class="comment"># cat .my.cnd</span></span><br><span class="line">[client]</span><br><span class="line">user=exporter</span><br><span class="line">password=exporter</span><br></pre></td></tr></table></figure><p>文件有了，在启动的时候指定一下读取这个文件，直接启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql mysqld_exporter]# ./mysqld_exporter --config.my-cnf=.my.cnf</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709185400.png" alt="img"></p><p>现在把这个加到普罗米修斯中，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.126:9104&#x27;</span>]</span><br></pre></td></tr></table></figure><p>然后导入一个仪表盘，<code>ID</code>为<code>7362</code>，看页面，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190709190259.png" alt="img"></p><p>还是有些空值，而且官方也说了<code>5.6</code>版本有些不支持，我看了一下<code>Buffer Pool Size of Total RAM</code>的<code>sql</code>，是这样写的，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(mysql_global_variables_innodb_buffer_pool_size&#123;instance=&quot;$host&quot;&#125; * 100) / on (instance) node_memory_MemTotal_bytes&#123;instance=&quot;$host&quot;&#125;</span><br></pre></td></tr></table></figure><p>现在应该能看的差不多了，他去查了<code>mysql</code>节点的总内存，但是我明月三千里节点并没有装<code>node_exports</code>，所以就没数据了，总之支持采集的数据和仪表盘模板很多，自行琢磨吧，上面只是最简单的几个例子，下面来看看告警这一块的东西。</p><h2 id="alertmanager"><a href="#alertmanager" class="headerlink" title="alertmanager"></a>alertmanager</h2><p>普罗米修斯本身是不支持告警的，告警是由<code>alertmanager</code>这个组件完成的，普罗米修斯将告警收集起来会推送给<code>alertmanager</code>，<code>alertmanager</code>接收到告警后决定怎么去处理这些告警，应该发给谁，下面先部署一下<code>alertmanager</code>吧，我直接下载了，在普罗米修斯服务器上，</p><h3 id="部署alertmanager"><a href="#部署alertmanager" class="headerlink" title="部署alertmanager"></a>部署alertmanager</h3><p><code>alertmanager</code>没必要和普罗米修斯放在一个服务器上，他们之间能通讯就可以了，我目前资源紧张就扔到一起了，直接<code>wget</code>了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]<span class="comment"># wget https://github.com/prometheus/alertmanager/releases/download/v0.18.0/alertmanager-0.18.0.linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><p>让他先下着，聊一下普罗米修斯和<code>alertmanager</code>是怎么通讯的，首先你需要在<code>prometheus</code>中定义你的监控规则，说白了就是写一个触发器，某个值超过了我设置的阈值我就要告警了，触发告警之后<code>prometheus</code>会推送当前的告警规则到<code>alertmanager</code>，<code>alertmanager</code>收到了会进行一系列的流程处理，然后发送到接收人手里，他的处理规则也是很复杂的，后面会说，现在也下载完了，解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai ~]# tar zxf alertmanager-0.18.0.linux-amd64.tar.gz </span><br><span class="line">[root@rj-bai ~]# mv alertmanager-0.18.0.linux-amd64 /usr/local/alertmanager &amp;&amp; cd /usr/local/alertmanager &amp;&amp; ls</span><br><span class="line">alertmanager  alertmanager.yml  amtool  LICENSE  NOTICE</span><br></pre></td></tr></table></figure><p>有两个二进制文件，分别是启动程序和一个工具，还有一个主配置文件，先来了解一下他的主配置文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br></pre></td></tr></table></figure><p>全局配置，设置解析超时时间，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]      <span class="comment">##alertmanager中的分组，选哪个标签作为分组的依据</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span>              <span class="comment">##分组等待时间，拿到第一条告警后等待10s，如果有其他的一起发送出去</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span>          <span class="comment">##各个分组之前发搜告警的间隔时间</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1h</span>          <span class="comment">##重复告警时间，默认1小时</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;web.hook&#x27;</span>         <span class="comment">##接收者</span></span><br></pre></td></tr></table></figure><p>这里是配置告警的，配置告警怎么发送，怎么来分配，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;web.hook&#x27;</span></span><br><span class="line">  <span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">&#x27;http://127.0.0.1:5001/&#x27;</span></span><br></pre></td></tr></table></figure><p>这里是配置告警的接收者，我要发送给谁，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    <span class="attr">equal:</span> [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;instance&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这里用于配置告警收敛的，主要就是减少发送告警，来发送一些关键的，所以先把这段注释了吧，暂时用不到，之后会用到，所以基于这个配置文件改改，暂时先发送<code>email</code>吧，所以改完的配置文件如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/alertmanager</span>]<span class="comment"># cat alertmanager.yml </span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">&#x27;smtp.163.com:25&#x27;</span>         <span class="comment">#smtp服务地址</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">&#x27;xxx@163.com&#x27;</span>                  <span class="comment">#发送邮箱</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">&#x27;xxx@163.com&#x27;</span>         <span class="comment">#认证用户名</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">&#x27;xxxx&#x27;</span>                <span class="comment">#认证密码</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span>                   <span class="comment">#禁用tls</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;email&#x27;</span>                      <span class="comment">#定义接受告警组名</span></span><br><span class="line"><span class="attr">receivers:</span>                                  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;email&#x27;</span>                          <span class="comment">#定义组名</span></span><br><span class="line">  <span class="attr">email_configs:</span>                         <span class="comment">#配置邮件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xx@xxx.com&#x27;</span>                     <span class="comment">#收件人</span></span><br></pre></td></tr></table></figure><p>保存后检查一下这个文件有没有问题，命令如下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/local/alertmanager]# ./amtool check-config alertmanager.yml </span><br><span class="line">Checking &#x27;alertmanager.yml&#x27;  SUCCESS</span><br></pre></td></tr></table></figure><p>然后去启动吧，还是加到系统服务中吧，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@rj-bai /usr/local/alertmanager]# cat &gt; /usr/lib/systemd/system/alertmanager.service &lt;&lt;OEF </span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Unit]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Description=alertmanager</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Service]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Restart=on-failure</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ExecStart=/usr/<span class="built_in">local</span>/alertmanager/alertmanager --config.file=/usr/<span class="built_in">local</span>/alertmanager/alertmanager.yml</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [Install]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> WantedBy=multi-user.target</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> OEF</span></span><br><span class="line">[root@rj-bai /usr/local/alertmanager]# systemctl start alertmanager</span><br></pre></td></tr></table></figure><p>现在<code>alertmanager</code>是装完了，需要和<code>prometheus</code>融合一下，需要配置两部分，分别如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9093</span>   <span class="comment">##配置alertmanager地址，我的在本机</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;rules/*.yml&quot;</span>         <span class="comment">##配置告警规则的文件</span></span><br></pre></td></tr></table></figure><p>配置这两项就够了，保存之后创建<code>rules</code>目录，接下来就可以配置告警规则了。</p><h3 id="配置告警规则并邮件通知"><a href="#配置告警规则并邮件通知" class="headerlink" title="配置告警规则并邮件通知"></a>配置告警规则并邮件通知</h3><p>我直接在官方复制过来了一个例子顺便改了改，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus/rules</span>]<span class="comment"># cat example.yml</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exports.rules</span>     <span class="comment">##定义这组告警的组名，同性质的，都是监控实例exports是否开启的模板</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">采集器凉了</span>     <span class="comment">## 告警名称</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span>        <span class="comment">## 告警表达式，监控up指标，如果等于0就进行下面的操作</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span>              <span class="comment">## 持续一分钟为0进行告警</span></span><br><span class="line">    <span class="attr">labels:</span>              <span class="comment">## 定义告警级别</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">ERROR</span></span><br><span class="line">    <span class="attr">annotations:</span>         <span class="comment">## 定义了告警通知怎么写，默认调用了&#123;$labels.instance&amp;$labels.job&#125;的值</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 采集器凉了撒&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> job 名为 <span class="template-variable">&#123;&#123; $labels.job &#125;&#125;</span> 的采集器凉了有一分钟了撒&quot;</span></span><br></pre></td></tr></table></figure><p>每个实例都会有一个<code>up</code>的指标，上面的标签名<code>job</code>都能看到，用<code>sql</code>去查一下，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711145721.png" alt="img"></p><p>采集器在开启状态下返回值就是<code>1</code>，如果采集器出现问题没启动或是什么别的异常都会返回<code>0</code>，<code>0</code>就是代表异常了，所以说白了就是那条规则就是监控所有实例的<code>up</code>指标，如果指标值为<code>0</code>且持续时间超过一分钟我就要告警了，保存吧，直接重启<code>prometheus</code>吧，重启之后可以在<code>web</code>控制台看到你配置的规则了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711152123.png" alt="img"></p><p>emmmm，既然配置完了，验证一下吧，随便关掉一个采集器，等邮件就行了，我把明月三千里的关掉了，然后发现有一条告警处于<code>PENDING</code>状态，他已经准备去通知<code>alertmanager</code>了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711153136.png"></p><p>一分钟之后我收到邮件了，长这样，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711154859.png" alt="20190711154859"></p><p>如果问题没解决他每分钟都会给你发一封邮件，刚刚配置了，发送邮件的等待时间一会会细说一下，我再停一个，我再把<code>docker</code>停了，看看他发出的邮件是什么样的，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711155830.png" alt="img"></p><p>这里两条告警被合并到一个邮件里发出来了，这就是做了分组，如果你有同类告警的，也就是根据<code>alertname </code>去区分的，都会给你合并，<code>mysql&amp;docker</code>被合并到一起了，再看一下他还是支持哪些方式来告警，看<a href="https://prometheus.io/docs/alerting/configuration/">这里</a>吧，拉到最下面可以看到支持微信，丁丁目前是不支持的，有第三方的，我将来会对接企业微信的撒，暂时现用邮件吧，下面看看<code>alertmanager</code>的告警状态吧。</p><h3 id="告警状态"><a href="#告警状态" class="headerlink" title="告警状态"></a>告警状态</h3><p>目前<code>alertmanager</code>告警状态分为三种，如下</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>Inactive</td><td>什么都没有发生</td></tr><tr><td>Pending</td><td>已触发阈值，但未满足告警持续时间，for时间</td></tr><tr><td>Firing</td><td>已触发阈值且满足告警持续时间，通知alertmanager你可以发送告警了</td></tr></tbody></table><p>在这个阶段是有个时间的，并不是出现问题告警会马上发出去，这个时间包含了数据采集时间、告警评估时间，这两个时间是在<code>prometheus</code>中配置的，也就是这里，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> </span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> </span><br></pre></td></tr></table></figure><p>目前是十五秒采集一次数据，评估告警规则时间也是十五秒，这个评估告警规则的时间就是我每隔多长时间要进行一次评估是否到达的阈值了，说白了这东西的目的就是为了减少告警的次数，更加精确的判断当前的状态是不是<code>ok</code>的，下面在看看告警的分配</p><h3 id="告警的分配"><a href="#告警的分配" class="headerlink" title="告警的分配"></a>告警的分配</h3><p>具体告警要怎么去分配，也是在<code>alertmanager</code>中配置的，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;email&#x27;</span></span><br></pre></td></tr></table></figure><p>这就是设置告警的分发策略了，这个<code>route</code>可以拆分成多个子路由，目前所有的告警都会发送到名为<code>email</code>的接收器里面，<code>email</code>接收器的规则也是在配置文件中指定的，也就是这一段，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;email&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xx@xxx.com&#x27;</span></span><br></pre></td></tr></table></figure><p>接收器目前只有一个名为<code>email</code>的，也可以有多个，如果你有什么特殊需求，需要将不同类型的告警发送给不同的人，就需要配置多个接收器去区分了，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">&#x27;smtp.163.com:25&#x27;</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">&#x27;xxx@163.com&#x27;</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">&#x27;xxx@163.com&#x27;</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  <span class="attr">smtp_require_tls:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;default-receiver&#x27;</span>                  <span class="comment">##定义默认接收器名，如果其他的匹配不到走这个</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">4h</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">cluster</span>, <span class="string">alertname</span>]                <span class="comment">##分组设置</span></span><br><span class="line">  <span class="attr">routes:</span>                                       <span class="comment">##子路由</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">&#x27;database-pager&#x27;</span>                  <span class="comment">##定义接收器名字          </span></span><br><span class="line">    <span class="attr">group_wait:</span> <span class="string">10s</span>                             <span class="comment">##分组设置</span></span><br><span class="line">    <span class="attr">match_re:</span>                                   <span class="comment">##正则匹配</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">mysql|cassandra</span>                  <span class="comment">##他会接收标签service值为mysql&amp;&amp;cassandra的告警</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">receiver:</span> <span class="string">&#x27;frontend-pager&#x27;</span>                  <span class="comment">##接收器名</span></span><br><span class="line">    <span class="attr">group_by:</span> [<span class="string">product</span>, <span class="string">environment</span>]            <span class="comment">##分组设置</span></span><br><span class="line">    <span class="attr">match:</span>                                      <span class="comment">##直接匹配</span></span><br><span class="line">      <span class="attr">team:</span> <span class="string">frontend</span>                            <span class="comment">##匹配标签team值为frontend的告警</span></span><br><span class="line"><span class="attr">receivers:</span>                                      <span class="comment">##定义接收器</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;default-receiver&#x27;</span>                      <span class="comment">##接收器名字</span></span><br><span class="line">  <span class="attr">email_configs:</span>                                <span class="comment">##邮件接口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xxx.xx.com&#x27;</span>                            <span class="comment">##接收人，下面以此类推</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;database-pager&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xxx.xx.com&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;frontend-pager&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xxx@.xx.com&#x27;</span></span><br></pre></td></tr></table></figure><p>我就不掩饰了，配置其实很简单，演示很麻烦撒，算了算了，过，下面看一哈告警收敛</p><h3 id="告警收敛"><a href="#告警收敛" class="headerlink" title="告警收敛"></a>告警收敛</h3><p>收敛就是尽量压缩告警邮件的数量，太多了谁都会懵逼，可能有些关键的呗淹没了，<code>alertmanager</code>中有很多收敛机制，最主要的就是分组抑制静默，<code>alertmanager</code>收到告警之后他会先进行分组，然后进入通知队列，这个队列会对通知的邮件进行抑制静默，再根据<code>router</code>将告警路由到不同的接收器，这就是<code>alertmanager</code>收到一个告警后经历的阶段，只是一个大概的情况，下面深入了解一下这几个阶段到底是什么原理怎么去配置，先来简单看一下他们的定义</p><table><thead><tr><th>机制</th><th>说明</th></tr></thead><tbody><tr><td>分组(group)</td><td>将类似性质的告警合并为单个进行通知</td></tr><tr><td>抑制(Inhibition)</td><td>当告警发生后，停止重复发送由此告警引发的其他告警</td></tr><tr><td>静默(Silences)</td><td>是一种简单的特定时间静音提醒的机制</td></tr></tbody></table><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>举个栗子，比如说我在阿里云有<code>10</code>台服务器，但是我忘续费了，结果服务器到期都被停掉了(真实发生过)，这时候<code>node_exports</code>肯定也无法访问了，服务器都停了，这时候普罗米修斯发现这<code>10</code>个服务器都凉了，我要准备通知<code>alertmanager</code>告警了，在不做分组的情况下你的告警媒介会有十条信息发出来，这种情况下我们可以他这些信息合并到一起撒，一条信息列出哪些服务器凉了。</p><p>其实分组设置最开始的时候我就做了，这一段就是设置分组的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span></span><br></pre></td></tr></table></figure><p>这里配置了分组的依据，默认就是<code>alertname</code>，这个名字可以随便写的，做了分组之后他会去匹配你告警时的名字，告警的名字是在这里配置的，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">采集器凉了</span></span><br></pre></td></tr></table></figure><p>如果是相同名字的告警在一定时间内出现多条，这个一定时间指的就是<code>group_wait</code>的时间，那么多条就会合并成一条告警信息发出来，这个之前就配置了，所以在我停掉<code>mysql&amp;docker</code>采集器之后他就把这两条告警合并成一条信息发了出来，也就是这张图，上面贴过了。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190711155830.png" alt="img"></p><p>这两条的告警名字都是采集器凉了撒，而且在十秒钟之内出现了两条，所以就被合并成一条发出来了，分组的目的就是为了减少告警信息的数量，同类告警聚合，所以现在总结一下配置分组的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]  <span class="comment">#根据标签进行alert分组，可以写多个</span></span><br><span class="line"><span class="attr">group_wait:</span> <span class="string">10s</span>          <span class="comment">#发送告警等待时间，</span></span><br><span class="line"><span class="attr">group_interval:</span> <span class="string">10s</span>      <span class="comment">#分组告警信息间隔时间，譬如两组，第一组发送后等待十秒发送第二组</span></span><br><span class="line"><span class="attr">repeat_interval:</span> <span class="string">1m</span>      <span class="comment">#重复发送告警时间，时间不要太短，也不要太长</span></span><br></pre></td></tr></table></figure><h4 id="抑制"><a href="#抑制" class="headerlink" title="抑制"></a>抑制</h4><p>他的主要作用就是消除冗余告警，我们会受到一个关键的告警信息，这个也是在<code>alertmanager</code>中配置的，我标签只留了一个，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span>          </span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    <span class="attr">equal:</span> [<span class="string">&#x27;instance&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这段配置意思就是当我收到一个告警级别为<code>critical</code>时，他就会抑制掉<code>warning</code>这个级别的告警，这个告警等级是在你编写规则的时候定义的，最后一行就是要对哪些告警做抑制，通过标签匹配的，我这里只留了一个<code>instance</code>，举个最简单的例子，当现在<code>alertmanager</code>先收到一条<code>critical</code>、又收到一条<code>warning</code>且<code>instance</code>值一致的两条告警他的处理逻辑是怎样的。</p><p>我现在监控<code>nginx</code>，<code>nginx</code>宕掉的告警级别为<code>warning</code>，宿主机宕掉的告警级别为<code>critical</code>，譬如说现在我跑<code>nginx</code>的服务器凉了，这时候<code>nginx</code>肯定也凉了，普罗米修斯发现后通知<code>alertmanager</code>，普罗米修斯发过来的是两条告警信息，一条是宿主机凉了的，一条是<code>nginx</code>凉了的，<code>alertmanager</code>收到之后，发现告警级别一条是<code>critical</code>，一条是<code>warning</code>，而且<code>instance</code>标签值一致，也就是说这是在一台机器上发生的，所以他就会只发一条<code>critical</code>的告警出来，<code>warning</code>的就被抑制掉了，我们收到的就是服务器凉了的通知，大概就是这样，暂时不演示了。</p><h4 id="静默"><a href="#静默" class="headerlink" title="静默"></a>静默</h4><p>就是一个简单的特定时间静音提醒的机制，主要是使用标签匹配这一批不发送告警，譬如说我某天要对服务器进行维护，可能会涉及到服务器重启，在这期间肯定会有<code>N</code>多告警发出来，所以你可以子啊这期间配置一个静默，这类的告警就不要发了，我知道发生了啥子事情，配置静默就很简单了，直接在<code>web</code>页面配置就行了，<code>9093</code>端口，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715113322.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715113602.png" alt="img"></p><p>选择开始时间结束时间，通过标签匹配去做，我匹配了<code>job=docker</code>的机器，创建，所以我先在把容器采集器停掉也不会有告警出来了，我就不停了，就是这样配置，比较简单，扯了一堆，是时候自己写一个告警规则了，结合上面一切的东西。</p><h2 id="编写告警规则栗子"><a href="#编写告警规则栗子" class="headerlink" title="编写告警规则栗子"></a>编写告警规则栗子</h2><p>来监控内存吧，内存使用率超过<code>80</code>我就要告警了，还是先需要写<code>sql</code>，把我想要的值查出来，所以要查当前内存使用率大于百分之八十的<code>sql</code>如下，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_memory_MemTotal_bytes - node_memory_MemFree_bytes - node_memory_Buffers_bytes - node_memory_Cached_bytes) / (node_memory_MemTotal_bytes )* 100 &gt; 80</span><br></pre></td></tr></table></figure><p>下面就是要写规则了，我写的规则如下，顺便把之前的规则也改了一下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus/rules</span>]<span class="comment"># cat memory.yml </span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">memeory_rules</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">内存炸了</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">(node_memory_MemTotal_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_MemFree_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_Buffers_bytes</span> <span class="bullet">-</span> <span class="string">node_memory_Cached_bytes)</span> <span class="string">/</span> <span class="string">(node_memory_MemTotal_bytes</span> <span class="string">)*</span> <span class="number">100</span> <span class="string">&gt;</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">warning</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 内存炸了&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 内存炸了，当前使用率为 <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>这样就可以了撒，我又把明月三千里加入到监控，也就是安装了<code>node_exports</code>，现在也能正常获取到使用率了，下面试试上面提到的那个告警分配，我要把明月三千里的告警信息发送到我另一个邮箱，<code>job</code>名字<code>mysql</code>，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">  <span class="attr">static_configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.126:9104&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.126:9100&#x27;</span>]</span><br></pre></td></tr></table></figure><p>重启一下撒，能看到这些，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715142721.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715143146.png" alt="img"></p><p>然后去配置一下告警的分配，我要把关于明月三千里的告警发送到另一个邮箱，所以这里改了一哈，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">&#x27;default-receiver&#x27;</span></span><br><span class="line">  <span class="attr">routes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group_by:</span> [<span class="string">&#x27;mysql&#x27;</span>]</span><br><span class="line">      <span class="attr">group_wait:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">group_interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">repeat_interval:</span> <span class="string">5m</span></span><br><span class="line">      <span class="attr">receiver:</span> <span class="string">&#x27;mysql-pager&#x27;</span></span><br><span class="line">      <span class="attr">match_re:</span></span><br><span class="line">        <span class="attr">job:</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;default-receiver&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xxx@xx.com&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;mysql-pager&#x27;</span></span><br><span class="line">  <span class="attr">email_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">&#x27;xxx@xx.cn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">source_match:</span>          </span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;critical&#x27;</span></span><br><span class="line">    <span class="attr">target_match:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    <span class="attr">equal:</span> [<span class="string">&#x27;instance&#x27;</span>]</span><br></pre></td></tr></table></figure><p>所以一会收到明月三千里的邮件是我<code>cn</code>的邮箱，这样就可以了撒，重启<code>alertmanager</code>，为了让他发出告警邮件，我调一下阈值，改为百分之<code>20</code>，所以我<code>com</code>收到的邮件如下，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715150334.png" alt="img"></p><p><code>cn</code>收到的邮件如下</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715150419.png" alt="img"></p><p>然后再试一下抑制，我再加一个监控项，我要监控<code>TCP</code>连接数，状态是<code>ESTABLISHED</code>的，超过<code>300</code>我就要告警了，定义告警级别为<code>critical</code>，所以<code>rule</code>文件如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@rj-bai</span> <span class="string">/usr/local/prometheus/rules</span>]<span class="comment"># cat tcp-established.yml </span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-established_rules</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">TCP连接数过高</span></span><br><span class="line">    <span class="attr">expr:</span> <span class="string">node_sockstat_TCP_alloc</span> <span class="string">&gt;</span> <span class="number">300</span> </span><br><span class="line">    <span class="attr">for:</span> <span class="string">1m</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">    <span class="attr">annotations:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> TCP连接数过高&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> TCP连接数过高，当前连接数 <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>重启后看页面，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715160750.png" alt="img"></p><p>有三条告警已经进入<code>Pending</code>状态了，没意外的话<code>cn</code>邮箱只有一条告诉你连接数过高的告警信息发出来了，内存使用率过高的就会被抑制，看一下，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715161059.png" alt="img"></p><p>所以这条已经被抑制了，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715161644.png" alt="img"></p><p><code>248</code>服务器不受影响，<code>com</code>邮箱还是会收到内存炸了的告警，</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/20190715161714.png" alt="img"></p><p>就是这样撒，你想编写其他的告警规则流程和上面是一样的，告警的分配和抑制不是必需的，自行琢磨吧，下一篇准备重写<code>K8S</code>监控方面的东西，了解这些东西之后之后就应该很简单了撒，本篇就这样，过。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK-Nginx日志分析及绘图</title>
      <link href="/posts/44280/"/>
      <url>/posts/44280/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>先上一张整体的效果图：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171756743-1335980347.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171756743-1335980347.png" alt="img"></a></p><p>上面这张图就是通过 ELK 分析 nginx 日志所得到的数据，通过 kibana 的功能展示出来的效果图。是不是这样对日志做了解析，想要知道的数据一目了然。接下来就是实现过程实录。</p><h2 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2. 实现过程"></a>2. 实现过程</h2><p>通过上一篇：<a href="https://www.kococ.cn/20200924/cid=619.html">ELK 部署文档</a> 已经对 ELK + filebeat 获取 nginx 做了详细的配置介绍，这里重点就不在安装 ELK 上面了。 下面这边的内容，主要是针对 logstash 配置文件的编写和 kibana web界面的配置。</p><p>主机信息在申明下，和上一篇一样：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914165802139-1352161924.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914165802139-1352161924.png" alt="img"></a></p><h3 id="2-1-nginx-日志格式编写"><a href="#2-1-nginx-日志格式编写" class="headerlink" title="2.1 nginx 日志格式编写"></a>2.1 nginx 日志格式编写</h3><p>在编写logstash 文件之前，得有一个标准输入输出格式，这个格式通用的就是 json 格式。</p><p>首先，考虑如何才能获取 json 格式的日志，当然可以直接通过修改 nginx 日志的格式来实现，因此开始修改 nginx 日志格式。如果获取的日志无法修改json 格式，则可以通过正则表达式来匹配。</p><p>在nginx 配置文件中添加如下日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">…</span><br><span class="line">    log_format main_json &#39;&#123;&quot;domain&quot;:&quot;$server_name&quot;,&#39;</span><br><span class="line">    &#39;&quot;http_x_forwarded_for&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">    &#39;&quot;time_local&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">    &#39;&quot;request&quot;:&quot;$request&quot;,&#39;</span><br><span class="line">    &#39;&quot;request_body&quot;:&quot;$request_body&quot;,&#39;</span><br><span class="line">    &#39;&quot;status&quot;:$status,&#39;</span><br><span class="line">    &#39;&quot;body_bytes_sent&quot;:&quot;$body_bytes_sent&quot;,&#39;</span><br><span class="line">    &#39;&quot;http_referer&quot;:&quot;$http_referer&quot;,&#39;</span><br><span class="line">    &#39;&quot;upstream_response_time&quot;:&quot;$upstream_response_time&quot;,&#39;</span><br><span class="line">    &#39;&quot;request_time&quot;:&quot;$request_time&quot;,&#39;</span><br><span class="line">    &#39;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#39;</span><br><span class="line">    &#39;&quot;upstream_addr&quot;:&quot;$upstream_addr&quot;,&#39;</span><br><span class="line">    &#39;&quot;upstream_status&quot;:&quot;$upstream_status&quot;&#125;&#39;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">….</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的这个nginx 日志格式叫 main_json 后面的配置文件，都可以引用这个日志格式。除了nginx 日志参数以外，还可以通过配置文件来自行添加自定义参数，比如 获取用户的真实ip</p><p>于是编写一个自定义变量的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; vim &#x2F;etc&#x2F;nginx&#x2F;location.conf&#96; &#96; set $real_ip $remote_addr;&#96;&#96;if&#96; &#96;( $http_x_forwarded_for ~ &#96;&#96;&quot;^(\d+\.\d+\.\d+\.\d+)&quot;&#96; &#96;) &#123;&#96;&#96;    &#96;&#96;set&#96; &#96;$real_ip $1;&#96;&#96;&#125;</span><br></pre></td></tr></table></figure><p>这个配置文件只是为了获取用户的真实IP，变量名为： real_ip 需要在nginx.conf 中引用，在刚才的配置文件中也加入该变量，完整日志格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log_format main_json &#39;&#123;&quot;domain&quot;:&quot;$server_name&quot;,&#39;</span><br><span class="line">&#39;&quot;real_ip&quot;:&quot;$real_ip&quot;,&#39;</span><br><span class="line">&#39;&quot;http_x_forwarded_for&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">&#39;&quot;time_local&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">&#39;&quot;request&quot;:&quot;$request&quot;,&#39;</span><br><span class="line">&#39;&quot;request_body&quot;:&quot;$request_body&quot;,&#39;</span><br><span class="line">&#39;&quot;status&quot;:$status,&#39;</span><br><span class="line">&#39;&quot;body_bytes_sent&quot;:&quot;$body_bytes_sent&quot;,&#39;</span><br><span class="line">&#39;&quot;http_referer&quot;:&quot;$http_referer&quot;,&#39;</span><br><span class="line">&#39;&quot;upstream_response_time&quot;:&quot;$upstream_response_time&quot;,&#39;</span><br><span class="line">&#39;&quot;request_time&quot;:&quot;$request_time&quot;,&#39;</span><br><span class="line">&#39;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#39;</span><br><span class="line">&#39;&quot;upstream_addr&quot;:&quot;$upstream_addr&quot;,&#39;</span><br><span class="line">&#39;&quot;upstream_status&quot;:&quot;$upstream_status&quot;&#125;&#39;;</span><br></pre></td></tr></table></figure><p>注释掉该行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main;</span><br></pre></td></tr></table></figure><p>接下来，编写一个nginx 配置文件 端口为 9527 作为测试使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;server_9527.conf&#96;&#96;server &#123;&#96;&#96;  &#96;&#96;listen 9527;&#96;&#96;  &#96;&#96;server_name localhost;&#96;&#96;  &#96;&#96;include location.conf;&#96;&#96;  &#96;&#96;location &#x2F; &#123;&#96;&#96;    &#96;&#96;root &#96;&#96;&#x2F;www&#x2F;9527&#x2F;&#96;&#96;;&#96;&#96;    &#96;&#96;index index.html;&#96;&#96;    &#96;&#96;access_log &#96;&#96;&#x2F;www&#x2F;log&#x2F;access&#96;&#96;.log main_json;&#96;&#96;    &#96;&#96;error_log &#96;&#96;&#x2F;www&#x2F;log&#x2F;error&#96;&#96;.log;&#96;&#96;  &#96;&#96;&#125;&#96;&#96;  &#96;&#96;location &#96;&#96;&#x2F;shop&#96; &#96;&#123;&#96;&#96;    &#96;&#96;root &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;;&#96;&#96;    &#96;&#96;access_log &#96;&#96;&#x2F;www&#x2F;log&#x2F;shop_access&#96;&#96;.log main_json;&#96;&#96;    &#96;&#96;error_log &#96;&#96;&#x2F;www&#x2F;log&#x2F;shop_error&#96;&#96;.log;&#96;&#96;  &#96;&#96;&#125;&#96;&#96;&#125;&#96; &#96;[root@192.168.118.16 ~]&#96;&#96; mkdir -p &#x2F;www&#x2F;&#123;9527,log&#125;&#96;&#96;[root@192.168.118.16 ~]&#96;&#96; cd &#x2F;www&#x2F;9527&#x2F;&#96;&#96;[root@192.168.118.16 &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;]&#96;&#96; vim index.html&#96;&#96;hello, 9527&#96;&#96;[root@192.168.118.16 &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;]&#96;&#96; mkdir -pv &#x2F;www&#x2F;9527&#x2F;shop&#96;&#96;[root@192.168.118.16 &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;]&#96;&#96; vim &#x2F;www&#x2F;9527&#x2F;shop&#x2F;index.html&#96;&#96;出售9527&#96; &#96;[root@192.168.118.16 &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;]&#96;&#96; nginx -t&#96;&#96;[root@192.168.118.16 &#96;&#96;&#x2F;www&#x2F;9527&#96;&#96;]&#96;&#96; nginx -s reload</span><br></pre></td></tr></table></figure><p>Nginx 配置完成，重新加载，访问测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; curl http:&#x2F;&#x2F;192.168.118.16:9527&#x2F;index.html&#96;&#96;hello, 9527&#96;&#96;[root@192.168.118.16 ~]&#96;&#96; curl http:&#x2F;&#x2F;192.168.118.16:9527&#x2F;shop&#x2F;index.html&#96;&#96;出售9527</span><br></pre></td></tr></table></figure><p>页面访问正常，查看日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; ll -tsh &#x2F;www&#x2F;log&#x2F;&#96;&#96;total 8.0K&#96;&#96;4.0K -rw-r--r-- 1 root root 346 Sep 14 14:35 shop_access.log&#96;&#96;4.0K -rw-r--r--. 1 root root 341 Sep 14 14:35 access.log&#96;&#96;  &#96;&#96;0 -rw-r--r--. 1 root root  0 Sep 14 14:35 error.log&#96;&#96;  &#96;&#96;0 -rw-r--r-- 1 root root  0 Sep 14 14:34 shop_error.log</span><br></pre></td></tr></table></figure><p> 日志文件已生成，查看日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; cat &#x2F;www&#x2F;log&#x2F;access.log&#96;&#96;&#123;&#96;&#96;&quot;domain&quot;&#96;&#96;:&#96;&#96;&quot;localhost&quot;&#96;&#96;,&#96;&#96;&quot;real_ip&quot;&#96;&#96;:&#96;&#96;&quot;&quot;&#96;&#96;,&#96;&#96;&quot;http_x_forwarded_for&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;,&#96;&#96;&quot;time_local&quot;&#96;&#96;:&#96;&#96;&quot;2019-09-14T14:35:11+08:00&quot;&#96;&#96;,&#96;&#96;&quot;request&quot;&#96;&#96;:&#96;&#96;&quot;GET &#x2F;index.html HTTP&#x2F;1.1&quot;&#96;&#96;,&#96;&#96;&quot;request_body&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;,&#96;&#96;&quot;status&quot;&#96;&#96;:200,&#96;&#96;&quot;body_bytes_sent&quot;&#96;&#96;:&#96;&#96;&quot;12&quot;&#96;&#96;,&#96;&#96;&quot;http_referer&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;,&#96;&#96;&quot;upstream_response_time&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;,&#96;&#96;&quot;request_time&quot;&#96;&#96;:&#96;&#96;&quot;0.000&quot;&#96;&#96;,&#96;&#96;&quot;http_user_agent&quot;&#96;&#96;:&#96;&#96;&quot;curl&#x2F;7.29.0&quot;&#96;&#96;,&#96;&#96;&quot;upstream_addr&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;,&#96;&#96;&quot;upstream_status&quot;&#96;&#96;:&#96;&#96;&quot;-&quot;&#96;&#96;&#125;</span><br></pre></td></tr></table></figure><p> 定义的 json 格式已经被引用到，nginx日志格式配置完成，接下来就是 通过filebeat 将nginx 日志传递给 logstash</p><h3 id="2-2-filebeat-传输-nginx-日志"><a href="#2-2-filebeat-传输-nginx-日志" class="headerlink" title="2.2 filebeat 传输 nginx 日志"></a>2.2 filebeat 传输 nginx 日志</h3><p>这里在上一篇的基础上做修改，直接修改 filebeat 配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; vim &#x2F;etc&#x2F;filebeat&#x2F;modules.d&#x2F;nginx.yml</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170056822-999219778.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170056822-999219778.png" alt="img"></a></p><p>重启 filebeat 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.16 ~]&#96;&#96; systemctl restart filebeat</span><br></pre></td></tr></table></figure><h3 id="2-3-logstash-配置文件编写"><a href="#2-3-logstash-配置文件编写" class="headerlink" title="2.3 logstash 配置文件编写"></a>2.3 logstash 配置文件编写</h3><p>通过上面的步骤，filebeat 已经将 nginx 日志传输过来了，接下来就看 logstash 要怎么接收日志数据了，还是通过循序渐进的方式来编写。</p><p>首先将日志数据打印到屏幕，保证数据的正确性。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170146062-105485249.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170146062-105485249.png" alt="img"></a></p><p>从 nginx.conf 启动 logstash。通过浏览器访问 nginx 9527端口产生日志数据。</p><p>这里启动 logstash 可以添加 修改自动重载的模式，这样当修改了 nginx.conf 时，不必频繁的去关闭重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192.168.118.15 &#96;&#96;&#x2F;etc&#x2F;logstash&#x2F;conf&#96;&#96;.d]&#96;&#96; logstash -f nginx.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>通过抓取一段 json 数据，分析下：</p><p>logstash 输出内容</p><p>这里面数据很多，但是这里的有些数据不是必要的，应该保留需要的数据，而剔除没必要的数据，使 json 看起来更加简洁。</p><p>首先来查看这段 json ，发现真正的 nginx 日志数据都存在 message 里面，其他的都是一些主机服务相关的信息，但是 message 看起来乱糟糟的，简直没法看。既然采用的 json 格式，那就能够格式化。</p><p>修改配置文件如下：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170309225-1319713742.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170309225-1319713742.png" alt="img"></a></p><p>logstash 输出内容</p><p>将这两次获取的数据进行一个对比，下面这个数据 message 被删除了，但是 message 中的每个字段都独立出来了。这样的好处：</p><p>　　（1）日志信息更加清晰，能够准确的定位到某一个字段；</p><p>　　（2）为后面存储到 elasticsearch 中，进行查询或者筛选做好了准备。</p><p>上面这个操作就等于是将原来的 message 分列存放了。</p><p>上面这个json 发现有两个时间：</p><p>　　@timestamp - 格林尼治时间 - logstash 获取日志时间</p><p> 　Time_local - 东八区时间 - nginx日志记录时间</p><p>这两个时间的 分钟和秒钟并不一致，而后面过滤日志采用的是 @timestamp 时间，也就是 logstash 时间，这就会造成 nginx 日志时间不准确的现象，因此需要将两个时间修改为一致。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170415825-1466620540.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170415825-1466620540.png" alt="img"></a></p><p>logstash 输出内容</p><p>现在，对比两个时间的分钟 和秒钟，完全一致了。接下来，删除一些不必要的字段，并重命名一些字段名，修改配置文件如下：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170447494-320560085.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170447494-320560085.png" alt="img"></a></p><p>logstash 输出内容</p><p>经过重命名和删除没有的字段，json 也变的精简了很多，这样存储 elasticsearch 消耗的存储空间也响应的变小了。</p><p>接下来就可以将数据写入到 elasticsearch 中了。在这之前，做的都是 access.log，压根就没考虑到 error.log 的格式，因为 nginx 中 error.log 日志格式无法自定义。</p><p>尝试访问一个错误uri 来查看下获取到的数据：</p><p>logstash 输出内容</p><p>error.log 过来的数据就变成上面这个样子了。这又是个问题，做 ELK 一是为了分析数据，二是为了尽快排错，如果 ELK 连这个都做不到，那就有点鸡肋了。</p><p>上面的这个格式看起来又是很乱了，nginx 错误日志都在 message 中，虽然nginx 错误日志无法定义格式，但是 logstash 可以通过正则表达式来将它转换为 json 格式。但在这之前，应该考虑，access.log 和 error.log 是两种不同的格式，不能用同一种方式去匹配。那怎么判断数据是来自 access.log 还是 error.log 呢？</p><p>这里语法肯定是想到了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If … &#123;&#96;&#96;Access.log&#96;&#96;&#125; elseif … &#123;&#96;&#96;Error.log&#96;&#96;&#125;</span><br></pre></td></tr></table></figure><p> 对，语法没错，但是用什么条件呢？查看上面的日志，不难发现每次都有这样的字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access.log 日志数据：&#96;&#96;      &#96;&#96;&quot;fileset&quot;&#96; &#96;&#x3D;&gt; &#123;&#96;&#96;    &#96;&#96;&quot;module&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;nginx&quot;&#96;&#96;,&#96;&#96;     &#96;&#96;&quot;name&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;access&quot;&#96; &#96;error.log 日志数据：&#96;&#96;    &#96;&#96;&quot;fileset&quot;&#96; &#96;&#x3D;&gt; &#123;&#96;&#96;    &#96;&#96;&quot;module&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;nginx&quot;&#96;&#96;,&#96;&#96;     &#96;&#96;&quot;name&quot;&#96; &#96;&#x3D;&gt; &#96;&#96;&quot;error&quot;</span><br></pre></td></tr></table></figure><p>这样，就有判断的依据了，根据logstash配置语法开始写：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170627274-1480014623.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170627274-1480014623.png" alt="img"></a></p><p>到目前为止，logstash 的 nginx 日志收集过滤配置文件如下：</p><p>配置文件名：nginx.conf</p><p>nginx.conf</p><p>测试 access.log 日志格式数据：</p><p>logstash 输出内容</p><p>测试 error.log 日志格式数据：</p><p>logstash 输出内容</p><p>这下没问题了， 两种格式的数据都获取到了。接下来就将数据写入到 elasticsearch中。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170756327-915369456.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170756327-915369456.png" alt="img"></a></p><p>到目前为止，logstash 配置文件 nginx.conf 如下：</p><p>nginx.conf</p><p>这个配置也算是本次 nginx 最终版配置了。</p><p>使用浏览器多次访问nginx 9527 端口，然后切换到 elasticsearch-head 查看索引是否创建成功。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170831161-1371655326.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170831161-1371655326.png" alt="img"></a></p><p> ok，已经看到今天的索引创建成功，查看数据。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170839396-1643090650.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170839396-1643090650.png" alt="img"></a></p><p>数据也是没有问题的，切换到 kibana 添加索引。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170848522-1424711383.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170848522-1424711383.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170858050-1439014079.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170858050-1439014079.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170902088-655673391.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170902088-655673391.png" alt="img"></a></p><p>ok，目前已经将数据存储到 elasticsearch 并通过 kibana 展示出来了，但是想要更清晰的分析查看数据还需要在 kibana 上下一番功夫。</p><h3 id="2-4-kibana-展示-https-www-cnblogs-com-hukey-p-11519612-html-1813218387"><a href="#2-4-kibana-展示-https-www-cnblogs-com-hukey-p-11519612-html-1813218387" class="headerlink" title="2.4 kibana 展示[ ](https://www.cnblogs.com/hukey/p/11519612.html 1813218387)"></a>2.4 kibana 展示[ ](<a href="https://www.cnblogs.com/hukey/p/11519612.html">https://www.cnblogs.com/hukey/p/11519612.html</a> 1813218387)</h3><p>首先是 Discover 这里，每次进来，都需要一目了然的查看日志，做以下配置：</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170918203-1826275736.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170918203-1826275736.png" alt="img"></a></p><p> <a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170923063-911065831.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170923063-911065831.png" alt="img"></a></p><p>上面两个设置以后，每次登录进来只需要点击 打开 查看相关模板就能看到清晰的日志数据。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914170934181-472655354.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914170934181-472655354.png" alt="img"></a></p><p>接下来，就是绘制最上面那副图啦。</p><p>在绘制之前必须要有数据支撑，因为这个是测试环境没有真是的用户访问。因此需要造一批假数据访问。</p><p>方法就是 直接去 access.log 里复制一条数据，修改 real_ip 为 公网ip</p><p>假数据添加成功后，来进行图表的配置，点击 可视化</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171008460-526233651.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171008460-526233651.png" alt="img"></a></p><p>第一个：访问省会城市 TOP 5 （饼图）</p><p>选择饼图，然后选择 logstash-nginx-* 索引</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171025923-579239111.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171025923-579239111.png" alt="img"></a></p><p>完成后点击保存。</p><p>第二个：访问分布地图（坐标地图）</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171056562-1145989517.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171056562-1145989517.png" alt="img"></a></p><p> 完成后点击保存。</p><p>第三个：域名TOP5 （数据表）</p><p> <a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171117412-2106656346.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171117412-2106656346.png" alt="img"></a></p><p> 完成后点击保存。</p><p>第四个：后端服务TOP5（数据表）</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171137657-803006825.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171137657-803006825.png" alt="img"></a></p><p>完成后点击保存。</p><p>第五个：uri top 5（数据表）</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171158766-897281550.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171158766-897281550.png" alt="img"></a></p><p>完成后点击保存。</p><p>第六个：realipTOP5 （水平条形图）</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171224021-218490679.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171224021-218490679.png" alt="img"></a></p><p>完成后点击保存。</p><p>第七个：http状态TOP5 （饼图）</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171315469-1780001853.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171315469-1780001853.png" alt="img"></a></p><p>完成后点击保存。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171337035-743648824.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171337035-743648824.png" alt="img"></a></p><p>好了， 在 可视化 一栏中，创建了 7 个数据表图，点开 仪表板，将这些图表展示出来就行了。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171349921-1797704129.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171349921-1797704129.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171357047-1867714541.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171357047-1867714541.png" alt="img"></a></p><p>然后将图表摆放好，大功告成。</p><p><a href="https://img2018.cnblogs.com/blog/828019/201909/828019-20190914171408307-1023715408.png"><img src="https://cdn.jsdelivr.net/gh/kococ/TYPECHO_IMG/mu77/828019-20190914171408307-1023715408.png" alt="img"></a></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 性能、统计、分析、优化，常用的命令</title>
      <link href="/posts/6935/"/>
      <url>/posts/6935/</url>
      
        <content type="html"><![CDATA[<h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><p>显示当前时间、系统已经运行多长时间，当前有多少用户登录，过去一段时间平均负载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# uptime </span><br><span class="line"> 14:03:56 up 48 days, 15:25,  1 user,  load average: 0.16, 0.42, 0.25</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>仅显示nginx进程可以输入 ps -C nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ps -C nginx</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">23549 ?        00:00:00 nginx</span><br><span class="line">23550 ?        00:00:00 nginx</span><br></pre></td></tr></table></figure><blockquote><p>仅显示nginx进程ID，可以输入 ps -C nginx -o pid（必须小写）=</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ps -C nginx -o pid&#x3D;</span><br><span class="line">23549</span><br><span class="line">23550</span><br></pre></td></tr></table></figure><blockquote><p>查看线程信息， ps -L PID</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ps -C nginx -o pid&#x3D;</span><br><span class="line">23549</span><br><span class="line">23550</span><br></pre></td></tr></table></figure><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>以树形结构显示运行的进程，部署软件时可以看到具体运行的哪一步，哪一个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# pstree -p</span><br><span class="line">systemd(1)─┬─AliYunDun(9334)─┬─&#123;AliYunDun&#125;(9335)</span><br><span class="line">           │                 ├─&#123;AliYunDun&#125;(9336)</span><br><span class="line">           │                 ├─&#123;AliYunDun&#125;(9352)</span><br><span class="line">           │                 ├─&#123;AliYunDun&#125;(9353)</span><br><span class="line">           ├─AliYunDunUpdate(8252)─┬─&#123;AliYunDunUpdate&#125;(8253)</span><br><span class="line">           │                       ├─&#123;AliYunDunUpdate&#125;(8254)</span><br><span class="line">           │                       └─&#123;AliYunDunUpdate&#125;(8256)</span><br></pre></td></tr></table></figure><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>显示内存区域中使用了多少内存 free -ml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# free -ml</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1839         416         353          96        1069        1124</span><br><span class="line">Low:           1839        1485         353</span><br><span class="line">High:             0           0           0</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><blockquote><p>查看 /proc/buddyinfo 还可以确定每个区域内有多少内存块可用，每一列的数量意味着可用的分页数量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# cat &#x2F;proc&#x2F;buddyinfo </span><br><span class="line">Node 0, zone      DMA     27     15     15     10      5      2      3      3      0      2      0 </span><br><span class="line">Node 0, zone    DMA32     25    636   1349   1147    896    587    338    141      0      0      0 </span><br></pre></td></tr></table></figure><h3 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h3><p>显示在多处理器服务器上每个可用CPU的相关统计信息，从CPU0开始。还会报告所有CPU的全局平均活动，mpstat工具是sysstat软件包的一部分</p><p>每隔1s采集一次数据，共采集4次： mpstat 1（interval） 4（count）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# mpstat 1 4</span><br><span class="line">Linux 3.10.0-514.26.2.el7.x86_64 (Email)     04&#x2F;15&#x2F;2020  _x86_64_    (1 CPU)</span><br><span class="line"></span><br><span class="line">02:26:25 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">02:26:26 PM  all    0.99    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   98.02</span><br><span class="line">02:26:27 PM  all    1.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   98.99</span><br><span class="line">02:26:28 PM  all    1.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   98.00</span><br><span class="line">02:26:29 PM  all    0.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00   99.00</span><br><span class="line">Average:     all    0.75    0.00    0.75    0.00    0.00    0.00    0.00    0.00    0.00   98.50</span><br></pre></td></tr></table></figure><blockquote><p>对于多处理器可以加 -P 选择CPU，如选择CPU0，mpstat -P 0 1 4</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# mpstat -P 0 1 4</span><br><span class="line">Linux 3.10.0-514.26.2.el7.x86_64 (Email)     04&#x2F;15&#x2F;2020  _x86_64_    (1 CPU)</span><br><span class="line"></span><br><span class="line">02:29:08 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">02:29:09 PM    0    0.00    0.00    1.01    0.00    0.00    0.00    0.00    0.00    0.00   98.99</span><br><span class="line">02:29:10 PM    0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class="line">02:29:11 PM    0    1.01    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   98.99</span><br><span class="line">02:29:12 PM    0    0.99    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00   98.02</span><br><span class="line">Average:       0    0.50    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   98.99</span><br></pre></td></tr></table></figure><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><p>用来报告关于进程，内存，分页，块IO，中断，CPU活动信息<br>vmstat 1(每隔1s输出)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 2  0      0 360320 109288 990168    0    0  4535    58    7    6  3  1 93  3  0</span><br><span class="line"> 0  0      0 360180 109288 990200    0    0     0     0  375 1065  1  0 99  0  0</span><br><span class="line"> 0  0      0 360180 109288 990200    0    0     0     0  326  994  1  1 98  0  0</span><br><span class="line"> 0  0      0 360180 109288 990200    0    0     0     0  334 1014  1  0 99  0  0</span><br><span class="line"> 0  0      0 360180 109288 990200    0    0     0     0  338 1018  0  1 99  0  0</span><br><span class="line"> 0  0      0 360180 109288 990200    0    0     0     0  330 1002  1  0 99  0  0</span><br><span class="line"> 0  0      0 360180 109296 990196    0    0     0    20  374 1072  1  1 97  1  0</span><br><span class="line"> 0  0      0 360180 109296 990204    0    0     0     0  343 1017  0  0 100  0  0</span><br><span class="line"> 0  0      0 360180 109296 990204    0    0     0     0  346 1030  1  1 98  0  0</span><br><span class="line">...........</span><br></pre></td></tr></table></figure><p>第一行产生的报告是自上次重启之后的平均值</p><blockquote><p>以磁盘模式输出 vmstat -d 1 1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# vmstat -d 1 1</span><br><span class="line">disk- ------------reads------------ ------------writes----------- -----IO------</span><br><span class="line">       total merged sectors      ms  total merged sectors      ms    cur    sec</span><br><span class="line">vda   245180755 290549 37927585746 2125938376 5820122 5747763 482611704 66760652      0 133137</span><br></pre></td></tr></table></figure><blockquote><p>以分区模式输出 vmstat -p /dev/sda1 1 10</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# vmstat -p &#x2F;dev&#x2F;vda1 1 4</span><br><span class="line">vda1          reads   read sectors  writes    requested writes</span><br><span class="line">           245180653 37927582522    5738051  482612272</span><br><span class="line">           245180653 37927582522    5738051  482612272</span><br><span class="line">           245180653 37927582522    5738051  482612272</span><br><span class="line">           245180653 37927582522    5738051  482612272</span><br></pre></td></tr></table></figure><h3 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h3><p>显示所有 TCP socket ：ss -t -a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ss -t -a</span><br><span class="line">State       Recv-Q Send-Q                   Local Address:Port                                    Peer Address:Port                </span><br><span class="line">LISTEN      0      50                                   *:mysql                                              *:*                    </span><br><span class="line">LISTEN      0      511                                  *:http                                               *:*                    </span><br><span class="line">LISTEN      0      128                                  *:ssh                                                *:*                    </span><br><span class="line">LISTEN      0      1024                         127.0.0.1:socks                                              *:*                    </span><br><span class="line">LISTEN      0      1                            127.0.0.1:mxi                                                *:*  </span><br></pre></td></tr></table></figure><blockquote><p>显示所有 UDP socket ： ss -u -a</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">State       Recv-Q Send-Q                   Local Address:Port                                    Peer Address:Port                </span><br><span class="line">UNCONN      0      0                            127.0.0.1:socks                                              *:*                    </span><br><span class="line">UNCONN      0      0                                    *:bootpc                                             *:*                    </span><br><span class="line">UNCONN      0      0                         172.24.54.44:ntp                                                *:*                    </span><br><span class="line">UNCONN      0      0                            127.0.0.1:ntp                                                *:*                    </span><br><span class="line">UNCONN      0      0                                    *:ntp                                                *:*      </span><br></pre></td></tr></table></figure><blockquote><p>显示已经建立的ssh连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ss -o state established sport &#x3D; :22</span><br><span class="line">Netid Recv-Q Send-Q                      Local Address:Port                                       Peer Address:Port                </span><br><span class="line">tcp   0      248                          172.24.54.44:ssh                                       88.91.42.228:5552                  timer:(on,197ms,0)</span><br></pre></td></tr></table></figure><h3 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h3><p>用来收集、报告、保存系统活动信息，sysstat包的一部分<br>一般来说，系统已经默认为我们准备好了自动化作业 /etc/cron.d/sysstat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# cat &#x2F;etc&#x2F;cron.d&#x2F;sysstat </span><br><span class="line"># Run system activity accounting tool every 10 minutes</span><br><span class="line">*&#x2F;10 * * * * root &#x2F;usr&#x2F;lib64&#x2F;sa&#x2F;sa1 1 1</span><br><span class="line"># 0 * * * * root &#x2F;usr&#x2F;lib64&#x2F;sa&#x2F;sa1 600 6 &amp;</span><br><span class="line"># Generate a daily summary of process accounting at 23:53</span><br><span class="line">53 23 * * * root &#x2F;usr&#x2F;lib64&#x2F;sa&#x2F;sa2 -A</span><br></pre></td></tr></table></figure><blockquote><p>提取15号的磁盘信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@Email ~]# sar -f &#x2F;var&#x2F;log&#x2F;sa&#x2F;sa15 （saX X为统计时的日期） -d</span><br></pre></td></tr></table></figure><p>sar命令作用很多，可以参考其他博客</p><h3 id="numastat"><a href="#numastat" class="headerlink" title="numastat"></a>numastat</h3><p>为进程和操作系统显示每个NUMA节点的内存统计信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# numastat </span><br><span class="line">                           node0</span><br><span class="line">numa_hit              8549224367</span><br><span class="line">numa_miss                      0</span><br><span class="line">numa_foreign                   0</span><br><span class="line">interleave_hit             14087</span><br><span class="line">local_node            8549224367</span><br><span class="line">other_node                     0</span><br></pre></td></tr></table></figure><h3 id="pmap"><a href="#pmap" class="headerlink" title="pmap"></a>pmap</h3><p>用来报告一个进程或多个进程的内存映射，可以使用这个工具确定系统是如何为服务器上的进程分配内存的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ps -C nginx</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">23549 ?        00:00:00 nginx</span><br><span class="line">23550 ?        00:00:00 nginx</span><br><span class="line"></span><br><span class="line">[root@Email ~] # pmap -d 23549 23549:   nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx Address           Kbytes Mode  Offset           Device    Mapping 00007f7989c1f000      20 r-x-- 0000000000000000 0fd:00001 nginx.so 00007f7989c24000    2048 ----- 0000000000005000 0fd:00001 nginx.so 00007f7989e26000     152 r-x-- 0000000000000000 0fd:00001 ngx_stream_module.so 00007f7989e4c000    2044 ----- 0000000000026000 0fd:00001 ngx_stream_module.so 00007f798a04b000       4 r---- 0000000000025000 0fd:00001 ngx_stream_module.so ...... 00007ffde65e7000       8 r-x-- 0000000000000000 000:00000   [ anon ] ffffffffff600000       4 r-x-- 0000000000000000 000:00000   [ anon ] mapped: 120900K    writeable&#x2F;private: 2448K    shared: 4K </span><br></pre></td></tr></table></figure><h3 id="tcpdump-和-wireshark"><a href="#tcpdump-和-wireshark" class="headerlink" title="tcpdump 和 wireshark"></a>tcpdump 和 wireshark</h3><p>用来捕捉和分析流量的两个工具，在linux下使用libpcap库可以捕获数据包</p><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><p>捕获http数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# tcpdump -i eth0 -nn port 80</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">15:13:17.463903 IP 132.24.54.44.34584 &gt; 100.100.30.26.80: Flags [P.], seq 1188473272:1188474570, ack 2089985175, win 2494, length 1298</span><br><span class="line">15:13:17.488506 IP 110.100.30.26.80 &gt; 172.24.54.44.34584: Flags [.], ack 1298, win 24567, length 0</span><br><span class="line">15:13:18.389400 IP 132.24.54.44.34584 &gt; 100.100.30.26.80: Flags [P.], seq 1298:1948, ack 1, win 2494, length 650</span><br><span class="line">15:13:18.413997 IP 120.100.30.26.80 &gt; 172.234.54.44.34584: Flags [.], ack 1948, win 24571, length 0</span><br><span class="line">.....</span><br><span class="line">62 packets captured</span><br><span class="line">62 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure><p>如果没有 -c 选项 tcpdump 将持续捕捉数据包，直到SIGINT或SIGTERM（kill）信号来中断他</p><blockquote><p>显示在eth0接口所捕获到的相关 192.168.1.100的icmp数据包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# tcpdump -i eth0 -nn -icmp and host 192.168.1.100</span><br></pre></td></tr></table></figure><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>图形化工具</p><h3 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h3><p>用来追踪系统调用和信号，可以很方便的诊断和解决出现的问题<br>跟踪 cat 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# strace cat &#x2F;tmp&#x2F;file </span><br><span class="line">execve(&quot;&#x2F;usr&#x2F;bin&#x2F;cat&quot;, [&quot;cat&quot;, &quot;&#x2F;tmp&#x2F;file&quot;], [&#x2F;* 23 vars *&#x2F;]) &#x3D; 0</span><br><span class="line">brk(0)                                  &#x3D; 0x190f000</span><br><span class="line">mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) &#x3D; 0x7fbd2732f000</span><br><span class="line">access(&quot;&#x2F;etc&#x2F;ld.so.preload&quot;, R_OK)      &#x3D; -1 ENOENT (No such file or directory)</span><br><span class="line">open(&quot;&#x2F;etc&#x2F;ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) &#x3D; 3</span><br><span class="line">fstat(3, &#123;st_mode&#x3D;S_IFREG|0644, st_size&#x3D;50649, ...&#125;) &#x3D; 0</span><br><span class="line">mmap(NULL, 50649, PROT_READ, MAP_PRIVATE, 3, 0) &#x3D; </span><br><span class="line">............</span><br><span class="line">fstat(3, &#123;st_mode&#x3D;S_IFREG|0644, st_size&#x3D;106075056, ...&#125;) &#x3D; 0</span><br><span class="line">mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) &#x3D; 0x7fbd20817000</span><br><span class="line">close(3)                                &#x3D; 0</span><br><span class="line">fstat(1, &#123;st_mode&#x3D;S_IFCHR|0620, st_rdev&#x3D;makedev(136, 0), ...&#125;) &#x3D; 0</span><br><span class="line">open(&quot;&#x2F;tmp&#x2F;file&quot;, O_RDONLY)             &#x3D; 3</span><br><span class="line">fstat(3, &#123;st_mode&#x3D;S_IFREG|0644, st_size&#x3D;2, ...&#125;) &#x3D; 0</span><br><span class="line">fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL) &#x3D; 0</span><br><span class="line">read(3, &quot;1\n&quot;, 65536)                   &#x3D; 2</span><br><span class="line">write(1, &quot;1\n&quot;, 21</span><br><span class="line">)                      &#x3D; 2</span><br><span class="line">read(3, &quot;&quot;, 65536)                      &#x3D; 0</span><br><span class="line">close(3)                                &#x3D; 0</span><br><span class="line">close(1)                                &#x3D; 0</span><br><span class="line">close(2)                                &#x3D; 0</span><br><span class="line">exit_group(0)                           &#x3D; ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure><blockquote><p>还有另一个有趣的用途，可以报告执行一个命令每个系统调用在内核中所消耗时间，使用 -c 选项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# strace -c cat &#x2F;tmp&#x2F;file </span><br><span class="line">1</span><br><span class="line">% time     seconds  usecs&#x2F;call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line"> 27.78    0.000015           4         4           open</span><br><span class="line"> 16.67    0.000009           1         8           mmap</span><br><span class="line"> 12.96    0.000007           2         4           mprotect</span><br><span class="line">  9.26    0.000005           5         1           write</span><br><span class="line">  7.41    0.000004           1         3           read</span><br><span class="line">  5.56    0.000003           1         5           fstat</span><br><span class="line">  5.56    0.000003           3         1           munmap</span><br><span class="line">  5.56    0.000003           3         1           execve</span><br><span class="line">  3.70    0.000002           2         1         1 access</span><br><span class="line">  1.85    0.000001           0         6           close</span><br><span class="line">  1.85    0.000001           0         4           brk</span><br><span class="line">  1.85    0.000001           1         1           fadvise64</span><br><span class="line">  0.00    0.000000           0         1           arch_prctl</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.000054                    40         1 total</span><br></pre></td></tr></table></figure><h3 id="ltrace"><a href="#ltrace" class="headerlink" title="ltrace"></a>ltrace</h3><p>一个库的调用跟踪程序，strace的输出十分相似，只不过跟踪的是库调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# ltrace cat &#x2F;tmp&#x2F;file </span><br><span class="line">__libc_start_main(0x401a20, 2, 0x7ffcd8746458, 0x408ca0 &lt;unfinished ...&gt;</span><br><span class="line">getpagesize()                                                                     &#x3D; 4096</span><br><span class="line">strrchr(&quot;cat&quot;, &#39;&#x2F;&#39;)                                                               &#x3D; nil</span><br><span class="line">setlocale(LC_ALL, &quot;&quot;)                                                             &#x3D; &quot;en_US.UTF-8&quot;</span><br><span class="line">bindtextdomain(&quot;coreutils&quot;, &quot;&#x2F;usr&#x2F;share&#x2F;locale&quot;)                                  &#x3D; &quot;&#x2F;usr&#x2F;share&#x2F;locale&quot;</span><br><span class="line">textdomain(&quot;coreutils&quot;)                                                           &#x3D; &quot;coreutils&quot;</span><br><span class="line">__cxa_atexit(0x4029f0, 0, 0, 0x736c6974756572)             </span><br><span class="line"></span><br><span class="line">.......                      </span><br><span class="line"></span><br><span class="line">malloc(69631)                                                                     &#x3D; 0x2553030</span><br><span class="line"></span><br><span class="line">fflush(0x7f8cf18771c0)                                                            &#x3D; 0</span><br><span class="line">fclose(0x7f8cf18771c0)                                                            &#x3D; 0</span><br><span class="line">+++ exited (status 0) +++</span><br></pre></td></tr></table></figure><p>跟踪cat命令</p><h3 id="gnuplot"><a href="#gnuplot" class="headerlink" title="gnuplot"></a>gnuplot</h3><p>命令行绘图工具<br>我们可以通过两种方法操作gnuplot<br>一种是交互式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# gnuplot</span><br><span class="line"></span><br><span class="line">    G N U P L O T</span><br><span class="line">    Version 4.6 patchlevel 2    last modified 2013-03-14 </span><br><span class="line">    Build System: Linux x86_64</span><br><span class="line"></span><br><span class="line">    Copyright (C) 1986-1993, 1998, 2004, 2007-2013</span><br><span class="line">    Thomas Williams, Colin Kelley and many others</span><br><span class="line"></span><br><span class="line">    gnuplot home:     http:&#x2F;&#x2F;www.gnuplot.info</span><br><span class="line">    faq, bugs, etc:   type &quot;help FAQ&quot;</span><br><span class="line">    immediate help:   type &quot;help&quot;  (plot window: hit &#39;h&#39;)</span><br><span class="line"></span><br><span class="line">Terminal type set to &#39;x11&#39;</span><br><span class="line">gnuplot&gt; </span><br></pre></td></tr></table></figure><p>第二种是将gnuplot的指令写入到一个文件中，使用gnuplot执行这个文件，这样方便调试和修改。</p><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a><strong>示例一</strong></h4><p><strong>线性趋势图</strong><br>使用sar命令分析统计数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG&#x3D;C sar -f &#x2F;var&#x2F;log&#x2F;sa&#x2F;sa15 &gt; &#x2F;tmp&#x2F;cpu.txt</span><br></pre></td></tr></table></figure><p>LANG=C 使sar输出的时间为24小时制<br>删除 cpu.txt 中空行和数据无关的字符，只保留分析数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# cat !$</span><br><span class="line">cat &#x2F;tmp&#x2F;cpu.txt</span><br><span class="line">14:50:02        all      0.83      0.00      0.64      0.01      0.00     98.52</span><br><span class="line">15:10:01        all      3.77      0.00      1.00      0.19      0.00     95.04</span><br><span class="line">15:20:01        all      0.72      0.00      0.58      0.01      0.00     98.69</span><br><span class="line">15:30:01        all      0.62      0.00      0.49      0.01      0.00     98.88</span><br><span class="line">15:40:01        all      1.22      0.00      0.64      0.08      0.00     98.06</span><br></pre></td></tr></table></figure><p>在此文件中，第一列的时间选作X轴，y轴选择第三列（%user）、第五列（%system）、第六列（%iowait）</p><blockquote><p>编写gnuplot指令文件 cpu.gnuplot 内容如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# vim &#x2F;tmp&#x2F;cpu.gnuplot </span><br><span class="line">set xdata time #设置x轴数据为时间</span><br><span class="line">set timefmt &quot;%H:%M:%S&quot; #设置时间格式</span><br><span class="line">set xlabel &#39;TIME&#39; #设置x轴标签为TIME</span><br><span class="line">set ylabel &#39;CPU&#39; #设置y轴便签为CPU</span><br><span class="line">set term png size 1300,800 #设置图片大小</span><br><span class="line">set output &quot;&#x2F;tmp&#x2F;cpu.png&quot; #设置平面图保存位置</span><br><span class="line">plot \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 1:3 title &#39;%US&#39; with lines, \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 1:5 title &#39;%SY&#39; with lines, \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 1:6 title &#39;%WA&#39; with lines #绘制图片</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# gnuplot &#x2F;tmp&#x2F;cpu.gnuplot </span><br></pre></td></tr></table></figure><p>使用xshell的可以用sz导出图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# sz &#x2F;tmp&#x2F;cpu.png </span><br></pre></td></tr></table></figure><p>得到下图</p><p><img src="https://img-blog.csdnimg.cn/2020041516400134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTg0Njk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a><strong>示例二</strong></h4><p><strong>柱状趋势图</strong><br>编写gnuplot指令文件 cpu.gnuplot 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;tmp&#x2F;cpu.gnuplot </span><br><span class="line"></span><br><span class="line">set term png size 1300,800</span><br><span class="line">set output &quot;&#x2F;tmp&#x2F;cpu.png&quot;</span><br><span class="line">set grid</span><br><span class="line">set style data histograms</span><br><span class="line">set style fill solid 1.00 border -1</span><br><span class="line">plot \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 3:xtic(1) title &#39;%US&#39;</span><br><span class="line">set grid</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# gnuplot &#x2F;tmp&#x2F;cpu.gnuplot </span><br></pre></td></tr></table></figure><p>使用xshell的可以用sz导出图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Email ~]# sz &#x2F;tmp&#x2F;cpu.png </span><br></pre></td></tr></table></figure><p>得到下图：</p><p><img src="https://img-blog.csdnimg.cn/20200415163945660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTg0Njk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>多柱状趋势图</strong><br>编写gnuplot指令文件 cpu.gnuplot 内容如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set term png size 1300,800</span><br><span class="line">set output &quot;&#x2F;tmp&#x2F;cpu.png&quot;</span><br><span class="line">set grid</span><br><span class="line">set style data histograms</span><br><span class="line">set style fill solid 1.00 border -1</span><br><span class="line">plot \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 3:xtic(1) title &#39;%US&#39;, \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 5:xtic(1) title &#39;%SY&#39;, \</span><br><span class="line">&#39;&#x2F;tmp&#x2F;cpu.txt&#39; using 6:xtic(1) title &#39;%WA&#39; \</span><br></pre></td></tr></table></figure><p>得到以下图形：</p><p><img src="https://img-blog.csdnimg.cn/20200415163922120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTg0Njk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>END</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级 ELK 日志平台构建实践</title>
      <link href="/posts/56406/"/>
      <url>/posts/56406/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s4.51cto.com/images/blog/201805/16/68f806fc3e16bc209a3e9662cd2ebef9.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><p>本篇主要讲工作中的真实经历，我们怎么打造亿级日志平台，同时手把手教大家建立起这样一套亿级 ELK 系统。日志平台具体发展历程可以参考上篇 <a href="https://blog.51cto.com/13527416/2051506">「从 ELK 到 EFK 演进」</a></p><p>废话不多说，老司机们座好了，我们准备发车了<del>~</del></p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="https://s4.51cto.com/images/blog/201805/16/fdfd8706744a67866b2e34368da3f2f2.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><p>整体架构主要分为 4 个模块，分别提供不同的功能</p><p><strong>Filebeat</strong>：轻量级数据收集引擎。基于原先 Logstash-fowarder 的源码改造出来。换句话说：Filebeat就是新版的 Logstash-fowarder，也会是 ELK Stack 在 Agent 的第一选择。</p><p><strong>Kafka</strong>: 数据缓冲队列。作为消息队列解耦了处理过程，同时提高了可扩展性。具有峰值处理能力，使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p><p><strong>Logstash</strong> ：数据收集处理引擎。支持动态的从各种数据源搜集数据，并对数据进行过滤、分析、丰富、统一格式等操作，然后存储以供后续使用。</p><p><strong>Elasticsearch</strong> ：分布式搜索引擎。具有高可伸缩、高可靠、易管理等特点。可以用于全文检索、结构化检索和分析，并能将这三者结合起来。Elasticsearch 基于 Lucene 开发，现在使用最广的开源搜索引擎之一，Wikipedia 、StackOverflow、Github 等都基于它来构建自己的搜索引擎。</p><p><strong>Kibana</strong> ：可视化化平台。它能够搜索、展示存储在 Elasticsearch 中索引数据。使用它可以很方便的用图表、表格、地图展示和分析数据。</p><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Filebeat: 6.2.4</span><br><span class="line">Kafka: 2.11-1</span><br><span class="line">Logstash: 6.2.4</span><br><span class="line">Elasticsearch: 6.2.4</span><br><span class="line">Kibana: 6.2.4</span><br><span class="line"></span><br><span class="line">相应的版本最好下载对应的插件</span><br></pre></td></tr></table></figure><h2 id="具体实践"><a href="#具体实践" class="headerlink" title="具体实践"></a>具体实践</h2><p>我们就以比较常见的 Nginx 日志来举例说明下，日志内容是 JSON 格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@timestamp&quot;:&quot;2017-12-27T16:38:17+08:00&quot;,&quot;host&quot;:&quot;192.168.56.11&quot;,&quot;clientip&quot;:&quot;192.168.56.11&quot;,&quot;size&quot;:26,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;192.168.56.11&quot;,&quot;url&quot;:&quot;&#x2F;nginxweb&#x2F;index.html&quot;,&quot;domain&quot;:&quot;192.168.56.11&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;status&quot;:&quot;200&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2017-12-27T16:38:17+08:00&quot;,&quot;host&quot;:&quot;192.168.56.11&quot;,&quot;clientip&quot;:&quot;192.168.56.11&quot;,&quot;size&quot;:26,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;192.168.56.11&quot;,&quot;url&quot;:&quot;&#x2F;nginxweb&#x2F;index.html&quot;,&quot;domain&quot;:&quot;192.168.56.11&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;status&quot;:&quot;200&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2017-12-27T16:38:17+08:00&quot;,&quot;host&quot;:&quot;192.168.56.11&quot;,&quot;clientip&quot;:&quot;192.168.56.11&quot;,&quot;size&quot;:26,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;192.168.56.11&quot;,&quot;url&quot;:&quot;&#x2F;nginxweb&#x2F;index.html&quot;,&quot;domain&quot;:&quot;192.168.56.11&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;status&quot;:&quot;200&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2017-12-27T16:38:17+08:00&quot;,&quot;host&quot;:&quot;192.168.56.11&quot;,&quot;clientip&quot;:&quot;192.168.56.11&quot;,&quot;size&quot;:26,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;192.168.56.11&quot;,&quot;url&quot;:&quot;&#x2F;nginxweb&#x2F;index.html&quot;,&quot;domain&quot;:&quot;192.168.56.11&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;status&quot;:&quot;200&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2017-12-27T16:38:17+08:00&quot;,&quot;host&quot;:&quot;192.168.56.11&quot;,&quot;clientip&quot;:&quot;192.168.56.11&quot;,&quot;size&quot;:26,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;192.168.56.11&quot;,&quot;url&quot;:&quot;&#x2F;nginxweb&#x2F;index.html&quot;,&quot;domain&quot;:&quot;192.168.56.11&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;status&quot;:&quot;200&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h3><blockquote><p>为什么用 Filebeat ，而不用原来的 Logstash 呢？</p></blockquote><p>原因很简单，资源消耗比较大。</p><p>由于 Logstash 是跑在 JVM 上面，资源消耗比较大，后来作者用 GO 写了一个功能较少但是资源消耗也小的轻量级的 Agent 叫 Logstash-forwarder。</p><p>后来作者加入 elastic.co 公司， Logstash-forwarder 的开发工作给公司内部 GO 团队来搞，最后命名为 Filebeat。</p><p>Filebeat 需要部署在每台应用服务器上，可以通过 Salt 来推送并安装配置。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;beats&#x2F;filebeat&#x2F;filebeat-6.2.4-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf filebeat-6.2.4-darwin-x86_64.tar.gz</span><br><span class="line">mv filebeat-6.2.4-darwin-x86_64 filebeat</span><br><span class="line">cd filebeat</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>修改 Filebeat 配置，支持收集本地目录日志，并输出日志到 Kafka 集群中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim fileat.yml</span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: log</span><br><span class="line">  paths:</span><br><span class="line">    -  &#x2F;opt&#x2F;logs&#x2F;server&#x2F;nginx.log</span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.add_error_key: true</span><br><span class="line">  json.message_key: log</span><br><span class="line"></span><br><span class="line">output.kafka:   </span><br><span class="line">  hosts: [&quot;192.168.0.1:9092，192.168.0.2:9092，192.168.0.3:9092&quot;]</span><br><span class="line">  topic: &#39;nginx&#39;</span><br></pre></td></tr></table></figure><p>Filebeat 6.0 之后一些配置参数变动比较大，比如 document_type 就不支持，需要用 fields 来代替等等。</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>生产环境中 Kafka 集群中节点数量建议为（2N + 1 ）个，这边就以 3 个节点举例</p><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>直接到官网下载 Kafka</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;kafka&#x2F;1.0.0&#x2F;kafka_2.11-1.0.0.tgz</span><br></pre></td></tr></table></figure><h4 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.11-1.0.0.tgz</span><br><span class="line">mv kafka_2.11-1.0.0 kafka</span><br><span class="line">cd kafka</span><br></pre></td></tr></table></figure><h4 id="修改-Zookeeper-配置"><a href="#修改-Zookeeper-配置" class="headerlink" title="修改 Zookeeper 配置"></a>修改 Zookeeper 配置</h4><p>修改 Zookeeper 配置，搭建 Zookeeper 集群，数量 ( 2N + 1 ) 个</p><p>ZK 集群建议采用 Kafka 自带，减少网络相关的因素干扰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim zookeeper.properties</span><br><span class="line"></span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line">dataDir&#x3D;&#x2F;opt&#x2F;zookeeper</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line">maxClientCnxns&#x3D;50</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"></span><br><span class="line">server.1&#x3D;192.168.0.1:2888:3888</span><br><span class="line">server.2&#x3D;192.168.0.2:2888:3888</span><br><span class="line">server.3&#x3D;192.168.0.3:2888:3888</span><br></pre></td></tr></table></figure><p>Zookeeper data 目录下面添加 myid 文件，内容为代表 Zooekeeper 节点 id （1，2，3），并保证不重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;opt&#x2F;zookeeper&#x2F;myid</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="启动-Zookeeper-节点"><a href="#启动-Zookeeper-节点" class="headerlink" title="启动 Zookeeper 节点"></a>启动 Zookeeper 节点</h4><p>分别启动 3 台 Zookeeper 节点，保证集群的高可用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;zookeeper-server-start.sh -daemon .&#x2F;config&#x2F;zookeeper.properties</span><br></pre></td></tr></table></figure><h4 id="修改-Kafka-配置"><a href="#修改-Kafka-配置" class="headerlink" title="修改 Kafka 配置"></a>修改 Kafka 配置</h4><p>kafka 集群这边搭建为 3 台，可以逐个修改 Kafka 配置，需要注意其中 broker.id 分别 （1，2，3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim .&#x2F;config&#x2F;server.properties</span><br><span class="line">broker.id&#x3D;1</span><br><span class="line">port&#x3D;9092</span><br><span class="line">host.name&#x3D;192.168.0.1</span><br><span class="line">num.replica.fetchers&#x3D;1</span><br><span class="line">log.dirs&#x3D;&#x2F;opt&#x2F;kafka_logs</span><br><span class="line">num.partitions&#x3D;3</span><br><span class="line">zookeeper.connect&#x3D;192.168.0.1: 192.168.0.2: 192.168.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms&#x3D;6000</span><br><span class="line">zookeeper.sync.time.ms&#x3D;2000</span><br><span class="line">num.io.threads&#x3D;8</span><br><span class="line">num.network.threads&#x3D;8</span><br><span class="line">queued.max.requests&#x3D;16</span><br><span class="line">fetch.purgatory.purge.interval.requests&#x3D;100</span><br><span class="line">producer.purgatory.purge.interval.requests&#x3D;100</span><br><span class="line">delete.topic.enable&#x3D;true</span><br></pre></td></tr></table></figure><h4 id="启动-Kafka-集群"><a href="#启动-Kafka-集群" class="headerlink" title="启动 Kafka 集群"></a>启动 Kafka 集群</h4><p>分别启动 3 台 Kafka 节点，保证集群的高可用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;kafka-server-start.sh -daemon .&#x2F;config&#x2F;server.properties</span><br></pre></td></tr></table></figure><p>查看 topic 是否创建成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin&#x2F;kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line"></span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h4 id="监控-Kafka-Manager"><a href="#监控-Kafka-Manager" class="headerlink" title="监控 Kafka Manager"></a>监控 Kafka Manager</h4><p>Kafka-manager 是 Yahoo 公司开源的集群管理工具。</p><p>可以在 Github 上下载安装：<a href="https://github.com/yahoo/kafka-manager">https://github.com/yahoo/kafka-manager</a></p><p><img src="https://s4.51cto.com/images/blog/201805/16/6b6ad3a704339702cfc754ff71567278.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><p>如果遇到 Kafka 消费不及时的话，可以通过到具体 cluster 页面上，增加 partition。Kafka 通过 partition 分区来提高并发消费速度</p><p><img src="https://s4.51cto.com/images/blog/201805/16/8cff5030271fe5dd99c945089de083ed.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>Logstash 提供三大功能</p><ul><li>INPUT 进入</li><li>FILTER 过滤功能</li><li>OUTPUT 出去</li></ul><p>如果使用 Filter 功能的话，强烈推荐大家使用 <a href="https://grokdebug.herokuapp.com/">Grok debugger</a> 来预先解析日志格式。</p><p><img src="https://s4.51cto.com/images/blog/201805/16/7a72bbadf135f76bb01976f07ea19f84.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><h4 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;logstash&#x2F;logstash-6.2.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压重命名"><a href="#解压重命名" class="headerlink" title="解压重命名"></a>解压重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf logstash-6.2.4.tar.gz</span><br><span class="line">$ mv logstash-6.2.4 logstash</span><br></pre></td></tr></table></figure><h4 id="修改-Logstash-配置"><a href="#修改-Logstash-配置" class="headerlink" title="修改 Logstash 配置"></a>修改 Logstash 配置</h4><p>修改 Logstash 配置，使之提供 indexer 的功能，将数据插入到 Elasticsearch 集群中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ vim nginx.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    type &#x3D;&gt; &quot;kafka&quot;</span><br><span class="line">    bootstrap_servers &#x3D;&gt; &quot;192.168.0.1:2181,192.168.0.2:2181,192.168.0.3:2181&quot;</span><br><span class="line">    topics &#x3D;&gt; &quot;nginx&quot;</span><br><span class="line">    group_id &#x3D;&gt; &quot;logstash&quot;</span><br><span class="line">    consumer_threads &#x3D;&gt; 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    host &#x3D;&gt; [&quot;192.168.0.1&quot;,&quot;192.168.0.2&quot;，&quot;192.168.0.3&quot;]</span><br><span class="line">    port &#x3D;&gt; &quot;9300&quot;</span><br><span class="line">    index &#x3D;&gt; &quot;nginx-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动-Logstash"><a href="#启动-Logstash" class="headerlink" title="启动 Logstash"></a>启动 Logstash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;logstash -f nginx.conf</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><h4 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-6.2.4.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压-2"><a href="#解压-2" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf elasticsearch-6.2.4.tar.gz</span><br><span class="line">$ mv elasticsearch-6.2.4.tar.gz elasticsearch</span><br></pre></td></tr></table></figure><h4 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim config&#x2F;elasticsearch.yml</span><br><span class="line"></span><br><span class="line">cluster.name: es </span><br><span class="line">node.name: es-node1</span><br><span class="line">network.host: 192.168.0.1</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.0.1&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 1</span><br></pre></td></tr></table></figure><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><p>通过 -d 来后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;elasticsearch -d</span><br></pre></td></tr></table></figure><p>打开网页 <a href="http://192.168.0.1:9200/">http://192.168.0.1:9200/</a>, 如果出现下面信息说明配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &quot;es-node1&quot;,</span><br><span class="line">    cluster_name: &quot;es&quot;,</span><br><span class="line">    cluster_uuid: &quot;XvoyA_NYTSSV8pJg0Xb23A&quot;,</span><br><span class="line">    version: &#123;</span><br><span class="line">        number: &quot;6.2.4&quot;,</span><br><span class="line">        build_hash: &quot;ccec39f&quot;,</span><br><span class="line">        build_date: &quot;2018-04-12T20:37:28.497551Z&quot;,</span><br><span class="line">        build_snapshot: false,</span><br><span class="line">        lucene_version: &quot;7.2.1&quot;,</span><br><span class="line">        minimum_wire_compatibility_version: &quot;5.6.0&quot;,</span><br><span class="line">        minimum_index_compatibility_version: &quot;5.0.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    tagline: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h4><p>Cerebro 这个名字大家可能觉得很陌生，其实过去它的名字叫 kopf ！因为 Elasticsearch 5.0 不再支持 site plugin，所以 kopf 作者放弃了原项目，另起炉灶搞了 cerebro，以独立的单页应用形式，继续支持新版本下 Elasticsearch 的管理工作。</p><p><img src="https://s4.51cto.com/images/blog/201805/16/c479964db186c35455fe3c68d1f5be76.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>Master 与 Data 节点分离，当 Data 节点大于 3 个的时候，建议责任分离，减轻压力</li><li>Data Node 内存不超过 32G ，建议设置成 31 G ，具体原因可以看上一篇文章</li><li>discovery.zen.minimum_master_nodes 设置成 （ total / 2 + 1 ），避免脑裂情况</li><li>最重要的一点，不要将 ES 暴露在公网中，建议都安装 X-PACK ，来加强其安全性</li></ol><h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><h4 id="下载-4"><a href="#下载-4" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;kibana&#x2F;kibana-6.2.4-darwin-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压-3"><a href="#解压-3" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf kibana-6.2.4-darwin-x86_64.tar.gz</span><br><span class="line">$ mv kibana-6.2.4-darwin-x86_64.tar.gz kibana</span><br></pre></td></tr></table></figure><h4 id="修改配置-2"><a href="#修改配置-2" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim config&#x2F;kibana.yml</span><br><span class="line"></span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;192.168.0.1&quot;</span><br><span class="line">elasticsearch.url: &quot;http:&#x2F;&#x2F;192.168.0.1:9200&quot;</span><br></pre></td></tr></table></figure><h4 id="启动-Kibana"><a href="#启动-Kibana" class="headerlink" title="启动 Kibana"></a>启动 Kibana</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup .&#x2F;bin&#x2F;kibana &amp;</span><br></pre></td></tr></table></figure><h4 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h4><p>创建索引页面需要到 <strong>Management -&gt; Index Patterns</strong> 中通过前缀来指定</p><p><img src="https://s4.51cto.com/images/blog/201805/16/ab0e5ac0e05b40e96bd9263a90f3a66f.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><h4 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h4><p><img src="https://s4.51cto.com/images/blog/201805/16/d7eaeadce1355bbc3533d32aee98edbc.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="亿级 ELK 日志平台构建实践"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，通过上面部署命令来实现 ELK 的整套组件，包含了日志收集、过滤、索引和可视化的全部流程，基于这套系统实现分析日志功能。同时，通过水平扩展 Kafka、Elasticsearch 集群，可以实现日均亿级的日志实时处理。</p><hr><p>所有好的架构设计首要的原则并不是追求先进，而是合理性，要与公司的业务规模和发展趋势相匹配，任何一个公司，哪怕是现在看来规模非常大的公司，比如 BAT 之类，在一开始，其系统架构也应简单和清晰的。</p><p>但随着业务范围不断扩充，业务规模不断扩大，系统渐进复杂和庞大，让所有系统都遇到高可用的问题。那我们该如何避免类似的问题，构建高可用系统呢？</p><p>为此我特意写了一个专栏《带你玩转高可用》，将多年来在百度和沪江的架构设计实战经验，集结成这个专栏。</p><p>本专栏总共包含 15 篇文章，分成三大模块详细解释高可用架构的相关知识：</p><p>概念篇：介绍高可用架构理论与演进，这块比较偏理论。不过对于我们理解整套体系还是有必须的。<br>工程篇：介绍常见互联网分层中每一层高可用是怎么做的，包含 DNS、服务层、缓存层、数据层等<br>问题篇：介绍怎么排查线上常用的故障，包括机器、应用层等维度故障定位<br>专栏每周都会更新，持续 64 天。在这将近 2 个月内，我会带着大家去全面了解高可用架构的方方面面，同时会将遇到的这些问题和对应的解决方案抛出来，希望大家不要重复我遇到过的坑。同时也期待大家提出有意思的问题。<br>来源：<a href="https://blog.51cto.com/13527416/2117141">https://blog.51cto.com/13527416/2117141</a></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELFK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s+jenkins高可用集群架构</title>
      <link href="/posts/38308/"/>
      <url>/posts/38308/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins在k8s集群环境"><a href="#Jenkins在k8s集群环境" class="headerlink" title="Jenkins在k8s集群环境"></a>Jenkins在k8s集群环境</h1><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/jenkins+k8s.png" alt="img"></p><h1 id="k8s高可用管理集群"><a href="#k8s高可用管理集群" class="headerlink" title="k8s高可用管理集群"></a>k8s高可用管理集群</h1><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/k8sMHA.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Docker+K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基本四种网络模型</title>
      <link href="/posts/63319/"/>
      <url>/posts/63319/</url>
      
        <content type="html"><![CDATA[<h3 id="一，NAT（最小）"><a href="#一，NAT（最小）" class="headerlink" title="一，NAT（最小）"></a>一，NAT（最小）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAT网络模型，默认情况下，均为NAT模式，如网络的端口映射就为NAT</span><br></pre></td></tr></table></figure><h3 id="二，none"><a href="#二，none" class="headerlink" title="二，none"></a>二，none</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：docker run --net&#x3D;none</span><br><span class="line"></span><br><span class="line">[root@docker ~]# docker run --rm -ti --net&#x3D;none centos:centos7</span><br></pre></td></tr></table></figure><h3 id="三，主机（与主机相同IP）"><a href="#三，主机（与主机相同IP）" class="headerlink" title="三，主机（与主机相同IP）"></a>三，主机（与主机相同IP）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">格式：docker run --net&#x3D;host</span><br><span class="line"></span><br><span class="line">[root@docker ~]# docker run --rm -ti --net&#x3D;Host centos:centos7</span><br><span class="line">[root@docker &#x2F;]# ifconfig</span><br><span class="line">docker0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.7.5.1  netmask 255.255.255.0  broadcast 172.7.5.255</span><br><span class="line">        inet6 fe80::42:28ff:fe56:8b6  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:28:56:08:b6  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 135990  bytes 9017234 (8.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 158771  bytes 317188403 (302.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens192: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.3.153.120  netmask 255.255.255.0  broadcast 10.3.153.255</span><br><span class="line">        inet6 fe80::36aa:b367:aa13:b475  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:50:56:9b:00:06  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 747539  bytes 528246025 (503.7 MiB)</span><br><span class="line">        RX errors 0  dropped 1227  overruns 0  frame 0</span><br><span class="line">        TX packets 249250  bytes 38867074 (37.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h3 id="四，联合网络（即两个容器共享一个IP地址）"><a href="#四，联合网络（即两个容器共享一个IP地址）" class="headerlink" title="四，联合网络（即两个容器共享一个IP地址）"></a>四，联合网络（即两个容器共享一个IP地址）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">第一个容器运行</span><br><span class="line">-----</span><br><span class="line">[root@docker ~]# docker run --rm -ti centos:centos7     #以nat模式启动了一个容器</span><br><span class="line">[root@2f504d6966dc &#x2F;]# ifconfig</span><br><span class="line">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.7.5.2  netmask 255.255.255.0  broadcast 172.7.5.255     #IP172.7.5.2</span><br><span class="line">        ether 02:42:ac:07:05:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 7417  bytes 13726936 (13.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 6118  bytes 473182 (462.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">第二个容器运行，以联合网络的方式</span><br><span class="line">-----</span><br><span class="line">格式：Docker run —net&#x3D;container:$&#123;container_id&#125;</span><br><span class="line"></span><br><span class="line">[root@docker ~]# docker ps       #查看第一个容器的ID值</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">2f504d6966dc        centos:centos7      &quot;&#x2F;bin&#x2F;bash&quot;         6 minutes ago       Up 6 minutes                            thirsty_bhabha</span><br><span class="line">[root@docker ~]# docker run --rm -ti --net&#x3D;container:2f504d6966dc centos:centos7</span><br><span class="line">[root@2f504d6966dc &#x2F;]# ifconfig</span><br><span class="line">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.7.5.2  netmask 255.255.255.0  broadcast 172.7.5.255</span><br><span class="line">        ether 02:42:ac:07:05:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 15431  bytes 27381590 (26.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 13359  bytes 1061065 (1.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile小实验</title>
      <link href="/posts/34706/"/>
      <url>/posts/34706/</url>
      
        <content type="html"><![CDATA[<h1 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h1><p>[tip type=”success” title=”运行一个Docker容器，在浏览器打开niubi.com能访问到百度首页”]<br>运行一个Docker容器，在浏览器打开niubi.com能访问到百度首页<br>[/tip]<br>准备Docekr镜像</p><hr><p>[tip type=”warning” title=”Dockerfile”]<br>Dockerfile<br>[/tip]</p><blockquote><p>/data/docker/dockerfile/Dockerfile</p></blockquote><pre><code>FROM xoxoyun/nginx:v1.12.2USER rootENV WWW /usr/share/nginx/conf.dENV CONF /etc/nginx/conf.dRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#39;Aisa/Shanghai&#39; &gt;/etc/timezoneWORKDIR $WWWADD index.html $WWW/index.htmlADD niubi.com.conf $CONF/niubi.com.confEXPOSE 80CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</code></pre><p>[tip type=”warning” title=”index.html”]<br>index.html<br>[/tip]</p><blockquote><p>/data/docker/dockerfile/index.html</p></blockquote><pre><code>wget www.baidu.com -O index.html</code></pre><p>[tip type=”warning” title=”niubi.com.conf”]<br>niubi.com.conf(虚拟主机配置文件)<br>[/tip]</p><pre><code>server &#123;   listen 80;   server_name niubi.com;   root /usr/share/nginx/html;&#125;</code></pre><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><pre><code>docker build . -t xoxoyun/nginx:niubibaidudocker run --rm -p80:80 xoxoyun/nginx:niubibaidu </code></pre><h2 id="Win-R运行drivers找到hosts文件添加域名解析-浏览器访问即可"><a href="#Win-R运行drivers找到hosts文件添加域名解析-浏览器访问即可" class="headerlink" title="Win+R运行drivers找到hosts文件添加域名解析 浏览器访问即可"></a>Win+R运行drivers找到hosts文件添加域名解析 浏览器访问即可</h2>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的daemon.json配置详解</title>
      <link href="/posts/32767/"/>
      <url>/posts/32767/</url>
      
        <content type="html"><![CDATA[<p>docker-daemon.json各配置详解</p><pre><code>&#123;“api-cors-header”:&quot;&quot;, ——————在引擎API中设置CORS标头“authorization-plugins”:[], ——————要加载的授权插件“bridge”:&quot;&quot;, ————将容器附加到网桥“cgroup-parent”:&quot;&quot;, ——————为所有容器设置父cgroup“cluster-store”:&quot;&quot;, ——————分布式存储后端的URL“cluster-store-opts”:&#123;&#125;, ————————设置集群存储选项（默认map []）“cluster-advertise”:&quot;&quot;, ————————要通告的地址或接口名称“debug”: true, ————————启用调试模式，启用后，可以看到很多的启动信息。默认false“default-gateway”:&quot;&quot;, ——————容器默认网关IPv4地址“default-gateway-v6”:&quot;&quot;, ——————容器默认网关IPv6地址“default-runtime”:“runc”, ————————容器的默认OCI运行时（默认为“ runc”）“default-ulimits”:&#123;&#125;, ——————容器的默认ulimit（默认[]）“dns”: [“192.168.1.1”], ——————设定容器DNS的地址，在容器的 /etc/resolv.conf文件中可查看。“dns-opts”: [], ————————容器 /etc/resolv.conf 文件，其他设置“dns-search”: [], ————————设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的 主机时，DNS不仅搜索host，还会搜索host.example.com 。 注意：如果不设置， Docker 会默认用主机上的 /etc/resolv.conf 来配置容器。“exec-opts”: [], ————————运行时执行选项“exec-root”:&quot;&quot;, ————————执行状态文件的根目录（默认为’/var/run/docker‘）“fixed-cidr”:&quot;&quot;, ————————固定IP的IPv4子网“fixed-cidr-v6”:&quot;&quot;, ————————固定IP的IPv6子网“data-root”:&quot;/var/lib/docker&quot;, ————-Docker运行时使用的根路径，默认/var/lib/docker“group”: “”, ——————UNIX套接字的组（默认为“docker”）“hosts”: [], ——————设置容器hosts“icc”: false, ——————启用容器间通信（默认为true）“ip”:“0.0.0.0”, ————————绑定容器端口时的默认IP（默认0.0.0.0）“iptables”: false, ———————启用iptables规则添加（默认为true）“ipv6”: false, ——————启用IPv6网络“ip-forward”: false, ————————默认true, 启用 net.ipv4.ip_forward ,进入容器后使用 sysctl -a | grepnet.ipv4.ip_forward 查看“ip-masq”:false, ——————启用IP伪装（默认为true）“labels”:[“nodeName=node-121”], ————————docker主机的标签，很实用的功能,例如定义：–label nodeName=host-121“live-restore”: true, ——————在容器仍在运行时启用docker的实时还原“log-driver”:&quot;&quot;, ——————容器日志的默认驱动程序（默认为“ json-file”）“log-level”:&quot;&quot;, ——————设置日志记录级别（“调试”，“信息”，“警告”，“错误”，“致命”）（默认为“信息”）“max-concurrent-downloads”:3, ——————设置每个请求的最大并发下载量（默认为3）“max-concurrent-uploads”:5, ——————设置每次推送的最大同时上传数（默认为5）“mtu”: 0, ——————设置容器网络MTU“oom-score-adjust”:-500, ——————设置守护程序的oom_score_adj（默认值为-500）“pidfile”: “”, ——————Docker守护进程的PID文件“raw-logs”: false, ——————全时间戳机制“selinux-enabled”: false, ——————默认 false，启用selinux支持“storage-driver”:&quot;&quot;, ——————要使用的存储驱动程序“swarm-default-advertise-addr”:&quot;&quot;, ——————设置默认地址或群集广告地址的接口“tls”: true, ————————默认 false, 启动TLS认证开关“tlscacert”: “”, ——————默认 ~/.docker/ca.pem，通过CA认证过的的certificate文件路径“tlscert”: “”, ————————默认 ~/.docker/cert.pem ，TLS的certificate文件路径“tlskey”: “”, ————————默认~/.docker/key.pem，TLS的key文件路径“tlsverify”: true, ————————默认false，使用TLS并做后台进程与客户端通讯的验证“userland-proxy”:false, ——————使用userland代理进行环回流量（默认为true）“userns-remap”:&quot;&quot;, ————————用户名称空间的用户/组设置“bip”:“192.168.88.0/22”, ——————————指定网桥IP“registry-mirrors”: [“https://192.498.89.232:89”], ————————设置镜像加速“insecure-registries”: [“120.123.122.123:12312”], ———————设置私有仓库地址可以设为http“storage-opts”: [“overlay2.override_kernel_check=true”,“overlay2.size=15G”], ————————存储驱动程序选项“log-opts”: &#123;“max-file”: “3”,“max-size”: “10m”,&#125;, ————————容器默认日志驱动程序选项“iptables”: false ————————启用iptables规则添加（默认为true）&#125;</code></pre><p>[button href=”<a href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&quot;]%E5%AE%98%E6%96%B9%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3[/button]">https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file&quot;]官方配置详解[/button]</a></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令入门指令</title>
      <link href="/posts/5784/"/>
      <url>/posts/5784/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux指令入门-文件与权限"><a href="#Linux指令入门-文件与权限" class="headerlink" title="Linux指令入门-文件与权限"></a>Linux指令入门-文件与权限</h1><h2 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h2><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>命令描述：tree命令用于以树状图列出目录的内容。</p><p>tree命令没有内置在系统中，使用tree命令需要执行以下命令来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tree</span><br></pre></td></tr></table></figure><p>命令使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree &#x2F;usr&#x2F;share&#x2F;wallpapers&#x2F;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1FuM_Hvb2gK0jSZK9XXaEgFXa-533-237.png" alt="img"></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>命令描述： ls命令用于显示指定工作目录下的内容。</p><p>命令格式：<code>ls [参数] [目录名]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">显示所有文件及目录（包括隐藏文件）</td></tr><tr><td align="left">-l</td><td align="left">将文件的权限、拥有者、文件大小等详细信息列出（<code>ll</code>等同于<code>ls -l</code>）</td></tr><tr><td align="left">-r</td><td align="left">将文件反序列出（默认按英文字母正序）</td></tr><tr><td align="left">-t</td><td align="left">将文件按创建时间正序列出</td></tr><tr><td align="left">-R</td><td align="left">递归遍历目录下文件</td></tr></tbody></table><p>命令使用示例：</p><p>查看当前目录下的所有文件（包括隐藏文件）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -a</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB10gRXHQP2gK0jSZPxXXacQpXa-546-381.png" alt="img"></p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>命令描述：获取当前工作目录的绝对路径。</p><p>命令使用示例：</p><p><img src="https://img.alicdn.com/tfs/TB1UJhXHHr1gK0jSZR0XXbP8XXa-452-68.png" alt="img"> </p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>命令描述：cd命令用于切换工作目录。</p><p>命令使用示例：</p><p><img src="https://img.alicdn.com/tfs/TB16qddHHH1gK0jSZFwXXc7aXXa-412-217.png" alt="img"></p><p>在路径表示中：</p><ul><li>一个半角句号（<code>.</code>）表示当前目录，例如路径./app/log等同于app/log。</li><li>两个半角句号（<code>..</code>）表示上级目录，例如路径/usr/local/../src等同于/usr/src，其中local和src目录同级。</li></ul><p><code>cd</code>命令的默认参数为<code>~</code>，符号<code>~</code>表示当前用户的家目录，即在root用户登录时，命令<code>cd</code>、<code>cd ~</code>和<code>cd /root</code>执行效果相同。</p><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p>命令描述：touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><p>命令格式：<code>touch [参数] [文件]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">如果指定文件不存在，不会建立新文件</td></tr><tr><td align="left">-r</td><td align="left">使用参考文件的时间记录</td></tr><tr><td align="left">-t</td><td align="left">设置文件的时间记录</td></tr></tbody></table><p>命令使用示例：</p><ul><li><p>创建两个空文件。<br><img src="https://img.alicdn.com/tfs/TB1X_Z.HuT2gK0jSZFvXXXnFXXa-466-133.png" alt="img"></p></li><li><p>修改demo1.txt的时间记录为当前系统时间。<br><img src="http://icms-static-public.cn-hangzhou.oss-cdn.aliyun-inc.com/portal-file/21500202/587137/images/p103461.png" alt="cmd_touch_2"></p></li><li><p>更新demo2.txt的时间记录，使其和demo1.txt的时间记录相同。<br><img src="https://img.alicdn.com/tfs/TB1iMpXHUT1gK0jSZFrXXcNCXXa-499-132.png" alt="img"></p></li></ul><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>命令描述：mkdir命令用于新建子目录。<code>-p</code>参数确保目录名称存在，不存在的就新建一个。</p><p>命令使用示例：</p><p>新建目录a/b/c/d，并使用tree命令查看创建后的目录结构。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img.alicdn.com/tfs/TB1s2vcjcKfxu4jSZPfXXb3dXXa-510-254.png" alt="img"></h2><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>命令描述：rm命令用于删除一个文件或者目录。</p><p>命令格式：<code>rm [参数] [文件]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">删除前逐一询问确认</td></tr><tr><td align="left">-f</td><td align="left">无需确认，直接删除</td></tr><tr><td align="left">-r</td><td align="left">删除目录下所有文件</td></tr></tbody></table><p>命令使用示例：</p><p>无需确认直接删除文件。</p><p><img src="https://img.alicdn.com/tfs/TB1vLo8HqL7gK0jSZFBXXXZZpXa-522-213.png" alt="img"></p><p>无需确认直接删除目录a及其目录下所有子目录和文件。</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://img.alicdn.com/tfs/TB1asFeHQT2gK0jSZFkXXcIQFXa-415-85.png" alt="img"></h2><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>命令描述： cp命令主要用于复制文件或目录。</p><p>命令格式：<code>cp [参数] [源文件] [目标文件]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">复制时保留链接</td></tr><tr><td align="left">-f</td><td align="left">覆盖已经存在的目标文件而不给出提示</td></tr><tr><td align="left">-i</td><td align="left">覆盖前询问</td></tr><tr><td align="left">-p</td><td align="left">除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td></tr><tr><td align="left">-r</td><td align="left">复制目录及目录内的所有项目</td></tr></tbody></table><p>命令使用示例：</p><p>将目录c/d中的所有内容复制到目录a/b下。</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://img.alicdn.com/tfs/TB10Ck3HuL2gK0jSZPhXXahvXXa-673-465.png" alt="img"></h2><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>命令描述： mv命令用来为文件或目录改名、或将文件或目录移入其它位置。</p><p>命令格式：<code>mv [参数] [源文件] [目标文件]</code></p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">若指定目录已有同名文件，则先询问是否覆盖旧文件</td></tr><tr><td align="left">-f</td><td align="left">如果目标文件已经存在，不会询问而直接覆盖</td></tr></tbody></table><p>命令使用示例：</p><ul><li><p>将文件名a.txt改为b.txt。<br><img src="https://img.alicdn.com/tfs/TB1z1M_Hvb2gK0jSZK9XXaEgFXa-348-151.png" alt="img"></p></li><li><p>将c目录移动到a/b/c/d/下。<br><img src="https://img.alicdn.com/tfs/TB1M9BiHRr0gK0jSZFnXXbRRXXa-387-276.png" alt="img"></p></li><li><p>将当前目录内容全部移动到/tmp目录中。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv .&#x2F;* &#x2F;tmp</span><br></pre></td></tr></table></figure><h2 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h2><p>命令描述：rename命令用字符串替换的方式批量改变文件名。rename命令有C语言和Perl语言两个版本，这里介绍C语言版本的rename命令，不支持正则表达式。</p><p>命令使用示例：</p><ul><li><p>将当前目录下所有文件名中的字符串demo改为大写的字符串DEMO。<br><img src="https://img.alicdn.com/tfs/TB164qEaepyVu4jSZFhXXbBpVXa-410-150.png" alt="img"></p></li><li><p>将当前目录下所有<code>.txt</code>文件后缀都改为<code>text</code>。<br><img src="https://img.alicdn.com/tfs/TB1l3pXHUT1gK0jSZFrXXcNCXXa-386-84.png" alt="img"></p></li></ul><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><p>ls命令可以查看Linux系统上的文件、目录和设备的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;boot&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB12gXcHND1gK0jSZFKXXcJrVXa-869-420.png" alt="img"></p><p>上述<code>ls -l</code>命令中显示的第一列就是文件权限信息，共11位字符，分5部分。</p><ul><li>第1位表示存档类型，<code>d</code>表示目录，<code>-</code>表示一般文件。</li><li>第2~4位表示当前用户的权限（属主权限）。</li><li>第5~7位表示同用户组的用户权限（属组权限）。</li><li>第8~10位表示不同用户组的用户权限（其他用户权限）。</li><li>第11位是一个半角句号<code>.</code>，表示SELinux安全标签。</li></ul><p>用户权限每组三位，rwx分别表示读、写、执行权限，对应八进制表示为4、2、1。</p><p>例如efi目录的root用户权限为<code>drwxr-xr-x.</code>。</p><ul><li>该目录对root用户具有读写和执行所有权限。</li><li>该目录对root组其他用户有读和执行权限。</li><li>该目录对其他用户只有执行权限。</li></ul><p>所以该权限表示对应八进制权限表示为：</p><ul><li>属主权限：<code>4+2+1=7</code>。</li><li>属组权限：<code>4+1=5</code>。</li><li>其他用户权限：1。</li></ul><p>即751。</p><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>chmod命令用于修改文件权限mode，<code>-R</code>参数以递归方式对子目录和文件进行修改。</p><p>命令使用示例：</p><p>\1. 新建名为hello.sh的Shell脚本，该脚本将会输出<code>Hello World</code>。用<code>ll</code>命令可以看到新建的脚本没有执行权限，其权限用八进制表示为644。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;echo &#39;Hello World&#39;&quot; &gt; hello.sh</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1XPRcHNv1gK0jSZFFXXb0sXXa-520-111.png" alt="img"></p><p>\2. 将hello.sh文件增加属主的执行权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x hello.sh</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1RX7nXSRLWu4jSZKPXXb6BpXa-469-110.png" alt="img"></p><p>\3. 将hello.sh文件撤销属主的执行权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u-x hello.sh</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1.q8XHFP7gK0jSZFjXXc5aXXa-458-108.png" alt="img"></p><p>\4. 将hello.sh文件权限修改为八进制表示的744权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 744 hello.sh</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1cq..HpT7gK0jSZFpXXaTkpXa-445-110.png" alt="img"></p><p>\5. 使用bash命令解释器执行hello.sh脚本文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash hello.sh</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1mIFeHQT2gK0jSZFkXXcIQFXa-448-67.png" alt="img"></p><p>其中，<code>u+x</code>表示增加属主的执行权限，u表示属主，g表示属组，o表示其他，a表示所有用户。</p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>chown命令修改文件的属主和属组；<code>-R</code>参数以递归方式对子目录和文件进行修改；<code>ls -l</code>命令显示的第三列和第四列就是文件的属主和属组信息。</p><p>命令使用示例：</p><p>\1. 新建一个文本文件test.txt，用<code>ll</code>命令可以看到该文件的属主和属组是root。<code>whoami</code>命令可以查看当前Shell环境登录的用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">touch test.txt</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1Xq..HpT7gK0jSZFpXXaTkpXa-457-153.png" alt="img"></p><p>\2. 创建两个用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd test</span><br><span class="line">useradd admin</span><br></pre></td></tr></table></figure><p>\3. 修改test.txt文件的属主用户为test。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown test test.txt</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><img src="https://img.alicdn.com/tfs/TB1IHVfHHj1gK0jSZFuXXcrHpXa-477-106.png" alt="img"></h3><p>\4. 修改test.txt文件的属主和属组为admin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown admin:admin test.txt</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1KbVfHHj1gK0jSZFuXXcrHpXa-471-108.png" alt="img"></p><h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><p>chgrp命令用于修改文件的属组。</p><p>命令使用示例：</p><p>将test.txt文件的属组改为root。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp root test.txt</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1uLg.HxD1gK0jSZFsXXbldVXa-522-108.png" alt="img"></p><h1 id="Linux指令入门-文本处理"><a href="#Linux指令入门-文本处理" class="headerlink" title="Linux指令入门-文本处理"></a>Linux指令入门-文本处理</h1><h2 id="连接ECS服务器"><a href="#连接ECS服务器" class="headerlink" title="连接ECS服务器"></a>连接ECS服务器</h2><p>\1.  打开系统自带的终端工具。</p><ul><li>Windows：CMD或Powershell。</li><li>MAC：Terminal。</li></ul><p>Windows用户请检查系统中是否安装有ssh工具。检查方法：</p><p>1）在终端中输入命令ssh -V。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -V</span><br></pre></td></tr></table></figure><p>2）出现如下结果说明已安装。</p><p><img src="https://img.alicdn.com/tfs/TB1bF9nc5cKOu4jSZKbXXc19XXa-336-48.png" alt="img"></p><p>3）否则请下载安装 <a href="https://www.mls-software.com/files/setupssh-8.2p1-1.exe">OpenSSH。</a></p><p>\2.  在终端中输入连接命令ssh [username]@[ipaddress]。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@123.123.123.123</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1OlyaHXT7gK0jSZFpXXaTkpXa-290-257.jpg" alt="img"></p><p>命令显示结果如下：</p><p><img src="https://img.alicdn.com/tfs/TB1mWdXc5cKOu4jSZKbXXc19XXa-644-228.png" alt="img"></p><p>\3.  输入yes。</p><p>\4.  同意继续后将会提示输入登录密码。 密码为已创建的云服务的ECS的登录密码。</p><p><img src="https://img.alicdn.com/tfs/TB1FzjSHqL7gK0jSZFBXXXZZpXa-637-75.png" alt="img"></p><p>登录成功后会显示如下信息。</p><p><img src="https://img.alicdn.com/tfs/TB1iRbWHAP2gK0jSZPxXXacQpXa-516-157.png" alt="img"></p><h2 id="文本编辑工具Vim"><a href="#文本编辑工具Vim" class="headerlink" title="文本编辑工具Vim"></a>文本编辑工具Vim</h2><h3 id="vim的三种操作模式"><a href="#vim的三种操作模式" class="headerlink" title="vim的三种操作模式"></a>vim的三种操作模式</h3><p>vim有三种操作模式，分别是命令模式（Command mode）、输入模式（Insert mode）和底线命令模式（Last line mode）。</p><p>三种模式切换快捷键：</p><table><thead><tr><th align="left">模式</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">命令模式</td><td align="left">ESC</td></tr><tr><td align="left">输入模式</td><td align="left">i或a</td></tr><tr><td align="left">底线命令模式</td><td align="left">:</td></tr></tbody></table><ul><li><p>命令模式</p><p>在命令模式中控制光标移动和输入命令，可对文本进行复制、粘贴、删除和查找等工作。</p><p>使用命令vim filename后进入编辑器视图后，默认模式就是命令模式，此时敲击键盘字母会被识别为一个命令，例如在键盘上连续敲击两次d，就会删除光标所在行。</p><p>以下是在命令模式中常用的快捷操作：</p></li></ul><table><thead><tr><th align="left">操作</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">光标左移</td><td align="left">h</td></tr><tr><td align="left">光标右移</td><td align="left">l（小写L）</td></tr><tr><td align="left">光标上移</td><td align="left">k</td></tr><tr><td align="left">光标下移</td><td align="left">j</td></tr><tr><td align="left">光标移动到下一个单词</td><td align="left">w</td></tr><tr><td align="left">光标移动到上一个单词</td><td align="left">b</td></tr><tr><td align="left">移动游标到第n行</td><td align="left">nG</td></tr><tr><td align="left">移动游标到第一行</td><td align="left">gg</td></tr><tr><td align="left">移动游标到最后一行</td><td align="left">G</td></tr><tr><td align="left">快速回到上一次光标所在位置</td><td align="left">Ctrl+o</td></tr><tr><td align="left">删除当前字符</td><td align="left">x</td></tr><tr><td align="left">删除前一个字符</td><td align="left">X</td></tr><tr><td align="left">删除整行</td><td align="left">dd</td></tr><tr><td align="left">删除一个单词</td><td align="left">dw或daw</td></tr><tr><td align="left">删除至行尾</td><td align="left">d$或D</td></tr><tr><td align="left">删除至行首</td><td align="left">d^</td></tr><tr><td align="left">删除到文档末尾</td><td align="left">dG</td></tr><tr><td align="left">删除至文档首部</td><td align="left">d1G</td></tr><tr><td align="left">删除n行</td><td align="left">ndd</td></tr><tr><td align="left">删除n个连续字符</td><td align="left">nx</td></tr><tr><td align="left">将光标所在位置字母变成大写或小写</td><td align="left">~</td></tr><tr><td align="left">复制游标所在的整行</td><td align="left">yy（3yy表示复制3行）</td></tr><tr><td align="left">粘贴至光标后（下）</td><td align="left">p</td></tr><tr><td align="left">粘贴至光标前（上）</td><td align="left">P</td></tr><tr><td align="left">剪切</td><td align="left">dd</td></tr><tr><td align="left">交换上下行</td><td align="left">ddp</td></tr><tr><td align="left">替换整行，即删除游标所在行并进入插入模式</td><td align="left">cc</td></tr><tr><td align="left">撤销一次或n次操作</td><td align="left">u{n}</td></tr><tr><td align="left">撤销当前行的所有修改</td><td align="left">U</td></tr><tr><td align="left">恢复撤销操作</td><td align="left">Ctrl+r</td></tr><tr><td align="left">整行将向右缩进</td><td align="left">&gt;&gt;</td></tr><tr><td align="left">整行将向左退回</td><td align="left">&lt;&lt;</td></tr><tr><td align="left">若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开</td><td align="left">ZZ</td></tr></tbody></table><ul><li><p>输入模式</p><p>在命令模式下按i或a键就进入了输入模式，在输入模式下，您可以正常的使用键盘按键对文本进行插入和删除等操作。</p></li><li><p>底线命令模式</p><p>在命令模式下按<code>:</code>键就进入了底线命令模式，在底线命令模式中可以输入单个或多个字符的命令。</p><p>以下是底线命令模式中常用的快捷操作：</p></li></ul><table><thead><tr><th align="left">操作</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">保存</td><td align="left">:w</td></tr><tr><td align="left">退出</td><td align="left">:q</td></tr><tr><td align="left">保存并退出</td><td align="left">:wq（<code>:wq!</code>表示强制保存退出）</td></tr><tr><td align="left">将文件另存为其他文件名</td><td align="left">:w new_filename</td></tr><tr><td align="left">显示行号</td><td align="left">:set nu</td></tr><tr><td align="left">取消行号</td><td align="left">:set nonu</td></tr><tr><td align="left">使本行内容居中</td><td align="left">:ce</td></tr><tr><td align="left">使本行文本靠右</td><td align="left">:ri</td></tr><tr><td align="left">使本行内容靠左</td><td align="left">:le</td></tr><tr><td align="left">向光标之下寻找一个名称为word的字符串</td><td align="left">:/word</td></tr><tr><td align="left">向光标之上寻找一个字符串名称为word的字符串</td><td align="left">:?word</td></tr><tr><td align="left">重复前一个搜寻的动作</td><td align="left">:n</td></tr><tr><td align="left">从第一行到最后一行寻找word1字符串，并将该字符串取代为word2</td><td align="left"><code>:1,$s/word1/word2/g</code>或<code> :%s/word1/word2/g</code></td></tr></tbody></table><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在本示例将使用vim在文本文件中写入一首唐诗。</p><p>\1.  新建一个文件并进入vim命令模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 静夜思.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1VZ4LHG61gK0jSZFlXXXDKFXa-911-414.png" alt="img"></p><p>\2.  按下<code>i</code>进入输入模式，输入《静夜思》的诗名。</p><p><img src="https://img.alicdn.com/tfs/TB1v7BEHQL0gK0jSZFtXXXQCXXa-913-410.png" alt="img"></p><p>\3.   按下ECS键回到命令模式，并输入底线命令<code>:ce</code>，使诗名居中。</p><p><img src="https://img.alicdn.com/tfs/TB1S58EHUz1gK0jSZLeXXb9kVXa-905-428.png" alt="img"></p><p>\4.  按下<code>o</code>键换行并进入输入模式，输入第一行诗。</p><p><img src="https://img.alicdn.com/tfs/TB1Db8GHHr1gK0jSZFDXXb9yVXa-904-412.png" alt="img"></p><p>\5.  按下ECS键回到命令模式，并输入底线命令<code>:ce</code>，使第一行诗居中。</p><p><img src="https://img.alicdn.com/tfs/TB1poNDHFY7gK0jSZKzXXaikpXa-902-415.png" alt="img"></p><p>\6.  按下<code>o</code>键换行并进入输入模式，输入第二行诗。</p><p><img src="https://img.alicdn.com/tfs/TB1YGNHHKH2gK0jSZFEXXcqMpXa-907-412.png" alt="img"></p><p>\7.  按下ECS键回到命令模式，并输入底线命令<code>:ce</code>，使第二行诗居中。</p><p><img src="https://img.alicdn.com/tfs/TB1HoNDHLb2gK0jSZK9XXaEgFXa-905-412.png" alt="img"></p><p>\8.  在命令模式中执行底线命令<code>:wq</code>离开vim。</p><h2 id="文本文件查看命令"><a href="#文本文件查看命令" class="headerlink" title="文本文件查看命令"></a>文本文件查看命令</h2><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>命令描述：cat命令用于查看内容较少的纯文本文件。</p><p>命令格式：<code>cat [选项] [文件]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-n或–number</td><td align="left">显示行号</td></tr><tr><td align="left">-b或–number-nonblank</td><td align="left">显示行号，但是不对空白行进行编号</td></tr><tr><td align="left">-s或–squeeze-blank</td><td align="left">当遇到有连续两行以上的空白行，只显示一行的空白行</td></tr></tbody></table><p>命令使用示例：</p><p>\1.  将一个自增序列写入test.txt文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10); do echo $i &gt;&gt; test.txt ; done</span><br></pre></td></tr></table></figure><p>\2. 查看文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB17S4FHHr1gK0jSZR0XXbP8XXa-612-258.png" alt="img"></p><p>\3. 将文件内容清空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;dev&#x2F;null &gt; test.txt</span><br></pre></td></tr></table></figure><p>\4. 再次检查文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1CQBEHQL0gK0jSZFtXXXQCXXa-570-69.png" alt="img"></p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>命令描述：more命令从前向后分页显示文件内容。</p><p>常用操作命令：</p><table><thead><tr><th align="left">操作</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Enter</td><td align="left">向下n行，n需要定义，默认为1行</td></tr><tr><td align="left">Ctrl+F或空格键（Space）</td><td align="left">向下滚动一页</td></tr><tr><td align="left">Ctrl+B</td><td align="left">向上滚动一页</td></tr><tr><td align="left">=</td><td align="left">输出当前行的行号</td></tr><tr><td align="left">!命令</td><td align="left">调用Shell执行命令</td></tr><tr><td align="left">q</td><td align="left">退出more</td></tr></tbody></table><p>命令使用示例：</p><p>从第20行开始分页查看系统日志文件/var/log/messages。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +20 &#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1xcXGHHr1gK0jSZFDXXb9yVXa-1408-937.png" alt="img"></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>命令描述：less命令可以对文件或其它输出进行分页显示，与moe命令相似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动。</p><p>命令格式：<code>less [参数] 文件 </code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-e</td><td align="left">当文件显示结束后，自动离开</td></tr><tr><td align="left">-m</td><td align="left">显示类似more命令的百分比</td></tr><tr><td align="left">-N</td><td align="left">显示每行的行号</td></tr><tr><td align="left">-s</td><td align="left">显示连续空行为一行</td></tr></tbody></table><p>命令常用操作：</p><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">/字符串</td><td align="left">向下搜索字符串</td></tr><tr><td align="left">?字符串</td><td align="left">向上搜索字符串</td></tr><tr><td align="left">n</td><td align="left">重复前一个搜索</td></tr><tr><td align="left">N</td><td align="left">反向重复前一个搜索</td></tr><tr><td align="left">b或<code>pageup</code>键</td><td align="left">向上翻一页</td></tr><tr><td align="left">空格键或<code>pagedown</code>键</td><td align="left">向下翻一页</td></tr><tr><td align="left">u</td><td align="left">向前翻半页</td></tr><tr><td align="left">d</td><td align="left">向后翻半页</td></tr><tr><td align="left">y</td><td align="left">向前滚动一行</td></tr><tr><td align="left">回车键</td><td align="left">向后滚动一行</td></tr><tr><td align="left">q</td><td align="left">退出less命令</td></tr></tbody></table><p>命令使用示例：</p><p>查看命令历史使用记录并通过less分页显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history | less</span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>命令描述：head命令用于查看文件开头指定行数的内容。</p><p>命令格式：<code>head [参数] [文件]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-n [行数]</td><td align="left">显示开头指定行的文件内容，默认为10</td></tr><tr><td align="left">-c [字符数]</td><td align="left">显示开头指定个数的字符数</td></tr><tr><td align="left">-q</td><td align="left">不显示文件名字信息，适用于多个文件，多文件时默认会显示文件名</td></tr></tbody></table><p>命令使用示例：</p><p>查看/etc/passwd文件的前5行内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -5 &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB13Pl7Xj39YK4jSZPcXXXrUFXa-590-153.png" alt="img"></p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>命令描述：tail命令用于查看文档的后N行或持续刷新内容。</p><p>命令格式：<code>tail [参数] [文件]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-f</td><td align="left">显示文件最新追加的内容</td></tr><tr><td align="left">-q</td><td align="left">当有多个文件参数时，不输出各个文件名</td></tr><tr><td align="left">-v</td><td align="left">当有多个文件参数时，总是输出各个文件名</td></tr><tr><td align="left">-c [字节数]</td><td align="left">显示文件的尾部n个字节内容</td></tr><tr><td align="left">-n [行数]</td><td align="left">显示文件的尾部n行内容</td></tr></tbody></table><p>命令使用示例：</p><p>查看/var/log/messages系统日志文件的最新10行，并保持实时刷新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f -n 10 &#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1Pj8JHUY1gK0jSZFCXXcwqXXa-970-240.png" alt="img"></p><p>按<code>ctrl+c</code>键退出文本实时查看界面。</p><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>命令描述：用来显示文件的详细信息，包括inode、atime、mtime、ctime等。</p><p>命令使用示例：</p><p>查看/etc/passwd文件的详细信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1cI8LHG61gK0jSZFlXXXDKFXa-628-195.png" alt="img"></p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>命令描述：wc命令用于统计指定文本的行数、字数、字节数。</p><p>命令格式：<code>wc [参数] [文件]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-l</td><td align="left">只显示行数</td></tr><tr><td align="left">-w</td><td align="left">只显示单词数</td></tr><tr><td align="left">-c</td><td align="left">只显示字节数</td></tr></tbody></table><p>命令使用示例：</p><p>统计/etc/passwd文件的行数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1E2FKHND1gK0jSZFyXXciOVXa-486-49.png" alt="img"></p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>命令描述： file命令用于辨识文件类型。</p><p>命令格式：<code>file [参数] [文件]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">列出辨识结果时，不显示文件名称</td></tr><tr><td align="left">-c</td><td align="left">详细显示指令执行过程，便于排错或分析程序执行的情形</td></tr><tr><td align="left">-f [文件]</td><td align="left">指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称</td></tr><tr><td align="left">-L</td><td align="left">直接显示符号连接所指向的文件类别</td></tr></tbody></table><p>命令使用示例：</p><p>查看/var/log/messages文件的文件类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file &#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1aE0BHGL7gK0jSZFBXXXZZpXa-533-49.png" alt="img"></p><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>命令描述：diff命令用于比较文件的差异。</p><p>命令使用示例：</p><p>\1. 构造两个相似的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &#39;第一行\n第二行\n我是log1第3行\n第四行\n第五行\n第六行&#39; &gt; 1.log</span><br><span class="line">echo -e &#39;第一行\n第二行\n我是log2第3行\n第四行&#39; &gt; 2.log</span><br></pre></td></tr></table></figure><p>\2. 分别查看两个文件<img src="https://img.alicdn.com/tfs/TB1KBxLHHj1gK0jSZFuXXcrHpXa-758-318.png" alt="img"></p><p>\3. 使用diff查看两个文件的差异</p><p><img src="https://img.alicdn.com/tfs/TB1dqRHHKH2gK0jSZFEXXcqMpXa-455-190.png" alt="img"></p><p>对比结果中的3c3表示两个文件在第3行有不同，5,6d4表示2.log文件相比1.log文件在第4行处开始少了1.log文件的第5和第6行。</p><p> 文本文件处理命令</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>命令描述：grep命令用于查找文件里符合条件的字符串。</p><p>grep全称是Global Regular Expression Print，表示全局正则表达式版本，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><p>在Shell脚本中，grep通过返回一个状态值来表示搜索的状态：</p><ul><li>0：匹配成功。</li><li>1：匹配失败。</li><li>2：搜索的文件不存在。</li></ul><p>命令格式：<code>grep [参数] [正则表达式] [文件]</code>。</p><p>命令常用参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-c或–count</td><td align="left">计算符合样式的列数</td></tr><tr><td align="left">-d recurse或-r</td><td align="left">指定要查找的是目录而非文件</td></tr><tr><td align="left">-e [范本样式]</td><td align="left">指定字符串做为查找文件内容的样式</td></tr><tr><td align="left">-E 或 –extended-regexp</td><td align="left">将样式为延伸的正则表达式来使用</td></tr><tr><td align="left">-F 或 –fixed-regexp</td><td align="left">将样式视为固定字符串的列表</td></tr><tr><td align="left">-G 或 –basic-regexp</td><td align="left">将样式视为普通的表示法来使用</td></tr><tr><td align="left">-i 或 –ignore-case</td><td align="left">忽略字符大小写的差别</td></tr><tr><td align="left">-n 或 –line-number</td><td align="left">在显示符合样式的那一行之前，标示出该行的列数编号</td></tr><tr><td align="left">-v 或 –revert-match</td><td align="left">显示不包含匹配文本的所有行</td></tr></tbody></table><p>命令使用示例：</p><ul><li><p>查看sshd服务配置文件中监听端口配置所在行编号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n Port &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>查询字符串在文本中出现的行数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c localhost &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>反向查找，不显示符合条件的行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep sshd</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep -v grep | grep sshd</span><br></pre></td></tr></table></figure><p> 命令输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1GVNGHUT1gK0jSZFrXXcNCXXa-668-149.png" alt="img"></p></li><li><p>以递归的方式查找目录下含有关键字的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r *.sh &#x2F;etc</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>使用正则表达式匹配httpd配置文件中异常状态码响应的相关配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;ntp[0-9].aliyun.com&#39; &#x2F;etc&#x2F;ntp.conf</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>命令描述：sed是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用。</p><p>\1. 处理时，把当前处理的行存储在临时缓冲区中，称为模式空间（pattern space）。<br>\2. 接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。<br>\3. 接着处理下一行，这样不断重复，直到文件末尾。</p><p>注意：</p><ul><li>sed命令不会修改原文件，例如删除命令只表示某些行不打印输出，而不是从原文件中删去。</li><li>如果要改变源文件，需要使用-i选项。</li></ul><p>命令格式：<code>sed [参数] [动作] [文件]</code>。 </p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-e [script]</td><td align="left">执行多个script</td></tr><tr><td align="left">-f [script文件]</td><td align="left">执行指定script文件</td></tr><tr><td align="left">-n</td><td align="left">仅显示script处理后的结果</td></tr><tr><td align="left">-i</td><td align="left">输出到原文件，静默执行（修改原文件）</td></tr></tbody></table><p>动作说明：</p><table><thead><tr><th align="left">动作</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">在行后面增加内容</td></tr><tr><td align="left">c</td><td align="left">替换行</td></tr><tr><td align="left">d</td><td align="left">删除行</td></tr><tr><td align="left">i</td><td align="left">在行前面插入</td></tr><tr><td align="left">p</td><td align="left">打印相关的行</td></tr><tr><td align="left">s</td><td align="left">替换内容</td></tr></tbody></table><p>命令使用示例：</p><ul><li><p>删除第3行到最后一行内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#39;3,$d&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>在最后一行新增行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#39;$a admin:x:1000:1000:admin:&#x2F;home&#x2F;admin:&#x2F;bin&#x2F;bash&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>替换内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#39;s&#x2F;SELINUX&#x3D;disabled&#x2F;SELINUX&#x3D;enforcing&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>替换行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#39;1c abcdefg&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>命令描述：和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。</p><p>命令格式：<code>awk [参数] [脚本] [文件]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-F fs</td><td align="left">指定以fs作为输入行的分隔符，awk 命令默认分隔符为空格或制表符</td></tr><tr><td align="left">-f file</td><td align="left">读取awk脚本</td></tr><tr><td align="left">-v val=val</td><td align="left">在执行处理过程之前，设置一个变量var，并给其设置初始值为val</td></tr></tbody></table><p>内置变量：</p><table><thead><tr><th align="left">变量</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">FS</td><td align="left">字段分隔符</td></tr><tr><td align="left">$n</td><td align="left">指定分隔的第n个字段，如$1、$3分别表示第1、第三列</td></tr><tr><td align="left">$0</td><td align="left">当前读入的整行文本内容</td></tr><tr><td align="left">NF</td><td align="left">记录当前处理行的字段个数（列数）</td></tr><tr><td align="left">NR</td><td align="left">记录当前已读入的行数</td></tr><tr><td align="left">FNR</td><td align="left">当前行在源文件中的行号</td></tr></tbody></table><p>awk中还可以指定脚本命令的运行时机。默认情况下，awk会从输入中读取一行文本，然后针对该行的数据执行程序脚本，但有时可能需要在处理数据前运行一些脚本命令，这就需要使用BEGIN关键字，BEGIN会在awsk读取数据前强制执行该关键字后指定的脚本命令。</p><p>和BEGIN关键字相对应，END关键字允许我们指定一些脚本命令，awk会在读完数据后执行它们。</p><p>命令使用示例：</p><ul><li><p>查看本机IP地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 |awk &#39;&#x2F;inet&#x2F;&#123;print $2&#125;&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>查看本机剩余磁盘容量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h |awk &#39;&#x2F;\&#x2F;$&#x2F;&#123;print $4&#125;&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>统计系统用户个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#39;$3&lt;1000&#123;x++&#125; END&#123;print x&#125;&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>输出其中登录Shell不以nologin结尾（对第7个字段做!~反向匹配）的用户名、登录Shell信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#39;$7!~&#x2F;nologin$&#x2F;&#123;print $1,$7&#125;&#39; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>输出/etc/passwd文件中前三行记录的用户名和用户uid。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -3 &#x2F;etc&#x2F;passwd | awk  &#39;BEGIN&#123;FS&#x3D;&quot;:&quot;;print &quot;name\tuid&quot;&#125;&#123;print $1,&quot;\t&quot;$3&#125;END&#123;print &quot;sum lines &quot;NR&#125;&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>查看tcp连接数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -na | awk &#39;&#x2F;^tcp&#x2F; &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>关闭指定服务的所有的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep httpd | awk &#123;&#39;print $2&#39;&#125; | xargs kill -9</span><br></pre></td></tr></table></figure></li></ul><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>命令描述：cut命令主要用来切割字符串，可以对输入的数据进行切割然后输出。</p><p>命令格式：<code>cut [参数] [文件]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">以字节为单位进行分割</td></tr><tr><td align="left">-c</td><td align="left">以字符为单位进行分割</td></tr><tr><td align="left">-d</td><td align="left">自定义分隔符，默认为制表符</td></tr></tbody></table><p>命令使用示例：</p><ul><li>按字节进行切割。</li></ul><p><img src="https://img.alicdn.com/tfs/TB1ulVKHQT2gK0jSZFkXXcIQFXa-514-109.png" alt="img"></p><ul><li>按字符进行切割。</li></ul><p><img src="https://img.alicdn.com/tfs/TB1HqRHHKH2gK0jSZFEXXcqMpXa-494-150.png" alt="img"></p><ul><li>按指定字符进行切割。</li></ul><p><img src="https://img.alicdn.com/tfs/TB17VNGHUT1gK0jSZFrXXcNCXXa-516-107.png" alt="img"></p><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>命令描述：tr命令用于对来自标准输入的字符进行替换、压缩和删除。</p><p>命令格式：<code>tr [参数] [文本]</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">反选指定字符</td></tr><tr><td align="left">-d</td><td align="left">删除指定字符</td></tr><tr><td align="left">-s</td><td align="left">将重复的字符缩减成一个字符</td></tr><tr><td align="left">-t [第一字符集] [第二字符集]</td><td align="left">删除第一字符集较第二字符集多出的字符，使两个字符集长度相等</td></tr></tbody></table><p>命令使用示例：</p><ul><li><p>将输入字符由大写转换为小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;HELLO WORLD&quot; | tr &#39;A-Z&#39; &#39;a-z&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>删除字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello 123 world 456&quot; | tr -d &#39;0-9&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>压缩字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;thissss is      a text linnnnnnne.&quot; | tr -s &#39; sn&#39;</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>产生随机密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;dev&#x2F;urandom | tr -dc a-zA-Z0-9 | head -c 13</span><br></pre></td></tr></table></figure><p>命令输出结果：</p><ul><li><img src="https://img.alicdn.com/tfs/TB1kGFGHQP2gK0jSZPxXXacQpXa-573-69.png" alt="img"></li></ul></li></ul><h1 id="Linux指令入门-系统管理"><a href="#Linux指令入门-系统管理" class="headerlink" title="Linux指令入门-系统管理"></a>Linux指令入门-系统管理</h1><h2 id="连接ECS服务器-1"><a href="#连接ECS服务器-1" class="headerlink" title="连接ECS服务器"></a>连接ECS服务器</h2><p>\1.  打开系统自带的终端工具。</p><ul><li>Windows：CMD或Powershell。</li><li>MAC：Terminal。</li></ul><p>Windows用户请检查系统中是否安装有ssh工具。检查方法：</p><p>1）在终端中输入命令ssh -V。</p><p>2）出现如下结果说明已安装。</p><p><img src="https://img.alicdn.com/tfs/TB1bF9nc5cKOu4jSZKbXXc19XXa-336-48.png" alt="img"></p><p>3）否则请下载安装 <a href="https://www.mls-software.com/files/setupssh-8.2p1-1.exe">OpenSSH。</a></p><p>\2.  在终端中输入连接命令ssh [username]@[ipaddress]。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@123.123.123.123</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1OlyaHXT7gK0jSZFpXXaTkpXa-290-257.jpg" alt="img"></p><p>命令显示结果如下：</p><p><img src="https://img.alicdn.com/tfs/TB1mWdXc5cKOu4jSZKbXXc19XXa-644-228.png" alt="img"></p><p>\3.  输入yes。</p><p>\4.  同意继续后将会提示输入登录密码。 密码为已创建的云服务的ECS的登录密码。</p><p><img src="https://img.alicdn.com/tfs/TB1FzjSHqL7gK0jSZFBXXXZZpXa-637-75.png" alt="img"></p><p>登录成功后会显示如下信息。</p><p><img src="https://img.alicdn.com/tfs/TB1iRbWHAP2gK0jSZPxXXacQpXa-516-157.png" alt="img"></p><h2 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h2><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>命令描述：echo命令用于在终端输出字符串或变量提取后的值。</p><p>命令格式：<code>echo [字符串 | $变量]</code>。</p><p>命令用法示例：</p><ul><li><p>显示普通字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></li><li><p>显示变量</p><p>首先在shell环境中定义一个临时变量name。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export name&#x3D;&quot;Tom&quot;</span><br></pre></td></tr></table></figure><p>使用echo命令将变量name的值显示到终端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1P6NMHHH1gK0jSZFwXXc7aXXa-506-89.png" alt="img"></p><ul><li><p>显示结果定向至文件</p><p>以下命令会将文本<code>This is a test text.</code>输出重定向到文件test.txt中，如果文件已存在，将会覆盖文件内容，如果不存在则创建。其中<code>&gt;</code>符号表示输出重定向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;This is a test text.&quot; &gt; test.txt</span><br></pre></td></tr></table></figure><p>如果您希望将文本追加到文件内容最后，而不是覆盖它，请使用<code>&gt;&gt;</code>输出追加重定向符号。</p></li><li><p>显示命令执行结果</p><p>以下命令将会在终端显示当前的工作路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#96;pwd&#96;</span><br></pre></td></tr></table></figure><p>注意：pwd命令是用一对反引号（``）包裹，而不是一对单引号（’’）。</p><p>使用<code>$(command)</code>形式可以达到相同效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $(pwd)</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1ntFMHNv1gK0jSZFFXXb0sXXa-513-154.png" alt="img"></p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>命令描述：date命令用于显示和设置系统的时间和日期。</p><p>命令格式：<code>date [选项] [+格式]</code>。</p><p>其中，时间格式的部分控制字符解释如下：</p><table><thead><tr><th align="left">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%a</td><td align="left">当地时间的星期名缩写（例如： 日，代表星期日）</td></tr><tr><td align="left">%A</td><td align="left">当地时间的星期名全称 （例如：星期日）</td></tr><tr><td align="left">%b</td><td align="left">当地时间的月名缩写 （例如：一，代表一月）</td></tr><tr><td align="left">%B</td><td align="left">当地时间的月名全称 （例如：一月）</td></tr><tr><td align="left">%c</td><td align="left">当地时间的日期和时间 （例如：2005年3月3日 星期四 23:05:25）</td></tr><tr><td align="left">%C</td><td align="left">世纪；比如 %Y，通常为省略当前年份的后两位数字（例如：20）</td></tr><tr><td align="left">%d</td><td align="left">按月计的日期（例如：01）</td></tr><tr><td align="left">%D</td><td align="left">按月计的日期；等于%m/%d/%y</td></tr><tr><td align="left">%F</td><td align="left">完整日期格式，等价于 %Y-%m-%d</td></tr><tr><td align="left">%j</td><td align="left">按年计的日期（001-366）</td></tr><tr><td align="left">%p</td><td align="left">按年计的日期（001-366）</td></tr><tr><td align="left">%r</td><td align="left">当地时间下的 12 小时时钟时间 （例如：11:11:04 下午）</td></tr><tr><td align="left">%R</td><td align="left">24 小时时间的时和分，等价于 %H:%M</td></tr><tr><td align="left">%s</td><td align="left">自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数</td></tr><tr><td align="left">%T</td><td align="left">时间，等于%H:%M:%S</td></tr><tr><td align="left">%U</td><td align="left">一年中的第几周，以周日为每星期第一天（00-53）</td></tr><tr><td align="left">%x</td><td align="left">当地时间下的日期描述 （例如：12/31/99）</td></tr><tr><td align="left">%X</td><td align="left">当地时间下的时间描述 （例如：23:13:48）</td></tr><tr><td align="left">%w</td><td align="left">一星期中的第几日（0-6），0 代表周一</td></tr><tr><td align="left">%W</td><td align="left">一星期中的第几日（0-6），0 代表周一</td></tr></tbody></table><p>命令用法示例：</p><ul><li><p>按照默认格式查看当前系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1EXbMjcKfxu4jSZPfXXb3dXXa-476-46.png" alt="img"></p><ul><li><p>按照指定格式查看当前系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1tv9Yc5cKOu4jSZKbXXc19XXa-494-48.png" alt="img"></p><ul><li><p>查看今天是当年中的第几天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &quot;+%j&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1Qq4OHKH2gK0jSZJnXXaT1FXa-492-46.png" alt="img"></p><ul><li><p>将系统的当前时间设置为2020年02月20日20点20分20秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &quot;20200220 20:20:20&quot;</span><br></pre></td></tr></table></figure><p>输出结果：</p></li></ul><p><img src="https://img.alicdn.com/tfs/TB1sUJGHFY7gK0jSZKzXXaikpXa-576-47.png" alt="img"></p><ul><li><p>校正系统时间，与网络时间同步</p><p>a. 安装ntp校时工具</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure><p>  b. 用ntpdate从时间服务器更新时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate time.nist.gov</span><br></pre></td></tr></table></figure><p>  输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB11jd_Xj39YK4jSZPcXXXrUFXa-728-51.png" alt="img"></p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>命令描述：在终端中下载文件。</p><p>命令格式：<code>wget [参数] 下载地址</code>。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">后台下载</td></tr><tr><td align="left">-P</td><td align="left">下载到指定目录</td></tr><tr><td align="left">-t</td><td align="left">最大重试次数</td></tr><tr><td align="left">-c</td><td align="left">断点续传</td></tr><tr><td align="left">-p</td><td align="left">下载页面内所有资源，包括图片、视频等</td></tr><tr><td align="left">-r</td><td align="left">递归下载</td></tr></tbody></table><p>命令使用示例：</p><p>下载一张图片到路径/root/static/img/中，<code>-p</code>参数默认值为当前路径，如果指定路径不存在会自动创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P &#x2F;root&#x2F;static&#x2F;img&#x2F; http:&#x2F;&#x2F;img.alicdn.com&#x2F;tfs&#x2F;TB1.R._t7L0gK0jSZFxXXXWHVXa-2666-1500.png</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1vQxHHFT7gK0jSZFpXXaTkpXa-1740-257.png" alt="img"></p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>命令描述：ps命令用于查看系统中的进程状态。</p><p>命令格式：<code>ps [参数]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">显示现行终端机下的所有程序，包括其他用户的程序</td></tr><tr><td align="left">-u</td><td align="left">以用户为主的格式来显示程序状况</td></tr><tr><td align="left">-x</td><td align="left">显示没有控制终端的进程，同时显示各个命令的具体路径</td></tr><tr><td align="left">-e</td><td align="left">列出程序时，显示每个程序所使用的环境变量</td></tr><tr><td align="left">-f</td><td align="left">显示当前所有的进程</td></tr><tr><td align="left">-t</td><td align="left">指定终端机编号，并列出属于该终端机的程序的状况</td></tr></tbody></table><p>命令使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep sshd</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1PWHcaepyVu4jSZFhXXbBpVXa-588-93.png" alt="img"></p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>命令描述：top命令动态地监视进程活动与系统负载等信息。</p><p>命令使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1RGHcaepyVu4jSZFhXXbBpVXa-700-345.png" alt="img"></p><p>命令输出参数解释：</p><p>以上命令输出视图中分为两个区域，一个统计信息区，一个进程信息区。</p><ul><li><p>统计信息区</p><ul><li>第一行信息依次为：系统时间、运行时间、登录终端数、系统负载（三个数值分别为1分钟、5分钟、15分钟内的平均值，数值越小意味着负载越低）。</li><li>第二行信息依次为：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</li><li>第三行信息依次为：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。</li><li>第四行信息依次为：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。</li><li>第五行信息依次为：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、预加载内存量。</li></ul></li><li><p>进程信息区</p><table><thead><tr><th align="left">列名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">PID</td><td align="left">进程ID</td></tr><tr><td align="left">USER</td><td align="left">进程所有者的用户名</td></tr><tr><td align="left">PR</td><td align="left">进程优先级</td></tr><tr><td align="left">NI</td><td align="left">nice值。负值表示高优先级，正值表示低优先级</td></tr><tr><td align="left">VIRT</td><td align="left">进程使用的虚拟内存总量，单位kb</td></tr><tr><td align="left">RES</td><td align="left">进程使用的、未被换出的物理内存大小，单位kb</td></tr><tr><td align="left">SHR</td><td align="left">共享内存大小，单位kb</td></tr><tr><td align="left">S</td><td align="left">进程状态D：不可中断的睡眠状态R：正在运行S：睡眠T：停止Z：僵尸进程</td></tr><tr><td align="left">%CPU</td><td align="left">上次更新到现在的CPU时间占用百分比</td></tr><tr><td align="left">%MEM</td><td align="left">进程使用的物理内存百分比</td></tr><tr><td align="left">TIME+</td><td align="left">进程使用的CPU时间总计，单位1/100秒</td></tr><tr><td align="left">COMMAND</td><td align="left">命令名</td></tr></tbody></table></li></ul><p>按 q 键退出监控页面。</p><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>命令描述：pidof命令用于查询指定服务进程的PID值。</p><p>命令格式：<code>pidof [服务名称]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-s</td><td align="left">仅返回一个进程号</td></tr><tr><td align="left">-c</td><td align="left">只显示运行在root目录下的进程，这个选项只对root用户有效</td></tr><tr><td align="left">-o</td><td align="left">忽略指定进程号的进程</td></tr><tr><td align="left">-x</td><td align="left">显示由脚本开启的进程</td></tr></tbody></table><p>命令使用示例：</p><p>查询出crond服务下的所有进程ID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof crond</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://img.alicdn.com/tfs/TB1iG8KHQL0gK0jSZFAXXcA9pXa-486-44.png" alt="img"></p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>命令描述：kill命令用于终止指定PID的服务进程。</p><p>kill可将指定的信息送至程序。预设的信息为<code>SIGTERM(15)</code>，可将指定程序终止。若仍无法终止该程序，可使用<code>SIGKILL(9)</code>信息尝试强制删除程序。</p><p>命令格式：<code>kill [参数] [进程PID]</code>。</p><p>命令使用示例：</p><p>删除pid为1247的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1247</span><br></pre></td></tr></table></figure><h2 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h2><p>命令描述：killall命令用于终止指定名称的服务对应的全部进程。</p><p>命令格式：<code>killall [进程名称]</code>。</p><p>命令使用示例：</p><p>删除crond服务下的所有进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall crond</span><br></pre></td></tr></table></figure><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>命令描述：reboot命令用来重启系统。</p><p>命令格式：<code>reboot [-n] [-w] [-d] [-f] [-i]</code>。</p><p>命令参数说明：</p><ul><li>-n：保存数据后再重新启动系统。</li><li>-w：仅做测试，并不是真的将系统重新开机，只会把重新开机的数据写入记录文件/var/log/wtmp。</li><li>-d：重新启动时不把数据写入记录文件/var/tmp/wtmp。</li><li>-f：强制重新开机，不调用shutdown指令的功能。</li><li>-i：关闭网络设置之后再重新启动系统。</li></ul><p>命令使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h2><p>命令描述：poweroff命令用来关闭系统。</p><p>命令使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poweroff</span><br></pre></td></tr></table></figure><h2 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h2><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>命令描述：ifconfig命令用于获取网卡配置与网络状态等信息。</p><p>命令示例：</p><p><img src="https://img.alicdn.com/tfs/TB1L3dIHUH1gK0jSZSyXXXtlpXa-634-351.png" alt="img"></p><p>命令输出说明：</p><ul><li>第一部分的第一行显示网卡状态信息。<ul><li>eth0表示第一块网卡。</li><li>UP代表网卡开启状态。</li><li>RUNNING代表网卡的网线被接上。</li><li>MULTICAST表示支持组播。</li></ul></li><li>第二行显示网卡的网络信息。<ul><li>inet（IP地址）：172.16.132.195。</li><li>broadcast（广播地址）：172.16.143.255。</li><li>netmask（掩码地址）：255.255.240.0。</li></ul></li><li>RX表示接收数据包的情况，TX表示发送数据包的情况。</li><li>lo表示主机的回环网卡，是一种特殊的网络接口，不与任何实际设备连接，而是完全由软件实现。与回环地址（127.0.0.0/8 或 ::1/128）不同，回环网卡对系统显示为一块硬件。任何发送到该网卡上的数据都将立刻被同一网卡接收到。</li></ul><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>命令描述：uname命令用于查看系统内核与系统版本等信息。</p><p>命令语法：<code>uname [-amnrsv][--help][--version]</code></p><p>命令使用示例：</p><ul><li><p>显示系统信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>显示当前系统的硬件架构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -i</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>显示操作系统发行编号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>显示操作系统名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -s</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><ul><li><p>显示主机名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -n</span><br></pre></td></tr></table></figure><p>命令输出结果：</p></li></ul><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>命令描述：uptime 用于查看系统的负载信息。</p><p>命令使用示例：</p><p><img src="https://img.alicdn.com/tfs/TB13YVJHHr1gK0jSZFDXXb9yVXa-606-50.png" alt="img"></p><p>命令输出说明：</p><table><thead><tr><th align="left">负载信息</th><th align="left">命令输出值</th></tr></thead><tbody><tr><td align="left">当前服务器时间</td><td align="left">14:20:27</td></tr><tr><td align="left">当前服务器运行时长</td><td align="left">2 min</td></tr><tr><td align="left">当前用户数</td><td align="left">2 users</td></tr><tr><td align="left">当前负载情况</td><td align="left"><code>load average: 0.03, 0.04, 0.02</code>（分别取1min，5min，15min的均值）</td></tr></tbody></table><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>命令描述：free用于显示当前系统中内存的使用量信息。</p><p>命令语法：<code>free [-bkmotV][-s &lt;间隔秒数&gt;]</code>。</p><p>命令参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">以Byte为单位显示内存使用情况</td></tr><tr><td align="left">-k</td><td align="left">以KB为单位显示内存使用情况</td></tr><tr><td align="left">-m</td><td align="left">以MB为单位显示内存使用情况</td></tr><tr><td align="left">-h</td><td align="left">以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。</td></tr></tbody></table><p>命令使用示例：</p><p><img src="https://img.alicdn.com/tfs/TB1xm4IHHr1gK0jSZR0XXbP8XXa-747-88.png" alt="img"></p><p>命令输出说明：</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">total</td><td align="left">物理内存总数</td></tr><tr><td align="left">used</td><td align="left">已经使用的内存数</td></tr><tr><td align="left">free</td><td align="left">空间的内存数</td></tr><tr><td align="left">share</td><td align="left">多个进程共享的内存总额</td></tr><tr><td align="left">buff/cache</td><td align="left">应用使用内存数</td></tr><tr><td align="left">available</td><td align="left">可用的内存数</td></tr><tr><td align="left">Swap</td><td align="left">虚拟内存（阿里云ECS服务器默认不开启虚拟内存）</td></tr></tbody></table><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>命令描述：who 命令显示关于当前在本地系统上的所有用户的信息。</p><p>命令使用示例：</p><ul><li>显示当前登录系统的用户</li></ul><p><img src="https://img.alicdn.com/tfs/TB1sTdKHQY2gK0jSZFgXXc5OFXa-527-69.png" alt="img"></p><ul><li>显示用户登录来源</li></ul><p><img src="https://img.alicdn.com/tfs/TB1phBIHKT2gK0jSZFvXXXnFXXa-524-94.png" alt="img"></p><ul><li>只显示当前用户</li></ul><p><img src="https://img.alicdn.com/tfs/TB1fMFKHO_1gK0jSZFqXXcpaXXa-510-67.png" alt="img"></p><ul><li>精简模式显示</li></ul><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><img src="https://img.alicdn.com/tfs/TB1saBJHQP2gK0jSZPxXXacQpXa-452-65.png" alt="img"></h2><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>命令描述： last 命令用于显示用户最近登录信息。</p><p>命令使用示例：</p><p><img src="https://img.alicdn.com/tfs/TB107xHHQL0gK0jSZFtXXXQCXXa-645-215.png" alt="img"></p><p>由于这些信息都是以日志文件的形式保存在系统中，黑客可以很容易地对内容进行篡改，所以该命令输出的信息并不能作为服务器是否被入侵的依据。</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>命令描述：history命令用于显示历史执行过的命令。</p><p>bash默认记录1000条执行过的历史命令，被记录在~/.bash_history文件中。</p><p>命令使用示例：</p><ul><li>显示最新10条执行过的命令。</li></ul><p><img src="https://img.alicdn.com/tfs/TB1_PNMHHH1gK0jSZFwXXc7aXXa-592-238.png" alt="img"></p><ul><li><p>清除历史记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history -c</span><br></pre></td></tr></table></figure></li></ul><h1 id="基于ECS搭建云上博客"><a href="#基于ECS搭建云上博客" class="headerlink" title="基于ECS搭建云上博客"></a>基于ECS搭建云上博客</h1><h2 id="连接ECS服务器-2"><a href="#连接ECS服务器-2" class="headerlink" title="连接ECS服务器"></a>连接ECS服务器</h2><p>\1.  打开系统自带的终端工具。</p><ul><li>Windows：CMD或Powershell。</li><li>MAC：Terminal。</li></ul><p>Windows用户请检查系统中是否安装有ssh工具。检查方法：</p><p>1）在终端中输入命令ssh -V。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -V</span><br></pre></td></tr></table></figure><p>2）出现如下结果说明已安装。</p><p><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/2223009851/p102980.png" alt="查看ssh版本"></p><p>3）否则请下载安装<a href="https://www.mls-software.com/files/setupssh-8.2p1-1.exe">OpenSSH</a>。</p><p>\2.  在终端中输入连接命令ssh [username]@[ipaddress]。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@123.123.123.123</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1n5y0E7T2gK0jSZFkXXcIQFXa-327-286.jpg" alt="img"></p><p>命令显示结果如下：</p><p><img src="https://img.alicdn.com/tfs/TB1mWdXc5cKOu4jSZKbXXc19XXa-644-228.png" alt="img"></p><p>\3.  输入<code>yes</code>。</p><p>\4.  同意继续后将会提示输入登录密码。 密码为已创建的云服务的ECS的登录密码。</p><p><img src="https://img.alicdn.com/tfs/TB1FzjSHqL7gK0jSZFBXXXZZpXa-637-75.png" alt="img"></p><p>登录成功后会显示如下信息。</p><p><img src="https://img.alicdn.com/tfs/TB1iRbWHAP2gK0jSZPxXXacQpXa-516-157.png" alt="img"></p><h2 id="安装-Apache-HTTP-服务"><a href="#安装-Apache-HTTP-服务" class="headerlink" title="安装 Apache HTTP 服务"></a>安装 Apache HTTP 服务</h2><p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</p><p>\1.  执行如下命令，安装Apache服务及其扩展包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</span><br></pre></td></tr></table></figure><p>返回类似如下图结果则表示安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1l7DUHpY7gK0jSZKzXXaikpXa-1050-137.png" alt="img"></p><p>\2.  执行如下命令，启动Apache服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure><p>\3.  测试Apache服务是否安装并启动成功。</p><p>Apache默认监听80端口，所以只需在浏览器访问ECS分配的IP地址http://&lt;ECS公网地址&gt;，如下图：</p><p><img src="https://img.alicdn.com/tfs/TB1HmVpaepyVu4jSZFhXXbBpVXa-1920-937.png" alt="img"></p><h2 id="安装-MySQL-数据库"><a href="#安装-MySQL-数据库" class="headerlink" title="安装 MySQL 数据库"></a>安装 MySQL 数据库</h2><p>由于使用wordpress搭建云上博客，需要使用MySQL数据库存储数据，所以这一步我们安装一下MySQL。</p><p>\1.  执行如下命令，下载并安装MySQL官方的<code>Yum Repository</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1BRnVHxz1gK0jSZSgXXavwpXa-958-431.png" alt="img"></p><p>\2.  执行如下命令，启动 MySQL 数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>\3.  执行如下命令，查看MySQL运行状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1gszWHuT2gK0jSZFvXXXnFXXa-945-229.png" alt="img"></p><p>\4.  执行如下命令，查看MySQL初始密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1FmNpaepyVu4jSZFhXXbBpVXa-834-36.png" alt="img"></p><p>\5.  执行如下命令，登录数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1Wz6UHvb2gK0jSZK9XXaEgFXa-675-226.png" alt="img"></p><p>\6.  执行如下命令，修改MySQL默认密码。</p><blockquote><p><strong>说明</strong> 新密码设置的时候如果设置的过于简单会报错，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;NewPassWord1.&#39;;</span><br></pre></td></tr></table></figure><p>\7.  执行如下命令，创建wordpress库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database wordpress; </span><br></pre></td></tr></table></figure><p>\8.  执行如下命令，创建wordpress库。 执行如下命令，查看是否创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>\9.  输入<code>exit</code>退出数据库。</p><p><img src="https://img.alicdn.com/tfs/TB14Bj0HxD1gK0jSZFKXXcJrVXa-836-664.png" alt="img"></p><h2 id="安装-PHP-语言环境"><a href="#安装-PHP-语言环境" class="headerlink" title="安装 PHP 语言环境"></a>安装 PHP 语言环境</h2><p>WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把WordPress当作一个内容管理系统（CMS）来使用。</p><p>\1.  执行如下命令，安装PHP环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap</span><br></pre></td></tr></table></figure><p>\2.  执行如下命令创建PHP测试页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;phpinfo.php</span><br></pre></td></tr></table></figure><p>\3.  执行如下命令，重启Apache服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>\4.  打开浏览器，访问<code>http://&lt;ECS公网地址&gt;/phpinfo.php</code>，显示如下页面表示PHP语言环境安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1oCVpaepyVu4jSZFhXXbBpVXa-601-840.png" alt="img"></p><h2 id="Wordpress安装和配置"><a href="#Wordpress安装和配置" class="headerlink" title="Wordpress安装和配置"></a>Wordpress安装和配置</h2><p>本小节将在已搭建好的LAMP 环境中，安装部署 WordPress</p><p>\1.  执行如下命令，安装wordpress。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wordpress</span><br></pre></td></tr></table></figure><p>显示如下信息表示安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1b02VHEz1gK0jSZLeXXb9kVXa-1042-156.png" alt="img"></p><p>\2.  修改WordPress配置文件。</p><p>1）执行如下命令，修改wp-config.php指向路径为绝对路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进入&#x2F;usr&#x2F;share&#x2F;wordpress目录。</span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;wordpress</span><br><span class="line"># 修改路径。</span><br><span class="line">ln -snf &#x2F;etc&#x2F;wordpress&#x2F;wp-config.php wp-config.php</span><br><span class="line"># 查看修改后的目录结构。</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p>2）执行如下命令，移动wordpress到Apache根目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在Apache的根目录&#x2F;var&#x2F;www&#x2F;html下，创建一个wp-blog文件夹。</span><br><span class="line">mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog</span><br><span class="line">mv * &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog&#x2F;</span><br></pre></td></tr></table></figure><p>3）执行以下命令修改wp-config.php配置文件。</p><p>在执行命令前，请先替换以下三个参数值。</p><ul><li>database_name_here为之前步骤中创建的数据库名称，本示例为wordpress。</li><li>username_here为数据库的用户名，本示例为root。</li><li>password_here为数据库的登录密码，本示例为NewPassWord1.。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;database_name_here&#x2F;wordpress&#x2F;&#39; &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog&#x2F;wp-config.php</span><br><span class="line">sed -i &#39;s&#x2F;username_here&#x2F;root&#x2F;&#39; &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog&#x2F;wp-config.php</span><br><span class="line">sed -i &#39;s&#x2F;password_here&#x2F;NewPassWord1.&#x2F;&#39; &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog&#x2F;wp-config.php</span><br></pre></td></tr></table></figure><p>4）执行以下命令，查看配置文件信息是否修改成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-blog&#x2F;wp-config.php</span><br></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/tfs/TB1j02VHEz1gK0jSZLeXXb9kVXa-913-631.png" alt="img"></p><p>\3.  执行如下命令，重启Apache服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p> 测试Wordpress</p><p>完成以上所有步骤后，就可以测试我们基于ECS所搭建的云上博客了。</p><p>\1.  打开浏览器并访问http://&lt;ECS公网IP&gt;/wp-blog/wp-admin/install.php。</p><p>\2.  根据以下信息完成wordpress初始化配置。</p><ul><li>Site Title：站点名称，例如：Hello ADC。</li><li>Username：管理员用户名，例如：admin。</li><li>Password：访问密码，例如：cIxWg9t@a8MJBAnf%j。</li><li>Your Email：email地址，建议为真实有效的地址。若没有，可以填写虚拟email地址，但将无法接收信息，例如：<a href="mailto:&#x61;&#100;&#x6d;&#x69;&#110;&#64;&#97;&#x64;&#109;&#x69;&#110;&#x2e;&#99;&#111;&#109;">&#x61;&#100;&#x6d;&#x69;&#110;&#64;&#97;&#x64;&#109;&#x69;&#110;&#x2e;&#99;&#111;&#109;</a>。</li></ul><p><img src="https://img.alicdn.com/tfs/TB1pCnYHuH2gK0jSZFEXXcqMpXa-723-689.png" alt="img"></p><p>\3.  单击Install WordPress完成Wordpress初始化。</p><p>\4.  单击Log In进行登录。</p><p><img src="https://img.alicdn.com/tfs/TB1ear2HxD1gK0jSZFyXXciOVXa-803-464.png" alt="img"></p><p>\5.  输入设置的用户名和密码。</p><p><img src="https://img.alicdn.com/tfs/TB1kknYHAL0gK0jSZFAXXcA9pXa-704-862.png" alt="img"></p><p>\6.  登录后，您就可以添加博客进行发布了。</p><p> <img src="https://img.alicdn.com/tfs/TB1q7nYHAL0gK0jSZFAXXcA9pXa-939-420.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 基础指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些百度搜索小技巧，让你的搜索高效无广告</title>
      <link href="/posts/18865/"/>
      <url>/posts/18865/</url>
      
        <content type="html"><![CDATA[<p><strong>不同的搜索方式会导致搜索的结果往往大大不同，利用好搜索引擎可以大大提升我们查阅资料的效率</strong>，目前几乎所有的浏览器都适用以上几种小技巧，可以举一反三哦。</p><p> <strong>01</strong><br>去广告搜索</p><p>在百度中，经常搜索出来第一个页面都是广告，并且百度搜索提供的“广告”标志太不明显，很容易就中招点进了广告。可以先看下没有去广告搜索之前的效果，<strong>以搜索“瘦脸”为例，首屏共有6条信息，其中4条是不知名医院的广告</strong>。</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207074845819922910.jpg" alt="img"></p><p>未去广告的搜索结果</p><p>去广告的小技巧就是在搜索词后添加“**-advertisement<strong>”，例如“</strong>瘦脸 -advertisement**”，搜索词后是有一个空格的，这样就可以起到简单过滤广告的效果。</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207074886217278756.jpg" alt="img"></p><p>未去广告的搜索结果</p><p><strong>总结：搜索词 + “-advertisement”可以快速屏蔽百度搜索的广告信息。</strong></p><p> <strong>02</strong><br>特定网站搜索</p><p>特定的资源在特定的网站寻找，有时候会事半功倍。搜索的范围太广了，我们想指定搜索某个网站或者某些网站怎么办。我们可以使用“<strong>site:域名+搜索词</strong>”的方式<strong>进行指定网站快速搜索</strong>。<strong>注意site:后直接连接域名，然后空格才输入搜索词，搜索词可以继续叠加或者剔除</strong>。</p><p>我们使用“<strong>site:yunziyuan.com.cn WordPress</strong>”就<strong>可以在5G云源码分享网中快速找到WordPress相关资讯了</strong>。</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/baidu.png" alt="img"></p><p><strong>总结：使用site:域名 + 搜索词，可以在特定的网站内快速搜索。</strong></p><p> <strong>03</strong><br>去连接词的关键词搜索</p><p>经常在使用百度的时候输入一大长串句子进行搜索，有时候会发现，百度搜索将很多连接词等也识别成了关键词，如“什么”、“哪些”、“的”等等。</p><p>例如我们搜索“小程序有哪些坑”。</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207074945892443163.jpg" alt="img"></p><p>小程序有哪些坑</p><p>可以发现，“哪些”也被做成了关键词，按照搜索意愿，只要搜索结果把小程序的坑展示出来即可。这个时候我们<strong>可以去掉连接词，只保留关键的信息，并且使用空格连接起来</strong>。继续搜索“<strong>小程序 坑</strong>”，<strong>页面更加简洁，清晰明了</strong>：</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207074984364067010.jpg" alt="img"></p><p>去连接词搜索</p><p><strong>总结：使用百度搜索长句的时候，可以将句子中的关键词拆解出来，使用空格进行连接叠加关键词，可以更加精准搜索想要的结果，避免连接词的干扰。</strong></p><p> <strong>04</strong><br>限定文件类型搜索</p><p>想找一份简历Word模板，劳动合同Word模板，工资条Excel模板，PDF电子书？百度搜索出来的结果太杂乱了怎么办？</p><p>这个时候就可以使用限定文件类型搜索了，什么是文件类型搜索呢？简单来说就是搜索某种扩展名的文件。</p><p>我们使用“<strong>filetype:文件类型+搜索词</strong>”进行限定文件类型搜索，如<strong>搜索小程序的pdf教程，使用“filetype:pdf 小程序 教程”</strong></p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207075012517044092.jpg" alt="img"></p><p>搜索小程序教程pdf电子书</p><p><strong>总结：使用“filetype:文件类型 + 搜索词”搜索特定的文件，目前支持“doc，xls，ppt”等。</strong></p><p> <strong>05</strong><br>特定时间内的关键词搜索</p><p>经常<strong>需要搜索某段时间内的一些资讯或者信息，如果通过普通的搜索在进行查看无疑会消耗大量的时间，降低检索的效率</strong>，我们<strong>使用“关键词 20xx..20xx”就可以搜索某段时间内的信息，其中20xx表示年份</strong>。</p><p>如“<strong>天猫双十一营业额 2008..2017</strong>”表示2008年到2017年所有有关天猫双十一营业额的信息：</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207075043060648601.jpg" alt="img"></p><p>天猫双十一 2008..2017</p><p><strong>可以看到上述搜索出来的所有网页都是在2008年和2017年被收录的，即网页在2008年~2017年被产生出来。</strong></p><p><strong>总结：使用“关键词 20xx..20xx”搜索特定时间内关于某关键词的信息。</strong></p><p> <strong>06</strong><br>去除特定关键词搜索</p><p>搜索的时候，除了搜索关键词A，有时候要需要排除关键词B、关键词C等等。去除特定关键词搜索给我们提供了一个很好的解决方案，前面的去除广告也是这个小技巧。</p><p>我们<strong>使用“关键词A -关键词B -关键词C”保证搜索的结果里只有“关键词A”没有“关键词B”和“关键词C”</strong>。</p><p>搜索：“祛痘美白”，我们先来看下不去除的效果：</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207075070275627654.jpg" alt="img"></p><p>未取出关键词</p><p><strong>可以看到满屏广告和推广链接</strong>，<strong>我们使用“祛痘美白 -推广 -广告 -推广链接 -广告链接”进行搜索</strong>（真是难为人）：</p><p><img src="http://ray-or.com/wp-content/uploads/2020/03/2020032207075126868800800.jpg" alt="img"></p><p>去除关键词效果</p><p>这个时候页面才显示整洁了很多，并且可以搜索到有用的信息。</p><p><strong>总结：使用“关键词A -关键词B -关键词C”去除某些特定关键词进行搜索。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables防火墙机制</title>
      <link href="/posts/12738/"/>
      <url>/posts/12738/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-iptables介绍"><a href="#第1章-iptables介绍" class="headerlink" title="第1章 iptables介绍"></a>第1章 iptables介绍</h1><h2 id="1-iptables是什么？"><a href="#1-iptables是什么？" class="headerlink" title="1.iptables是什么？"></a>1.iptables是什么？</h2><p>iptables是开源的基于数据包过滤的防火墙工具。</p><h2 id="2-iptables企业应用场景"><a href="#2-iptables企业应用场景" class="headerlink" title="2.iptables企业应用场景"></a>2.iptables企业应用场景</h2><p>1、主机防火墙（filter表的INPUT链）。<br> 2、局域网共享上网(nat表的POSTROUTING链)。半个路由器，NAT功能。<br> 3、端口及IP映射(nat表的PREROUTING链)，硬防的NAT功能。<br> 4、IP一对一映射。</p><h2 id="3-商用防火墙品牌"><a href="#3-商用防火墙品牌" class="headerlink" title="3.商用防火墙品牌"></a>3.商用防火墙品牌</h2><p>华为<br> 深信服<br> 思科<br> H3C<br> Juniper<br> 天融信<br> 飞塔<br> 网康<br> 绿盟科技<br> 金盾</p><h1 id="第2章-iptables工作流程"><a href="#第2章-iptables工作流程" class="headerlink" title="第2章 iptables工作流程"></a>第2章 iptables工作流程</h1><p>iptables是采用数据包过滤机制工作的，所以它会对请求的数据包的包头数据进行分析，并根据我们预先设定的规则进行匹配来决定是否可以进入主机。<br> 1.防火墙是一层层过滤的。实际是按照配置规则的顺序从上到下，从前到后进行过滤的。<br> 2.如果匹配上了规则，即明确表明是阻止还是通过，此时数据包就不在向下匹配新规则了。<br> 3.如果所有规则中没有明确表明是阻止还是通过这个数据包，也就是没有匹配上规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。<br> 4.防火墙的默认规则是对应链的所有的规则执行完以后才会执行的（最后执行的规则）。</p><h1 id="第3章-iptables四表五链"><a href="#第3章-iptables四表五链" class="headerlink" title="第3章 iptables四表五链"></a>第3章 iptables四表五链</h1><h2 id="1-表与链对应关系"><a href="#1-表与链对应关系" class="headerlink" title="1.表与链对应关系"></a>1.表与链对应关系</h2><p>实际iptables包含4张表和五个链，但主要记住两张表即可filter和nat表即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-58da03a179b40672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="2-FILTER表"><a href="#2-FILTER表" class="headerlink" title="2.FILTER表"></a>2.FILTER表</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b418ec2a196015e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="3-NAT表"><a href="#3-NAT表" class="headerlink" title="3.NAT表"></a>3.NAT表</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-1f52b22fab1683cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第4章-iptables工作原理示意图"><a href="#第4章-iptables工作原理示意图" class="headerlink" title="第4章 iptables工作原理示意图"></a>第4章 iptables工作原理示意图</h1><p><img src="http://upload-images.jianshu.io/upload_images/14248468-432aae0a08179e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/664/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-d6bea13f8f11f33a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第5章-iptables环境准备"><a href="#第5章-iptables环境准备" class="headerlink" title="第5章 iptables环境准备"></a>第5章 iptables环境准备</h1><h2 id="1-安装iptables管理命令"><a href="#1-安装iptables管理命令" class="headerlink" title="1.安装iptables管理命令"></a>1.安装iptables管理命令</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># yum install iptables-services -y</span></span><br></pre></td></tr></table></figure><h2 id="2-加载防火墙的内核模块"><a href="#2-加载防火墙的内核模块" class="headerlink" title="2.加载防火墙的内核模块"></a>2.加载防火墙的内核模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">modprobe ip_tables</span><br><span class="line">modprobe iptable_filter</span><br><span class="line">modprobe iptable_nat</span><br><span class="line">modprobe ip_conntrack</span><br><span class="line">modprobe ip_conntrack_ftp</span><br><span class="line">modprobe ip_nat_ftp</span><br><span class="line">modprobe ipt_state</span><br></pre></td></tr></table></figure><p>查看已加载的模块</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># lsmod |egrep &#x27;filter|nat|ipt&#x27;</span></span><br><span class="line">ipt_REJECT             <span class="number">12541</span>  <span class="number">0</span> </span><br><span class="line">nf_nat_ftp             <span class="number">12770</span>  <span class="number">0</span> </span><br><span class="line">nf_conntrack_ftp       <span class="number">18638</span>  <span class="number">1</span> nf_nat_ftp</span><br><span class="line">iptable_filter         <span class="number">12810</span>  <span class="number">0</span> </span><br><span class="line">xt_nat                 <span class="number">12681</span>  <span class="number">3</span> </span><br><span class="line">iptable_nat            <span class="number">12875</span>  <span class="number">1</span> </span><br><span class="line">nf_nat_ipv4            <span class="number">14115</span>  <span class="number">1</span> iptable_nat</span><br><span class="line">nf_nat                 <span class="number">26146</span>  <span class="number">3</span> nf_nat_ftp,nf_nat_ipv4,xt_nat</span><br><span class="line">nf_conntrack          <span class="number">105745</span>  <span class="number">7</span> nf_nat_ftp,nf_nat,xt_state,nf_nat_ipv4,xt_conntrack,nf_conntrack_ftp,nf_conntrack_ipv4</span><br><span class="line">ip_tables              <span class="number">27240</span>  <span class="number">2</span> iptable_filter,iptable_nat</span><br></pre></td></tr></table></figure><h2 id="3-启动防火墙"><a href="#3-启动防火墙" class="headerlink" title="3.启动防火墙"></a>3.启动防火墙</h2><p>首先停止firewalld</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>开启iptables</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">iptables</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">iptables</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><h1 id="第6章-iptables基本操作命令"><a href="#第6章-iptables基本操作命令" class="headerlink" title="第6章 iptables基本操作命令"></a>第6章 iptables基本操作命令</h1><h2 id="1-查看防火墙规则"><a href="#1-查看防火墙规则" class="headerlink" title="1.查看防火墙规则"></a>1.查看防火墙规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># iptables -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination </span><br></pre></td></tr></table></figure><h2 id="2-清除防火墙规则"><a href="#2-清除防火墙规则" class="headerlink" title="2.清除防火墙规则"></a>2.清除防火墙规则</h2><p>iptables -F     &lt;- 清除所有规则，不会处理默认的规则<br> iptables -X     &lt;- 删除用户自定义的链<br> iptables -Z     &lt;- 链的计数器清零（数据包计数器与数据包字节计数器）</p><h2 id="3-添加防火墙规则"><a href="#3-添加防火墙规则" class="headerlink" title="3.添加防火墙规则"></a>3.添加防火墙规则</h2><p>iptables  -t        &lt;-指定表d(efault: `filter’)<br> iptables  -A        &lt;-把规则添加到指定的链上，默认添加到最后一行。<br> iptables  -I        &lt;-插入规则，默认插入到第一行(封IP)。<br> iptables  -D        &lt;-删除链上的规则</p><h2 id="4-网络连接状态"><a href="#4-网络连接状态" class="headerlink" title="4.网络连接状态"></a>4.网络连接状态</h2><p>NEW：已经或将启动新的连接<br> ESTABLISHED：已建立的连接<br> RELATED：正在启动的新连接<br> INVALID：非法或无法识别的</p><h2 id="4-删除某个规则"><a href="#4-删除某个规则" class="headerlink" title="4.删除某个规则"></a>4.删除某个规则</h2><p>iptables -nL –line-numbers 查看规则号码<br> iptables -D INPUT 1  删除指定链上的指定序号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables A INPUT -p tcp -m state --dport 22 -j DROP</span><br><span class="line">iptables -nL</span><br><span class="line">iptables -nL --line-numbers</span><br><span class="line">iptables -D INPUT 1</span><br></pre></td></tr></table></figure><h1 id="第7章-iptables实战"><a href="#第7章-iptables实战" class="headerlink" title="第7章 iptables实战"></a>第7章 iptables实战</h1><h2 id="1-禁止某个端口访问"><a href="#1-禁止某个端口访问" class="headerlink" title="1.禁止某个端口访问"></a>1.禁止某个端口访问</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t <span class="built_in">filter</span> -<span class="type">A</span> <span class="type">INPUT</span> -p tcp --dport <span class="number">22</span> -j <span class="type">DROP</span></span><br></pre></td></tr></table></figure><p>规则解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-p       <span class="comment">#&lt;==指定过滤的协议-p（tcp,udp,icmp,all）</span></span><br><span class="line">--dport  <span class="comment">#&lt;==指定目标端口（用户请求的端口）。</span></span><br><span class="line">-j       <span class="comment">#&lt;==对规则的具体处理方法（ACCEPT,DROP,REJECT,SNAT/DNAT)</span></span><br><span class="line">--sport  <span class="comment">#&lt;==指定源端口。</span></span><br></pre></td></tr></table></figure><h2 id="2-禁止某个IP访问"><a href="#2-禁止某个IP访问" class="headerlink" title="2.禁止某个IP访问"></a>2.禁止某个IP访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -s 10.0.0.253 -i eth0 -j DROP</span><br><span class="line">iptables -A INPUT -p tcp ! -s 10.0.0.1 -i eth0 -j DROP</span><br><span class="line">iptables -A INPUT -p tcp ! -s 10.0.0.0&#x2F;24 -i eth0 -j DROP</span><br></pre></td></tr></table></figure><p>规则解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-s       <span class="comment">#&lt;==指定源地址或网段（192.168.1.0/24）。 ! 取反。</span></span><br><span class="line">-d       <span class="comment">#&lt;==指定目的地址（nat表prerouting）。</span></span><br><span class="line">-i       <span class="comment">#&lt;==进入的网络接口（eth0,eth1）。</span></span><br><span class="line">-o       <span class="comment">#&lt;==出去的网络接口（eth0,eth1）。</span></span><br></pre></td></tr></table></figure><h2 id="3-禁止除跳板机以外的IP访问"><a href="#3-禁止除跳板机以外的IP访问" class="headerlink" title="3.禁止除跳板机以外的IP访问"></a>3.禁止除跳板机以外的IP访问</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-I</span> <span class="selector-tag">INPUT</span> <span class="selector-tag">-p</span> <span class="selector-tag">tcp</span> ! <span class="selector-tag">-s</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-j</span> <span class="selector-tag">DROP</span></span><br></pre></td></tr></table></figure><h2 id="4-匹配端口范围"><a href="#4-匹配端口范围" class="headerlink" title="4.匹配端口范围"></a>4.匹配端口范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -m multiport --dport 21,22,23,24 -j DROP</span><br><span class="line">iptables -I INPUT -p tcp --dport 3306:8809 -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp --dport 18:80 -j DROP  <span class="comment">#&lt;==最佳</span></span><br></pre></td></tr></table></figure><h2 id="5-匹配ICMP类型"><a href="#5-匹配ICMP类型" class="headerlink" title="5.匹配ICMP类型"></a>5.匹配ICMP类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p icmp --icmp-type 8</span><br><span class="line">例：iptables -A INPUT -p icmp --icmp-type 8 -j DROP</span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type any -j ACCEPT</span><br><span class="line">iptables -A FORWARD -s 192.168.1.0&#x2F;24 -p icmp -m icmp --icmp-type any -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="6-练习题"><a href="#6-练习题" class="headerlink" title="6.练习题"></a>6.练习题</h2><p>1、封掉10.0.0.7</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-I</span> <span class="selector-tag">INPUT</span> <span class="selector-tag">-s</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span> <span class="selector-tag">-j</span> <span class="selector-tag">DROP</span></span><br></pre></td></tr></table></figure><p>2、让10.0.0.7和SSH客户端（10.0.0.1）服务器可以Ping，其它的不能Ping</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-I</span> <span class="selector-tag">INPUT</span> <span class="selector-tag">-p</span> <span class="selector-tag">icmp</span> <span class="selector-tag">--icmp-type</span> 8 <span class="selector-tag">-s</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span> <span class="selector-tag">-j</span> <span class="selector-tag">ACCEPT</span></span><br><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-I</span> <span class="selector-tag">INPUT</span> 2 <span class="selector-tag">-p</span> <span class="selector-tag">icmp</span> ! <span class="selector-tag">-s</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">--icmp-type</span> 8 <span class="selector-tag">-j</span> <span class="selector-tag">DROP</span></span><br></pre></td></tr></table></figure><p>3、封掉3306端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 3306 -j DROP</span><br></pre></td></tr></table></figure><h1 id="第8章-iptables企业案例"><a href="#第8章-iptables企业案例" class="headerlink" title="第8章 iptables企业案例"></a>第8章 iptables企业案例</h1><h2 id="1-部署一个安全的防火墙"><a href="#1-部署一个安全的防火墙" class="headerlink" title="1.部署一个安全的防火墙"></a>1.部署一个安全的防火墙</h2><p>两种思想：针对默认规则而言。<br> 逛公园：黑名单<br> 1、默认规则默认是允许的状态。<br> 看电影：白名单<br> 2、默认规则默认是不允许的状态。更安全。<br> 看电影的思想更安全。<br> 实战部署：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -F</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -X</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -Z</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -A INPUT -p tcp -m multiport --dport 80,443 -j ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -A INPUT -s 10.0.0.0/24 -j ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -A INPUT -i lo -j ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -P INPUT DROP</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -P FORWARD DROP</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -P OUTPUT ACCEPT</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># iptables -nL</span></span><br><span class="line"><span class="function">Chain <span class="title">INPUT</span> (<span class="params">policy DROP</span>)</span></span><br><span class="line"><span class="function">target     prot opt source               destination         </span></span><br><span class="line"><span class="function">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            multiport dports 80,443</span></span><br><span class="line"><span class="function">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span></span><br><span class="line"><span class="function">ACCEPT     all  --  10.0.0.0/24          0.0.0.0/0           </span></span><br><span class="line"><span class="function">ACCEPT     all  --  172.16.1.0/24        0.0.0.0/0           </span></span><br><span class="line"><span class="function">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Chain <span class="title">FORWARD</span> (<span class="params">policy DROP</span>)</span></span><br><span class="line"><span class="function">target     prot opt source               destination         </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Chain <span class="title">OUTPUT</span> (<span class="params">policy ACCEPT</span>)</span></span><br><span class="line"><span class="function">target     prot opt source               destination  </span></span><br></pre></td></tr></table></figure><p>命令集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 80,443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 10.0.1.0&#x2F;24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 172.16.1.0&#x2F;24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -nL</span><br></pre></td></tr></table></figure><h2 id="2-局域网共享上网"><a href="#2-局域网共享上网" class="headerlink" title="2.局域网共享上网"></a>2.局域网共享上网</h2><p>实验环境：<br> m01: 共享上网网关出口<br> web01:  只有内网地址，网关指向m01<br> 实验步骤：<br> m01操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT --to-source 10.0.0.61</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward = 1&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -A INPUT -p tcp -m multiport --dport 80,443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 10.0.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth1 -s 172.16.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -o eth0 -s 172.16.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -d 172.16.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -o eth1 -d 172.16.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><p>web01操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">NAME=eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=no</span><br><span class="line">IPADDR=<span class="number">10.0</span><span class="number">.0</span><span class="number">.7</span></span><br><span class="line">PREFIX=<span class="number">24</span></span><br><span class="line">GATEWAY=<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">DNS1=<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/sysconfig/network-scripts/ifcfg-eth1</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">NAME=eth1</span><br><span class="line">DEVICE=eth1</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=<span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span></span><br><span class="line">GATEWAY=<span class="number">172.16</span><span class="number">.1</span><span class="number">.61</span></span><br><span class="line">PREFIX=<span class="number">24</span></span><br><span class="line">DNS1=<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl restart network </span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># ip r</span></span><br><span class="line"><span class="keyword">default</span> via <span class="number">172.16</span><span class="number">.1</span><span class="number">.61</span> dev eth1  proto <span class="keyword">static</span>  metric <span class="number">100</span> </span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> dev eth1  proto kernel  scope link  src <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>  metric <span class="number">100</span> </span><br><span class="line"></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/resolv.conf    </span></span><br><span class="line">nameserver <span class="number">10.0</span><span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p>web01测试访问外网：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># ping www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">127</span> time=<span class="number">7.70</span> ms</span><br><span class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">127</span> time=<span class="number">8.92</span> ms</span><br></pre></td></tr></table></figure><h2 id="3-端口映射"><a href="#3-端口映射" class="headerlink" title="3.端口映射"></a>3.端口映射</h2><p>m01操作：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iptables</span> <span class="selector-tag">-t</span> <span class="selector-tag">nat</span> <span class="selector-tag">-A</span> <span class="selector-tag">PREROUTING</span> <span class="selector-tag">-d</span> 10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.61</span> <span class="selector-tag">-p</span> <span class="selector-tag">tcp</span> <span class="selector-tag">--dport</span> 9000 <span class="selector-tag">-j</span> <span class="selector-tag">DNAT</span> <span class="selector-tag">--to-destination</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span><span class="selector-pseudo">:22</span></span><br></pre></td></tr></table></figure><p>命令拆解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">表：<span class="selector-tag">nat</span></span><br><span class="line">链：<span class="selector-tag">PREROUTING</span></span><br><span class="line">目标<span class="selector-tag">IP</span>：10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.61</span></span><br><span class="line">目标端口：9000</span><br><span class="line">协议：<span class="selector-tag">tcp</span></span><br><span class="line">动作：<span class="selector-tag">DNAT</span></span><br><span class="line">目标<span class="selector-tag">IP</span>：172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span></span><br><span class="line">目标端口：22</span><br></pre></td></tr></table></figure><p>访问测试:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangyadeMacBook-Pro:~ zhangya$ ssh root@<span class="number">10.0</span><span class="number">.1</span><span class="number">.61</span> -p <span class="number">9000</span></span><br><span class="line">root@<span class="number">10.0</span><span class="number">.1</span><span class="number">.61&#x27;</span>s password:</span><br><span class="line">Last login: Tue Aug <span class="number">20</span> <span class="number">09</span>:<span class="number">38</span>:<span class="number">42</span> <span class="number">2019</span> <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.51</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta">#</span></span><br></pre></td></tr></table></figure><h2 id="4-IP映射"><a href="#4-IP映射" class="headerlink" title="4.IP映射"></a>4.IP映射</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># ip a add 10.0.1.62/24 dev eth0 label eth0:0</span></span><br><span class="line">[root@m01 ~]<span class="comment"># iptables -t nat -A PREROUTING -d 10.0.1.62 -j DNAT --to-destination 172.16.1.7</span></span><br><span class="line">[root@m01 ~]<span class="comment"># iptables -nL -t nat</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            10.0.1.61            tcp dpt:9000 to:172.16.1.7:22</span><br><span class="line">DNAT       all  --  0.0.0.0/0            10.0.1.62            to:172.16.1.7</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">SNAT       all  --  172.16.1.0/24        0.0.0.0/0            to:10.0.1.61</span><br></pre></td></tr></table></figure><p>测试访问：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zhangyadeMacBook-Pro:~ zhangya$ ssh root@<span class="number">10.0</span><span class="number">.1</span><span class="number">.62</span></span><br><span class="line">root@<span class="number">10.0</span><span class="number">.1</span><span class="number">.62&#x27;</span>s password:</span><br><span class="line">Last login: Wed Aug <span class="number">21</span> <span class="number">13</span>:<span class="number">30</span>:<span class="number">04</span> <span class="number">2019</span> <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># hostname</span></span><br><span class="line">web01</span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta">#</span></span><br></pre></td></tr></table></figure><h1 id="第9章-iptables规则保存"><a href="#第9章-iptables规则保存" class="headerlink" title="第9章 iptables规则保存"></a>第9章 iptables规则保存</h1><p>iptables-save &gt; 20190821    #将防火墙规则保存到文件中<br> iptables-save #将防火墙规则保存到配置文件中，防止重启后失效<br> iptables-restore  &lt; 20190821  #从配置文件里载入防火墙配置</p><h1 id="第10章-iptables防坑指南"><a href="#第10章-iptables防坑指南" class="headerlink" title="第10章 iptables防坑指南"></a>第10章 iptables防坑指南</h1><p>1.修改之前先导出备份一份<br> 2.修改的时候小心别把自己关在外面<br> 3.可以现在定时任务里添加一条定时清空的规则，等测试没问题再取消定时任务</p><h1 id="第11章-课堂笔记"><a href="#第11章-课堂笔记" class="headerlink" title="第11章 课堂笔记"></a>第11章 课堂笔记</h1><p>1.从上往下依次匹配<br> 2.一但匹配上,就不在往下匹配了<br> 3.默认规则,默认的情况,默认规则是放行所有</p><p>-A INPUT -p tcp -m state –state NEW -m tcp –dport 22 -j ACCEPT</p><p>-A INPUT        :把这条规则添加到INPUT链的最后一行<br> -p tcp          :指定协议为tcp<br> -m state –state NEW  :匹配TCP的连接状态<br> -m tcp –dport 22     :匹配TCP协议的目标端口<br> -j ACCEPT       :执行动作 放行</p><p>iptables A INPUT -p tcp -m state –dport 22 -j DROP<br> 禁止一个数据包:<br> tcp协议<br> 访问的端口是22</p><p>iptables -A INPUT -p tcp –dport 22 -j DROP<br> iptables -nL<br> iptables -nL –line-numbers<br> iptables -D INPUT 1</p><p>禁止源地址是10.0.0.7的主机访问22端口<br> iptables -A INPUT -p tcp -s 10.0.0.7 –dport 22 -j DROP</p><p>禁止源地址是10.0.0.7的主机访问任何端口<br> iptables -A INPUT -p tcp -s 10.0.0.7 -j DROP</p><p>禁止源地址是10.0.0.8的主机访问80端口<br> iptables -A INPUT -p tcp -s 10.0.0.8 –dport 80 -j DROP</p><p>禁止除了10.0.0.7以外的地址访问80端口<br> iptables -A INPUT -p tcp ! -s 10.0.0.7 –dport 80 -j DROP</p><p>2条规则冲突,会以谁先谁为准<br> iptables -I INPUT -p tcp -s 10.0.0.7 –dport 22 -j ACCEPT<br> iptables -I INPUT -p tcp -s 10.0.0.7 –dport 22 -j DROP</p><p>禁止10.0.0.7访问22和80端口<br> iptables -I INPUT -p tcp -s 10.0.0.7 -m multiport –dport 22,80 -j DROP</p><p>禁止10.0.0.7访问22到100之间的所有端口<br> iptables -A INPUT -p tcp -s 10.0.0.7 –dport 22:100 -j DROP</p><p>禁止所有主机ping<br> iptables -A INPUT -p icmp –icmp-type 8 -j DROP</p><p>放行10.0.0.7可以ping<br> iptables -I  INPUT  2 -p icmp –icmp-type 8 -s 10.0.0.7 -j ACCEPT</p><p>只允许10.0.0.7可以ping<br> ACCEPT     icmp –  10.0.0.7             0.0.0.0/0            icmptype 8<br> DROP       icmp –  0.0.0.0/0            0.0.0.0/0            icmptype 8</p><p>等同于上一条,优化版,只要不是10.0.0.7就不允许ping<br> iptables -I INPUT -p icmp –icmp-type 8 ! -s 10.0.0.7 -j DROP</p><p>优先级:<br> 匹配频次最高的条件放前面</p><p>100次<br> 80  90<br> 22  10</p><p>安全策略:<br> 一种是广场上巡逻的人,默认认为大家都是安全的,只有通缉令上的人需要关注<br> 一种是火车进站安检,默认所有人都是不安全的,只有有票的人才放行</p><p>iptables -F<br> iptables -X<br> iptables -Z<br> iptables -A INPUT -p tcp -m multiport –dport 80,443 -j ACCEPT<br> iptables -A INPUT -p tcp –dport 22 -j ACCEPT<br> iptables -A INPUT -s 10.0.0.0/24 -j ACCEPT<br> iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT<br> iptables -A INPUT -i lo -j ACCEPT<br> iptables -P INPUT DROP<br> iptables -P FORWARD DROP<br> iptables -P OUTPUT ACCEPT<br> iptables -nL</p><p>共享上网<br> iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT –to-source 10.0.0.61</p><p>-t nat                  :NAT表<br> -A POSTROUTING          :POSTROUTING链<br> -s 172.16.1.0/24        :源地址172.16.1.0/24<br> -j SNAT                 :SNAT 改写源地址<br> –to-source 10.0.0.61   :将源地址改写成10.0.0.61</p><p>172.16.1.7发给百度的数据包格式<br> 源端口:        80<br> 目的端口:   80<br> 源IP:        172.16.1.7<br> 目的IP:       百度的IP<br> 网关:     172.16.1.61</p><p>如果172.16.1.7想上网,需要改成如下的包格式</p><p>10.0.0.61访问百度<br> 源端口:        80<br> 目的端口:   80<br> 源IP:        10.0.0.61<br> 目的IP:       百度的IP<br> 网关:     10.0.0.2</p><p>天坑<br> 如果你的默认规则设置了拒绝所有，又执行了清除规则的语句-F<br> 那就意味着，所有的请求全部都拒绝了<br> 原因是-F不会改变默认规则</p><p>[root@web01 ~]# iptables -nL<br> Chain INPUT (policy DROP)<br> target     prot opt source               destination</p><p>Chain FORWARD (policy DROP)<br> target     prot opt source               destination</p><p>Chain OUTPUT (policy ACCEPT)<br> target     prot opt source               destination</p><p>解决：<br> 物理机：<br> 1.去机房自己清空<br> 2.让机房的人重启服务器，前提条件是规则没有写入配置里<br> 云服务器：<br> 直接通过控制台恢复</p><p>如何避免：<br> 1.测试规则之前，先写个定时任务，每隔5分钟重启一次iptables</p><p>FORWARD链默认为DROP的时候共享上网失效<br> 解决方法：<br> 第一种，添加2条规则<br> iptables -A FORWARD -s 172.16.1.0/24 -j ACCEPT<br> iptables -A FORWARD -d 172.16.1.0/24 -j ACCEPT<br> 第二种：修改FORWARD链默认规则为ACCEPT<br> iptables -P FORWARD  ACCEPT</p><p>端口映射：<br> 访问10.0.0.61的9000端口，跳转到172.16.1.7的22端口</p><p>访问10.0.0.61的9000端口的数据包格式<br> 源端口:        9000<br> 目的端口:   9000<br> 源IP:        10.0.0.1<br> 目的IP:       10.0.0.61</p><p>源端口:        22<br> 目的端口:   22<br> 源IP:        10.0.0.1<br> 目的IP:       172.16.1.7:22</p><p>iptables -t nat -A PREROUTING -d 10.0.0.61 -p tcp –dport 9000 -j DNAT –to-destination 172.16.1.7:22<br> 注意：<br> 改写数据包的目标IP和端口<br> 用到的是PREROUTING链</p><p>IP映射：<br> ip a add 10.0.1.62/24 dev eth0 label eth0:0<br> iptables -t nat -A PREROUTING -d 10.0.1.62 -j DNAT –to-destination 172.16.1.7</p><p>保存命令：<br> iptables-save<br> iptables-save &gt; iptables_m01<br> iptables-restore &lt; iptables_m01<br> iptables-save &gt; /etc/sysconfig/iptables</p><p>摘录自张导简书</p>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM-未完</title>
      <link href="/posts/51479/"/>
      <url>/posts/51479/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-KVM介绍"><a href="#第1章-KVM介绍" class="headerlink" title="第1章 KVM介绍"></a>第1章 KVM介绍</h1><h1 id="第2章-创建一个KVM虚拟机"><a href="#第2章-创建一个KVM虚拟机" class="headerlink" title="第2章 创建一个KVM虚拟机"></a>第2章 创建一个KVM虚拟机</h1><h2 id="1-VM虚拟机开启CPU虚拟化功能"><a href="#1-VM虚拟机开启CPU虚拟化功能" class="headerlink" title="1.VM虚拟机开启CPU虚拟化功能"></a>1.VM虚拟机开启CPU虚拟化功能</h2><p>设置-处理器-虚拟化</p><h2 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2.安装软件"></a>2.安装软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libvirt virt-install qemu-kvm -y</span><br></pre></td></tr></table></figure><h2 id="3-创建虚拟机"><a href="#3-创建虚拟机" class="headerlink" title="3.创建虚拟机"></a>3.创建虚拟机</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start libvirtd.service </span><br><span class="line">systemctl status libvirtd.service</span><br><span class="line"></span><br><span class="line">virt-install --virt-<span class="keyword">type</span> kvm --os-<span class="keyword">type</span>=linux --os-variant rhel7 --name centos7 --memory <span class="number">1024</span> --vcpus <span class="number">1</span> --disk /opt/centos7.raw,format=raw,size=<span class="number">10</span> --cdrom /opt/CentOS<span class="number">-7</span>-x86_64-DVD<span class="number">-1810.i</span>so --network network=<span class="keyword">default</span> --graphics vnc,listen=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --noautoconsole</span><br></pre></td></tr></table></figure><h2 id="4-连接虚拟机"><a href="#4-连接虚拟机" class="headerlink" title="4.连接虚拟机"></a>4.连接虚拟机</h2><p>安装VNC工具连接</p><h1 id="第3章-KVM常用管理命令"><a href="#第3章-KVM常用管理命令" class="headerlink" title="第3章 KVM常用管理命令"></a>第3章 KVM常用管理命令</h1><h2 id="1-查看虚拟机"><a href="#1-查看虚拟机" class="headerlink" title="1.查看虚拟机"></a>1.查看虚拟机</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">list</span></span><br><span class="line">virsh <span class="built_in">list</span> --all</span><br></pre></td></tr></table></figure><h2 id="2-启动虚拟机"><a href="#2-启动虚拟机" class="headerlink" title="2.启动虚拟机"></a>2.启动虚拟机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh start centos7</span><br></pre></td></tr></table></figure><h2 id="3-重启虚拟机"><a href="#3-重启虚拟机" class="headerlink" title="3.重启虚拟机"></a>3.重启虚拟机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh reboot centos7</span><br></pre></td></tr></table></figure><h2 id="4-关闭虚拟机"><a href="#4-关闭虚拟机" class="headerlink" title="4.关闭虚拟机"></a>4.关闭虚拟机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown centos7</span><br><span class="line">virsh destroy centos7</span><br></pre></td></tr></table></figure><h2 id="5-查看配置文件"><a href="#5-查看配置文件" class="headerlink" title="5.查看配置文件"></a>5.查看配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml centos7</span><br></pre></td></tr></table></figure><h2 id="6-导出配置文件"><a href="#6-导出配置文件" class="headerlink" title="6.导出配置文件"></a>6.导出配置文件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">virsh</span> <span class="selector-tag">dumpxml</span> <span class="selector-tag">centos7</span> &gt; <span class="selector-tag">centos7</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure><h2 id="7-删除虚拟机"><a href="#7-删除虚拟机" class="headerlink" title="7.删除虚拟机"></a>7.删除虚拟机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy centos7</span><br><span class="line">virsh undefine centos7</span><br></pre></td></tr></table></figure><h2 id="8-导入虚拟机"><a href="#8-导入虚拟机" class="headerlink" title="8.导入虚拟机"></a>8.导入虚拟机</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">virsh</span> <span class="selector-tag">define</span> <span class="selector-tag">centos7</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure><h2 id="9-虚拟机重命名"><a href="#9-虚拟机重命名" class="headerlink" title="9.虚拟机重命名"></a>9.虚拟机重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh domrename panghu shouhu</span><br></pre></td></tr></table></figure><h2 id="10-主机挂起"><a href="#10-主机挂起" class="headerlink" title="10.主机挂起"></a>10.主机挂起</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">suspend</span> centos7</span><br></pre></td></tr></table></figure><h2 id="11-恢复主机"><a href="#11-恢复主机" class="headerlink" title="11.恢复主机"></a>11.恢复主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh resume centos7</span><br></pre></td></tr></table></figure><h2 id="12-kvm虚拟机开机启动"><a href="#12-kvm虚拟机开机启动" class="headerlink" title="12.kvm虚拟机开机启动"></a>12.kvm虚拟机开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh autostart centos7</span><br><span class="line">ll &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;autostart&#x2F;</span><br></pre></td></tr></table></figure><h2 id="13-小项目："><a href="#13-小项目：" class="headerlink" title="13.小项目："></a>13.小项目：</h2><p>把虚拟机磁盘迁移到/data目录并且启动</p><h3 id="13-1-停止要迁移的虚拟机"><a href="#13-1-停止要迁移的虚拟机" class="headerlink" title="13.1.停止要迁移的虚拟机"></a>13.1.停止要迁移的虚拟机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown centos7</span><br></pre></td></tr></table></figure><h3 id="13-2-创建数据目录并移动磁盘文件"><a href="#13-2-创建数据目录并移动磁盘文件" class="headerlink" title="13.2.创建数据目录并移动磁盘文件"></a>13.2.创建数据目录并移动磁盘文件</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /<span class="keyword">data</span> </span><br><span class="line">mv /opt/centos7.raw /<span class="keyword">data</span> </span><br></pre></td></tr></table></figure><h3 id="13-3-使用edit命令修改配置文件"><a href="#13-3-使用edit命令修改配置文件" class="headerlink" title="13.3.使用edit命令修改配置文件"></a>13.3.使用edit命令修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virsh edit centos7</span><br><span class="line">--------------------</span><br><span class="line"> &lt;<span class="built_in">source</span> file=<span class="string">&#x27;/data/centos7.raw&#x27;</span>/&gt;</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><h3 id="13-4-启动虚拟机"><a href="#13-4-启动虚拟机" class="headerlink" title="13.4.启动虚拟机"></a>13.4.启动虚拟机</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh start centos7</span><br><span class="line">virsh <span class="built_in">list</span> </span><br></pre></td></tr></table></figure><h1 id="第4章-KVM连接方式"><a href="#第4章-KVM连接方式" class="headerlink" title="第4章 KVM连接方式"></a>第4章 KVM连接方式</h1><h2 id="1-VNC"><a href="#1-VNC" class="headerlink" title="1.VNC"></a>1.VNC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh vncdisplay centos7</span><br></pre></td></tr></table></figure><h2 id="2-SSH"><a href="#2-SSH" class="headerlink" title="2.SSH"></a>2.SSH</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> 192<span class="selector-class">.168</span><span class="selector-class">.122</span><span class="selector-class">.77</span></span><br></pre></td></tr></table></figure><h2 id="3-console显示"><a href="#3-console显示" class="headerlink" title="3.console显示"></a>3.console显示</h2><p>登录进需要开启console的虚拟机并添加参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="number">192.168</span><span class="number">.122</span><span class="number">.77</span></span><br><span class="line">grubby --update-kernel=ALL --args=<span class="string">&quot;console=ttyS0,115200n8&quot;</span></span><br><span class="line">grep <span class="string">&quot;115200&quot;</span> /boot/grub2/grub.cfg </span><br><span class="line">reboot</span><br><span class="line">virsh destroy centos7</span><br><span class="line">virsh start centos7</span><br><span class="line">virsh <span class="built_in">console</span> centos7</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + ]</span><br></pre></td></tr></table></figure><h1 id="第5章-KVM磁盘管理"><a href="#第5章-KVM磁盘管理" class="headerlink" title="第5章 KVM磁盘管理"></a>第5章 KVM磁盘管理</h1><h2 id="1-虚拟机磁盘格式介绍"><a href="#1-虚拟机磁盘格式介绍" class="headerlink" title="1.虚拟机磁盘格式介绍"></a>1.虚拟机磁盘格式介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw：不支持做快照，性能好</span><br><span class="line">qcow2：支持快照，性能不如raw好</span><br></pre></td></tr></table></figure><h2 id="2-查看磁盘信息"><a href="#2-查看磁盘信息" class="headerlink" title="2.查看磁盘信息"></a>2.查看磁盘信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qemu-img</span> <span class="selector-tag">info</span> <span class="selector-tag">centos7</span><span class="selector-class">.raw</span> </span><br></pre></td></tr></table></figure><h2 id="3-创建磁盘"><a href="#3-创建磁盘" class="headerlink" title="3.创建磁盘"></a>3.创建磁盘</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /<span class="keyword">data</span>/centos7.qcow2 <span class="number">1</span>G</span><br></pre></td></tr></table></figure><h2 id="4-查看磁盘信息"><a href="#4-查看磁盘信息" class="headerlink" title="4.查看磁盘信息"></a>4.查看磁盘信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qemu-img</span> <span class="selector-tag">info</span> <span class="selector-tag">centos7</span><span class="selector-class">.qcow2</span></span><br></pre></td></tr></table></figure><h2 id="5-调整磁盘容量-只能加不能减"><a href="#5-调整磁盘容量-只能加不能减" class="headerlink" title="5.调整磁盘容量: 只能加不能减"></a>5.调整磁盘容量: 只能加不能减</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize /<span class="keyword">data</span>/centos7.qcow2 <span class="number">1</span>T</span><br></pre></td></tr></table></figure><h2 id="6-磁盘格式转换"><a href="#6-磁盘格式转换" class="headerlink" title="6.磁盘格式转换"></a>6.磁盘格式转换</h2><h3 id="6-1-将虚拟机关机"><a href="#6-1-将虚拟机关机" class="headerlink" title="6.1.将虚拟机关机"></a>6.1.将虚拟机关机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy centos7</span><br></pre></td></tr></table></figure><h3 id="6-2-转换磁盘格式"><a href="#6-2-转换磁盘格式" class="headerlink" title="6.2.转换磁盘格式"></a>6.2.转换磁盘格式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qemu-img</span> <span class="selector-tag">convert</span> <span class="selector-tag">-f</span> <span class="selector-tag">raw</span> <span class="selector-tag">-O</span> <span class="selector-tag">qcow2</span> <span class="selector-tag">centos7</span><span class="selector-class">.raw</span> <span class="selector-tag">centos7</span><span class="selector-class">.qcow2</span>  </span><br></pre></td></tr></table></figure><h3 id="6-3-编辑配置文件修改为qcow2格式"><a href="#6-3-编辑配置文件修改为qcow2格式" class="headerlink" title="6.3.编辑配置文件修改为qcow2格式"></a>6.3.编辑配置文件修改为qcow2格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh edit centos7</span><br><span class="line">------------------------------------------</span><br><span class="line">      &lt;driver name=<span class="string">&#x27;qemu&#x27;</span> <span class="built_in">type</span>=<span class="string">&#x27;qcow2&#x27;</span>/&gt;</span><br><span class="line">      &lt;<span class="built_in">source</span> file=<span class="string">&#x27;/opt/centos7.qcow2&#x27;</span>/&gt;</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="6-4-重新启动"><a href="#6-4-重新启动" class="headerlink" title="6.4.重新启动"></a>6.4.重新启动</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh start centos7</span><br><span class="line">virsh <span class="built_in">console</span> centos7</span><br></pre></td></tr></table></figure><h1 id="第6章-KVM快照管理"><a href="#第6章-KVM快照管理" class="headerlink" title="第6章 KVM快照管理"></a>第6章 KVM快照管理</h1><h2 id="1-查看快照"><a href="#1-查看快照" class="headerlink" title="1.查看快照"></a>1.查看快照</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-<span class="built_in">list</span> centos7</span><br></pre></td></tr></table></figure><h2 id="2-创建快照"><a href="#2-创建快照" class="headerlink" title="2.创建快照"></a>2.创建快照</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-create-<span class="keyword">as</span> centos7 snap1</span><br><span class="line">virsh snapshot-<span class="keyword">list</span> centos7</span><br></pre></td></tr></table></figure><h2 id="3-恢复快照"><a href="#3-恢复快照" class="headerlink" title="3.恢复快照"></a>3.恢复快照</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-revert centos7 snap1</span><br></pre></td></tr></table></figure><h2 id="4-删除快照"><a href="#4-删除快照" class="headerlink" title="4.删除快照"></a>4.删除快照</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh snapshot-<span class="keyword">delete</span> centos7 snap1</span><br><span class="line">virsh snapshot-<span class="built_in">list</span> centos7</span><br></pre></td></tr></table></figure><h1 id="第7章-KVM克隆虚拟机"><a href="#第7章-KVM克隆虚拟机" class="headerlink" title="第7章 KVM克隆虚拟机"></a>第7章 KVM克隆虚拟机</h1><h2 id="1-完整克隆"><a href="#1-完整克隆" class="headerlink" title="1.完整克隆"></a>1.完整克隆</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh shutdown centos7</span><br><span class="line">virt-<span class="keyword">clone</span> --auto-<span class="keyword">clone</span> -o centos7 -n centos7-backup</span><br><span class="line">virsh <span class="keyword">list</span> --all</span><br><span class="line">virsh dumpxml web-blog-backup |grep <span class="string">&quot;qcow2&quot;</span></span><br><span class="line">virsh snapshot-<span class="keyword">list</span> centos7</span><br></pre></td></tr></table></figure><h2 id="2-链接克隆"><a href="#2-链接克隆" class="headerlink" title="2.链接克隆"></a>2.链接克隆</h2><h3 id="2-1-生成虚拟机磁盘文件"><a href="#2-1-生成虚拟机磁盘文件" class="headerlink" title="2.1 生成虚拟机磁盘文件"></a>2.1 生成虚拟机磁盘文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qemu-img</span> <span class="selector-tag">create</span> <span class="selector-tag">-f</span> <span class="selector-tag">qcow2</span> <span class="selector-tag">-b</span> <span class="selector-tag">centos7</span><span class="selector-class">.qcow2</span> <span class="selector-tag">centos7-clone</span><span class="selector-class">.qcow2</span> </span><br></pre></td></tr></table></figure><h3 id="2-2-查看磁盘信息"><a href="#2-2-查看磁盘信息" class="headerlink" title="2.2 查看磁盘信息"></a>2.2 查看磁盘信息</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qemu-img</span> <span class="selector-tag">info</span> <span class="selector-tag">centos7-clone</span><span class="selector-class">.qcow2</span> </span><br></pre></td></tr></table></figure><h3 id="2-3-生成虚拟机配置文件"><a href="#2-3-生成虚拟机配置文件" class="headerlink" title="2.3 生成虚拟机配置文件"></a>2.3 生成虚拟机配置文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh dumpxml centos7 &gt; centos7-<span class="keyword">clone</span>.xml</span><br><span class="line">sed -i <span class="string">&#x27;/uuid/d&#x27;</span> centos7-<span class="keyword">clone</span>.xml</span><br><span class="line">sed -i <span class="string">&#x27;/mac address/d&#x27;</span> centos7-<span class="keyword">clone</span>.xml</span><br><span class="line">sed -i <span class="string">&#x27;s#centos7.qcow2#centos7-clone.qcow2#g&#x27;</span> centos7-<span class="keyword">clone</span>.xml</span><br><span class="line">sed -i <span class="string">&#x27;/\&lt;nam/s#centos7#centos7-clone#g&#x27;</span> centos7-<span class="keyword">clone</span>.xml</span><br></pre></td></tr></table></figure><h3 id="2-3-导入配置文件"><a href="#2-3-导入配置文件" class="headerlink" title="2.3 导入配置文件"></a>2.3 导入配置文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh define centos7-<span class="keyword">clone</span>.xml </span><br><span class="line">virsh <span class="keyword">list</span> --all </span><br></pre></td></tr></table></figure><h3 id="2-4-启动虚拟机"><a href="#2-4-启动虚拟机" class="headerlink" title="2.4 启动虚拟机"></a>2.4 启动虚拟机</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh start centos7-<span class="keyword">clone</span></span><br></pre></td></tr></table></figure><h1 id="第8章-KVM桥接网络"><a href="#第8章-KVM桥接网络" class="headerlink" title="第8章 KVM桥接网络"></a>第8章 KVM桥接网络</h1><h2 id="1-创建桥接网卡"><a href="#1-创建桥接网卡" class="headerlink" title="1.创建桥接网卡"></a>1.创建桥接网卡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh iface-bridge eth0 br0</span><br></pre></td></tr></table></figure><h2 id="2-连接克隆新磁盘"><a href="#2-连接克隆新磁盘" class="headerlink" title="2.连接克隆新磁盘"></a>2.连接克隆新磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">qemu-img create -f qcow2 -b centos7.qcow2 bridge.qcow2</span><br></pre></td></tr></table></figure><h2 id="3-创建新虚拟机"><a href="#3-创建新虚拟机" class="headerlink" title="3.创建新虚拟机"></a>3.创建新虚拟机</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-<span class="keyword">type</span> kvm --os-<span class="keyword">type</span>=linux --os-variant rhel7 --name centos7-bridge --memory <span class="number">1024</span> --vcpus <span class="number">1</span> --disk /opt/bridge.qcow2 --boot hd --network bridge=br0 --graphics vnc,listen=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --noautoconsole</span><br></pre></td></tr></table></figure><h2 id="4-登录虚拟机查看网卡信息"><a href="#4-登录虚拟机查看网卡信息" class="headerlink" title="4.登录虚拟机查看网卡信息"></a>4.登录虚拟机查看网卡信息</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">console</span> centos7-bridge</span><br><span class="line">ip a</span><br></pre></td></tr></table></figure><h2 id="5-在其他主机ping测试"><a href="#5-在其他主机ping测试" class="headerlink" title="5.在其他主机ping测试"></a>5.在其他主机ping测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping xxxx</span><br></pre></td></tr></table></figure><h1 id="第9章-KVM虚拟机热添加磁盘"><a href="#第9章-KVM虚拟机热添加磁盘" class="headerlink" title="第9章 KVM虚拟机热添加磁盘"></a>第9章 KVM虚拟机热添加磁盘</h1><h2 id="1-热添加硬盘"><a href="#1-热添加硬盘" class="headerlink" title="1.热添加硬盘"></a>1.热添加硬盘</h2><h3 id="1-1-创建磁盘"><a href="#1-1-创建磁盘" class="headerlink" title="1.1 创建磁盘"></a>1.1 创建磁盘</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 centos7-<span class="keyword">add</span>.qcow2 <span class="number">10</span>G</span><br></pre></td></tr></table></figure><h3 id="1-2-临时生效添加"><a href="#1-2-临时生效添加" class="headerlink" title="1.2 临时生效添加"></a>1.2 临时生效添加</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh attach-disk centos7 /opt/centos7-<span class="keyword">add</span>.qcow2 vdb --subdriver qcow2</span><br></pre></td></tr></table></figure><h3 id="1-3-虚拟机格式化并挂载"><a href="#1-3-虚拟机格式化并挂载" class="headerlink" title="1.3 虚拟机格式化并挂载"></a>1.3 虚拟机格式化并挂载</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh <span class="built_in">console</span> centos7</span><br><span class="line">fdisk -l</span><br><span class="line">mkfs.xfs /dev/vdb</span><br><span class="line">mount  /dev/vdb  /mnt/</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="1-4-永久生效添加"><a href="#1-4-永久生效添加" class="headerlink" title="1.4 永久生效添加"></a>1.4 永久生效添加</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh attach-disk centos7 /opt/centos7-<span class="keyword">add</span>.qcow2 vdb --subdriver qcow2</span><br><span class="line">virsh attach-disk centos7 /opt/centos7-<span class="keyword">add</span>.qcow2 vdb --subdriver qcow2 --config</span><br></pre></td></tr></table></figure><h2 id="2-剥离磁盘"><a href="#2-剥离磁盘" class="headerlink" title="2.剥离磁盘"></a>2.剥离磁盘</h2><h3 id="2-1-临时剥离"><a href="#2-1-临时剥离" class="headerlink" title="2.1 临时剥离"></a>2.1 临时剥离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh detach-disk centos7 vdb</span><br></pre></td></tr></table></figure><h3 id="2-2-永久剥离"><a href="#2-2-永久剥离" class="headerlink" title="2.2 永久剥离"></a>2.2 永久剥离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh detach-disk centos7 vdb</span><br><span class="line">virsh detach-disk centos7 vdb --config</span><br></pre></td></tr></table></figure><h2 id="3-调整磁盘大小"><a href="#3-调整磁盘大小" class="headerlink" title="3.调整磁盘大小"></a>3.调整磁盘大小</h2><h3 id="3-1-调整磁盘大小"><a href="#3-1-调整磁盘大小" class="headerlink" title="3.1 调整磁盘大小"></a>3.1 调整磁盘大小</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info /opt/centos7-<span class="keyword">add</span>.qcow2</span><br><span class="line">qemu-img resize /opt/centos7-<span class="keyword">add</span>.qcow2 +<span class="number">10</span>G</span><br></pre></td></tr></table></figure><h3 id="3-2-添加到虚拟机并查看"><a href="#3-2-添加到虚拟机并查看" class="headerlink" title="3.2 添加到虚拟机并查看"></a>3.2 添加到虚拟机并查看</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh attach-disk centos7 /opt/centos7-<span class="keyword">add</span>.qcow2 vdb --subdriver qcow2</span><br><span class="line">virsh console centos7</span><br><span class="line">fdisk -l /dev/vdb</span><br><span class="line">mount /dev/vdb /mnt/</span><br><span class="line">df -h|tail <span class="number">-1</span> </span><br></pre></td></tr></table></figure><h3 id="3-3-调整磁盘信息"><a href="#3-3-调整磁盘信息" class="headerlink" title="3.3 调整磁盘信息"></a>3.3 调整磁盘信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs &#x2F;dev&#x2F;vdb</span><br><span class="line">df -h|tail -1</span><br></pre></td></tr></table></figure><h1 id="第10章-KVM热添加网卡"><a href="#第10章-KVM热添加网卡" class="headerlink" title="第10章 KVM热添加网卡"></a>第10章 KVM热添加网卡</h1><h2 id="1-临时添加"><a href="#1-临时添加" class="headerlink" title="1.临时添加"></a>1.临时添加</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">virsh</span> <span class="selector-tag">attach-interface</span> <span class="selector-tag">centos7</span> <span class="selector-tag">--type</span> <span class="selector-tag">bridge</span> <span class="selector-tag">--mac</span> 52<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:b1</span><span class="selector-pseudo">:b5</span><span class="selector-pseudo">:8a</span> <span class="selector-tag">--source</span> <span class="selector-tag">br0</span> <span class="selector-tag">--model</span> <span class="selector-tag">virtio</span> <span class="selector-tag">detachinterface</span></span><br></pre></td></tr></table></figure><h2 id="2-永久生效"><a href="#2-永久生效" class="headerlink" title="2.永久生效"></a>2.永久生效</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">virsh</span> <span class="selector-tag">attach-interface</span> <span class="selector-tag">centos7</span> <span class="selector-tag">--type</span> <span class="selector-tag">bridge</span> <span class="selector-tag">--mac</span> 52<span class="selector-pseudo">:54</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:b1</span><span class="selector-pseudo">:b5</span><span class="selector-pseudo">:8a</span> <span class="selector-tag">--source</span> <span class="selector-tag">br0</span> <span class="selector-tag">--model</span> <span class="selector-tag">virtio</span> <span class="selector-tag">detachinterface</span> <span class="selector-tag">--config</span> </span><br></pre></td></tr></table></figure><h2 id="3-临时剥离"><a href="#3-临时剥离" class="headerlink" title="3,临时剥离"></a>3,临时剥离</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh detach-<span class="class"><span class="keyword">interface</span> <span class="title">centos7</span> <span class="title">bridge</span></span></span><br></pre></td></tr></table></figure><h2 id="4-永久剥离"><a href="#4-永久剥离" class="headerlink" title="4.永久剥离"></a>4.永久剥离</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh detach-<span class="class"><span class="keyword">interface</span> <span class="title">centos7</span> <span class="title">bridge</span></span></span><br><span class="line">virsh detach-<span class="class"><span class="keyword">interface</span> <span class="title">centos7</span> <span class="title">bridge</span> --<span class="title">config</span></span></span><br></pre></td></tr></table></figure><h1 id="第11章-KVM热添加内存"><a href="#第11章-KVM热添加内存" class="headerlink" title="第11章 KVM热添加内存"></a>第11章 KVM热添加内存</h1><h2 id="1-创建虚拟机时直接添加最大内存参数"><a href="#1-创建虚拟机时直接添加最大内存参数" class="headerlink" title="1.创建虚拟机时直接添加最大内存参数"></a>1.创建虚拟机时直接添加最大内存参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-<span class="keyword">type</span> kvm --os-<span class="keyword">type</span>=linux --os-variant rhel7 --name centos7 --</span><br><span class="line">memory <span class="number">512</span>,maxmemory=<span class="number">2048</span> --vcpus <span class="number">1</span> --disk /opt/centos7.qcow2 --boot hd --network bridge=br0 --</span><br><span class="line">graphics vnc,listen=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --noautoconsole</span><br></pre></td></tr></table></figure><h2 id="2-如果创建虚拟机的时候没有设置最大内存限制，执行如下操作添加配置"><a href="#2-如果创建虚拟机的时候没有设置最大内存限制，执行如下操作添加配置" class="headerlink" title="2.如果创建虚拟机的时候没有设置最大内存限制，执行如下操作添加配置"></a>2.如果创建虚拟机的时候没有设置最大内存限制，执行如下操作添加配置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virsh destroy centos7</span><br><span class="line">virsh setmaxmem centos7 <span class="number">4096</span>M</span><br><span class="line">virsh start centos7 </span><br><span class="line">virsh console centos7</span><br><span class="line"><span class="built_in">free</span> -h </span><br></pre></td></tr></table></figure><h2 id="3-临时添加"><a href="#3-临时添加" class="headerlink" title="3.临时添加"></a>3.临时添加</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh setmem centos7 <span class="number">2048</span>M --live </span><br><span class="line">virsh console centos7</span><br><span class="line"><span class="built_in">free</span> -h </span><br></pre></td></tr></table></figure><h2 id="4-永久增大内存"><a href="#4-永久增大内存" class="headerlink" title="4.永久增大内存"></a>4.永久增大内存</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh setmem centos7 <span class="number">2048</span>M --config</span><br><span class="line">virsh console centos7</span><br><span class="line"><span class="built_in">free</span> -h </span><br></pre></td></tr></table></figure><h1 id="第12章-KVM冷添加CPU"><a href="#第12章-KVM冷添加CPU" class="headerlink" title="第12章 KVM冷添加CPU"></a>第12章 KVM冷添加CPU</h1><h2 id="1-编辑配置文件"><a href="#1-编辑配置文件" class="headerlink" title="1.编辑配置文件"></a>1.编辑配置文件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virsh edit centos7</span><br><span class="line">------------------------------------------------</span><br><span class="line">  &lt;vcpu placement=<span class="string">&#x27;static&#x27;</span> current=<span class="string">&#x27;2&#x27;</span>&gt;<span class="number">4</span>&lt;/vcpu&gt;</span><br><span class="line">------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="2-添加cpu核数"><a href="#2-添加cpu核数" class="headerlink" title="2.添加cpu核数"></a>2.添加cpu核数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh setvcpus centos7 4 --live </span><br></pre></td></tr></table></figure><h2 id="3-永久添加cpu核数"><a href="#3-永久添加cpu核数" class="headerlink" title="3.永久添加cpu核数"></a>3.永久添加cpu核数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setvcpus centos7 4 --config</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LInux系统介绍</title>
      <link href="/posts/21105/"/>
      <url>/posts/21105/</url>
      
        <content type="html"><![CDATA[<ul><li><p>**1.**linux版本有：redhat（收费），centos，ubuntu，suse（开发使用）</p></li><li><p><strong>2.</strong>/目录下的：etc配置文件目录，media挂载点，opt第三方安装目录，boot启动文件，home家，lost+found回收站，tmp临时，mnt挂载点， dev设备</p></li><li><p>**3.**主分区P，扩展分区E，主分区+扩展分区小于等于4个，逻辑分区从5开始</p></li><li><p>**4.**硬盘IDE（hd），scsi（sd），顺序（hda，hdb，hdc） </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令：fdisk -l                #查看磁盘情况</span><br><span class="line">命令：date                    #显示当前系统时间。-s修改时间</span><br><span class="line">命令：cal                     #显示当前日历</span><br><span class="line">命令：history                 #历史 </span><br><span class="line">命令：pwd                     #绝对路径</span><br><span class="line">命令：reboot，shutdown -r now，init 6 #重启</span><br><span class="line">命令：uname -r                #内核版本   2（主版本）.6（次版本，偶数为稳定版，奇数为开发版）.32（2.6版本修订了32次）-358.el6（表示支持多处理器）.i666（CPU） </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xoxoyun/MCDN/usr/uploads/2020/03/783762425.jpg" alt="1584085602.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux系统初识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sersync/lsync实时同步</title>
      <link href="/posts/53438/"/>
      <url>/posts/53438/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-为什么需要实时同步"><a href="#第一章-为什么需要实时同步" class="headerlink" title="第一章 为什么需要实时同步"></a>第一章 为什么需要实时同步</h1><h2 id="1-第二阶段实时同步解决了什么问题"><a href="#1-第二阶段实时同步解决了什么问题" class="headerlink" title="1.第二阶段实时同步解决了什么问题:"></a>1.第二阶段实时同步解决了什么问题:</h2><p>解决 NFS单点故障问题<br> 备份NFS数据并且提供冗余的服务功能</p><h2 id="2-实时同步难点"><a href="#2-实时同步难点" class="headerlink" title="2.实时同步难点"></a>2.实时同步难点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么条件才同步</span><br><span class="line">多久同步一次</span><br><span class="line">用什么备份方式同步</span><br><span class="line">用什么工具同步</span><br></pre></td></tr></table></figure><h1 id="第二章-inotify简介"><a href="#第二章-inotify简介" class="headerlink" title="第二章 inotify简介"></a>第二章 inotify简介</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Inotify</span>是一种强大的,细粒度的,异步的文件系统事件监视机制</span><br><span class="line"><span class="selector-tag">Linux2</span><span class="selector-class">.6</span><span class="selector-class">.13</span>起加入了<span class="selector-tag">inotify</span>支持,通过<span class="selector-tag">inotify</span>可以监控文件系统中添加,删除,修改,移动等各种事件</span><br><span class="line">利用这个内核接口,第三方软件就可以监控文件系统下文件的各种变化情况</span><br><span class="line">而<span class="selector-tag">inotify-tools</span>正是实施这样监控的软件</span><br></pre></td></tr></table></figure><p>关系图</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-e23cc9187ab60ed7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/448/format/webp" alt="img"></p><h1 id="第三章-Inotify实时同步"><a href="#第三章-Inotify实时同步" class="headerlink" title="第三章 Inotify实时同步"></a>第三章 Inotify实时同步</h1><h2 id="1-查看当前系统是否支持inotify"><a href="#1-查看当前系统是否支持inotify" class="headerlink" title="1.查看当前系统是否支持inotify"></a>1.查看当前系统是否支持inotify</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@nfs ~</span>]<span class="meta"># uname -r</span></span><br><span class="line"><span class="number">3.10</span><span class="number">.0</span><span class="number">-862.</span>el7.x86_64</span><br><span class="line">[<span class="meta">root@nfs ~</span>]<span class="meta"># ls -l /proc/sys/fs/inotify/</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Oct <span class="number">21</span> <span class="number">10</span>:<span class="number">47</span> max_queued_events</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Oct <span class="number">21</span> <span class="number">10</span>:<span class="number">47</span> max_user_instances</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Oct <span class="number">21</span> <span class="number">10</span>:<span class="number">47</span> max_user_watches</span><br><span class="line">===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====</span><br><span class="line">max_queued_events   =====&gt;设置inotify实例事件(<span class="keyword">event</span>)队列可容纳的事件数量</span><br><span class="line">max_user_instances  =====&gt;设置每个用户可以运行的inotify或者inotifywatch命令的进程数</span><br><span class="line">max_user_watches    =====&gt;设置inotifywait或者inotifywatch命令可以监视的文件数量(单进程)</span><br></pre></td></tr></table></figure><h2 id="2-安装inotify-tools"><a href="#2-安装inotify-tools" class="headerlink" title="2.安装inotify-tools"></a>2.安装inotify-tools</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@nfs ~</span>]<span class="meta"># yum install inotify-tools -y</span></span><br></pre></td></tr></table></figure><h2 id="3-inotifywait详细参数解释"><a href="#3-inotifywait详细参数解释" class="headerlink" title="3.inotifywait详细参数解释"></a>3.inotifywait详细参数解释</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">inotifywait参数说明</span><br><span class="line">参数名称            参数说明</span><br><span class="line">-m ,-monitor       始终保持事件监听状态</span><br><span class="line">-r,-recursive      递归查询目录</span><br><span class="line">-q,-quiet          只打印监控事件的信息</span><br><span class="line">-exclude           排除文件或目录时,不区分大小写</span><br><span class="line">-t,-timeout        超时时间</span><br><span class="line">--timefmt          指定时间输出格式</span><br><span class="line">--format           指定输出格式</span><br><span class="line">-e,event           后面指定增,删,改等事件</span><br><span class="line">inotifywait events 事件说明</span><br><span class="line">access             读取文件或目录内容</span><br><span class="line">modify             修改文件或目录内容</span><br><span class="line">attrib             文件或目录的属性改变</span><br><span class="line">close_write        修改真实文件内容</span><br><span class="line">close_nowrite   </span><br><span class="line"><span class="built_in">close</span>   </span><br><span class="line">open               文件或目录被打开</span><br><span class="line">moved_to           文件或目录移动到</span><br><span class="line">moved_from         文件或目录从...移动到</span><br><span class="line">move               移动文件或目录移动到监视目录</span><br><span class="line">create             在监视目录下创建文件或目录</span><br><span class="line"><span class="built_in">delete</span>             删除监视目录下的文件或目录</span><br><span class="line">delete_self </span><br><span class="line">umount             卸载文件系统</span><br></pre></td></tr></table></figure><h2 id="4-查看inotify默认参数"><a href="#4-查看inotify默认参数" class="headerlink" title="4.查看inotify默认参数"></a>4.查看inotify默认参数</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># sysctl -a |egrep max_queued_events</span></span><br><span class="line">fs.inotify.max_queued_events = <span class="number">16384</span></span><br><span class="line">[root@nfs01 ~]<span class="comment">#  sysctl -a |egrep max_user_watches</span></span><br><span class="line">fs.epoll.max_user_watches = <span class="number">201256</span></span><br><span class="line">fs.inotify.max_user_watches = <span class="number">8192</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># sysctl -a |egrep max_user_instances</span></span><br><span class="line">fs.inotify.max_user_instances = <span class="number">128</span></span><br></pre></td></tr></table></figure><h2 id="5-针对上述命令进行测试"><a href="#5-针对上述命令进行测试" class="headerlink" title="5.针对上述命令进行测试"></a>5.针对上述命令进行测试</h2><p>参数解释:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%T   <span class="comment">#调用并显示定义好的时间格式</span></span><br><span class="line">%w   <span class="comment">#显示发生变化的文件的绝对路径</span></span><br><span class="line">%f   <span class="comment">#显示监控到的文件名称,去掉后只显示目录路径</span></span><br><span class="line">-e delete,create   <span class="comment">#指定监控文件变化的类型 </span></span><br></pre></td></tr></table></figure><p>1.开启两个窗口:测试create和delete</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -mrq --timefmt <span class="string">&#x27;%d/%m/%y %H:%M&#x27;</span> --format <span class="string">&#x27;%T %w%f&#x27;</span> -e <span class="built_in">delete</span>,create /backup</span><br></pre></td></tr></table></figure><p>2.测试close_write</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -mrq --timefmt <span class="string">&#x27;%d/%m/%y %H:%M&#x27;</span> --format <span class="string">&#x27;%w%f&#x27;</span> -e close_write /backup</span><br></pre></td></tr></table></figure><p>3.打印出事件类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inotifywait -mrq --format <span class="string">&#x27;%w%f %e&#x27;</span> -e <span class="built_in">delete</span>,create /backup</span><br></pre></td></tr></table></figure><h2 id="6-把客户端监控到情况出发rsync推送变化的文件"><a href="#6-把客户端监控到情况出发rsync推送变化的文件" class="headerlink" title="6.把客户端监控到情况出发rsync推送变化的文件"></a>6.把客户端监控到情况出发rsync推送变化的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">Path=/data</span><br><span class="line">backup_Server=172.16.1.41</span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123456</span><br><span class="line"></span><br><span class="line">/usr/bin/inotifywait -mrq --format <span class="string">&#x27;%w%f&#x27;</span> -e create,close_write,delete /data | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;line&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$&#123;line&#125;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">       rsync -az <span class="variable">$&#123;line&#125;</span> rsync_backup@<span class="variable">$&#123;backup_Server&#125;</span>::data</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       rsync -az --delete /data/ rsync_backup@<span class="variable">$&#123;backup_Server&#125;</span>::data</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="7-inotify优缺点"><a href="#7-inotify优缺点" class="headerlink" title="7.inotify优缺点"></a>7.inotify优缺点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inotify优点</span><br><span class="line">1)监控文件系统事件变化</span><br><span class="line"></span><br><span class="line">inotify缺点</span><br><span class="line">1)并发如果大于200个文(10-100k),同步就会由延迟</span><br><span class="line">2)我们前面的脚本,每次都是全部推送一次,但是确实是增量的,也可以只同步变化的文件</span><br><span class="line">3)监控到事件后,调用rsync同步是单进程(加&amp;并发)</span><br><span class="line">4)我们自己写的脚本健壮性不高</span><br></pre></td></tr></table></figure><h1 id="第四章-sersync简介"><a href="#第四章-sersync简介" class="headerlink" title="第四章 sersync简介"></a>第四章 sersync简介</h1><h2 id="1-sersync介绍"><a href="#1-sersync介绍" class="headerlink" title="1.sersync介绍"></a>1.sersync介绍</h2><p>以下内容摘抄sersync作者官网的说明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sersync</span>主要用于服务器同步,<span class="selector-tag">web</span>镜像等功能.</span><br><span class="line">基于<span class="selector-tag">boost1</span><span class="selector-class">.41</span><span class="selector-class">.0</span>,<span class="selector-tag">inotify</span> <span class="selector-tag">api</span>,<span class="selector-tag">rsync</span> <span class="selector-tag">command</span>开发.</span><br><span class="line">目前使用的比较多的同步解决方案是<span class="selector-tag">inotify-tools</span>+<span class="selector-tag">rsync</span></span><br></pre></td></tr></table></figure><h2 id="2-sersync优点"><a href="#2-sersync优点" class="headerlink" title="2.sersync优点"></a>2.sersync优点</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1<span class="selector-class">.sersync</span>是使用<span class="selector-tag">c</span>++编写,而且对<span class="selector-tag">linux</span>系统文件系统产生的临时文件和重复的文件操作进行过滤(详细见附录,这个过滤脚本程序没有实现),所以结合<span class="selector-tag">rsync</span>同步的时候,节省了运行时耗和网络资源,因此更快</span><br><span class="line">2.相比较上面两个项目,<span class="selector-tag">sersync</span>配置起来很简单,其中<span class="selector-tag">bin</span>目录下已经有基本上静态编译的2进制文件,配合<span class="selector-tag">bin</span>目录下的<span class="selector-tag">xml</span>配置文件直接使用即可.</span><br><span class="line">3.另外本项目相比较其他脚本开源项目,使用多线程进行同步,尤其在同步较大文件时,能够保证多个服务器保持同步状态</span><br><span class="line">4.本项目有出错处理机制,通过失败队列对出错的文件重新同步,如果仍旧失败,则每10个小时对同步失败的文件重新同步</span><br><span class="line">5.本项目自带<span class="selector-tag">crontab</span>功能,只需在<span class="selector-tag">xml</span>配置文件中开启,即可按照您的要求,隔一段时间整体同步一次,无须在额外配置<span class="selector-tag">crontab</span>功能</span><br><span class="line">6.本项目<span class="selector-tag">socket</span>与<span class="selector-tag">http</span>插件拓展,满足您二次开发的需要.</span><br></pre></td></tr></table></figure><h1 id="第五章-sersync安装部署"><a href="#第五章-sersync安装部署" class="headerlink" title="第五章 sersync安装部署"></a>第五章 sersync安装部署</h1><h2 id="1-主机规划"><a href="#1-主机规划" class="headerlink" title="1.主机规划"></a>1.主机规划</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nfs-server</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span> <span class="selector-tag">rsync</span>+<span class="selector-tag">inotify</span>+<span class="selector-tag">sersync</span>  <span class="selector-tag">nfs-client</span></span><br><span class="line"><span class="selector-tag">backup</span>     172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.41</span> <span class="selector-tag">rsync-server</span>           <span class="selector-tag">nfs-server</span></span><br></pre></td></tr></table></figure><h2 id="2-安装sersync"><a href="#2-安装sersync" class="headerlink" title="2.安装sersync"></a>2.安装sersync</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget http://down.whsir.com/downloads/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line">tar zxf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line">mv GNU-Linux-x86 sersync</span><br><span class="line"><span class="built_in">cd</span> sersync</span><br><span class="line">cp confxml.xml confxml.xml.bak</span><br></pre></td></tr></table></figure><h2 id="3-配置解释"><a href="#3-配置解释" class="headerlink" title="3.配置解释"></a>3.配置解释</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#需要监控的目录      <span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">&quot;/data&quot;</span>&gt;</span>   </span><br><span class="line">#远程rsync服务器的IP地址和模块名称   <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">&quot;172.16.1.41&quot;</span> <span class="attr">name</span>=<span class="string">&quot;data&quot;</span>/&gt;</span>  </span><br><span class="line">#rsync传输的参数    <span class="tag">&lt;<span class="name">commonParams</span> <span class="attr">params</span>=<span class="string">&quot;-az&quot;</span>/&gt;</span> </span><br><span class="line">#rsync密码文件路径  <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">&quot;true&quot;</span> <span class="attr">users</span>=<span class="string">&quot;rsync_backup&quot;</span> <span class="attr">passwordfile</span>=<span class="string">&quot;/etc/rsync.passwd&quot;</span>/&gt;</span>    #</span><br></pre></td></tr></table></figure><h2 id="4-配置文件修改"><a href="#4-配置文件修改" class="headerlink" title="4.配置文件修改"></a>4.配置文件修改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">23     <span class="tag">&lt;<span class="name">sersync</span>&gt;</span></span><br><span class="line">24         <span class="tag">&lt;<span class="name">localpath</span> <span class="attr">watch</span>=<span class="string">&quot;/data&quot;</span>&gt;</span></span><br><span class="line">25             <span class="tag">&lt;<span class="name">remote</span> <span class="attr">ip</span>=<span class="string">&quot;172.16.1.41&quot;</span> <span class="attr">name</span>=<span class="string">&quot;data&quot;</span>/&gt;</span></span><br><span class="line">26             <span class="comment">&lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span></span><br><span class="line">27             <span class="comment">&lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span></span><br><span class="line">28         <span class="tag">&lt;/<span class="name">localpath</span>&gt;</span></span><br><span class="line">29         <span class="tag">&lt;<span class="name">rsync</span>&gt;</span></span><br><span class="line">30             <span class="tag">&lt;<span class="name">commonParams</span> <span class="attr">params</span>=<span class="string">&quot;-az&quot;</span>/&gt;</span></span><br><span class="line">31             <span class="tag">&lt;<span class="name">auth</span> <span class="attr">start</span>=<span class="string">&quot;true&quot;</span> <span class="attr">users</span>=<span class="string">&quot;rsync_backup&quot;</span> <span class="attr">passwordfile</span>=<span class="string">&quot;/etc/rsync.passwd&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-查看帮助说明"><a href="#5-查看帮助说明" class="headerlink" title="5.查看帮助说明"></a>5.查看帮助说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs /opt/sersync]<span class="comment"># ./sersync2 -h</span></span><br><span class="line"><span class="built_in">set</span> the system param</span><br><span class="line">execute：<span class="built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：<span class="built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the <span class="built_in">command</span> param</span><br><span class="line">_______________________________________________________</span><br><span class="line">参数-d:启用守护进程模式</span><br><span class="line">参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</span><br><span class="line">c参数-n: 指定开启守护线程的数量，默认为10个</span><br><span class="line">参数-o:指定配置文件，默认使用confxml.xml文件</span><br><span class="line">参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m socket 开启socket模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m http 开启http模块</span><br><span class="line">不加-m参数，则默认执行同步程序</span><br><span class="line">________________________________________________________________</span><br><span class="line">[root@nfs /opt/sersync]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6.启动服务"></a>6.启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sersync2 -rdo confxml.xml</span><br></pre></td></tr></table></figure><h2 id="7-测试数据是否同步"><a href="#7-测试数据是否同步" class="headerlink" title="7.测试数据是否同步"></a>7.测试数据是否同步</h2><p>backup服务器操作：</p><p>1秒查看一下/data目录下文件的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ;<span class="keyword">do</span> ls |wc -l;sleep 0.1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>nfs服务端操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span>; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span> &gt; <span class="variable">$&#123;i&#125;</span>.txt;sleep 0.1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="第六章-lsyncd同步"><a href="#第六章-lsyncd同步" class="headerlink" title="第六章 lsyncd同步"></a>第六章 lsyncd同步</h1><h2 id="1-官方地址"><a href="#1-官方地址" class="headerlink" title="1.官方地址"></a>1.官方地址</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/axkibe/lsyncd](https://github.com/axkibe/lsyncd</span></span><br></pre></td></tr></table></figure><h2 id="2-lsyncd介绍"><a href="#2-lsyncd介绍" class="headerlink" title="2.lsyncd介绍"></a>2.lsyncd介绍</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Lysncd</span> 实际上是<span class="selector-tag">lua</span>语言封装了 <span class="selector-tag">inotify</span> 和 <span class="selector-tag">rsync</span> 工具，采用了 <span class="selector-tag">Linux</span> 内核（2<span class="selector-class">.6</span><span class="selector-class">.13</span> 及以后）里的 <span class="selector-tag">inotify</span> 触发机制，然后通过<span class="selector-tag">rsync</span>去差异同步，达到实时的效果。</span><br><span class="line">它最令人称道的特性是，完美解决了 `<span class="selector-tag">inotify</span> + <span class="selector-tag">rsync</span>`海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。</span><br><span class="line">另外，它的配置方式很简单，<span class="selector-tag">lua</span>本身就是一种配置语言，可读性非常强。<span class="selector-tag">lsyncd</span>也有多种工作模式可以选择，本地目录<span class="selector-tag">cp</span>，本地目录<span class="selector-tag">rsync</span>，远程目录<span class="selector-tag">rsyncssh</span>。</span><br><span class="line">实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。</span><br></pre></td></tr></table></figure><h2 id="3-lsyncd安装"><a href="#3-lsyncd安装" class="headerlink" title="3.lsyncd安装"></a>3.lsyncd安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install lsyncd -y</span><br></pre></td></tr></table></figure><h2 id="4-创建配置文件"><a href="#4-创建配置文件" class="headerlink" title="4.创建配置文件"></a>4.创建配置文件</h2><p>只监控1个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># cat /etc/lsyncd.conf</span></span><br><span class="line">settings &#123;</span><br><span class="line">  logfile = <span class="string">&quot;/var/log/lsyncd/lsyncd.log&quot;</span>,</span><br><span class="line">  statusFile = <span class="string">&quot;/var/log/lsyncd/lsyncd.status&quot;</span>,</span><br><span class="line">  inotifyMode = <span class="string">&quot;CloseWrite&quot;</span>,</span><br><span class="line">  maxProcesses = 8,</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">  default.rsync,</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">  target = <span class="string">&quot;rsync_backup@172.16.1.41::data&quot;</span>,</span><br><span class="line">  delete = <span class="literal">true</span>,</span><br><span class="line">  exclude = &#123; <span class="string">&quot;.*&quot;</span> &#125;,</span><br><span class="line">  delay = 1,</span><br><span class="line">  rsync = &#123;</span><br><span class="line">    binary = <span class="string">&quot;/usr/bin/rsync&quot;</span>,</span><br><span class="line">    archive = <span class="literal">true</span>,</span><br><span class="line">    compress = <span class="literal">true</span>,</span><br><span class="line">    verbose = <span class="literal">true</span>,</span><br><span class="line">    password_file = <span class="string">&quot;/etc/rsync.passwd&quot;</span>,</span><br><span class="line">    _extra = &#123;<span class="string">&quot;--bwlimit=200&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监控2个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs ~]<span class="comment"># cat /etc/lsyncd.conf</span></span><br><span class="line">settings &#123;</span><br><span class="line">  logfile = <span class="string">&quot;/var/log/lsyncd/lsyncd.log&quot;</span>,</span><br><span class="line">  statusFile = <span class="string">&quot;/var/log/lsyncd/lsyncd.status&quot;</span>,</span><br><span class="line">  inotifyMode = <span class="string">&quot;CloseWrite&quot;</span>,</span><br><span class="line">  maxProcesses = 8,</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">  default.rsync,</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">  target = <span class="string">&quot;rsync_backup@172.16.1.41::data&quot;</span>,</span><br><span class="line">  delete = <span class="literal">true</span>,</span><br><span class="line">  exclude = &#123; <span class="string">&quot;.*&quot;</span> &#125;,</span><br><span class="line">  delay = 1,</span><br><span class="line">  rsync = &#123;</span><br><span class="line">    binary = <span class="string">&quot;/usr/bin/rsync&quot;</span>,</span><br><span class="line">    archive = <span class="literal">true</span>,</span><br><span class="line">    compress = <span class="literal">true</span>,</span><br><span class="line">    verbose = <span class="literal">true</span>,</span><br><span class="line">    password_file = <span class="string">&quot;/etc/rsync.passwd&quot;</span>,</span><br><span class="line">    _extra = &#123;<span class="string">&quot;--bwlimit=200&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sync &#123;</span><br><span class="line">  default.rsync,</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;/backup&quot;</span>,</span><br><span class="line">  target = <span class="string">&quot;rsync_backup@172.16.1.41::backup&quot;</span>,</span><br><span class="line">  delete = <span class="literal">true</span>,</span><br><span class="line">  exclude = &#123; <span class="string">&quot;.*&quot;</span> &#125;,</span><br><span class="line">  delay = 1,</span><br><span class="line">  rsync = &#123;</span><br><span class="line">    binary = <span class="string">&quot;/usr/bin/rsync&quot;</span>,</span><br><span class="line">    archive = <span class="literal">true</span>,</span><br><span class="line">    compress = <span class="literal">true</span>,</span><br><span class="line">    verbose = <span class="literal">true</span>,</span><br><span class="line">    password_file = <span class="string">&quot;/etc/rsync.passwd&quot;</span>,</span><br><span class="line">    _extra = &#123;<span class="string">&quot;--bwlimit=200&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置文件解释"><a href="#5-配置文件解释" class="headerlink" title="5.配置文件解释"></a>5.配置文件解释</h2><p>参考网友博客</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/www.cnblogs.com/zxci</span><span class="regexp">/p/</span><span class="number">6243574</span>.html</span><br></pre></td></tr></table></figure><h2 id="6-启动命令"><a href="#6-启动命令" class="headerlink" title="6.启动命令"></a>6.启动命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start lsyncd </span><br></pre></td></tr></table></figure><h2 id="7-检查测试"><a href="#7-检查测试" class="headerlink" title="7.检查测试"></a>7.检查测试</h2><p>backup测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ;<span class="keyword">do</span> ls |wc -l;sleep 0.1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>NFS测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span>; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>&quot;</span> &gt; <span class="variable">$&#123;i&#125;</span>.txt;sleep 0.1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sersync </tag>
            
            <tag> Lsync </tag>
            
            <tag> 实时同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中小型企业架构演变</title>
      <link href="/posts/51702/"/>
      <url>/posts/51702/</url>
      
        <content type="html"><![CDATA[<h1 id="演变过程"><a href="#演变过程" class="headerlink" title="演变过程"></a>演变过程</h1><p><img src="https://cdn.jsdelivr.net/gh/xoxoyun/MCDN/usr/uploads/2020/03/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98.jpg" alt="网架构演变"></p><h1 id="完成架构图"><a href="#完成架构图" class="headerlink" title="完成架构图"></a>完成架构图</h1><p><img src="http://www.kococ.cn/usr/uploads/2020/03/%E5%AE%8C%E6%88%90%E6%9E%B6%E6%9E%84%E5%9B%BE.bmp" alt="请输入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构演变 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat认知梳理</title>
      <link href="/posts/52358/"/>
      <url>/posts/52358/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-tomcat简介"><a href="#第1章-tomcat简介" class="headerlink" title="第1章 tomcat简介"></a>第1章 tomcat简介</h1><p>Tomcat是Apache软件基金会(Apache Software Foundation)的Jakarta项目中的一个核心项目,由Apache,Sun和其他一些公司及个人共同开发而成</p><p>Tomcat服务器是一个免费的开放源代码的Web应用服务器,属于轻量级应用服务器,在中小型系统和并发访问用户不是很多的场合下被普遍使用,是开发和调试JSP程序的首选.</p><p>Tomcat和Nginx,Apache(httpd),lighttpd等Web服务器一样,具有处理HTML页面的功能,另外它还是一个Server和JSP容器,独立的Server容器是Tomcat的默认模式,.不过,Tomcat处理静态HTML的能力不如Nginx/Apache服务器.<br> 其他JAVA容器还有resin,weblogic等</p><h1 id="第2章-tomcat安装"><a href="#第2章-tomcat安装" class="headerlink" title="第2章 tomcat安装"></a>第2章 tomcat安装</h1><h2 id="1-环境介绍"><a href="#1-环境介绍" class="headerlink" title="1.环境介绍"></a>1.环境介绍</h2><h2 id="2-部署java环境"><a href="#2-部署java环境" class="headerlink" title="2.部署java环境"></a>2.部署java环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@sweb01 ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">java-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span> <span class="selector-tag">-y</span></span><br><span class="line"><span class="selector-attr">[root@sweb01 ~]</span># <span class="selector-tag">java</span> <span class="selector-tag">-version</span></span><br><span class="line"><span class="selector-tag">openjdk</span> <span class="selector-tag">version</span> &quot;1<span class="selector-class">.8</span><span class="selector-class">.0_222</span>&quot;</span><br><span class="line"><span class="selector-tag">OpenJDK</span> <span class="selector-tag">Runtime</span> <span class="selector-tag">Environment</span> (<span class="selector-tag">build</span> 1<span class="selector-class">.8</span><span class="selector-class">.0_222-b10</span>)</span><br><span class="line"><span class="selector-tag">OpenJDK</span> 64<span class="selector-tag">-Bit</span> <span class="selector-tag">Server</span> <span class="selector-tag">VM</span> (<span class="selector-tag">build</span> 25<span class="selector-class">.222-b10</span>, <span class="selector-tag">mixed</span> <span class="selector-tag">mode</span>)</span><br></pre></td></tr></table></figure><h2 id="3-部署tomcat"><a href="#3-部署tomcat" class="headerlink" title="3.部署tomcat"></a>3.部署tomcat</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># mkdir /data/soft -p</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># cd /data/soft/</span></span><br><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz</span></span><br><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># tar zxf apache-tomcat-8.5.43.tar.gz -C /opt/</span></span><br><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># cd /opt/</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">4</span></span><br><span class="line">drwxr-xr-x <span class="number">9</span> root root <span class="number">4096</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> apache-tomcat<span class="number">-8.5</span><span class="number">.43</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># ln -s apache-tomcat-8.5.43 tomcat</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># ll -h</span></span><br><span class="line">总用量 <span class="number">4.0</span>K</span><br><span class="line">drwxr-xr-x <span class="number">9</span> root root <span class="number">4.0</span>K <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> apache-tomcat<span class="number">-8.5</span><span class="number">.43</span></span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root   <span class="number">20</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> tomcat -&gt; apache-tomcat<span class="number">-8.5</span><span class="number">.43</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># echo &#x27;export TOMCAT_HOME=/opt/tomcat&#x27;&gt;&gt;/etc/profile</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># source /etc/profile</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># /opt/tomcat/bin/version.sh    </span></span><br><span class="line">Using CATALINA_BASE:   /opt/tomcat</span><br><span class="line">Using CATALINA_HOME:   /opt/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /opt/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Server version: Apache Tomcat/<span class="number">8.5</span><span class="number">.43</span></span><br><span class="line">Server built:   Jul <span class="number">4</span> <span class="number">2019</span> <span class="number">20</span>:<span class="number">53</span>:<span class="number">15</span> UTC</span><br><span class="line">Server number:  <span class="number">8.5</span><span class="number">.43</span><span class="number">.0</span></span><br><span class="line">OS Name:        Linux</span><br><span class="line">OS Version:     <span class="number">3.10</span><span class="number">.0</span><span class="number">-327.</span>el7.x86_64</span><br><span class="line">Architecture:   amd64</span><br><span class="line">JVM Version:    <span class="number">1.8</span><span class="number">.0</span>_222-b10</span><br><span class="line">JVM Vendor:     Oracle Corporation</span><br></pre></td></tr></table></figure><h2 id="4-tomcat目录介绍"><a href="#4-tomcat目录介绍" class="headerlink" title="4.tomcat目录介绍"></a>4.tomcat目录介绍</h2><p>总目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># cd /opt/tomcat/</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt/tomcat</span>]<span class="meta"># tree -L 1</span></span><br><span class="line">├── bin             <span class="meta">#用以启动,关闭Tomcat或其他脚本功能的脚本(.bat和.sh)</span></span><br><span class="line">├── conf            <span class="meta">#用以配置Tomcat的XML及DTD文件</span></span><br><span class="line">├── lib             <span class="meta">#存放web应用能访问的JAR包</span></span><br><span class="line">├── logs            <span class="meta">#Catalina和其他web应用程序的日志文件</span></span><br><span class="line">├── temp            <span class="meta">#临时文件</span></span><br><span class="line">├── webapps         <span class="meta">#Web应用程序根目录</span></span><br><span class="line">└── work            <span class="meta">#用以产生有JSP编译出的Servlet的.java和.class文件</span></span><br></pre></td></tr></table></figure><p>webapps目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 /opt/tomcat</span>]<span class="meta"># cd webapps/</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt/tomcat/webapps</span>]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">drwxr-x--- <span class="number">14</span> root root <span class="number">4096</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> docs          <span class="meta">#tomcat帮助文档</span></span><br><span class="line">drwxr-x---  <span class="number">6</span> root root   <span class="number">78</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> examples      <span class="meta">#web应用</span></span><br><span class="line">drwxr-x---  <span class="number">5</span> root root   <span class="number">82</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> host-manager  <span class="meta">#管理</span></span><br><span class="line">drwxr-x---  <span class="number">5</span> root root   <span class="number">97</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> manager       <span class="meta">#管理</span></span><br><span class="line">drwxr-x---  <span class="number">3</span> root root <span class="number">4096</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> ROOT          <span class="meta">#默认网站根目录</span></span><br></pre></td></tr></table></figure><p>bin目录</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">脚本            作用</span><br><span class="line"><span class="selector-tag">startup</span><span class="selector-class">.sh</span>           开启<span class="selector-tag">tomcat</span>脚本</span><br><span class="line"><span class="selector-tag">shutdown</span><span class="selector-class">.sh</span>          关闭<span class="selector-tag">tomcat</span>脚本</span><br><span class="line"><span class="selector-tag">catalina</span><span class="selector-class">.shtomcat</span>    核心管理脚本,以后<span class="selector-tag">jvm</span>优化参数及相关配置,修改<span class="selector-tag">tomcat</span>启动参数</span><br></pre></td></tr></table></figure><h2 id="5-启动tomcat"><a href="#5-启动tomcat" class="headerlink" title="5.启动tomcat"></a>5.启动tomcat</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 /opt/tomcat/bin]<span class="meta"># cd</span></span><br><span class="line">[root@sweb01 ~]# /opt/tomcat/bin/startup.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><h2 id="6-检查和测试"><a href="#6-检查和测试" class="headerlink" title="6.检查和测试"></a>6.检查和测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]# ps -ef|grep tomcat</span><br><span class="line">root       2249      1  5 16:49 pts&#x2F;1    00:00:01 &#x2F;usr&#x2F;bin&#x2F;java -Djava.util.logging.config.file&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize&#x3D;2048 -Djava.protocol.handler.pkgs&#x3D;org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK&#x3D;0027 -Dignore.endorsed.dirs&#x3D; -classpath &#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;tomcat-juli.jar -Dcatalina.base&#x3D;&#x2F;opt&#x2F;tomcat -Dcatalina.home&#x3D;&#x2F;opt&#x2F;tomcat -Djava.io.tmpdir&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;temp org.apache.catalina.startup.Bootstrap start</span><br><span class="line">[root@sweb01 ~]# ss -lntup|grep tomcat</span><br><span class="line">[root@sweb01 ~]# ss -lntup|grep java</span><br><span class="line">tcp    LISTEN     0      100      :::8009                 :::*                   users:((&quot;java&quot;,pid&#x3D;2249,fd&#x3D;54))</span><br><span class="line">tcp    LISTEN     0      100      :::8080                 :::*                   users:((&quot;java&quot;,pid&#x3D;2249,fd&#x3D;49))</span><br><span class="line">tcp    LISTEN     0      1      ::ffff:127.0.0.1:8005                 :::*                   users:((&quot;java&quot;,pid&#x3D;2249,fd&#x3D;69))</span><br></pre></td></tr></table></figure><h2 id="8-访问网站"><a href="#8-访问网站" class="headerlink" title="8.访问网站"></a>8.访问网站</h2><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/14248468-0ef5effeee563a3d.png"></p><h2 id="9-查看tomcat日志"><a href="#9-查看tomcat日志" class="headerlink" title="9.查看tomcat日志"></a>9.查看tomcat日志</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="comment"># tail -f /opt/tomcat/logs/catalina.out </span></span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">831</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/docs] has finished <span class="keyword">in</span> [<span class="number">25</span>] ms</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">03</span>.<span class="number">831</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/examples]</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">144</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/examples] has finished <span class="keyword">in</span> [<span class="number">313</span>] ms</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">144</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/host-manager]</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">164</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/host-manager] has finished <span class="keyword">in</span> [<span class="number">20</span>] ms</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">164</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/manager]</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">196</span> 信息 [localhost-startStop-<span class="number">1</span>] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [<span class="regexp">/opt/apache</span>-tomcat-<span class="number">8.5</span>.<span class="number">43</span>/webapps/manager] has finished <span class="keyword">in</span> [<span class="number">31</span>] ms</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">213</span> 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">219</span> 信息 [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;ajp-nio-8009&quot;</span>]</span><br><span class="line"><span class="number">10</span>-Aug-<span class="number">2019</span> <span class="number">16</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">04</span>.<span class="number">221</span> 信息 [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> <span class="number">44249</span> ms</span><br></pre></td></tr></table></figure><h2 id="10-关闭命令"><a href="#10-关闭命令" class="headerlink" title="10.关闭命令"></a>10.关闭命令</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]# /opt/tomcat/bin/shutdown.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar</span><br><span class="line">[root@sweb01 ~]<span class="meta"># ss -lntup|grep java  </span></span><br></pre></td></tr></table></figure><h1 id="第4章-tomcat配置文件"><a href="#第4章-tomcat配置文件" class="headerlink" title="第4章 tomcat配置文件"></a>第4章 tomcat配置文件</h1><h2 id="1-tomcat配置文件介绍"><a href="#1-tomcat配置文件介绍" class="headerlink" title="1.tomcat配置文件介绍"></a>1.tomcat配置文件介绍</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># tree /opt/tomcat/conf/</span></span><br><span class="line">/opt/tomcat/conf/</span><br><span class="line">├── Catalina</span><br><span class="line">│   └── localhost</span><br><span class="line">├── catalina.policy</span><br><span class="line">├── catalina.properties</span><br><span class="line">├── context.xml</span><br><span class="line">├── jaspic-providers.xml</span><br><span class="line">├── jaspic-providers.xsd</span><br><span class="line">├── logging.properties</span><br><span class="line">├── server.xml              <span class="meta">#主配置文件</span></span><br><span class="line">├── tomcat-users.xml        <span class="meta">#管理用户配置文件</span></span><br><span class="line">├── tomcat-users.xsd</span><br><span class="line">└── web.xml</span><br></pre></td></tr></table></figure><h2 id="2-tomcat管理"><a href="#2-tomcat管理" class="headerlink" title="2.tomcat管理"></a>2.tomcat管理</h2><p>测试功能,生产环境不要用<br> Tomcat管理功能用于对Tomcat自身以及部署在Tomcat的应用管理的web应用,在默认的情况下处于禁止状态的.如果需要开启这个功能,就要配置管理用户,即配置前面说过的tomcat-user.xml<br> 下面是命令集合:<br> 修改tomcat-users.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]# cat /opt/tomcat/conf/tomcat-users.xml    </span><br><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     这是个优雅的注释</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;host-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;admin-gui,host-gui,manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改context.xml文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="meta"># grep <span class="meta-string">&quot;10&quot;</span> /opt/tomcat/webapps/manager/META-INF/context.xml    </span></span><br><span class="line">         allow=<span class="string">&quot;10\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>重新启动tomcat</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]# /opt/tomcat/bin/shutdown.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar</span><br><span class="line">[root@sweb01 ~]# /opt/tomcat/bin/startup.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><h2 id="3-访问网页测试"><a href="#3-访问网页测试" class="headerlink" title="3.访问网页测试"></a>3.访问网页测试</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-4cdf44cb4681fc8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第5章-tomcat主配置文件Server-xml详解"><a href="#第5章-tomcat主配置文件Server-xml详解" class="headerlink" title="第5章 tomcat主配置文件Server.xml详解"></a>第5章 tomcat主配置文件Server.xml详解</h1><h2 id="1-server-xml组件类别"><a href="#1-server-xml组件类别" class="headerlink" title="1.server.xml组件类别"></a>1.server.xml组件类别</h2><p>   顶级组件:位于整个配置的顶层,如server<br>    容器类组件:可以包含其它组件的组件,如server,engine,host,context<br>    连接器组件:连接用户请求至tomcat,如connector<br>    被嵌套类组件:位于一个容器内,不能包含其它组件,如Valve,logger.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">connector</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">engine</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">host</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context</span>&gt;</span><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">host</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">context</span>&gt;</span><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">engine</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-组件详情"><a href="#2-组件详情" class="headerlink" title="2.组件详情"></a>2.组件详情</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">engine</span>:核心容器组件,<span class="selector-tag">catalina</span>引擎,负责通过<span class="selector-tag">connector</span>接受用户请求,并处理请求,将请求转至对应的虚拟主机<span class="selector-tag">host</span></span><br><span class="line"><span class="selector-tag">host</span>:类似于<span class="selector-tag">httpd</span>中的虚拟主机,一般而言支持基于<span class="selector-tag">FQDN</span>的虚拟主机</span><br><span class="line"><span class="selector-tag">context</span>:定义一个应用程序,是一个最内层的容器类组件(不能再嵌套).篇日志<span class="selector-tag">context</span>的主要目的指定对应的<span class="selector-tag">webapp</span>的根目录,类似于<span class="selector-tag">httpd</span>的<span class="selector-tag">alias</span>,其还能为<span class="selector-tag">webapp</span>指定额外的属性,如部署方式等.</span><br><span class="line"><span class="selector-tag">connector</span>:接收用户请求,类似于<span class="selector-tag">httpd</span>的<span class="selector-tag">listen</span>配置监听端口.</span><br><span class="line"><span class="selector-tag">service</span>(服务):将<span class="selector-tag">connector</span>关联至<span class="selector-tag">engine</span>,因此一个<span class="selector-tag">service</span>内部可以有多个<span class="selector-tag">connector</span>,但只能有一个引擎<span class="selector-tag">engine</span><span class="selector-class">.service</span>内部有两个<span class="selector-tag">connector</span>,一个<span class="selector-tag">engine</span>.因此一个<span class="selector-tag">service</span>内部可以有多个<span class="selector-tag">connector</span>.</span><br><span class="line"><span class="selector-tag">server</span>:表示一个运行于<span class="selector-tag">JVM</span>中的<span class="selector-tag">tomcat</span>实例</span><br><span class="line"><span class="selector-tag">Valve</span>:阀门,拦截请求并在将其转至对应的<span class="selector-tag">webapp</span>前进行某种处理操作,可以用于任何容器中,比如记录日志(<span class="selector-tag">access</span> <span class="selector-tag">log</span> <span class="selector-tag">valve</span>),基于<span class="selector-tag">IP</span>做访问控制(<span class="selector-tag">remote</span> <span class="selector-tag">address</span> <span class="selector-tag">filter</span> <span class="selector-tag">valve</span>).</span><br><span class="line"><span class="selector-tag">logger</span>: 日志记录器,用于记录组件内部的状态信息,可以用于除<span class="selector-tag">context</span>外的任何容器中.</span><br><span class="line"><span class="selector-tag">realm</span>:可以用于任意容器类的组件中,关联一个用户认证库,实现认证和授权.可以关联的认证库有两种<span class="selector-pseudo">:UserDatabaseRealm</span>,<span class="selector-tag">MemoryRealm</span>和<span class="selector-tag">JDBCRealm</span></span><br><span class="line"><span class="selector-tag">UserDatabaseRealm</span>:使用<span class="selector-tag">JNDI</span>自定义的用户认证库.</span><br><span class="line"><span class="selector-tag">MemoryRealm</span>:认证信息定义在<span class="selector-tag">tomcat-users</span><span class="selector-class">.xml</span>中</span><br><span class="line"><span class="selector-tag">JDBCRealm</span>:认证信息定义在数据库中,并通过<span class="selector-tag">JDBC</span>连接至数据库查找认证用户.</span><br></pre></td></tr></table></figure><h2 id="3-配置文件注释"><a href="#3-配置文件注释" class="headerlink" title="3.配置文件注释"></a>3.配置文件注释</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">tomcat配置文件注释</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;Server&gt;元素代表整个容器,是Tomcat实例的顶层元素.由org.apache.catalina.Server接口来定义.它包含一个&lt;Service&gt;元素.并且它不能做为任何元素的子元素.</span></span><br><span class="line"><span class="comment">    port指定Tomcat监听shutdown命令端口.终止服务器运行时,必须在Tomcat服务器所在的机器上发出shutdown命令.该属性是必须的.</span></span><br><span class="line"><span class="comment">    shutdown指定终止Tomcat服务器运行时,发给Tomcat服务器的shutdown监听端口的字符串.该属性必须设置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--service服务组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    connector：接收用户请求，类似于httpd的listen配置监听端口.</span></span><br><span class="line"><span class="comment">        port指定服务器端要创建的端口号，并在这个端口监听来自客户端的请求。</span></span><br><span class="line"><span class="comment">        address：指定连接器监听的地址，默认为所有地址（即0.0.0.0）</span></span><br><span class="line"><span class="comment">        protocol连接器使用的协议，支持HTTP和AJP。AJP（Apache Jserv Protocol）专用于tomcat与apache建立通信的， 在httpd反向代理用户请求至tomcat时使用（可见Nginx反向代理时不可用AJP协议）。</span></span><br><span class="line"><span class="comment">        minProcessors服务器启动时创建的处理请求的线程数</span></span><br><span class="line"><span class="comment">        maxProcessors最大可以创建的处理请求的线程数</span></span><br><span class="line"><span class="comment">        enableLookups如果为true，则可以通过调用request.getRemoteHost()进行DNS查询来得到远程客户端的实际主机名，若为false则不进行DNS查询，而是返回其ip地址</span></span><br><span class="line"><span class="comment">        redirectPort指定服务器正在处理http请求时收到了一个SSL传输请求后重定向的端口号</span></span><br><span class="line"><span class="comment">        acceptCount指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理</span></span><br><span class="line"><span class="comment">        connectionTimeout指定超时的时间数(以毫秒为单位)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--engine,核心容器组件,catalina引擎,负责通过connector接收用户请求,并处理请求,将请求转至对应的虚拟主机host</span></span><br><span class="line"><span class="comment">        defaultHost指定缺省的处理请求的主机名，它至少与其中的一个host元素的name属性值是一样的</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Realm表示存放用户名，密码及role的数据库--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      host表示一个虚拟主机</span></span><br><span class="line"><span class="comment">        name指定主机名</span></span><br><span class="line"><span class="comment">        appBase应用程序基本目录，即存放应用程序的目录.一般为appBase=&quot;webapps&quot; ，相对于CATALINA_HOME而言的，也可以写绝对路径。</span></span><br><span class="line"><span class="comment">        unpackWARs如果为true，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运行应用程序</span></span><br><span class="line"><span class="comment">        autoDeploy：在tomcat启动时，是否自动部署。</span></span><br><span class="line"><span class="comment">        xmlValidation：是否启动xml的校验功能，一般xmlValidation=&quot;false&quot;。</span></span><br><span class="line"><span class="comment">        xmlNamespaceAware：检测名称空间，一般xmlNamespaceAware=&quot;false&quot;。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Context表示一个web应用程序，通常为WAR文件</span></span><br><span class="line"><span class="comment">            docBase应用程序的路径或者是WAR文件存放的路径,也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径。</span></span><br><span class="line"><span class="comment">            path表示此web应用程序的url的前缀，这样请求的url为http://localhost:8080/path/****</span></span><br><span class="line"><span class="comment">            reloadable这个属性非常重要，如果为true，则tomcat会自动检测应用程序的/WEB-INF/lib 和/WEB-INF/classes目录的变化，自动装载新的应用程序，可以在不重启tomcat的情况下改变应用程序</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第6章-Tomcat端口解释"><a href="#第6章-Tomcat端口解释" class="headerlink" title="第6章 Tomcat端口解释"></a>第6章 Tomcat端口解释</h1><p>参考博客：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.jianshu.com/p/95d6ac54fc67</span></span><br></pre></td></tr></table></figure><p>tomcat启动之后默认会启动3个端口，分别是8080,8009,8005</p><h1 id="8080端口和8443端口"><a href="#8080端口和8443端口" class="headerlink" title="8080端口和8443端口"></a>8080端口和8443端口</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个端口用于监听浏览器发送的请求，设置为80后可以直接使用域名访问，但是如果使用普通账户启动的tomcat，则不能使用小于1024的端口<br> 8443端口是用于https连接的，除了打开注释之外还需要有域名证书才可以</p><h1 id="8009端口"><a href="#8009端口" class="headerlink" title="8009端口"></a>8009端口</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Nginx反向代理tomcat的时候可以使用ajp协议反向代理到该端口<br> 不过我们常用的还是反向代理到8080。</p><h1 id="8005端口"><a href="#8005端口" class="headerlink" title="8005端口"></a>8005端口</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat监听的额关闭端口，就是说这个端口负责关闭tomcat的请求<br> 当执行shutdown.sh关闭tomcat就是链接8085端口执行shutdown命令</p><h1 id="第7章-WEB站点部署"><a href="#第7章-WEB站点部署" class="headerlink" title="第7章 WEB站点部署"></a>第7章 WEB站点部署</h1><h2 id="1-使用war包部署web站点"><a href="#1-使用war包部署web站点" class="headerlink" title="1.使用war包部署web站点"></a>1.使用war包部署web站点</h2><p>上线的代码有两种方式,第一种方式是直接将程序目录放在webapps目录下面,这种方式大家已经明白了,就不多说了,第二种方式是使用开发工具将程序打包成war包,然后上传到webapps目录下面,下面我们见识一下这种方式.</p><h2 id="2-自定义默认网站目录"><a href="#2-自定义默认网站目录" class="headerlink" title="2.自定义默认网站目录"></a>2.自定义默认网站目录</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 /opt/tomcat/webapps</span>]<span class="meta"># ls</span></span><br><span class="line">docs  examples  host-manager  manager  ROOT</span><br><span class="line">[<span class="meta">root@sweb01 /opt/tomcat/webapps</span>]<span class="meta"># rz      #上传软件包</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt/tomcat/webapps</span>]<span class="meta"># ls      #上传完毕后tomcat会自动解压memtest.war包</span></span><br><span class="line">docs  examples  host-manager  manager  memtest  memtest.war  ROOT</span><br></pre></td></tr></table></figure><h2 id="3-访问测试"><a href="#3-访问测试" class="headerlink" title="3.访问测试"></a>3.访问测试</h2><p>浏览器访问：<a href="https://links.jianshu.com/go?to=http://10.0.1.9:8080/memtest/meminfo.jsp">http://10.0.1.9:8080/memtest/meminfo.jsp</a></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-80abed6733369b7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1056/format/webp" alt="img"></p><h2 id="4-自定义默认网站目录"><a href="#4-自定义默认网站目录" class="headerlink" title="4.自定义默认网站目录"></a>4.自定义默认网站目录</h2><p>上面访问的的网址为:<a href="https://links.jianshu.com/go?to=http://10.0.1.9:8080/memtest/meminfo.jsp">http://10.0.1.9:8080/memtest/meminfo.jsp</a><br> 现在我想访问格式为:<a href="https://links.jianshu.com/go?to=http://10.0.1.9:8080/meminfo.jsp">http://10.0.1.9:8080/meminfo.jsp</a><br> 应该怎么修改呢？<br> 方法一：<br> 将meminfo.jsp或其他程序放在tomcat/webapps/ROOT目录下即可.因为默认网站根目录为tomcat/webapps/ROOT<br> 方法二：<br> 修改配置文件,操作命令如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># vim /opt/tomcat/conf/server.xml </span></span><br><span class="line">   <span class="number">148</span>        &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span></span><br><span class="line">   <span class="number">149</span>              unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">   <span class="number">150</span>              &lt;Context path=<span class="string">&quot;&quot;</span> docBase=<span class="string">&quot;/opt/tomcat/webapps/memtest&quot;</span> debug=<span class="string">&quot;0&quot;</span> reloadable=<span class="string">&quot;false&quot;</span> crossContext=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-访问测试"><a href="#5-访问测试" class="headerlink" title="5.访问测试"></a>5.访问测试</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-d7cd653bbacfc642.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/850/format/webp" alt="img"></p><h1 id="第x章-搭建jpress部署实践"><a href="#第x章-搭建jpress部署实践" class="headerlink" title="第x章 搭建jpress部署实践"></a>第x章 搭建jpress部署实践</h1><h2 id="1-安装配置mariadb数据库"><a href="#1-安装配置mariadb数据库" class="headerlink" title="1.安装配置mariadb数据库"></a>1.安装配置mariadb数据库</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># yum -y install mariadb mariadb-server</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># systemctl start mariadb.service</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># mysqladmin password 123456</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># mysql -uroot -p123456</span></span><br><span class="line">&gt; create database jpress DEFAULT CHARACTER SET utf8;</span><br><span class="line">&gt; grant all <span class="keyword">on</span> jpress.* to jpress@<span class="string">&#x27;10.0.1.%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&gt;  flush privileges;</span><br></pre></td></tr></table></figure><h2 id="2-上传jpress代码"><a href="#2-上传jpress代码" class="headerlink" title="2.上传jpress代码"></a>2.上传jpress代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># ls</span></span><br><span class="line">apache-tomcat<span class="number">-8.5</span><span class="number">.43</span>.tar.gz  jpress-web-newest.war  memtest.war</span><br><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># mv jpress-web-newest.war jpress.war</span></span><br><span class="line">[<span class="meta">root@sweb01 /data/soft</span>]<span class="meta"># ll /opt/tomcat/webapps/           </span></span><br><span class="line">总用量 <span class="number">20324</span></span><br><span class="line">drwxr-x--- <span class="number">14</span> root root     <span class="number">4096</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> docs</span><br><span class="line">drwxr-x---  <span class="number">6</span> root root       <span class="number">78</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> examples</span><br><span class="line">drwxr-x---  <span class="number">5</span> root root       <span class="number">82</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> host-manager</span><br><span class="line">drwxr-x---  <span class="number">7</span> root root       <span class="number">96</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">42</span> jpress</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">20797013</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">15</span>:<span class="number">39</span> jpress.war</span><br><span class="line">drwxr-x---  <span class="number">2</span> root root       <span class="number">23</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">41</span> logs</span><br><span class="line">drwxr-x---  <span class="number">5</span> root root       <span class="number">97</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">16</span>:<span class="number">37</span> manager</span><br><span class="line">drwxr-x---  <span class="number">3</span> root root       <span class="number">39</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">17</span>:<span class="number">36</span> memtest</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root      <span class="number">643</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">15</span>:<span class="number">39</span> memtest.war</span><br><span class="line">drwxr-x---  <span class="number">3</span> root root     <span class="number">4096</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">17</span>:<span class="number">41</span> ROOT</span><br></pre></td></tr></table></figure><h2 id="3-web页面配置jpress"><a href="#3-web页面配置jpress" class="headerlink" title="3.web页面配置jpress"></a>3.web页面配置jpress</h2><p>打开浏览器：<a href="https://links.jianshu.com/go?to=http://10.0.1.9:8080/jpress/">http://10.0.1.9:8080/jpress/</a></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-59cee70dabc96a21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-c3300c0c77bec7f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-9b80a111231a3e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p> 重启一下tomcat</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># /opt/tomcat/bin/startup.sh</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># /opt/tomcat/bin/shutdown.sh   </span></span><br></pre></td></tr></table></figure><p>后台登陆页面</p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-42fb54294309015d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-a580588b1400d7d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>测试写一篇文章并上传附件</p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-09344890f016171d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p> 上传文件的路径</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># ll /opt/tomcat/webapps/jpress/attachment/20190810/</span></span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line">-rw-r----- <span class="number">1</span> root root <span class="number">7630</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">22</span>:<span class="number">31</span> <span class="number">55f</span>65d452e9b4fdb99a09f0c68532f6a_780x240.jpeg</span><br><span class="line">-rw-r----- <span class="number">1</span> root root <span class="number">4430</span> <span class="number">8</span>月  <span class="number">10</span> <span class="number">22</span>:<span class="number">31</span> <span class="number">55f</span>65d452e9b4fdb99a09f0c68532f6a.jpeg</span><br></pre></td></tr></table></figure><p>文章内容在数据库的位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [jpress]&gt; select * from  jpress.jpress_content\G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">              id: <span class="number">1</span></span><br><span class="line">           title: 第一篇博客</span><br><span class="line">            text: &lt;p&gt;&lt;img src=<span class="string">&quot;/jpress/attachment/20190810/55f65d452e9b4fdb99a09f0c68532f6a.jpeg&quot;</span> alt=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;256&quot;</span> height=<span class="string">&quot;256&quot;</span>&gt;&lt;/p&gt; </span><br><span class="line">&lt;p&gt;测试页面&lt;/p&gt;</span><br><span class="line">         summary: <span class="literal">NULL</span></span><br><span class="line">         link_to: <span class="literal">NULL</span></span><br><span class="line"> markdown_enable: <span class="number">0</span></span><br><span class="line">       thumbnail: <span class="literal">NULL</span></span><br><span class="line">          <span class="keyword">module</span>: article</span><br><span class="line">           style: <span class="literal">NULL</span></span><br><span class="line">         user_id: <span class="number">1</span></span><br><span class="line">          author: <span class="literal">NULL</span></span><br><span class="line">      user_email: <span class="literal">NULL</span></span><br><span class="line">         user_ip: <span class="literal">NULL</span></span><br><span class="line">      user_agent: <span class="literal">NULL</span></span><br><span class="line">       parent_id: <span class="literal">NULL</span></span><br><span class="line">       object_id: <span class="literal">NULL</span></span><br><span class="line">    order_number: <span class="number">0</span></span><br><span class="line">          status: normal</span><br><span class="line">         vote_up: <span class="number">0</span></span><br><span class="line">       vote_down: <span class="number">0</span></span><br><span class="line">            rate: <span class="literal">NULL</span></span><br><span class="line">      rate_count: <span class="number">0</span></span><br><span class="line">           price: <span class="number">0.00</span></span><br><span class="line">  comment_status: <span class="literal">NULL</span></span><br><span class="line">   comment_count: <span class="number">0</span></span><br><span class="line">    comment_time: <span class="literal">NULL</span></span><br><span class="line">      view_count: <span class="number">0</span></span><br><span class="line">         created: <span class="number">2019</span><span class="number">-08</span><span class="number">-10</span> <span class="number">22</span>:<span class="number">31</span>:<span class="number">34</span></span><br><span class="line">        modified: <span class="number">2019</span><span class="number">-08</span><span class="number">-10</span> <span class="number">22</span>:<span class="number">31</span>:<span class="number">34</span></span><br><span class="line">            slug: 第一篇博客</span><br><span class="line">            flag: <span class="literal">NULL</span></span><br><span class="line">             lng: <span class="literal">NULL</span></span><br><span class="line">             lat: <span class="literal">NULL</span></span><br><span class="line">   meta_keywords: <span class="literal">NULL</span></span><br><span class="line">meta_description: <span class="literal">NULL</span></span><br><span class="line">         remarks: <span class="literal">NULL</span></span><br><span class="line"><span class="number">1</span> row in <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="第8章-zabbix监控tomcat"><a href="#第8章-zabbix监控tomcat" class="headerlink" title="第8章 zabbix监控tomcat"></a>第8章 zabbix监控tomcat</h1><h2 id="1-tomcat服务器安装zabbix-agent服务"><a href="#1-tomcat服务器安装zabbix-agent服务" class="headerlink" title="1.tomcat服务器安装zabbix-agent服务"></a>1.tomcat服务器安装zabbix-agent服务</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="comment"># rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span></span><br><span class="line">[root@sweb01 ~]<span class="comment"># yum install zabbix-agent -y</span></span><br><span class="line">[root@sweb01 ~]<span class="comment"># cat /etc/zabbix/zabbix_agentd.conf    </span></span><br><span class="line">PidFile=<span class="regexp">/var/run</span><span class="regexp">/zabbix/zabbix</span>_agentd.pid</span><br><span class="line">LogFile=<span class="regexp">/var/log</span><span class="regexp">/zabbix/zabbix</span>_agentd.log</span><br><span class="line">LogFileSize=<span class="number">0</span></span><br><span class="line">Server=<span class="number">10.0</span>.<span class="number">1.61</span></span><br><span class="line">ServerActive=<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span></span><br><span class="line">Hostname=Zabbix server</span><br><span class="line">Include=<span class="regexp">/etc/zabbix</span><span class="regexp">/zabbix_agentd.d/</span>*.conf</span><br><span class="line">[root@sweb01 ~]<span class="comment"># systemctl restart zabbix-agent.service </span></span><br></pre></td></tr></table></figure><h2 id="2-tomcat服务器修改配置文件开启远程监控功能"><a href="#2-tomcat服务器修改配置文件开启远程监控功能" class="headerlink" title="2.tomcat服务器修改配置文件开启远程监控功能"></a>2.tomcat服务器修改配置文件开启远程监控功能</h2><p>注意！建议把下面的参数放在最前面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="comment"># head -7 /opt/tomcat/bin/catalina.sh  </span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">CATALINA_OPTS=<span class="string">&quot;<span class="variable">$CATALINA_OPTS</span></span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.port=12345  </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=false </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false </span></span><br><span class="line"><span class="string">-Djava.rmi.server.hostname=10.0.1.9&quot;</span></span><br></pre></td></tr></table></figure><p>重启tomcat</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># /opt/tomcat/bin/shutdown.sh </span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># /opt/tomcat/bin/startup.sh </span></span><br></pre></td></tr></table></figure><h2 id="3-修改hosts解析"><a href="#3-修改hosts解析" class="headerlink" title="3.修改hosts解析"></a>3.修改hosts解析</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># tail -1 /etc/hosts</span></span><br><span class="line"><span class="number">10.0</span><span class="number">.1</span><span class="number">.9</span>  sweb01</span><br></pre></td></tr></table></figure><h2 id="4-检查进程和端口号"><a href="#4-检查进程和端口号" class="headerlink" title="4.检查进程和端口号"></a>4.检查进程和端口号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]# ps -ef|grep java           </span><br><span class="line">root       3790      1 99 23:37 pts&#x2F;0    00:00:01 &#x2F;usr&#x2F;bin&#x2F;java -Djava.util.logging.config.file&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize&#x3D;2048 -Djava.protocol.handler.pkgs&#x3D;org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK&#x3D;0027 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port&#x3D;12345 -Dcom.sun.management.jmxremote.authenticate&#x3D;false -Dcom.sun.management.jmxremote.ssl&#x3D;false -Djava.rmi.server.hostname&#x3D;10.0.1.9 -Dignore.endorsed.dirs&#x3D; -classpath &#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;opt&#x2F;tomcat&#x2F;bin&#x2F;tomcat-juli.jar -Dcatalina.base&#x3D;&#x2F;opt&#x2F;tomcat -Dcatalina.home&#x3D;&#x2F;opt&#x2F;tomcat -Djava.io.tmpdir&#x3D;&#x2F;opt&#x2F;tomcat&#x2F;temp org.apache.catalina.startup.Bootstrap start</span><br><span class="line">root       3810   1834  0 23:37 pts&#x2F;0    00:00:00 grep -E --color&#x3D;auto --color&#x3D;auto java</span><br><span class="line">[root@sweb01 ~]# ss -lntup|grep 12345</span><br><span class="line">tcp    LISTEN     0      50       :::12345                :::*                   users:((&quot;java&quot;,pid&#x3D;3790,fd&#x3D;20))</span><br></pre></td></tr></table></figure><h2 id="5-zabbi服务器上的配置操作"><a href="#5-zabbi服务器上的配置操作" class="headerlink" title="5.zabbi服务器上的配置操作"></a>5.zabbi服务器上的配置操作</h2><p>安装java</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@m01 ~]</span># <span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">java-1</span><span class="selector-class">.8</span><span class="selector-class">.0</span> <span class="selector-tag">-y</span></span><br><span class="line"><span class="selector-attr">[root@m01 ~]</span># <span class="selector-tag">java</span>  <span class="selector-tag">-version</span></span><br><span class="line"><span class="selector-tag">openjdk</span> <span class="selector-tag">version</span> &quot;1<span class="selector-class">.8</span><span class="selector-class">.0_222</span>&quot;</span><br><span class="line"><span class="selector-tag">OpenJDK</span> <span class="selector-tag">Runtime</span> <span class="selector-tag">Environment</span> (<span class="selector-tag">build</span> 1<span class="selector-class">.8</span><span class="selector-class">.0_222-b10</span>)</span><br><span class="line"><span class="selector-tag">OpenJDK</span> 64<span class="selector-tag">-Bit</span> <span class="selector-tag">Server</span> <span class="selector-tag">VM</span> (<span class="selector-tag">build</span> 25<span class="selector-class">.222-b10</span>, <span class="selector-tag">mixed</span> <span class="selector-tag">mode</span>)</span><br></pre></td></tr></table></figure><p>安装并启动zabbix-java-gateway服务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># yum install zabbix-java-gateway.x86_64 -y</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># systemctl start zabbix-java-gateway.service</span></span><br></pre></td></tr></table></figure><p>修改zabbix_server.conf配置文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="meta"># grep <span class="meta-string">&quot;Java&quot;</span> /etc/zabbix/zabbix_server.conf|grep -v <span class="meta-string">&quot;#&quot;</span></span></span><br><span class="line">JavaGateway=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">JavaGatewayPort=<span class="number">10052</span></span><br><span class="line">StartJavaPollers=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>重启zabbix服务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># systemctl restart httpd</span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># systemctl restart zabbix-server.service </span></span><br><span class="line">[<span class="meta">root@m01 ~</span>]<span class="meta"># systemctl restart zabbix-java-gateway.service </span></span><br></pre></td></tr></table></figure><p>zabbix网页操作</p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-95909378fc1ef024.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-9fca375ac8352343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-d31e04fe5d981f38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-8bb4b9973e65ac5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第9章-tomcat多实例及反向代理"><a href="#第9章-tomcat多实例及反向代理" class="headerlink" title="第9章 tomcat多实例及反向代理"></a>第9章 tomcat多实例及反向代理</h1><h2 id="1-tomcat多实例介绍"><a href="#1-tomcat多实例介绍" class="headerlink" title="1.tomcat多实例介绍"></a>1.tomcat多实例介绍</h2><p>其本质就是复制多个tomcat目录，然后修改为不同的端口并启动<br> 代码一致，但是公用一个数据库</p><h2 id="2-复制目录"><a href="#2-复制目录" class="headerlink" title="2.复制目录"></a>2.复制目录</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="comment"># cd /opt/</span></span><br><span class="line">[root@sweb01 /opt]<span class="comment"># cp -a apache-tomcat-8.5.43 tomcat_01</span></span><br><span class="line">[root@sweb01 /opt]<span class="comment"># cp -a apache-tomcat-8.5.43 tomcat_02</span></span><br></pre></td></tr></table></figure><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>修改端口号</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8005#8006#g&#x27;  tomcat_01/conf/server.xml </span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8009#8010#g&#x27;  tomcat_01/conf/server.xml</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8080#8081#g&#x27;  tomcat_01/conf/server.xml </span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># </span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8005#8007#g&#x27;  tomcat_02/conf/server.xml </span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8009#8011#g&#x27;  tomcat_02/conf/server.xml</span></span><br><span class="line">[<span class="meta">root@sweb01 /opt</span>]<span class="meta"># sed -i &#x27;s#8080#8082#g&#x27;  tomcat_02/conf/server.xml</span></span><br></pre></td></tr></table></figure><p>删除自定义的配置路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">150             <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/tomcat_02/webapps/memtest&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">crossContext</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改监听端口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># grep &quot;1234&quot; /opt/tomcat_01/bin/catalina.sh  </span></span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">12345</span> </span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># grep &quot;1234&quot; /opt/tomcat_02/bin/catalina.sh               </span></span><br><span class="line">-Dcom.sun.management.jmxremote.port=<span class="number">12346</span> </span><br></pre></td></tr></table></figure><h2 id="4-启动多实例"><a href="#4-启动多实例" class="headerlink" title="4.启动多实例"></a>4.启动多实例</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 /opt/tomcat_02/conf]# /opt/tomcat_01/bin/startup.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat_01</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat_01</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat_01/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat_01/bin/bootstrap.jar:/opt/tomcat_01/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">[root@sweb01 ~]# /opt/tomcat_02/bin/startup.sh </span><br><span class="line">Using <span class="built_in">CATALINA_BASE</span>:   /opt/tomcat_02</span><br><span class="line">Using <span class="built_in">CATALINA_HOME</span>:   /opt/tomcat_02</span><br><span class="line">Using <span class="built_in">CATALINA_TMPDIR</span>: /opt/tomcat_02/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using <span class="built_in">CLASSPATH</span>:       /opt/tomcat_02/bin/bootstrap.jar:/opt/tomcat_02/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><h2 id="5-查看服务是否启动"><a href="#5-查看服务是否启动" class="headerlink" title="5.查看服务是否启动"></a>5.查看服务是否启动</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 ~]<span class="comment"># ss -lntup|grep java</span></span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">100</span>      <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">8010</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">57</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">100</span>      <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">8011</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">57</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">100</span>      <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">8081</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">53</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">100</span>      <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">8082</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">53</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">12345</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">20</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">12346</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">20</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">36383</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">23</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">59493</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">19</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">1</span>      <span class="symbol">:</span><span class="symbol">:ffff</span><span class="symbol">:</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">8006</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">5874</span>,fd=<span class="number">77</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">1</span>      <span class="symbol">:</span><span class="symbol">:ffff</span><span class="symbol">:</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">8007</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">77</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">46535</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">23</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">50</span>       <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">46471</span>                <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                   <span class="symbol">users:</span>((<span class="string">&quot;java&quot;</span>,pid=<span class="number">6076</span>,fd=<span class="number">19</span>)</span><br></pre></td></tr></table></figure><h2 id="6-浏览器测试多实例"><a href="#6-浏览器测试多实例" class="headerlink" title="6.浏览器测试多实例"></a>6.浏览器测试多实例</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-1226658996c2c39d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1010/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/14248468-e97046bc91469475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/938/format/webp" alt="img"></p><h1 id="第10章-tomcat集群配置"><a href="#第10章-tomcat集群配置" class="headerlink" title="第10章 tomcat集群配置"></a>第10章 tomcat集群配置</h1><h2 id="1-实验环境准备"><a href="#1-实验环境准备" class="headerlink" title="1.实验环境准备"></a>1.实验环境准备</h2><p>a.多实例tomcat 8081 8082<br> b.数据库使用共有的db 10.0.1.9:3306<br> c.代码使用各自目录的jpress<br> d.使用nginx反向代理到后端的2个端口</p><h2 id="2-安装配置nginx"><a href="#2-安装配置nginx" class="headerlink" title="2.安装配置nginx"></a>2.安装配置nginx</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># cat /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[<span class="meta">nginx-stable</span>]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http:<span class="comment">//nginx.org/packages/centos/$releasever/$basearch/</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="comment">//nginx.org/keys/nginx_signing.key</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">nginx-mainline</span>]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http:<span class="comment">//nginx.org/packages/mainline/centos/$releasever/$basearch/</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">0</span></span><br><span class="line">gpgkey=https:<span class="comment">//nginx.org/keys/nginx_signing.key</span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># yum install nginx -y</span></span><br></pre></td></tr></table></figure><h2 id="3-创建代理配置文件"><a href="#3-创建代理配置文件" class="headerlink" title="3.创建代理配置文件"></a>3.创建代理配置文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@sweb01 /etc/nginx/conf.d]<span class="comment"># cat /etc/nginx/conf.d/proxy.conf </span></span><br><span class="line">upstream java &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.1</span><span class="number">.9</span>:<span class="number">8081</span>;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.1</span><span class="number">.9</span>:<span class="number">8082</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  www.oldzhang.com;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//java;</span></span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-<span class="keyword">Real</span>-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-<span class="keyword">For</span> $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-检查并启动nginx"><a href="#4-检查并启动nginx" class="headerlink" title="4.检查并启动nginx"></a>4.检查并启动nginx</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 /etc/nginx/conf.d</span>]<span class="meta"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test <span class="keyword">is</span> successful</span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># systemctl start nginx</span></span><br></pre></td></tr></table></figure><h2 id="5-网页访问"><a href="#5-网页访问" class="headerlink" title="5.网页访问"></a>5.网页访问</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-3f39b2522e14f0a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第11章-tomcat安全优化"><a href="#第11章-tomcat安全优化" class="headerlink" title="第11章 tomcat安全优化"></a>第11章 tomcat安全优化</h1><p>降权启动</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -a apache-tomcat-<span class="number">8.0</span>.<span class="number">27</span> /home/zy/tomcat</span><br><span class="line">chown -R  zy.zy /home/zy/tomcat</span><br><span class="line">[zy@CentOS7 ~]$ ./tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>telnet管理端口保护<br> ajp连接端口保护<br> 禁用管理端</p><h1 id="第x章-tomcat性能优化"><a href="#第x章-tomcat性能优化" class="headerlink" title="第x章 tomcat性能优化"></a>第x章 tomcat性能优化</h1><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#屏蔽dns查询enableLookups=<span class="string">&quot;false&quot;</span>;</span><br><span class="line">vim /application/tomcat/conf/server.xml</span><br><span class="line">    &lt;Connector  port=<span class="string">&quot;8081&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;6000&quot;</span> enableLookups=<span class="string">&quot;false&quot;</span> acceptCount=<span class="string">&quot;800&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h1 id="第12章-jvm调优"><a href="#第12章-jvm调优" class="headerlink" title="第12章 jvm调优"></a>第12章 jvm调优</h1><p>Tomcat最吃内存，只要内存足够，这只猫就跑的很快。<br> 如果系统资源有限，那就需要进行调优，提高资源使用率。<br> 优化catalina.sh配置文件。在catalina.sh配置文件中添加以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">&quot;-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m&quot;</span></span><br><span class="line">server:一定要作为第一个参数，在多个CPU时性能佳</span><br><span class="line">-Xms：初始堆内存Heap大小，使用的最小内存,cpu性能高时此值应设的大一些</span><br><span class="line">-Xmx：初始堆内存heap最大值，使用的最大内存</span><br><span class="line">上面两个值是分配JVM的最小和最大内存，取决于硬件物理内存的大小，建议均设为物理内存的一半。</span><br><span class="line">-XX:PermSize:设定内存的永久保存区域</span><br><span class="line">-XX:MaxPermSize:设定最大内存的永久保存区域</span><br><span class="line">-XX:MaxNewSize:</span><br><span class="line">-Xss <span class="number">15120</span> 这使得JBoss每增加一个线程（thread)就会立即消耗<span class="number">15</span>M内存，而最佳值应该是<span class="number">128</span>K,默认值好像是<span class="number">512</span>k.</span><br><span class="line">+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。</span><br><span class="line">-Xss：每个线程的Stack大小</span><br><span class="line">-verbose:gc 现实垃圾收集信息</span><br><span class="line">-Xloggc:gc.<span class="built_in">log</span> 指定垃圾收集日志文件</span><br><span class="line">-Xmn：young generation的heap大小，一般设置为Xmx的<span class="number">3</span>、<span class="number">4</span>分之一</span><br><span class="line">-XX:+UseParNewGC ：缩短minor收集的时间</span><br><span class="line">-XX:+UseConcMarkSweepGC ：缩短major收集的时间</span><br></pre></td></tr></table></figure><h1 id="第13章-Tomcat启动慢解决"><a href="#第13章-Tomcat启动慢解决" class="headerlink" title="第13章 Tomcat启动慢解决"></a>第13章 Tomcat启动慢解决</h1><p>没优化之前的启动时间</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># tail -1 /opt/tomcat/logs/catalina.out  </span></span><br><span class="line"><span class="number">12</span>-Aug<span class="number">-2019</span> <span class="number">19</span>:<span class="number">59</span>:<span class="number">30.207</span> 信息 [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> <span class="number">66131</span> ms</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># find / -name &quot;java.security&quot;</span></span><br><span class="line">/usr/lib/jvm/java<span class="number">-1.8</span><span class="number">.0</span>-openjdk<span class="number">-1.8</span><span class="number">.0</span><span class="number">.222</span>.b10<span class="number">-0.</span>el7_6.x86_64/jre/lib/security/java.security</span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># vim /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64/jre/lib/security/java.security </span></span><br><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># sed -n &#x27;117p&#x27; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64/jre/lib/security/java.security               </span></span><br><span class="line">securerandom.source=file:/dev/urandom</span><br></pre></td></tr></table></figure><p>优化后的启动时间</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@sweb01 ~</span>]<span class="meta"># tail -1 /opt/tomcat/logs/catalina.out  </span></span><br><span class="line"><span class="number">12</span>-Aug<span class="number">-2019</span> <span class="number">20</span>:<span class="number">11</span>:<span class="number">16.619</span> 信息 [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> <span class="number">2606</span> ms</span><br></pre></td></tr></table></figure><h1 id="第14章-打包和解压war包"><a href="#第14章-打包和解压war包" class="headerlink" title="第14章 打包和解压war包"></a>第14章 打包和解压war包</h1><p>使用jkd二进制包自带的jar命令可以打包和解压war包</p><p>解压命令<br> /opt/jdk1.8.0_60/bin/jar -xvf jpress-web-newest.war</p><p>打包命令<br> /opt/jdk1.8.0_60/bin/jar  -cvfM0 jpress.war ./</p><h1 id="第15章-ansible启动tomcat"><a href="#第15章-ansible启动tomcat" class="headerlink" title="第15章 ansible启动tomcat"></a>第15章 ansible启动tomcat</h1><p>参考博客：<br> <a href="https://www.jianshu.com/p/91014c311c09">https://www.jianshu.com/p/91014c311c09</a></p><p>如果直接使用ansible的shell模块启动tomcat会发现并不能启动成功，需要使用chdir切换工作目录并结合nohub放在后台启动<br> 下面是一个简单的测试剧本</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~/tomcat]<span class="meta"># cat tomcat.yml </span></span><br><span class="line">- hosts: tomcat</span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: <span class="number">01</span>-start-tomcat</span><br><span class="line">    shell: chdir=/opt/tomcat/bin nohup ./startup.sh start &amp;</span><br><span class="line"></span><br><span class="line">  - name: <span class="number">02</span>-<span class="keyword">copy</span>-jpress</span><br><span class="line">    <span class="keyword">copy</span>: </span><br><span class="line">      src: /root/tomcat/jpress.war</span><br><span class="line">      dest: /opt/tomcat/webapps</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK日志收集系统概括</title>
      <link href="/posts/14304/"/>
      <url>/posts/14304/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>ELK收集日志</th></tr></thead><tbody><tr><td><strong>作者：Andu</strong>  <strong>2019/6/30</strong></td></tr><tr><td>精华文章</td></tr><tr><td></td></tr></tbody></table><h1 id="第1章-ELK介绍"><a href="#第1章-ELK介绍" class="headerlink" title="第1章 ELK介绍"></a>第1章 ELK介绍</h1><p>没有日志收集平台的时候如何分析日志？什么是ELK/EFLK? ELK的数据流转流程?</p><p>官方演示地址：</p><p><a href="https://demo.elastic.co/">https://demo.elastic.co/</a></p><h1 id="第2章-日志收集分类"><a href="#第2章-日志收集分类" class="headerlink" title="第2章 日志收集分类"></a>第2章 日志收集分类</h1><p>代理层：nginx,haproxy</p><p>web层：nginx,tomcat</p><p>数据库层：mysql,redis,mongo,elasticsearch</p><p>操作系统层：source,message</p><h1 id="第3章-安装部署ELK"><a href="#第3章-安装部署ELK" class="headerlink" title="第3章 安装部署ELK"></a>第3章 安装部署ELK</h1><h2 id="3-1-官方地址"><a href="#3-1-官方地址" class="headerlink" title="3.1 官方地址"></a>3.1 官方地址</h2><p><a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></p><h2 id="3-2-安装配置java"><a href="#3-2-安装配置java" class="headerlink" title="3.2 安装配置java"></a>3.2 安装配置java</h2><pre><code>[root@Andu ~]# yum install java-1.8.0-openjdk.x86_64 -y[[A1\]](#_msocom_1) [root@Andu ~]# java -version openjdk version &quot;1.8.0_212&quot;OpenJDK Runtime Environment (build 1.8.0_212-b04)OpenJDK 64-Bit Server VM (build 25.212-b04, mixed mode)</code></pre><h2 id="3-3-更新时间"><a href="#3-3-更新时间" class="headerlink" title="3.3 更新时间"></a>3.3 更新时间</h2><pre><code>yum install ntpdate -yntpdate time1.aliyun.com[[A2\]](#_msocom_2) </code></pre><h2 id="3-4-安装配置elasticsearch"><a href="#3-4-安装配置elasticsearch" class="headerlink" title="3.4 安装配置elasticsearch"></a>3.4 安装配置elasticsearch</h2><pre><code>[root@Andu ~]# mkdir /data/soft/ -p[root@Andu ~]# cd /data/soft/[root@Andu soft]# rz[root@Andu soft]# ll总用量 506120-rw-r--r-- 1 root root 114059630 2月 25 11:09 elasticsearch-6.6.0.rpm-rw-r--r-- 1 root root 36581177 4月 27 12:29 elasticsearch-head.tar.gz-rw-r--r-- 1 root root 11790119 2月 25 11:08 filebeat-6.6.0-x86_64.rpm-rw-r--r-- 1 root root 185123116 2月 25 11:11 kibana-6.6.0-x86_64.rpm-rw-r--r-- 1 root root 170703770 2月 25 11:38 logstash-6.6.0.rpm[root@Andu soft]# rpm -ivh elasticsearch-6.6.0.rpm 警告：elasticsearch-6.6.0.rpm: 头V4 RSA/SHA512 Signature, 密钥 ID d88e42b4: NOKEY准备中...             ################################# [100%]Creating elasticsearch group... OKCreating elasticsearch user... OK正在升级/安装...  1:elasticsearch-0:6.6.0-1     ################################# [100%]\### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd sudo systemctl daemon-reload sudo systemctl enable elasticsearch.service\### You can start elasticsearch service by executing sudo systemctl start elasticsearch.serviceCreated elasticsearch keystore in /etc/elasticsearch</code></pre><h3 id="3-4-1-相关配置目录及配置文件"><a href="#3-4-1-相关配置目录及配置文件" class="headerlink" title="3.4.1 相关配置目录及配置文件"></a>3.4.1 相关配置目录及配置文件</h3><pre><code>[root@Andu ~]# rpm -qc elasticsearch /etc/elasticsearch/elasticsearch.yml/etc/elasticsearch/jvm.options/etc/elasticsearch/log4j2.properties/etc/elasticsearch/role_mapping.yml/etc/elasticsearch/roles.yml/etc/elasticsearch/users/etc/elasticsearch/users_roles/etc/init.d/elasticsearch/etc/sysconfig/elasticsearch/usr/lib/sysctl.d/elasticsearch.conf/usr/lib/systemd/system/elasticsearch.service</code></pre><h3 id="3-4-2-ES配置文件解读"><a href="#3-4-2-ES配置文件解读" class="headerlink" title="3.4.2 ES配置文件解读"></a>3.4.2 ES配置文件解读</h3><pre><code>[root@Andu soft]# vim /etc/elasticsearch/elasticsearch.yml[root@Andu soft]# grep ^[a-z] /etc/elasticsearch/elasticsearch.yml node.name: node-1path.data: /var/lib/elasticsearch[[A3\]](#_msocom_3) path.logs: /var/log/elasticsearch[[A4\]](#_msocom_4) bootstrap.memory_lock: true[[A5\]](#_msocom_5) network.host: 192.168.10.66,127.0.0.1[[A6\]](#_msocom_6) http.port: 9200[[A7\]](#_msocom_7) [root@Andu soft]# systemctl daemon-reload[root@Andu soft]# systemctl enable elasticsearch.serviceCreated symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service.[root@Andu soft]# systemctl start elasticsearch.service</code></pre><h3 id="3-4-3-启动失败报错"><a href="#3-4-3-启动失败报错" class="headerlink" title="3.4.3 启动失败报错"></a>3.4.3 启动失败报错</h3><p>此时启动会发现失败，原因是内存锁定失败</p><pre><code>[2019-05-12T14:39:58,764][ERROR][o.e.b.Bootstrap     ] [node-1] node validation exception[1] bootstrap checks failed[1]: memory locking requested for elasticsearch process but memory is not locked</code></pre><h3 id="3-4-4-锁定内存失败解决方案"><a href="#3-4-4-锁定内存失败解决方案" class="headerlink" title="3.4.4 锁定内存失败解决方案"></a>3.4.4 锁定内存失败解决方案</h3><p>官方解决方案</p><pre><code>https://www.elastic.co/guide/en/elasticsearch/reference/6.4/setup-configuration-memory.htmlhttps://www.elastic.co/guide/en/elasticsearch/reference/6.4/setting-system-settings.html#sysconfig\### 修改启动配置文件vim /usr/lib/systemd/system/elasticsearch.service</code></pre><p>​<br>​<br>    ### 增加如下参数</p><pre><code>[Service]LimitMEMLOCK=infinity</code></pre><p>​<br>​<br>    ### 重新启动</p><pre><code>systemctl daemon-reload</code></pre><p>​<br>​<br>    systemctl restart elasticsearch</p><h3 id="3-4-5-检查启动是否成功"><a href="#3-4-5-检查启动是否成功" class="headerlink" title="3.4.5 检查启动是否成功"></a>3.4.5 检查启动是否成功</h3><pre><code>  [root@Andu ~]# netstat -lntup|grep 9200    tcp6    0   0 192.168.10.66:9200   :::*          LISTEN   15824/java         tcp6    0   0 127.0.0.1:9200     :::*          LISTEN   15824/java    [root@Andu ~]# curl localhost:9200       &#123;     &quot;name&quot; : &quot;node-1&quot;,     &quot;cluster_name&quot; : &quot;elasticsearch&quot;,     &quot;cluster_uuid&quot; : &quot;As5ZlEQ2Syq0ktLL0hg5XA&quot;,     &quot;version&quot; : &#123;      &quot;number&quot; : &quot;6.6.0&quot;,      &quot;build_flavor&quot; : &quot;default&quot;,      &quot;build_type&quot; : &quot;rpm&quot;,      &quot;build_hash&quot; : &quot;a9861f4&quot;,      &quot;build_date&quot; : &quot;2019-01-24T11:27:09.439740Z&quot;,      &quot;build_snapshot&quot; : false,      &quot;lucene_version&quot; : &quot;7.6.0&quot;,      &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,      &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;     &#125;,     &quot;tagline&quot; : &quot;You Know, for Search&quot;    &#125;</code></pre><h2 id="3-5-服务模式安装配置es-head插件"><a href="#3-5-服务模式安装配置es-head插件" class="headerlink" title="3.5 服务模式安装配置es-head插件"></a>3.5 服务模式安装配置es-head插件</h2><h3 id="3-5-1-插件官方地址"><a href="#3-5-1-插件官方地址" class="headerlink" title="3.5.1 插件官方地址"></a>3.5.1 插件官方地址</h3><p><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><h3 id="3-5-2-使用docker部署elasticsearch-head"><a href="#3-5-2-使用docker部署elasticsearch-head" class="headerlink" title="3.5.2 使用docker部署elasticsearch-head"></a>3.5.2 使用docker部署elasticsearch-head</h3><pre><code>docker pull alivv/elasticsearch-headdocker run --name es-head -p 9100:9100 -dit alivv/elasticsearch-head</code></pre><h3 id="3-5-3-使用nodejs编译安装"><a href="#3-5-3-使用nodejs编译安装" class="headerlink" title="3.5.3 使用nodejs编译安装"></a>3.5.3 使用nodejs编译安装</h3><p>官网地址</p><p><a href="https://nodejs.org/en/download/package-manager/">https://nodejs.org/en/download/package-manager/</a></p><p><a href="https://nodejs.org/dist/latest-v10.x/">https://nodejs.org/dist/latest-v10.x/</a></p><p><a href="http://npm.taobao.org/">http://npm.taobao.org</a></p><p>下载安装</p><pre><code>yum install nodejs npm openssl screen -y</code></pre><p>​<br>​<br>    node -v</p><pre><code>npm -vnpm install -g cnpm --registry=https://registry.npm.taobao.orgcd /opt/             git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-head/</code></pre><p>​<br>​<br>    cnpm install</p><pre><code>screen -S es-headcnpm run startCtrl+A+D</code></pre><h3 id="3-5-4-修改ES配置文件支持跨域"><a href="#3-5-4-修改ES配置文件支持跨域" class="headerlink" title="3.5.4 修改ES配置文件支持跨域"></a>3.5.4 修改ES配置文件支持跨域</h3><p>官方说明：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/modules-http.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.6/modules-http.html</a></p><p>配置参数：</p><pre><code>http.cors.enabled: true http.cors.allow-origin: &quot;*&quot;</code></pre><h3 id="3-5-5-网页访问"><a href="#3-5-5-网页访问" class="headerlink" title="3.5.5 网页访问"></a>3.5.5 网页访问</h3><pre><code>IP地址:9200/9100</code></pre><h2 id="3-6-谷歌浏览器插件形式安装es-head"><a href="#3-6-谷歌浏览器插件形式安装es-head" class="headerlink" title="3.6 谷歌浏览器插件形式安装es-head"></a>3.6 谷歌浏览器插件形式安装es-head</h2><p>[tip type=”info”]<br>使用服务模式安装es-head插件过程比较繁琐，网络不好的时候还会经常卡住，幸运的是es-head插件官方还提供了另外一种更简便的方式，就是google chrome的插件<br>[/tip]</p><p>[collapse title=”优势”]<br>1.免安装，直接下载插件安装在浏览器即可</p><p>2.只要浏览器和服务器可以通信就能使用</p><p>[/collapse]</p><h2 id="3-7-安装配置kibana"><a href="#3-7-安装配置kibana" class="headerlink" title="3.7 安装配置kibana"></a>3.7 安装配置kibana</h2><h3 id="3-7-1-安装配置kibana"><a href="#3-7-1-安装配置kibana" class="headerlink" title="3.7.1 安装配置kibana"></a>3.7.1 安装配置kibana</h3><pre><code>[root@Andu soft]# rpm -ivh kibana-6.6.0-x86_64.rpm[root@Andu soft]# grep &quot;^[a-z]&quot; /etc/kibana/kibana.ymlserver.port: 5601server.host: &quot;192.168.10.66&quot;elasticsearch.hosts: [&quot;http://localhost:9200&quot;]kibana.index: &quot;.kibana[root@Andu soft]# systemctl start kibana[root@Andu soft]# systemctl status kibana[root@Andu soft]# netstat -lntup|grep 5601tcp    0   0 192.168.10.66:5601   0.0.0.0:*        LISTEN   16442/node</code></pre><h2 id="3-8-安装filebeat和logstash"><a href="#3-8-安装filebeat和logstash" class="headerlink" title="3.8 安装filebeat和logstash"></a>3.8 安装filebeat和logstash</h2><pre><code>rpm -ivh filebeat-6.6.0-x86_64.rpmrpm -ivh logstash-6.6.0.rpm </code></pre><h2 id="3-9-docker安装elk"><a href="#3-9-docker安装elk" class="headerlink" title="3.9 docker安装elk"></a>3.9 docker安装elk</h2><pre><code>version: &#39;3&#39;services: elasticsearch:  image: elasticsearch:v1  container_name: elasticsearch  environment:   \- cluster.name=docker-cluster   \- bootstrap.memory_lock=true   \- &quot;ES_JAVA_OPTS=-Xms8g -Xmx8g&quot;   \- &quot;discovery.zen.ping.unicast.hosts=elasticsearch&quot;  ulimits:   memlock:​    soft: -1​    hard: -1  volumes:   \- /data/docker_es_data:/usr/share/elasticsearch/data  ports:   \- 19200:9200  networks:   \- esnet elasticsearch-head:  image: elasticsearch-head:v1  container_name: elasticsearch-head  ports:   \- 19100:9100  networks:   \- esnet kibana:  image: kibana:v1  container_name: kibana  environment:   \- ELASTICSEARCH_URL=&quot;http://elasticsearch:9200&quot;   \- kibana.index=&quot;.kibana&quot;  ports:   \- 15601:5601  networks:   \- esnet logstash:  image: logstash:v1  container_name: logstash   environment:   \- ELASTICSEARCH_URL=&quot;http://elasticsearch:9200&quot;  ports:   \- 16379:6379  networks:   \- esnetnetworks: esnet:</code></pre><h1 id="第4章-使用filebeat配置日志收集"><a href="#第4章-使用filebeat配置日志收集" class="headerlink" title="第4章 使用filebeat配置日志收集"></a>第4章 使用filebeat配置日志收集</h1><h2 id="4-1-收集nginx日志"><a href="#4-1-收集nginx日志" class="headerlink" title="4.1 收集nginx日志"></a>4.1 收集nginx日志</h2><h3 id="4-1-1-安装nginx和ab工具"><a href="#4-1-1-安装nginx和ab工具" class="headerlink" title="4.1.1 安装nginx和ab工具"></a>4.1.1 安装nginx和ab工具</h3><pre><code>[root@Andu ~]# yum install nginx httpd-tools -y</code></pre><h3 id="4-1-2-启动测试"><a href="#4-1-2-启动测试" class="headerlink" title="4.1.2 启动测试"></a>4.1.2 启动测试</h3><pre><code>[root@Andu ~]#  wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo[root@Andu ~]# systemctl start nginx[root@Andu ~]# netstat -lntup|grep nginxtcp    0   0 0.0.0.0:80       0.0.0.0:*        LISTEN   1888/nginx: master tcp6    0   0 :::80          :::*          LISTEN   1888/nginx: master[root@Andu ~]# ab -c 10 -n 100 192.168.10.66/[root@Andu ~]# ab -c 10 -n 100 192.168.10.66/test.html</code></pre><h3 id="4-1-3-查看日志"><a href="#4-1-3-查看日志" class="headerlink" title="4.1.3 查看日志"></a>4.1.3 查看日志</h3><pre><code>[root@Andu ~]# tail -f /var/log/nginx/access.log 192.168.10.66 - - [13/May/2019:00:24:02 +0800] &quot;GET /test.html HTTP/1.0&quot; 404 3650 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;192.168.10.66 - - [13/May/2019:00:24:02 +0800] &quot;GET /test.html HTTP/1.0&quot; 404 3650 &quot;-&quot; &quot;ApacheBench/2.3&quot; &quot;-&quot;.......................................</code></pre><h3 id="4-1-4-配置filebeat收集普通日志"><a href="#4-1-4-配置filebeat收集普通日志" class="headerlink" title="4.1.4 配置filebeat收集普通日志"></a>4.1.4 配置filebeat收集普通日志</h3><p>相关网址</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.x/filebeat-input-log.html">https://www.elastic.co/guide/en/beats/filebeat/7.x/filebeat-input-log.html</a></p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.x/configuration-template.html">https://www.elastic.co/guide/en/beats/filebeat/7.x/configuration-template.html</a></p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.x/configuration-template.html">https://www.elastic.co/guide/en/beats/filebeat/7.x/configuration-template.html</a></p><p>正确配置</p><pre><code>filebeat.inputs:\- type: log enabled: true paths:  \- /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true</code></pre><p>​<br>​<br>    setup.kibana:</p><pre><code> host: &quot;192.168.10.66:5601&quot;</code></pre><p>​<br>​<br>    output.elasticsearch:</p><pre><code> hosts: [&quot;192.168.10.66:9200&quot;] index: &quot;nginx-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM&#125;&quot;setup.template.name: &quot;nginx&quot;setup.template.pattern: &quot;nginx-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="4-1-5-kibana配置"><a href="#4-1-5-kibana配置" class="headerlink" title="4.1.5 kibana配置"></a>4.1.5 kibana配置</h3><pre><code>management--&gt;index patterns--&gt;nginx--&gt;@timestamp</code></pre><h3 id="4-1-6-修改nginx日志为json格式"><a href="#4-1-6-修改nginx日志为json格式" class="headerlink" title="4.1.6 修改nginx日志为json格式"></a>4.1.6 修改nginx日志为json格式</h3><pre><code> log_format main &#39;&#123; &quot;time_local&quot;: &quot;$time_local&quot;, &#39;​              &#39;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#39;​              &#39;&quot;referer&quot;: &quot;$http_referer&quot;, &#39;​              &#39;&quot;request&quot;: &quot;$request&quot;, &#39;​              &#39;&quot;status&quot;: $status, &#39;​              &#39;&quot;bytes&quot;: $body_bytes_sent, &#39;​              &#39;&quot;agent&quot;: &quot;$http_user_agent&quot;, &#39;​              &#39;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &#39;​              &#39;&quot;up_addr&quot;: &quot;$upstream_addr&quot;,&#39;​              &#39;&quot;up_host&quot;: &quot;$upstream_http_host&quot;,&#39;​              &#39;&quot;upstream_time&quot;: &quot;$upstream_response_time&quot;,&#39;​              &#39;&quot;request_time&quot;: &quot;$request_time&quot;&#39;  &#39; &#125;&#39;;</code></pre><h3 id="4-1-7-查看日志是否为json格式"><a href="#4-1-7-查看日志是否为json格式" class="headerlink" title="4.1.7 查看日志是否为json格式"></a>4.1.7 查看日志是否为json格式</h3><pre><code>[root@Andu ~]# tail -f /var/log/nginx/access.log  &#123; &quot;time_local&quot;: &quot;13/May/2019:00:30:51 +0800&quot;, &quot;remote_addr&quot;: &quot;192.168.10.66&quot;, &quot;referer&quot;: &quot;-&quot;, &quot;request&quot;: &quot;GET /test.html HTTP/1.0&quot;, &quot;status&quot;: 404, &quot;bytes&quot;: 3650, &quot;agent&quot;: &quot;ApacheBench/2.3&quot;, &quot;x_forwarded&quot;: &quot;-&quot;, &quot;up_addr&quot;: &quot;-&quot;,&quot;up_host&quot;: &quot;-&quot;,&quot;upstream_time&quot;: &quot;-&quot;,&quot;request_time&quot;: &quot;0.000&quot; &#125;&#123; &quot;time_local&quot;: &quot;13/May/2019:00:30:51 +0800&quot;, &quot;remote_addr&quot;: &quot;192.168.10.66&quot;, &quot;referer&quot;: &quot;-&quot;, &quot;request&quot;: &quot;GET /test.html HTTP/1.0&quot;, &quot;status&quot;: 404, &quot;bytes&quot;: 3650, &quot;agent&quot;: &quot;ApacheBench/2.3&quot;, &quot;x_forwarded&quot;: &quot;-&quot;, &quot;up_addr&quot;: &quot;-&quot;,&quot;up_host&quot;: &quot;-&quot;,&quot;upstream_time&quot;: &quot;-&quot;,&quot;request_time&quot;: &quot;0.000&quot; &#125;</code></pre><h3 id="4-1-8-收集多个日志并分类创建索引"><a href="#4-1-8-收集多个日志并分类创建索引" class="headerlink" title="4.1.8 收集多个日志并分类创建索引"></a>4.1.8 收集多个日志并分类创建索引</h3><p>[tip type=”info”]<br>filebeat配置<br>[/tip]</p><pre><code>[root@Andu filebeat]# cat filebeat.yml filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true tags: [&quot;access&quot;]\- type: log enabled: true  paths:  \- /var/log/nginx/error.log tags: [&quot;error&quot;]setup.template.settings: index.number_of_shards: 3setup.kibana: host: &quot;192.168.10.66:5601&quot;output.elasticsearch: hosts: [&quot;localhost:9200&quot;] indices:  \- index: &quot;nginx_access-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    tags: &quot;access&quot;  \- index: &quot;nginx_error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    tags: &quot;error&quot;setup.template.name: &quot;nginx&quot;setup.template.pattern: &quot;nginx_*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h2 id="4-2-收集tomcat日志"><a href="#4-2-收集tomcat日志" class="headerlink" title="4.2 收集tomcat日志"></a>4.2 收集tomcat日志</h2><h3 id="4-2-1-安装tomcat"><a href="#4-2-1-安装tomcat" class="headerlink" title="4.2.1 安装tomcat"></a>4.2.1 安装tomcat</h3><pre><code>yum install tomcat tomcat-webapps tomcat-admin-webapps tomcat-docs-webapp tomcat-javadoc -y</code></pre><h3 id="4-2-2-启动检查"><a href="#4-2-2-启动检查" class="headerlink" title="4.2.2 启动检查"></a>4.2.2 启动检查</h3><pre><code>[root@Andu ~]# systemctl start tomcat[root@Andu ~]# systemctl status tomcat[root@Andu ~]# lsof -i:8080COMMAND  PID  USER  FD  TYPE DEVICE SIZE/OFF NODE NAMEjava  18915 tomcat  49u IPv6 61950   0t0 TCP *:webcache (LISTEN)</code></pre><h3 id="4-2-3-访问测试"><a href="#4-2-3-访问测试" class="headerlink" title="4.2.3 访问测试"></a>4.2.3 访问测试</h3><h3 id="4-2-4-修改日志为json格式"><a href="#4-2-4-修改日志为json格式" class="headerlink" title="4.2.4 修改日志为json格式"></a>4.2.4 修改日志为json格式</h3><pre><code>[root@Andu ~]# vim /etc/tomcat/server.xml[root@Andu ~]# cat -n /etc/tomcat/server.xml\----------------  137     &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;  138         prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;  139         pattern=&quot;&#123;&amp;quot;clientip&amp;quot;:&amp;quot;%h&amp;quot;,&amp;quot;ClientUser&amp;quot;:&amp;quot;%l&amp;quot;,&amp;quot;authenticated&amp;quot;:&amp;quot;%u&amp;quot;,&amp;quot;AccessTime&amp;quot;:&amp;quot;%t&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;%r&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;%s&amp;quot;,&amp;quot;SendBytes&amp;quot;:&amp;quot;%b&amp;quot;,&amp;quot;Query?string&amp;quot;:&amp;quot;%q&amp;quot;,&amp;quot;partner&amp;quot;:&amp;quot;%&#123;Referer&#125;i&amp;quot;,&amp;quot;AgentVersion&amp;quot;:&amp;quot;%&#123;User-Agent&#125;i&amp;quot;&#125;&quot;/&gt;\----------------</code></pre><h3 id="4-2-5-重启确认日志是否为json格式"><a href="#4-2-5-重启确认日志是否为json格式" class="headerlink" title="4.2.5 重启确认日志是否为json格式"></a>4.2.5 重启确认日志是否为json格式</h3><pre><code>[root@Andu ~]# systemctl restart tomcat[root@Andu ~]# tail -f /var/log/tomcat/localhost_access_log.2019-05-13.txt &#123;&quot;clientip&quot;:&quot;192.168.47.1&quot;,&quot;ClientUser&quot;:&quot;-&quot;,&quot;authenticated&quot;:&quot;-&quot;,&quot;AccessTime&quot;:&quot;[13/May/2019:13:18:03 +0800]&quot;,&quot;method&quot;:&quot;GET /docs/images/tomcat.gif HTTP/1.1&quot;,&quot;status&quot;:&quot;200&quot;,&quot;SendBytes&quot;:&quot;2066&quot;,&quot;Query?string&quot;:&quot;&quot;,&quot;partner&quot;:&quot;http://192.168.10.66:8080/docs/realm-howto.html&quot;,&quot;AgentVersion&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36&quot;&#125;</code></pre><p>在线解析测试正确</p><h3 id="4-2-6-filebeat配置"><a href="#4-2-6-filebeat配置" class="headerlink" title="4.2.6 filebeat配置"></a>4.2.6 filebeat配置</h3><pre><code>[root@Andu ~]# cat /etc/filebeat/filebeat.yml filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/tomcat/localhost_access_log* json.keys_under_root: true json.overwrite_keys: truetags: [&quot;tomcat&quot;][[A16\]](#_msocom_16) setup.kibana: host: &quot;192.168.10.66:5601&quot;output.elasticsearch: hosts: [&quot;localhost:9200&quot;] index: &quot;tomcat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot; when.contains:​    tags: &quot;tomcat&quot;setup.template.name: &quot;tomcat&quot;setup.template.pattern: &quot;tomcatn-*&quot;setup.template.enabled: falsesetup.template.overwrite: true[[A17\]](#_msocom_17) </code></pre><p>[tip type=”success”]<br>亲测可用配置为如下<br>[/tip]</p><pre><code>filebeat.inputs:\#################tomcat#############\- type: log enabled: true paths:  \- /var/log/tomcat/localhost_access_log.*.txt json.keys_under_root: true json.overwrite_keys: true\#################output#############setup.kibana: host: &quot;192.168.10.66:5601&quot;output.elasticsearch: hosts: [&quot;192.168.10.66:9200&quot;] indices:  \- index: &quot;tomcat-access-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM&#125;&quot;setup.template.name: &quot;tomcat&quot;setup.template.pattern: &quot;tomcat-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="4-2-7-配置tomcat收集多个域名的日志"><a href="#4-2-7-配置tomcat收集多个域名的日志" class="headerlink" title="4.2.7 配置tomcat收集多个域名的日志"></a>4.2.7 配置tomcat收集多个域名的日志</h3><p>配置多个host标签</p><h2 id="4-3-收集java日志"><a href="#4-3-收集java日志" class="headerlink" title="4.3 收集java日志"></a>4.3 收集java日志</h2><h3 id="4-3-1-官方地址"><a href="#4-3-1-官方地址" class="headerlink" title="4.3.1 官方地址"></a>4.3.1 官方地址</h3><p><a href="https://www.elastic.co/guide/en/beats/filebeat/6.6/multiline-examples.html">https://www.elastic.co/guide/en/beats/filebeat/6.6/multiline-examples.html</a></p><p>因为java日志的输出信息非常多，需要将多行拼成一个事件，所以需要多行匹配模式</p><p>因为elasticsearch本身就是java开发的，所以我们可以直接收集ES的日志</p><h3 id="4-3-2-filebeat配置"><a href="#4-3-2-filebeat配置" class="headerlink" title="4.3.2 filebeat配置"></a>4.3.2 filebeat配置</h3><pre><code>[root@Andu ~]# cat /etc/filebeat/filebeat.yml    filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/elasticsearch/elasticsearch.log multiline.pattern: &#39;^\[&#39; multiline.negate: true multiline.match: aftersetup.kibana: host: &quot;192.168.10.66:5601&quot;output.elasticsearch: hosts: [&quot;localhost:9200&quot;] index: &quot;es-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;setup.template.name: &quot;es&quot;setup.template.pattern: &quot;es-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h2 id="4-4-收集docker日志"><a href="#4-4-收集docker日志" class="headerlink" title="4.4 收集docker日志"></a>4.4 收集docker日志</h2><h3 id="4-4-1-安装docker"><a href="#4-4-1-安装docker" class="headerlink" title="4.4.1 安装docker"></a>4.4.1 安装docker</h3><pre><code>rm -fr /etc/yum.repos.d/local.repocurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.reposed -i &#39;s#download.docker.com#mirrors.tuna.tsinghua.edu.cn/docker-ce#g&#39; /etc/yum.repos.d/docker-ce.repoyum install docker-ce -ysystemctl start dockervi /etc/docker/daemon.json&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;] &#125;systemctl restart docker</code></pre><h3 id="4-4-2-运行nginx镜像"><a href="#4-4-2-运行nginx镜像" class="headerlink" title="4.4.2 运行nginx镜像"></a>4.4.2 运行nginx镜像</h3><pre><code>docker pull nginxdocker run --name nginx -p 80:80 -d nginxdocker psdocker logs -f nginx</code></pre><h3 id="4-4-3-配置filebeat收集单个docker日志"><a href="#4-4-3-配置filebeat收集单个docker日志" class="headerlink" title="4.4.3 配置filebeat收集单个docker日志"></a>4.4.3 配置filebeat收集单个docker日志</h3><p>官方介绍：</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/6.7/filebeat-input-docker.html">https://www.elastic.co/guide/en/beats/filebeat/6.7/filebeat-input-docker.html</a></p><p>首先查看docker容器的ID</p><pre><code>docker inspect nginx-test|grep -w &quot;Id&quot;</code></pre><p>配置文件</p><pre><code>filebeat.inputs:\- type: docker containers.ids:   \- &#39;2338d5038f7a2eac96d84d6cf424fb1829bd754ec5e0df944bdd29ba6d61a54e&#39; tags: [&quot;docker-nginx&quot;] output.elasticsearch: hosts: [&quot;localhost:9200&quot;] index: &quot;docker-nginx-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;setup.template.name: &quot;docker&quot;setup.template.pattern: &quot;docker-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="4-4-4-使用通配符收集所有容器的日志"><a href="#4-4-4-使用通配符收集所有容器的日志" class="headerlink" title="4.4.4 使用通配符收集所有容器的日志"></a>4.4.4 使用通配符收集所有容器的日志</h3><p>新版本的filebeat增加了收集多个容器的日志的选项</p><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.2/filebeat-input-container.html">https://www.elastic.co/guide/en/beats/filebeat/7.2/filebeat-input-container.html</a></p><h3 id="4-4-5-配置filebeat通过标签收集多个容器日志"><a href="#4-4-5-配置filebeat通过标签收集多个容器日志" class="headerlink" title="4.4.5 配置filebeat通过标签收集多个容器日志"></a>4.4.5 配置filebeat通过标签收集多个容器日志</h3><p>假如我们有多个docker镜像或者重新提交了新镜像，那么直接指定ID的就不是太方便了。</p><p>我们从当前的容器提交一个新的镜像并且运行起来</p><pre><code>docker commit nginx nginx:v2docker imagesdocker run --name nginx -p 8080:80 -d nginx:v2</code></pre><p>此时我们的容器目录下就有了两个不同的容器目录</p><pre><code>[root@elk-176 containers]# ls /var/lib/docker/containers/         2338d5038f7a2eac96d84d6cf424fb1829bd754ec5e0df944bdd29ba6d61a54e 3bb5250e7e50a4ed8d1fae7a43d3bf4294864ac4e0af125ae5231cd9bd76b914</code></pre><p>如果直接配置filebeat存到es里本台机器所有的容器日志都会混在一起没有办法区分</p><p>多容器日志收集处理：</p><p>其实收集的日志本质来说还是文件，而这个日志是以容器-json.log命名存放在默认目录下的json格式的文件：</p><pre><code>[root@elk-176 ~]# head -1 /var/lib/docker/containers/2338d5038f7a2eac96d84d6cf424fb1829bd754ec5e0df944bdd29ba6d61a54e/2338d5038f7a2eac96d84d6cf424fb1829bd754ec5e0df944bdd29ba6d61a54e-json.log&#123;&quot;log&quot;:&quot;192.168.47.1 - - [23/May/2019:19:12:04 +0000] \&quot;GET / HTTP/1.1\&quot; 200 612 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36\&quot; \&quot;-\&quot;\n&quot;,&quot;stream&quot;:&quot;stdout&quot;,&quot;time&quot;:&quot;2019-05-23T19:12:04.939212514Z&quot;&#125;</code></pre><p>但是每个容器的ID都不一样，为了区分不同服务运行的不同容器，可以使用docker-compose通过给容器添加labels标签来作为区分</p><p>然后filbeat把容器日志当作普通的json格式来解析并传输到es</p><p>操作步骤：</p><p>1.安装docker-compose</p><pre><code>yum install -y python2-pip</code></pre><p>2.这里使用pip安装，默认源为国外，可以使用国内加速，相关网站</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p><p>pip加速操作命令</p><pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>3.继续安装docker-compose</p><pre><code>pip install docker-compose</code></pre><p>4.检查</p><pre><code>docker-compose version</code></pre><p>5.编写docker-compose.yml</p><pre><code>[root@elk-176 ~]# cat docker-compose.yml version: &#39;3&#39;services: nginx:  image: nginx:v2</code></pre><p>  # 设置labels</p><pre><code> labels:   service: nginx  \# logging设置增加labels.service  logging:   options:​    labels: &quot;service&quot;  ports:   \- &quot;8080:80&quot; db:  image: nginx:latest  \# 设置labels  labels:   service: db   \# logging设置增加labels.service  logging:   options:​    labels: &quot;service&quot;  ports:   \- &quot;80:80&quot;</code></pre><p>6.清理镜像</p><pre><code>docker ps -a|awk &#39;NR&gt;1&#123;print &quot;docker rm&quot;,$1&#125;&#39;|bash</code></pre><p>7.运行docker-compose.yml</p><pre><code>docker-compose up -d</code></pre><p>8.检查日志是否增加了lable标签</p><pre><code>[root@elk-176 ~]# tail -1 /var/lib/docker/containers/b2c1f4f7f5a2967fe7d12c1db124ae41f009ec663c71608575a4773beb6ca5f8/b2c1f4f7f5a2967fe7d12c1db124ae41f009ec663c71608575a4773beb6ca5f8-json.log&#123;&quot;log&quot;:&quot;192.168.47.1 - - [23/May/2019:13:22:32 +0000] \&quot;GET / HTTP/1.1\&quot; 304 0 \&quot;-\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36\&quot; \&quot;-\&quot;\n&quot;,&quot;stream&quot;:&quot;stdout&quot;,&quot;attrs&quot;:&#123;&quot;service&quot;:&quot;nginx&quot;&#125;,&quot;time&quot;:&quot;2019-05-23T13:22:32.478708392Z&quot;&#125;</code></pre><p>9.配置filebeat</p><pre><code>[root@elk-176 ~]# cat /etc/filebeat/filebeat.yml   filebeat.inputs:\- type: log enabled: true  paths:  \- /var/lib/docker/containers/*/*-json.log json.keys_under_root: true json.overwrite_keys: trueoutput.elasticsearch: hosts: [&quot;192.168.10.66:9200&quot;] indices:  \- index: &quot;docker-nginx-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    attrs.service: &quot;nginx&quot;  \- index: &quot;docker-db-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    attrs.service: &quot;db&quot;setup.template.name: &quot;docker&quot;setup.template.pattern: &quot;docker-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="4-4-6-配置filebeat通过服务类型和日志类型多条件创建不同索引"><a href="#4-4-6-配置filebeat通过服务类型和日志类型多条件创建不同索引" class="headerlink" title="4.4.6 配置filebeat通过服务类型和日志类型多条件创建不同索引"></a>4.4.6 配置filebeat通过服务类型和日志类型多条件创建不同索引</h3><p>目前为止，已经可以按服务来收集日志了，但是错误日志和正确日志混在了一起，不好区分，所以可以进一步进行条件判断，根据服务和日志类型创建不同的索引</p><p>filebeat配置文件</p><pre><code>[root@elk-176 ~]# cat /etc/filebeat/filebeat.yml     filebeat.inputs:\- type: log enabled: true  paths:  \- /var/lib/docker/containers/*/*-json.log json.keys_under_root: true json.overwrite_keys: trueoutput.elasticsearch: hosts: [&quot;192.168.10.66:9200&quot;] indices:  \- index: &quot;docker-nginx-access-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​     attrs.service: &quot;nginx&quot;​     stream: &quot;stdout&quot;  \- index: &quot;docker-nginx-error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​     attrs.service: &quot;nginx&quot;​     stream: &quot;stderr&quot;  \- index: &quot;docker-db-access-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​     attrs.service: &quot;db&quot;​     stream: &quot;stdout&quot;  \- index: &quot;docker-db-error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​     attrs.service: &quot;db&quot;​     stream: &quot;stderr&quot;setup.template.name: &quot;docker&quot;setup.template.pattern: &quot;docker-*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="4-4-7-验证提交新镜像运行后日志收集情况"><a href="#4-4-7-验证提交新镜像运行后日志收集情况" class="headerlink" title="4.4.7 验证提交新镜像运行后日志收集情况"></a>4.4.7 验证提交新镜像运行后日志收集情况</h3><p>1.提交新镜像</p><pre><code>[root@elk-176 ~]# docker ps -aCONTAINER ID    IMAGE        COMMAND         CREATED       STATUS           PORTS        NAMESf92f4d747584    nginx:latest    &quot;nginx -g &#39;daemon of…&quot;  45 minutes ago   Exited (0) 51 seconds ago            root_db_1b2c1f4f7f5a2    nginx:v2      &quot;nginx -g &#39;daemon of…&quot;  45 minutes ago   Exited (0) 51 seconds ago            root_nginx_1[root@elk-176 ~]# docker commit root_nginx_1 nginx:v3     sha256:4457e2b7afc719ef185c75c02031b11c1407efe2e2e57b85f0c9347d04a9ff00[root@elk-176 ~]# docker commit root_db_1 nginx:v4sha256:a7e8d8b3290c817194956aa06fc486ef928853121d9c6224fd64fe759c967dda[root@elk-176 ~]# docker imagesREPOSITORY     TAG         IMAGE ID      CREATED       SIZEnginx        v4          a7e8d8b3290c    35 seconds ago   109MBnginx        v3         4457e2b7afc7    45 seconds ago   109MBnginx        v2         c181c6355cd9    2 hours ago     109MBnginx        latest        53f3fd8007f7    2 weeks ago     109MB</code></pre><p>2.修改并运行docker-compose</p><pre><code>[root@elk-176 ~]# cat docker-compose.yml version: &#39;3&#39;services: nginx:  image: nginx:v3  \# 设置labels  labels:   service: nginx  \# logging设置增加labels.service  logging:   options:​    labels: &quot;service&quot;  ports:   \- &quot;8080:80&quot; db:  image: nginx:v4  \# 设置labels  labels:   service: db   \# logging设置增加labels.service  logging:   options:​    labels: &quot;service&quot;  ports:   \- &quot;80:80&quot;[root@elk-176 ~]# docker-compose up -dStarting root_nginx_1 ... Starting root_nginx_1 ... doneStarting root_db_1  ... done[root@elk-176 ~]# docker psCONTAINER ID    IMAGE        COMMAND         CREATED       STATUS       PORTS         NAMES04308aa3928b    nginx:v4       &quot;nginx -g &#39;daemon of…&quot;  30 seconds ago   Up 1 second     0.0.0.0:80-&gt;80/tcp   root_db_149d2e2210e6f    nginx:v3       &quot;nginx -g &#39;daemon of…&quot;  30 seconds ago   Up 1 second     0.0.0.0:8080-&gt;80/tcp  root_nginx_1</code></pre><p>3.访问并查看是否有新数据生成</p><pre><code>curl logcalhost/zhangya.htmlcurl logcalhost:8080/zhangya.html</code></pre><p>4.经过查看发现已经成功收集到了日志，这样我们就做到了不用修改filebeat配置文件也可以持续的收集新镜像的日志并按分类创建不同的索引</p><h3 id="4-4-8-修改docker容器内日志类型为json"><a href="#4-4-8-修改docker容器内日志类型为json" class="headerlink" title="4.4.8 修改docker容器内日志类型为json"></a>4.4.8 修改docker容器内日志类型为json</h3><p>刚才收集的docker内的日志类型为普通格式，如果我们修改为json格式会如何呢？</p><h1 id="第5章-使用filledeat-modules配置"><a href="#第5章-使用filledeat-modules配置" class="headerlink" title="第5章 使用filledeat modules配置"></a>第5章 使用filledeat modules配置</h1><h2 id="5-1-官方网址"><a href="#5-1-官方网址" class="headerlink" title="5.1 官方网址"></a>5.1 官方网址</h2><p><a href="https://www.elastic.co/guide/en/beats/filebeat/6.6/configuration-filebeat-modules.html">https://www.elastic.co/guide/en/beats/filebeat/6.6/configuration-filebeat-modules.html</a></p><h2 id="5-2-使用模版配置nginx正常日志"><a href="#5-2-使用模版配置nginx正常日志" class="headerlink" title="5.2 使用模版配置nginx正常日志"></a>5.2 使用模版配置nginx正常日志</h2><p>社区论坛：</p><p><a href="https://discuss.elastic.co/t/filebeat-module-custom-index/181350">https://discuss.elastic.co/t/filebeat-module-custom-index/181350</a></p><h3 id="5-2-1-filebeat配置文件"><a href="#5-2-1-filebeat配置文件" class="headerlink" title="5.2.1 filebeat配置文件"></a>5.2.1 filebeat配置文件</h3><pre><code>[root@Andu ~]# cat /etc/filebeat/filebeat.yml filebeat.config.modules: path: $&#123;path.config&#125;/modules.d/*.yml reload.enabled: truesetup.kibana: host: &quot;192.168.10.66:5601&quot;output.elasticsearch: hosts: [&quot;localhost:9200&quot;] indices:  \- index: &quot;nginx_access-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    fileset.name: &quot;access&quot;  \- index: &quot;nginx_error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;   when.contains:​    fileset.name: &quot;error&quot;setup.template.name: &quot;nginx&quot;setup.template.pattern: &quot;nginx_*&quot;setup.template.enabled: falsesetup.template.overwrite: true</code></pre><h3 id="5-2-2-filebeat-modules配置"><a href="#5-2-2-filebeat-modules配置" class="headerlink" title="5.2.2 filebeat modules配置"></a>5.2.2 filebeat modules配置</h3><p>使用nginx模版配置需要安装2个插件，默认从官网下载速度太慢，可以提前下载然后离线安装</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/6.6/ingest-geoip.html">https://www.elastic.co/guide/en/elasticsearch/plugins/6.6/ingest-geoip.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/6.6/plugin-management-custom-url.html">https://www.elastic.co/guide/en/elasticsearch/plugins/6.6/plugin-management-custom-url.html</a></p><p>在线安装：</p><pre><code>[root@Andu ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-user-agent[root@Andu ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-geoip</code></pre><p>离线下载安装：</p><pre><code>[root@Andu ~]# wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/ingest-user-agent/ingest-user-agent-6.6.0.zip[root@Andu ~]# wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/ingest-geoip/ingest-geoip-6.6.0.zip[root@Andu ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///root/ingest-geoip-6.6.0.zip [root@Andu ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///root/ingest-user-agent-6.6.0.zip </code></pre><p>激活nginx模块：</p><pre><code>[root@Andu ~]# filebeat modules enable nginx      [root@Andu ~]# egrep -v &quot;#|^$&quot; /etc/filebeat/modules.d/nginx.yml    \- module: nginx access:  enabled: true  var.paths: [&quot;/var/log/nginx/access.log&quot;] error:  enabled: true  var.paths: [&quot;/var/log/nginx/error.log&quot;</code></pre><p>注意：6.7之后这两个插件默认集成到了elasticsearch，不需要单独安装了</p><h2 id="5-3-使用模块收集系统日志message和secure日志"><a href="#5-3-使用模块收集系统日志message和secure日志" class="headerlink" title="5.3 使用模块收集系统日志message和secure日志"></a>5.3 使用模块收集系统日志message和secure日志</h2><p>如果不需要转换，也可以直接按普通日志模式收集message和secure日志</p><h2 id="5-4-导入kibana视图"><a href="#5-4-导入kibana视图" class="headerlink" title="5.4 导入kibana视图"></a>5.4 导入kibana视图</h2><p>默认如果使用filbeat模版导入视图会把所有的服务都导入进去,而我们实际上并不需要这么多视图，</p><p>而且默认的视图模版只能匹配filebeat-*开头的索引，所以这里我们有2个需要需要解决：</p><p>1.通过一定处理只导入我们需要的模版</p><p>2.导入的视图模版索引名称可以自定义</p><p>解决方法：</p><p>1.备份一份filebeat的kibana视图，删除不需要的视图模版文件</p><p>2.修改视图文件里默认的索引名称为我们需要的索引名称</p><pre><code>cp -a /usr/share/filebeat/kibana /rootfind . -type f ! -name &quot;*nginx*&quot;|xargs rm -rfsed -i &#39;s#filebeat\-\*#nginx\-\*#g&#39; Filebeat-nginx-overview.json </code></pre><p>替换索引名称</p><pre><code>filebeat setup --dashboards -E setup.dashboards.directory=/root/kibana/</code></pre><h2 id="5-5-使用模块收集mysql日志和慢日志"><a href="#5-5-使用模块收集mysql日志和慢日志" class="headerlink" title="5.5 使用模块收集mysql日志和慢日志"></a>5.5 使用模块收集mysql日志和慢日志</h2><h2 id="5-6-使用模块收集mongo日志和redis日志"><a href="#5-6-使用模块收集mongo日志和redis日志" class="headerlink" title="5.6 使用模块收集mongo日志和redis日志"></a>5.6 使用模块收集mongo日志和redis日志</h2><h1 id="第6章-使用缓存收集日志"><a href="#第6章-使用缓存收集日志" class="headerlink" title="第6章 使用缓存收集日志"></a>第6章 使用缓存收集日志</h1><p>当日志的数量非常多的时候，可能需要引入缓存层作为临时存储数据的地方，防止因为ES处理不过来导致日志丢失的情况。</p><p>filebeat支持将日志发送到redis或者kafka作为消息队列缓存。</p><p>但是使用了缓存层，就不能使用模版来配置日志收集了。</p><p>所以最好日志是json格式</p><h2 id="6-1-使用单台redis作为缓存"><a href="#6-1-使用单台redis作为缓存" class="headerlink" title="6.1 使用单台redis作为缓存"></a>6.1 使用单台redis作为缓存</h2><p>这里需要说明，如果使用redis作为缓存</p><p>可以将不同的日志类型单独写成一个键，这样好处是清晰，但是缺点是logstash写起来起来复杂</p><p>也可以将所有的日志全部写入到一个键中，然后靠后端的logstash去过滤处理。</p><h3 id="6-1-1-安装启动测试redis"><a href="#6-1-1-安装启动测试redis" class="headerlink" title="6.1.1 安装启动测试redis"></a>6.1.1 安装启动测试redis</h3><pre><code>[root@Andu ~]# yum install redis -y[root@Andu ~]# systemctl status redis[root@Andu ~]# redis-cli 127.0.0.1:6379&gt; set k1 v1OK127.0.0.1:6379&gt; GEt k1&quot;v1&quot;127.0.0.1:6379&gt;</code></pre><h3 id="6-1-2-配置nginx的json日志"><a href="#6-1-2-配置nginx的json日志" class="headerlink" title="6.1.2 配置nginx的json日志"></a>6.1.2 配置nginx的json日志</h3><p>将nginx的日志调整为json格式</p><pre><code>  log_format json &#39;&#123; &quot;time_local&quot;: &quot;$time_local&quot;, &#39;​              &#39;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#39;​              &#39;&quot;referer&quot;: &quot;$http_referer&quot;, &#39;​              &#39;&quot;request&quot;: &quot;$request&quot;, &#39;​              &#39;&quot;status&quot;: $status, &#39;​              &#39;&quot;bytes&quot;: $body_bytes_sent, &#39;​              &#39;&quot;agent&quot;: &quot;$http_user_agent&quot;, &#39;​              &#39;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &#39;​              &#39;&quot;up_addr&quot;: &quot;$upstream_addr&quot;,&#39;​              &#39;&quot;up_host&quot;: &quot;$upstream_http_host&quot;,&#39;​              &#39;&quot;upstream_time&quot;: &quot;$upstream_response_time&quot;,&#39;​              &#39;&quot;request_time&quot;: &quot;$request_time&quot;&#39; &#39; &#125;&#39;;</code></pre><h3 id="6-1-3-配置filebeat写入到不同的key中"><a href="#6-1-3-配置filebeat写入到不同的key中" class="headerlink" title="6.1.3 配置filebeat写入到不同的key中"></a>6.1.3 配置filebeat写入到不同的key中</h3><pre><code>[root@Andu ~]# cat /etc/filebeat/filebeat.yml filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true tags: [&quot;access&quot;]\- type: log enabled: true  paths:  \- /var/log/nginx/error.log tags: [&quot;error&quot;]setup.template.settings: index.number_of_shards: 3setup.kibana: host: &quot;192.168.10.66:5601&quot;output.redis: hosts: [&quot;localhost&quot;] keys:  \- key: &quot;nginx_access&quot;     when.contains:​    tags: &quot;access&quot;  \- key: &quot;nginx_error&quot;   when.contains:​    tags: &quot;error&quot;</code></pre><h3 id="6-1-4-配置logstash读取不同的key"><a href="#6-1-4-配置logstash读取不同的key" class="headerlink" title="6.1.4 配置logstash读取不同的key"></a>6.1.4 配置logstash读取不同的key</h3><pre><code>[root@Andu ~]# cat /etc/logstash/conf.d/redis.conf  input &#123; redis &#123;  host =&gt; &quot;127.0.0.1&quot;  port =&gt; &quot;6379&quot;  db =&gt; &quot;0&quot;  key =&gt; &quot;nginx_access&quot;  data_type =&gt; &quot;list&quot; &#125; redis &#123;  host =&gt; &quot;127.0.0.1&quot;  port =&gt; &quot;6379&quot;  db =&gt; &quot;0&quot;  key =&gt; &quot;nginx_error&quot;  data_type =&gt; &quot;list&quot; &#125;&#125;</code></pre><p>​<br>​<br>    filter {</p><pre><code> mutate &#123;  convert =&gt; [&quot;upstream_time&quot;, &quot;float&quot;]  convert =&gt; [&quot;request_time&quot;, &quot;float&quot;] &#125;&#125;</code></pre><p>​<br>​<br>    output {</p><pre><code>  stdout &#123;&#125;  if &quot;access&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_access-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;  if &quot;error&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_error-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;&#125;</code></pre><h3 id="6-1-5-filebeat收集日志写入到一个key中"><a href="#6-1-5-filebeat收集日志写入到一个key中" class="headerlink" title="6.1.5 filebeat收集日志写入到一个key中"></a>6.1.5 filebeat收集日志写入到一个key中</h3><pre><code>[root@Andu ~]# cat /etc/filebeat/filebeat.yml filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true tags: [&quot;access&quot;]\- type: log enabled: true  paths:  \- /var/log/nginx/error.log tags: [&quot;error&quot;]setup.template.settings: index.number_of_shards: 3setup.kibana: host: &quot;192.168.10.66:5601&quot;output.redis: hosts: [&quot;localhost&quot;] key: &quot;filebeat&quot;</code></pre><h3 id="6-1-6-logstash根据tag区分一个key里的不同日志"><a href="#6-1-6-logstash根据tag区分一个key里的不同日志" class="headerlink" title="6.1.6 logstash根据tag区分一个key里的不同日志"></a>6.1.6 logstash根据tag区分一个key里的不同日志</h3><p>[root@Andu ~]# cat /etc/logstash/conf.d/redis.conf </p><pre><code>input &#123; redis &#123;  host =&gt; &quot;127.0.0.1&quot;  port =&gt; &quot;6379&quot;  db =&gt; &quot;0&quot;  key =&gt; &quot;filebeat&quot;  data_type =&gt; &quot;list&quot; &#125;&#125;filter &#123; mutate &#123;  convert =&gt; [&quot;upstream_time&quot;, &quot;float&quot;]  convert =&gt; [&quot;request_time&quot;, &quot;float&quot;] &#125;&#125;output &#123;  if &quot;access&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_access-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;  if &quot;error&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_error-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;&#125;</code></pre><h2 id="6-2-使用nginx-keepalived代理多台redis"><a href="#6-2-使用nginx-keepalived代理多台redis" class="headerlink" title="6.2 使用nginx+keepalived代理多台redis"></a>6.2 使用nginx+keepalived代理多台redis</h2><h3 id="6-2-1-解决方案介绍"><a href="#6-2-1-解决方案介绍" class="headerlink" title="6.2.1 解决方案介绍"></a>6.2.1 解决方案介绍</h3><p>上面我们实验了单台redis作为收集日志的缓存层，但是单台redis存在一个问题，就是单点故障</p><p>虽然可以做持久化处理，但是加入服务器坏掉或者修复时间未知的情况下还是有可能会丢数据。</p><p>redis集群方案有哨兵和集群，但可惜的是filebeat和logstash都不支持这两种方案。</p><p>不过利用我们目前所学的知识完全可以解决这个问题，虽然不是彻底解决，但是已经很好了</p><p>方案如下：</p><p>1.使用nginx+keepalived反向代理负载均衡到后面的多台redis</p><p>2.考虑到redis故障切换中数据一致性的问题，所以最好我们只使用2台redis,并且只工作一台，另外一台作为backup，只有第一台坏掉后，第二台才会工作。</p><p>3.filebeat的oputut的redis地址为keepalived的虚拟IP</p><p>4.logstash可以启动多个节点来加速读取redis的数据</p><p>5.后端可以采用多台es集群来做支撑</p><h3 id="6-2-2-nginx配置文件"><a href="#6-2-2-nginx配置文件" class="headerlink" title="6.2.2 nginx配置文件"></a>6.2.2 nginx配置文件</h3><p>注意：添加stream模块，要在nginx.conf里最后添加，而不是在conf.d里面添加子配置</p><pre><code>[root@lb02 ~]# cat /etc/nginx/nginx.conf..........................stream &#123; upstream redis &#123;   server 10.0.0.51:6381 max_fails=2 fail_timeout=10s;   server 10.0.0.51:6382 max_fails=2 fail_timeout=10s backup; &#125;</code></pre><p>​<br>​<br>     server {</p><pre><code>​     listen 6379;​     proxy_connect_timeout 1s;​     proxy_timeout 3s;​     proxy_pass redis; &#125;&#125;</code></pre><h3 id="6-2-3-redis配置"><a href="#6-2-3-redis配置" class="headerlink" title="6.2.3 redis配置"></a>6.2.3 redis配置</h3><pre><code>[root@db01 /opt/redis_6381/conf]# cat /opt/redis_6381/conf/redis_6381.conf       bind 10.0.0.51port 6381daemonize yespidfile /opt/redis_6381/pid/redis_6381.pidlogfile /opt/redis_6381/logs/redis_6381.logdatabases 16save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesdbfilename redis_6381.rdbdir /data/redis_6381</code></pre><h3 id="6-2-4-模拟故障测试"><a href="#6-2-4-模拟故障测试" class="headerlink" title="6.2.4 模拟故障测试"></a>6.2.4 模拟故障测试</h3><h3 id="6-2-5-logstash配置"><a href="#6-2-5-logstash配置" class="headerlink" title="6.2.5 logstash配置"></a>6.2.5 logstash配置</h3><h3 id="6-2-6-使用supervisor批量管理多个logstash进程"><a href="#6-2-6-使用supervisor批量管理多个logstash进程" class="headerlink" title="6.2.6 使用supervisor批量管理多个logstash进程"></a>6.2.6 使用supervisor批量管理多个logstash进程</h3><h2 id="6-3-使用kafka作为缓存"><a href="#6-3-使用kafka作为缓存" class="headerlink" title="6.3 使用kafka作为缓存"></a>6.3 使用kafka作为缓存</h2><h3 id="6-3-1-介绍"><a href="#6-3-1-介绍" class="headerlink" title="6.3.1 介绍"></a>6.3.1 介绍</h3><h3 id="6-3-2-zookeeper安装配置"><a href="#6-3-2-zookeeper安装配置" class="headerlink" title="6.3.2 zookeeper安装配置"></a>6.3.2 zookeeper安装配置</h3><h3 id="6-3-3-kafka安装配置"><a href="#6-3-3-kafka安装配置" class="headerlink" title="6.3.3 kafka安装配置"></a>6.3.3 kafka安装配置</h3><h3 id="6-3-4-kafka集群收发消息测试"><a href="#6-3-4-kafka集群收发消息测试" class="headerlink" title="6.3.4 kafka集群收发消息测试"></a>6.3.4 kafka集群收发消息测试</h3><h3 id="6-3-5-filebeat配置"><a href="#6-3-5-filebeat配置" class="headerlink" title="6.3.5 filebeat配置"></a>6.3.5 filebeat配置</h3><pre><code>[root@kafka-175 conf.d]# cat /etc/filebeat/filebeat.yml filebeat.inputs:\- type: log enabled: true  paths:  \- /var/log/nginx/access.log json.keys_under_root: true json.overwrite_keys: true tags: [&quot;access&quot;]\- type: log enabled: true  paths:  \- /var/log/nginx/error.log tags: [&quot;error&quot;]setup.template.settings: index.number_of_shards: 3setup.kibana: host: &quot;192.168.10.66:5601&quot;output.kafka: hosts: [&quot;192.168.10.66:9092&quot;,&quot;192.168.47.176:9092&quot;,&quot;192.168.47.177:9092&quot;] topic: elklog</code></pre><h3 id="6-3-6-logstash配置"><a href="#6-3-6-logstash配置" class="headerlink" title="6.3.6 logstash配置"></a>6.3.6 logstash配置</h3><pre><code>[root@kafka-175 conf.d]# cat /etc/logstash/conf.d/kafka.confinput&#123; kafka&#123;  bootstrap_servers=&gt;&quot;192.168.10.66:9092&quot;  topics=&gt;[&quot;elklog&quot;]  group_id=&gt;&quot;logstash&quot;  codec =&gt; &quot;json&quot; &#125;&#125;filter &#123; mutate &#123;  convert =&gt; [&quot;upstream_time&quot;, &quot;float&quot;]                                                              convert =&gt; [&quot;request_time&quot;, &quot;float&quot;] &#125;&#125;output &#123;  if &quot;access&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_access-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;  if &quot;error&quot; in [tags] &#123;   elasticsearch &#123;​    hosts =&gt; &quot;http://localhost:9200&quot;​    manage_template =&gt; false​    index =&gt; &quot;nginx_error-%&#123;+yyyy.MM.dd&#125;&quot;   &#125;  &#125;&#125;</code></pre><h1 id="第7章-配置logstash同步mysql数据"><a href="#第7章-配置logstash同步mysql数据" class="headerlink" title="第7章 配置logstash同步mysql数据"></a>第7章 配置logstash同步mysql数据</h1><p>略</p><h1 id="第8章-kibana画图展示"><a href="#第8章-kibana画图展示" class="headerlink" title="第8章 kibana画图展示"></a>第8章 kibana画图展示</h1><p>略</p><h1 id="第9章-grafana画图展示"><a href="#第9章-grafana画图展示" class="headerlink" title="第9章 grafana画图展示"></a>第9章 grafana画图展示</h1><p>除了kibana外，grafana也支持从es调取数据并展示</p><p><a href="https://grafana.com/docs/features/datasources/elasticsearch/#using-elasticsearch-in-grafana">https://grafana.com/docs/features/datasources/elasticsearch/#using-elasticsearch-in-grafana</a></p><h1 id="第10章-如何在公司推广ELK项目"><a href="#第10章-如何在公司推广ELK项目" class="headerlink" title="第10章 如何在公司推广ELK项目"></a>第10章 如何在公司推广ELK项目</h1><p>如何在公司推广ELK的项目</p><p>1.优先表达出对其他人带来的便利和好处</p><p>- 领导</p><p>- 开发</p><p>- 测试</p><p>- DBA</p><p>– 以后你自己相查什么数据都可以直接查</p><p>– 以前插个日志运维得查10分钟，现在你只要点几下鼠标就ok了</p><p>– 我专门为你们部门定制了一个图形面板，你看看效果，有啥不满意的尽管说，我优先给你们部门解决</p><p>2.对于运维来说，json日志更友好</p><p>- 告诉领导，json格式更友好，做出测试环境，并给领导演示json格式优点</p><p>- 提前统计好到底需要收集哪些日志</p><p>- 要求能转成json的就转成json</p><p>- 自己改不了的，给领导说，让开发改成json格式</p><p>- 那行，领导你看，如果不改成json，就只能是这个效果了，后续的新需求，可能就满足不了了</p><p>- 并不是说所有日志，必须是json</p><p>3.推广演示</p><p>- 提前都准备好文档和ppt还有测试环境</p><p>- 一定要对比传统分析日志和ELK之后带来的巨大改变</p><h1 id="第11章-面试问题"><a href="#第11章-面试问题" class="headerlink" title="第11章 面试问题"></a>第11章 面试问题</h1><hr><p> [<a href="#_msoanchor_1">A1]</a>ELK每个组件都需要JAVA环境</p><p> [<a href="#_msoanchor_2">A2]</a>搭建群集一定要同步时间</p><p> [<a href="#_msoanchor_3">A3]</a>数据库存储目录</p><p> [<a href="#_msoanchor_4">A4]</a>日志文件存储位置</p><p> [<a href="#_msoanchor_5">A5]</a>锁定内存</p><p> [<a href="#_msoanchor_6">A6]</a>监听地址，最好添加上本机地址</p><p> [<a href="#_msoanchor_7">A7]</a>监听端口</p><p> [<a href="#_msoanchor_8">A8]</a>配置filebeat支持json格式传输到Es</p><p> [<a href="#_msoanchor_9">A9]</a>修改索引名称，推荐以月份结尾，因为Kibana支持月份</p><p> [<a href="#_msoanchor_10">A10]</a>关闭默认模板索引</p><p> [<a href="#_msoanchor_11">A11]</a>引用设置索引</p><p> [<a href="#_msoanchor_13">A13]</a>定义JSON键值对，使得ES读数据更加明显索引更加奥里给</p><p> [<a href="#_msoanchor_14">A14]</a>定义错误日志存放目录，tags指定下方可指定条件，可以是键值里得任何一种。</p><p> [<a href="#_msoanchor_15">A15]</a>当tags是error的时候收集日志简直不要奥里给</p><p> [<a href="#_msoanchor_16">A16]</a>如果只监听一个服务不用添加条件：定义条件</p><p> [<a href="#_msoanchor_17">A17]</a>不用纠结每添加一种服务就要该名称 只要之前改过，就可以不用修改就可以使用</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> filebeat </tag>
            
            <tag> Kibana </tag>
            
            <tag> 日志收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins（CA/CI）部署</title>
      <link href="/posts/28194/"/>
      <url>/posts/28194/</url>
      
        <content type="html"><![CDATA[<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>官网</p><p><a href="https://jenkins.io/">https://jenkins.io</a></p><p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，指在提供一个开<br>放易用的软件平台，使软件的持续集成变成可能。</p><h4 id="01-安装准备"><a href="#01-安装准备" class="headerlink" title="01. 安装准备"></a>01. 安装准备</h4><table><thead><tr><th>主机</th><th>IP</th><th>内存</th><th>硬盘</th></tr></thead><tbody><tr><td>Jenkins</td><td>10.0.0.201</td><td>2G</td><td>50G+</td></tr><tr><td>nexus</td><td>10.0.0.202</td><td>2G</td><td>50G+</td></tr></tbody></table><h4 id="02-安装-Jdk-和-Jenkins"><a href="#02-安装-Jdk-和-Jenkins" class="headerlink" title="02 . 安装 Jdk 和 Jenkins"></a>02 . 安装 Jdk 和 Jenkins</h4><p>上传 JDK 和 Jenkins 安装包，使用 rpm ‐ivh 进行安装，安装完 JDK 运行 Java 测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ll</span><br><span class="line">-rw-r--r-- 1 root root 170023183 2018-08-14 11:05 jdk-8u181-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root root 74141787 2018-08-13 20:23 jenkins-2.99-1.1.noarch.rpm</span><br><span class="line">[root@jenkins ~]# rpm -ivh jdk-8u181-linux-x64.rpm </span><br><span class="line">warning: jdk-8u181-linux-x64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID ec551f03: NOKEY</span><br><span class="line">Preparing... ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">1:jdk1.8-2000:1.8.0_181-fcs ################################# [100%]</span><br><span class="line">Unpacking JAR files...</span><br><span class="line"> tools.jar...</span><br><span class="line"> plugin.jar...</span><br><span class="line"> javaws.jar...</span><br><span class="line"> deploy.jar...</span><br><span class="line"> rt.jar...</span><br><span class="line"> jsse.jar...</span><br><span class="line"> charsets.jar...</span><br><span class="line"> localedata.jar...</span><br><span class="line">[root@jenkins ~]# rpm -ivh jenkins-2.99-1.1.noarch.rpm </span><br><span class="line">warning: jenkins-2.99-1.1.noarch.rpm: Header V4 DSA&#x2F;SHA1 Signature, key ID d50582e6: NOKEY</span><br><span class="line">Preparing... ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">1:jenkins-2.99-1.1 ################################# [100%]</span><br></pre></td></tr></table></figure><h4 id="03-配置-Jenkins"><a href="#03-配置-Jenkins" class="headerlink" title="03 . 配置 Jenkins"></a>03 . 配置 Jenkins</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#启动用户修改为root</span><br><span class="line">[root@jenkins ~]# grep &#39;root&#39; &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br><span class="line">JENKINS_USER&#x3D;&quot;root&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">[root@jenkins ~]# systemctl start jenkins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看端口</span><br><span class="line">[root@jenkins ~]# netstat -lntp | grep 8080</span><br><span class="line">tcp6 0 0 :::8080 ::: LISTEN 8504&#x2F;java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看进程</span><br><span class="line">[root@jenkins ~]# ps aux |grep jenkins</span><br><span class="line">root 8504 8.8 11.6 2618104 235556 ? Ssl 15:29 0:25 &#x2F;etc&#x2F;alternatives&#x2F;java -Dcom.sun.akuma.Daemon&#x3D;daemonized -Djava.awt.headless&#x3D;true -DJENKINS_HOME&#x3D;&#x2F;var&#x2F;lib&#x2F;jenkins -jar &#x2F;usr&#x2F;lib&#x2F;jenkins&#x2F;jenkins.war --logfile&#x3D;&#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log --webroot&#x3D;&#x2F;var&#x2F;cache&#x2F;jenkins&#x2F;war --daemon --httpPort&#x3D;8080 --debug&#x3D;5 --handlerCountMax&#x3D;100 --handlerCountMaxIdle&#x3D;20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#访问页面进行配置</span><br><span class="line">http:&#x2F;&#x2F;10.0.0.201:8080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看密码</span><br><span class="line">[root@jenkins ~]# cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br><span class="line">e8e69c5646cc4f3b88315fb20156ce6c</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_88.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_89.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_90.png" alt="img"></p><p>修改密码</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_91.png" alt="img"></p><h4 id="04-插件安装"><a href="#04-插件安装" class="headerlink" title="04. 插件安装"></a>04. 插件安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#插件安装（跳过安装插件，直接上传插件到目录）</span><br><span class="line">1.自动安装可选插件</span><br><span class="line">2.手动下载插件上传安装</span><br><span class="line">3.插件放入插件目录</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# cd &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;</span><br><span class="line">[root@jenkins jenkins]# ll         #jobs为每次构建后构建的结果目录，plugins为插件目录</span><br><span class="line">总用量 36</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 1822 8月 26 00:35 config.xml</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 156 8月 26 00:31 hudson.model.UpdateCenter.xml</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 1712 8月 26 00:32 identity.key.enc</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 94 8月 26 00:32 jenkins.CLI.xml</span><br><span class="line">‐rw‐r‐‐r‐‐ 1 root root 4 8月 26 00:35 jenkins.install.InstallUtil.lastExecVersion</span><br><span class="line">‐rw‐r‐‐r‐‐ 1 root root 4 8月 26 00:35 jenkins.install.UpgradeWizard.state</span><br><span class="line">drwxr‐xr‐x 2 root root 6 8月 26 00:31 jobs</span><br><span class="line">drwxr‐xr‐x 3 root root 18 8月 26 00:32 logs</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 907 8月 26 00:32 nodeMonitors.xml</span><br><span class="line">drwxr‐xr‐x 2 root root 6 8月 26 00:32 nodes</span><br><span class="line">drwxr‐xr‐x 2 root root 6 8月 26 00:31 plugins</span><br><span class="line">‐rw‐‐‐‐‐‐‐ 1 root root 64 8月 26 00:31 secret.key</span><br><span class="line">‐rw‐r‐‐r‐‐ 1 root root 0 8月 26 00:31 secret.key.not‐so‐secret</span><br><span class="line">drwx‐‐‐‐‐‐ 4 root root 4096 8月 26 00:32 secrets</span><br><span class="line">drwxr‐xr‐x 2 root root 23 8月 26 00:32 userContent</span><br><span class="line">drwxr‐xr‐x 3 root root 18 8月 26 00:34 users</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#上传插件包解压到plugins</span><br><span class="line">[root@jenkins jenkins]# cd plugins&#x2F;</span><br><span class="line">[root@jenkins plugins]# ll</span><br><span class="line">total 160580</span><br><span class="line">-rw-r--r-- 1 root root 164431230 2018-08-14 21:00 plugins.tar.gz</span><br><span class="line">[root@jenkins plugins]# tar xf plugins.tar.gz</span><br><span class="line">[root@jenkins plugins]# rm -f plugins.tar.gz</span><br><span class="line">[root@jenkins plugins]# mv plugins&#x2F; .&#x2F;</span><br><span class="line">[root@jenkins plugins]# rm -rf plugins&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重启生效</span><br><span class="line">[root@jenkins plugins]# systemctl restart jenkins.service</span><br></pre></td></tr></table></figure><p>4.jenkins 主要的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;jenkins&#x2F;：          #jenkins安装目录，WAR包会放在这里</span><br><span class="line">&#x2F;etc&#x2F;sysconfig&#x2F;jenkins：        #jenkins配置文件，&quot;端口&quot;，&quot;JENKINS_HOME&quot;等都可以在这里配置</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;：          #默认的JENKINS_HOME</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log：    #Jenkins日志文件</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_92.png" alt="img"></p><h4 id="05-创建项目"><a href="#05-创建项目" class="headerlink" title="05. 创建项目"></a>05. 创建项目</h4><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_93.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_94.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_95.png" alt="img"></p><p>进行构建</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_96.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_97.png" alt="img"></p><p>进入控制台</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_98.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_99.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins plugins]# ll &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;freestyle-job</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_100.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_101.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_102.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_103.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins plugins]# ll &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;freestyle-job</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 2019-11-19 16:19 test.txt</span><br></pre></td></tr></table></figure><h4 id="06-Jenkins-获取-Git-源代码"><a href="#06-Jenkins-获取-Git-源代码" class="headerlink" title="06. Jenkins 获取 Git 源代码"></a>06. Jenkins 获取 Git 源代码</h4><p>这里我们有码云导入一个 HTML 页面的监控平台到 gitlab 仓库，打开码云，找到一个大转盘项目，将其代码路径进行复制</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_104.png" alt="img"></p><p>在 Gitlab 上面新创建一个项目仓库。将源代码导入进去。</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_105.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_106.png" alt="img"></p><p>dev 用户端配置从 git 获取代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@dev ~]# git clone git@10.0.0.100:OPS&#x2F;dzp.git </span><br><span class="line">Cloning into &#39;dzp&#39;... </span><br><span class="line">remote: Counting objects: 19, done. </span><br><span class="line">remote: Compressing objects: 100% (15&#x2F;15), done. </span><br><span class="line">remote: Total 19 (delta 2), reused 0 (delta 0) </span><br><span class="line">Receiving objects: 100% (19&#x2F;19), 104.36 KiB | 0 bytes&#x2F;s, done. </span><br><span class="line">Resolving deltas: 100% (2&#x2F;2), done. </span><br><span class="line">[root@dev ~]# ll </span><br><span class="line">drwxr-xr-x 6 root root 87 Nov 19 20:41 dzp </span><br><span class="line">drwxr-xr-x 3 root root 52 Nov 17 17:21 git_test </span><br><span class="line">[root@dev ~]# cd dzp&#x2F; </span><br><span class="line">[root@dev ~&#x2F;dzp]# ll </span><br><span class="line">total 8 </span><br><span class="line">drwxr-xr-x 2 root root 25 Nov 19 20:41 css </span><br><span class="line">drwxr-xr-x 2 root root 84 Nov 19 20:41 img </span><br><span class="line">drwxr-xr-x 2 root root 41 Nov 19 20:41 js </span><br><span class="line">-rw-r--r-- 1 root root 2170 Nov 19 20:41 lottery.html </span><br><span class="line">-rw-r--r-- 1 root root 113 Nov 19 20:41 README.md </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#dev用户修改了源代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev ~&#x2F;dzp]# vim lottery.html </span><br><span class="line">[root@dev ~&#x2F;dzp]# </span><br><span class="line">[root@dev ~&#x2F;dzp]# </span><br><span class="line">[root@dev ~&#x2F;dzp]# git commit -am &quot;modify html&quot; </span><br><span class="line">[master 1e2125e] modify html </span><br><span class="line">1 file changed, 5 insertions(+), 5 deletions(-) </span><br><span class="line">[root@dev ~&#x2F;dzp]# git push -u origin master </span><br><span class="line">Counting objects: 5, done. </span><br><span class="line">Compressing objects: 100% (3&#x2F;3), done. </span><br><span class="line">Writing objects: 100% (3&#x2F;3), 365 bytes | 0 bytes&#x2F;s, done. </span><br><span class="line">Total 3 (delta 2), reused 0 (delta 0) </span><br><span class="line">To git@10.0.0.100:OPS&#x2F;dzp.git </span><br><span class="line">3935eb7..1e2125e master -&gt; master </span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><p>Jenkins 配置从 Git 获取代码，由于我们 dev 用户不是配置在 Jenkins 上，所以需认证即可下载代码。进行面认证方法，需要配置 deploy key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ssh-keygen -t rsa </span><br><span class="line">Generating public&#x2F;private rsa key pair. </span><br><span class="line">Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa. </span><br><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub. </span><br><span class="line">The key fingerprint is: </span><br><span class="line">SHA256:1z+H0mc9hUwOWiO3mFOGswuOW9jNr2bmOwRE50eECQU root@jenkins </span><br><span class="line">The key&#39;s randomart image is: </span><br><span class="line">+---[RSA 2048]----+ </span><br><span class="line">| .E+o+o | </span><br><span class="line">| .ooo | </span><br><span class="line">| . &#x3D; O . | </span><br><span class="line">| . # B . | </span><br><span class="line">| S.B o + .| </span><br><span class="line">| &#x3D; &#x3D;.o o .o| </span><br><span class="line">| o +.+ . &#x3D;.&#x3D;| </span><br><span class="line">| o &#x3D;. . &#x3D;.| </span><br><span class="line">| . &#x3D;++. | </span><br><span class="line">+----[SHA256]-----+ </span><br><span class="line">[root@jenkins ~]# cat .ssh&#x2F; </span><br><span class="line">id_rsa id_rsa.pub known_hosts </span><br><span class="line">[root@jenkins ~]# cat .ssh&#x2F;id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCY3WrgTCmZeapjV9Tx6GmmHX+SVigxHnz37f8iUUjAexmR2&#x2F;gSAjvsY3ez5iITmamf2I62+5n+gx9f1OPXUsUAzOApD6R8zHmvzQ&#x2F;yheDO1y5XHcmRtklN1HpOq2g0PChrRjrr4QcXITKafU30OjTu4Fx3vndxqD&#x2F;3RpHD3IVSZGAsiJC6T+C&#x2F;PYW8YfeLNEAA7O3QKskjuSkoH2PZyF7qQgwjxfudno1g3qLQkmB+CjFFwgj0vkam&#x2F;W4OwUwapC1O591CU7+VmSWL&#x2F;z8uMTpSV+FQkyH04qS&#x2F;HSs27pfpAI0wpBB&#x2F;gBxx+wU8FCUh++2SWpuJR8&#x2F;TPqkS8YKhfl+p root@jenkins  #复制该串代码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_107.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_108.png" alt="img"></p><p>Jenkins 配置从 Git 获取代码，配置好后保存</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_109.png" alt="img"></p><h4 id="07-立即构建获取源代码"><a href="#07-立即构建获取源代码" class="headerlink" title="07. 立即构建获取源代码"></a>07. 立即构建获取源代码</h4><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_110.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_111.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_112.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Jenkins服务器查看代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# ll &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;freestyle-job&#x2F;</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 25 2019-11-19 21:12 css</span><br><span class="line">drwxr-xr-x 2 root root 84 2019-11-19 21:12 img</span><br><span class="line">drwxr-xr-x 2 root root 41 2019-11-19 21:12 js</span><br><span class="line">-rw-r--r-- 1 root root 2205 2019-11-19 21:12 lottery.html</span><br><span class="line">-rw-r--r-- 1 root root 113 2019-11-19 21:12 README.md</span><br></pre></td></tr></table></figure><h4 id="08-Jenkins-代码推送到-Web"><a href="#08-Jenkins-代码推送到-Web" class="headerlink" title="08. Jenkins 代码推送到 Web"></a>08. Jenkins 代码推送到 Web</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#写一个脚本把从git仓库里获取的代码上传到web服务器站点目录下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# mkdir -p &#x2F;server&#x2F;script </span><br><span class="line">[root@jenkins ~]# cd &#x2F;server&#x2F;script </span><br><span class="line">[root@jenkins script]# vim deploy.sh </span><br><span class="line">[root@jenkins script]# cat deploy.sh </span><br><span class="line">#!&#x2F;bin&#x2F;sh </span><br><span class="line">Date&#x3D;$(date +%s) </span><br><span class="line">Code_Dir&#x3D;&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;freestyle-job </span><br><span class="line">Web_Dir&#x3D;&#x2F;code </span><br><span class="line">Ip&#x3D;10.0.0.202 </span><br><span class="line">Code_Tar() &#123; </span><br><span class="line"> cd Code_Dir &amp;&amp; tar zcf &#x2F;opt&#x2F;web_Code_Dir &amp;&amp; tar zcf &#x2F;opt&#x2F;web_&#123;Date&#125;.tar.gz .&#x2F; </span><br><span class="line">&#125; </span><br><span class="line">Scp_Code_Web() &#123; </span><br><span class="line"> scp &#x2F;opt&#x2F;web_Date.tar.gzroot@Date.tar.gzroot@&#123;Ip&#125;:&#x2F;opt </span><br><span class="line">&#125; </span><br><span class="line">Code_Tar_Xf() &#123; </span><br><span class="line"> ssh root@Ip &quot; cd &#x2F;opt &amp;&amp; mkdir web_Ip &quot; cd &#x2F;opt &amp;&amp; mkdir web_Date &amp;&amp; tar xf web_&#123;Date&#125;.tar.gz -C web_&#123;Date&#125;.tar.gz -C web_Date &quot; </span><br><span class="line">&#125; </span><br><span class="line">Ln_Html() &#123; </span><br><span class="line"> ssh root@Ip&quot;rm−rfIp&quot;rm−rfWeb_Dir &amp;&amp; ln -s &#x2F;opt&#x2F;web_$Date &#x2F;code &quot; </span><br><span class="line">&#125; </span><br><span class="line">Code_Tar; </span><br><span class="line">Scp_Code_Web; </span><br><span class="line">Code_Tar_Xf; </span><br><span class="line">Ln_Html </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#分发公钥</span><br><span class="line"></span><br><span class="line">[root@jenkins script]# ssh-copy-id -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub root@10.0.0.202 </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: Source of key(s) to be installed: &quot;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&quot; </span><br><span class="line">The authenticity of host &#39;10.0.0.202 (10.0.0.202)&#39; can&#39;t be established. </span><br><span class="line">ECDSA key fingerprint is SHA256:K8NapPzlTxhCMXC&#x2F;bRFTtI9mdwr63FH4Wu7psrXXqBs. </span><br><span class="line">ECDSA key fingerprint is MD5:73:9f:67:f1:5d:39:10:3d:b2:be:f7:c1:66:aa:00:6e. </span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys </span><br><span class="line">root@10.0.0.202&#39;s password: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with: &quot;ssh &#39;root@10.0.0.202&#39;&quot; </span><br><span class="line">and check to make sure that only the key(s) you wanted were added. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins script]# ssh root@10.0.0.202 </span><br><span class="line">Last login: Tue Nov 19 15:10:55 2019 from 10.0.0.1 </span><br><span class="line">[root@nexus ~]# logout </span><br><span class="line">Connection to 10.0.0.202 closed. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Jenkins上面添加脚本进行构建</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_113.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_114.png" alt="img"></p><p>查看网站是否更新成功</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_115.png" alt="img"></p><h4 id="09-配置自动触发构建"><a href="#09-配置自动触发构建" class="headerlink" title="09. 配置自动触发构建"></a>09. 配置自动触发构建</h4><h1 id="需要设置安全令牌-Secret-token"><a href="#需要设置安全令牌-Secret-token" class="headerlink" title="需要设置安全令牌 Secret token"></a>需要设置安全令牌 Secret token</h1><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_116.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_117.png" alt="img"></p><p>Gitlab 上面操作</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_118.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_119.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_120.png" alt="img"></p><h4 id="10-测试是否触发"><a href="#10-测试是否触发" class="headerlink" title="10. 测试是否触发"></a>10. 测试是否触发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#dev用户修改源代码后进行推送测试是否自动触发</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@dev ~&#x2F;dzp]# vim lottery.html </span><br><span class="line">[root@dev ~&#x2F;dzp]# git commit -am &quot;modify html test&quot;</span><br><span class="line">[master d8849aa] modify html test</span><br><span class="line">1 file changed, 3 insertions(+), 3 deletions(-)</span><br><span class="line">[root@dev ~&#x2F;dzp]# git push -u origin master</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Compressing objects: 100% (3&#x2F;3), done.</span><br><span class="line">Writing objects: 100% (3&#x2F;3), 303 bytes | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 3 (delta 2), reused 0 (delta 0)</span><br><span class="line">To git@10.0.0.100:OPS&#x2F;dzp.git</span><br><span class="line">1e2125e..d8849aa master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_121.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_122.png" alt="img"></p><h4 id="11-返回构建状态"><a href="#11-返回构建状态" class="headerlink" title="11. 返回构建状态"></a>11. 返回构建状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Jenkins配置Jenkins返回构建状态到Gitlab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#先获得gitlab的token</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_123.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_124.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_125.png" alt="img"></p><p>将获得的 token 值进行复制备用</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_126.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_127.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_128.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_129.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_130.png" alt="img"></p><p>进行测试</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_131.png" alt="img"></p><p>添加构建后操作</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_132.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_133.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_134.png" alt="img"></p><p>检查结果</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_135.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_136.png" alt="img"></p><h1 id="创建-Maven-项目"><a href="#创建-Maven-项目" class="headerlink" title="创建 Maven 项目"></a>创建 Maven 项目</h1><p>Maven 是一个项目管理和综合工具。Maven 提供给开发人员构建一个完整的生命周期框架。<br>开发团队可以自动完成该项目的基础设施建设，Maven 使用标准的目录结构和默认构建生命周期。<br>Apache 的开源项目主要服务于 Java 平台的构建、依赖管理、项目管理。<br>Project Object Model，项目对象模型。通过 xml 格式保存的 pom.xml 文件。该文件用于管理：源代码、配置文<br>件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的 url、项目的依赖关系等等。该文件是由开发维护，我们运维人员可以不用去关心。</p><p>mvn package #会去 maven 的中央仓库去下载需要的依赖包和插件到.m2 目录下<br>\5. 创建 Maven 私服 nexus<br>部署私服 xenus 下载 <a href="https://www.sonatype.com/download%E2%80%90oss%E2%80%90sonatype">https://www.sonatype.com/download‐oss‐sonatype</a></p><p>配置仓库两个选项<br>1、项目下的 pom.xml 配置、只生效当前的项目<br>2、在 maven 配置全局所有项目生效<br>上传 JDK 和 nexus 安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm ‐ivh jdk‐8u121‐linux‐x64.rpm</span><br><span class="line">mv nexus‐3.13.0‐01 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">ln ‐s &#x2F;usr&#x2F;local&#x2F;nexus‐3.13.0‐01 &#x2F;usr&#x2F;local&#x2F;nexus</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nexus&#x2F;bin&#x2F;nexus start</span><br><span class="line">10.0.0.202:8081 admin admin123</span><br></pre></td></tr></table></figure><p>配置 Maven 全局配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;maven&#x2F;conf&#x2F;settings.xml</span><br></pre></td></tr></table></figure><p>\6. 创建一个 Maven 项目<br>创建前上传代码到 gitlab 服务器，把 java 项目添加到 gitlab 仓库中</p><h4 id="01-部署-Maven"><a href="#01-部署-Maven" class="headerlink" title="01. 部署 Maven"></a>01. 部署 Maven</h4><p>官网： <a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a><br>清华镜像： <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#上传软件包</span><br><span class="line">[root@jenkins ~]# ll</span><br><span class="line">-rw-r--r-- 1 root root 8491533 2018-08-27 14:38 apache-maven-3.3.9-bin.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">[root@jenkins ~]# tar xf apache-maven-3.3.9-bin.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#改变目录位置</span><br><span class="line">[root@jenkins maven]# mv apache-maven-3.3.9 &#x2F;usr&#x2F;local&#x2F;maven-3.3.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#软连接</span><br><span class="line">[root@jenkins maven]# ln -s &#x2F;usr&#x2F;local&#x2F;maven-3.3.9 &#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# cd &#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line">[root@jenkins maven]# ll</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 2 root root 97 2019-11-20 21:55 bin</span><br><span class="line">drwxr-xr-x 2 root root 42 2019-11-20 21:55 boot</span><br><span class="line">drwxr-xr-x 3 root root 63 2015-11-11 00:38 conf</span><br><span class="line">drwxr-xr-x 3 root root 4096 2019-11-20 21:55 lib</span><br><span class="line">-rw-r--r-- 1 root root 19335 2015-11-11 00:44 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root 182 2015-11-11 00:44 NOTICE</span><br><span class="line">-rw-r--r-- 1 root root 2541 2015-11-11 00:38 README.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置环境变量</span><br><span class="line">[root@jenkins maven]# echo &quot;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;maven&#x2F;bin&#x2F;:$PATH&quot; &gt;&gt;&#x2F;etc&#x2F;profile</span><br><span class="line">[root@jenkins maven]# source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看结果</span><br><span class="line">[root@jenkins maven]# mvn -v</span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)</span><br><span class="line">Maven home: &#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line">Java version: 1.8.0_181, vendor: Oracle Corporation</span><br><span class="line">Java home: &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_181-amd64&#x2F;jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;3.10.0-957.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure><h4 id="02-编译测试"><a href="#02-编译测试" class="headerlink" title="02. 编译测试"></a>02. 编译测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#上传一个简单的java项目包hello‐world.tar.gz进行解压</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# ll</span><br><span class="line">-rw-r--r-- 1 root root 1325 2018-08-22 13:43 hello-world.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# tar xf hello-world.tar.gz </span><br><span class="line">[root@jenkins ~]# cd hello-world&#x2F;</span><br><span class="line"></span><br><span class="line">validate（验证）:   验证项目正确，并且所有必要信息可用。</span><br><span class="line">compile（编译）:  编译项目源码</span><br><span class="line">test（测试）:     使用合适的单元测试框架测试编译后的源码。</span><br><span class="line">package（打包）:   源码编译之后，使用合适的格式（例如JAR格式）对编译后的源码进行打包。</span><br><span class="line">integration‐test（集成测试）: 如果有需要，把包处理并部署到可以运行集成测试的环境中去。</span><br><span class="line">verify（验证）:   进行各种测试来验证包是否有效并且符合质量标准。</span><br><span class="line">install（安装）:   把包安装到本地仓库，使该包可以作为其他本地项目的依赖。</span><br><span class="line">deploy（部署）:   在集成或发布环境中完成，将最终软件包复制到远程存储库，以与其他开发人员和项目共享。</span><br><span class="line">mvn clean (清除) : 清除上次编译的结果</span><br><span class="line">#测试</span><br><span class="line">[root@jenkins hello-world]# mvn test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打包</span><br><span class="line">[root@jenkins hello-world]# mvn package  #会去maven的中央仓库去下载需要的依赖包和插件到.m2目录下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打包结果</span><br><span class="line">[root@jenkins hello-world]# ll target&#x2F;</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 3 root root 17 2019-11-20 22:13 classes</span><br><span class="line">-rw-r--r-- 1 root root 3130 2019-11-20 23:39 hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">drwxr-xr-x 2 root root 28 2019-11-20 23:38 maven-archiver</span><br><span class="line">drwxr-xr-x 3 root root 35 2019-11-20 22:13 maven-status</span><br><span class="line">-rw-r--r-- 1 root root 2872 2019-11-20 23:38 original-hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">drwxr-xr-x 2 root root 125 2019-11-20 22:14 surefire-reports</span><br><span class="line">drwxr-xr-x 3 root root 17 2019-11-20 22:13 test-classes</span><br></pre></td></tr></table></figure><h4 id="03-部署-Tomcat-及数据库"><a href="#03-部署-Tomcat-及数据库" class="headerlink" title="03. 部署 Tomcat 及数据库"></a>03. 部署 Tomcat 及数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#上传压缩包</span><br><span class="line">[root@tomcat ~]# ll</span><br><span class="line">-rw-r--r-- 1 root root 9128610 Mar 27 2019 apache-tomcat-8.0.27.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 170023183 Aug 14 2018 jdk-8u181-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安装JDK</span><br><span class="line">[root@tomcat ~]# rpm -ivh jdk-8u181-linux-x64.rpm </span><br><span class="line">warning: jdk-8u181-linux-x64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID ec551f03: NOKEY</span><br><span class="line">Preparing... ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">1:jdk1.8-2000:1.8.0_181-fcs ################################# [100%]</span><br><span class="line">Unpacking JAR files...</span><br><span class="line"> tools.jar...</span><br><span class="line"> plugin.jar...</span><br><span class="line"> javaws.jar...</span><br><span class="line"> deploy.jar...</span><br><span class="line"> rt.jar...</span><br><span class="line"> jsse.jar...</span><br><span class="line"> charsets.jar...</span><br><span class="line"> localedata.jar...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#解压Tomcat</span><br><span class="line">[root@tomcat ~]# mkdir &#x2F;application</span><br><span class="line">[root@tomcat ~]# tar xf apache-tomcat-8.0.27.tar.gz -C &#x2F;application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建软连接</span><br><span class="line">[root@tomcat ~]# ln -s &#x2F;application&#x2F;apache-tomcat-8.0.27 &#x2F;application&#x2F;tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#tomcat启动加速的方法</span><br><span class="line">[root@tomcat ~]# vim &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_181-amd64&#x2F;jre&#x2F;lib&#x2F;security&#x2F;java.security </span><br><span class="line">117 securerandom.source&#x3D;file:&#x2F;dev&#x2F;urandom #修改之后</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启动tomcat</span><br><span class="line">[root@tomcat ~]# &#x2F;application&#x2F;tomcat&#x2F;bin&#x2F;startup.sh </span><br><span class="line">Using CATALINA_BASE: &#x2F;application&#x2F;tomcat</span><br><span class="line">Using CATALINA_HOME: &#x2F;application&#x2F;tomcat</span><br><span class="line">Using CATALINA_TMPDIR: &#x2F;application&#x2F;tomcat&#x2F;temp</span><br><span class="line">Using JRE_HOME: &#x2F;usr</span><br><span class="line">Using CLASSPATH: &#x2F;application&#x2F;tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;application&#x2F;tomcat&#x2F;bin&#x2F;tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检查端口</span><br><span class="line">[root@tomcat ~]# netstat -lntp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address State PID&#x2F;Program name </span><br><span class="line">tcp 0 0 0.0.0.0:22 0.0.0.0: LISTEN 6758&#x2F;sshd </span><br><span class="line">tcp 0 0 127.0.0.1:25 0.0.0.0: LISTEN 7134&#x2F;master </span><br><span class="line">tcp6 0 0 :::8009 ::: LISTEN 24383&#x2F;java </span><br><span class="line">tcp6 0 0 :::8080 ::: LISTEN 24383&#x2F;java </span><br><span class="line">tcp6 0 0 :::22 ::: LISTEN 6758&#x2F;sshd </span><br><span class="line">tcp6 0 0 ::1:25 ::: LISTEN 7134&#x2F;master </span><br><span class="line">tcp6 0 0 127.0.0.1:8005 ::: LISTEN 24383&#x2F;java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#浏览器使用8080端口访问</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_137.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">#为项目准备好数据库jeesns，设置数据库root用户密码为root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安装数据库</span><br><span class="line">[root@tomcat ~]# yum install mariadb-server -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# systemctl start mariadb.service </span><br><span class="line">[root@tomcat ~]# mysqladmin password &#39;root&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建jeesns库</span><br><span class="line">[root@tomcat ~]# mysql -uroot -proot -e &quot;create database jeesns;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#dev上面上传一个项目</span><br><span class="line">[root@git ~]# ll</span><br><span class="line">-rw-r--r-- 1 root root 15376795 2019-03-27 17:33 jeesns.tar.gz</span><br><span class="line">[root@git ~]# tar xf jeesns.tar.gz </span><br><span class="line">[root@git ~]# cd jeesns&#x2F;</span><br><span class="line">[root@git ~&#x2F;jeesns]# git remote</span><br><span class="line">origin</span><br><span class="line">[root@git ~&#x2F;jeesns]# git remote remove origin </span><br><span class="line">[root@git ~&#x2F;jeesns]# ll jeesns-web&#x2F;database&#x2F;</span><br><span class="line">total 40</span><br><span class="line">-rwxr-xr-x 1 root root 28667 2018-11-19 15:01 jeesns.sql</span><br><span class="line">-rw-r--r-- 1 root root 3491 2018-11-19 15:01 update_1.2.0to1.2.1.sql</span><br><span class="line">-rw-r--r-- 1 root root 1026 2018-11-19 15:01 update_1.2.1to1.3.sql</span><br><span class="line">-rw-r--r-- 1 root root 1344 2018-11-19 15:01 update_1.3to1.3.1.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将该数据库传输到tomcat节点进行导入</span><br><span class="line">[root@git ~&#x2F;jeesns]# scp jeesns-web&#x2F;database&#x2F;jeesns.sql root@10.0.0.80:~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#导入数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@tomcat ~]# mysql -uroot -proot jeesns &lt; jeesns.sql </span><br><span class="line">[root@tomcat ~]# mysql -uroot -proot -e &quot;use jeesns; show tables&quot;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_jeesns |</span><br><span class="line">+---------------------------+</span><br><span class="line">| tbl_action |</span><br><span class="line">| tbl_action_log |</span><br><span class="line">| tbl_ads |</span><br><span class="line">| tbl_archive |</span><br><span class="line">| tbl_archive_favor |</span><br><span class="line">| tbl_article |</span><br><span class="line">| tbl_article_cate |</span><br><span class="line">| tbl_article_comment |</span><br><span class="line">| tbl_checkin |</span><br><span class="line">| tbl_config |</span><br><span class="line">| tbl_group |</span><br><span class="line">| tbl_group_fans |</span><br><span class="line">| tbl_group_topic |</span><br><span class="line">| tbl_group_topic_comment |</span><br><span class="line">| tbl_group_topic_type |</span><br><span class="line">| tbl_group_type |</span><br><span class="line">| tbl_link |</span><br><span class="line">| tbl_member |</span><br><span class="line">| tbl_member_fans |</span><br><span class="line">| tbl_member_level |</span><br><span class="line">| tbl_member_token |</span><br><span class="line">| tbl_memgroup |</span><br><span class="line">| tbl_message |</span><br><span class="line">| tbl_picture |</span><br><span class="line">| tbl_picture_album |</span><br><span class="line">| tbl_picture_album_comment |</span><br><span class="line">| tbl_picture_album_favor |</span><br><span class="line">| tbl_picture_comment |</span><br><span class="line">| tbl_picture_favor |</span><br><span class="line">| tbl_picture_tag |</span><br><span class="line">| tbl_score_detail |</span><br><span class="line">| tbl_score_rule |</span><br><span class="line">| tbl_tag |</span><br><span class="line">| tbl_validate_code |</span><br><span class="line">| tbl_weibo |</span><br><span class="line">| tbl_weibo_comment |</span><br><span class="line">| tbl_weibo_favor |</span><br><span class="line">| tbl_weibo_topic |</span><br><span class="line">+---------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打包jeesns项目</span><br><span class="line">[root@git ~&#x2F;jeesns]# mvn package</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打包之后生成的war包</span><br><span class="line">[root@git ~&#x2F;jeesns]# ll jeesns-web&#x2F;target&#x2F;</span><br><span class="line">total 25496</span><br><span class="line">drwxr-xr-x 4 root root 181 2019-11-20 23:19 classes</span><br><span class="line">drwxr-xr-x 3 root root 25 2019-11-20 23:19 generated-sources</span><br><span class="line">drwxr-xr-x 5 root root 104 2019-11-20 23:19 jeesns-web</span><br><span class="line">-rw-r--r-- 1 root root 26106028 2019-11-20 23:20 jeesns-web.war</span><br><span class="line">drwxr-xr-x 2 root root 28 2019-11-20 23:19 maven-archiver</span><br><span class="line">drwxr-xr-x 3 root root 35 2019-11-20 23:19 maven-status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#将其手动传输到tomcat节点上面测试</span><br><span class="line">[root@git ~&#x2F;jeesns]# scp jeesns-web&#x2F;target&#x2F;jeesns-web.war root@10.0.0.80:&#x2F;application&#x2F;tomcat&#x2F;webapps&#x2F;ROOT.war</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#浏览器刷新测试</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_138.png" alt="img"></p><h4 id="04-创建一个-jeesns-项目"><a href="#04-创建一个-jeesns-项目" class="headerlink" title="04. 创建一个 jeesns 项目"></a>04. 创建一个 jeesns 项目</h4><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_138.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#清除上次编译的结果</span><br><span class="line">[root@git ~&#x2F;jeesns]# mvn clean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@git ~&#x2F;jeesns]# git remote remove origin</span><br><span class="line">[root@git ~&#x2F;jeesns]# </span><br><span class="line">[root@git ~&#x2F;jeesns]# </span><br><span class="line">[root@git ~&#x2F;jeesns]# git remote add origin git@10.0.0.100:OPS&#x2F;jeesns.git</span><br><span class="line">[root@git ~&#x2F;jeesns]# git add .</span><br><span class="line">[root@git ~&#x2F;jeesns]# git commit -m &quot;Initial commit&quot;</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">[root@git ~&#x2F;jeesns]# git push -u origin master</span><br><span class="line">Counting objects: 1946, done.</span><br><span class="line">Compressing objects: 100% (1862&#x2F;1862), done.</span><br><span class="line">Writing objects: 100% (1946&#x2F;1946), 7.09 MiB | 7.25 MiB&#x2F;s, done.</span><br><span class="line">Total 1946 (delta 285), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (285&#x2F;285), done.</span><br><span class="line">To git@10.0.0.100:OPS&#x2F;jeesns.git</span><br><span class="line"> [new branch] master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><h4 id="05-Jenkins-创建一个-maven"><a href="#05-Jenkins-创建一个-maven" class="headerlink" title="05. Jenkins 创建一个 maven"></a>05. Jenkins 创建一个 maven</h4><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_140.png" alt="img"></p><h1 id="此处如果出现报错，请添加-Deploy-Keys"><a href="#此处如果出现报错，请添加-Deploy-Keys" class="headerlink" title="此处如果出现报错，请添加 Deploy Keys"></a>此处如果出现报错，请添加 Deploy Keys</h1><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_141.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_142.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_143.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#发现已经打包成功了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# ll &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;maven-job&#x2F;jeesns-web&#x2F;target&#x2F;jeesns-web.war </span><br><span class="line">-rw-r--r-- 1 root root 26106007 2019-11-23 11:49 &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;maven-job&#x2F;jeesns-web&#x2F;target&#x2F;jeesns-web.war </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#jenkins用户给tomcat节点进行分发公钥</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]# ssh-copy-id -i .ssh&#x2F;id_rsa.pub root@10.0.0.80 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#构建后操作</span><br><span class="line"></span><br><span class="line">ssh root@10.0.0.80 &quot;mv &#x2F;application&#x2F;tomcat&#x2F;webapps&#x2F;ROOT.war &#x2F;tmp&#x2F;$BUILD_ID-ROOT.war&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scp &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;workspace&#x2F;maven-job&#x2F;jeesns-web&#x2F;target&#x2F;jeesns-web.war root@10.0.0.80:&#x2F;application&#x2F;tomcat&#x2F;webapps&#x2F;ROOT.war </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_144.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_145.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# ll &#x2F;tmp&#x2F; </span><br><span class="line">total 50992 </span><br><span class="line">-rw-r--r-- 1 root root 26106004 2019-11-23 01:28 2-ROOT.war </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_146.png" alt="img"></p><h1 id="Pipeline-项目"><a href="#Pipeline-项目" class="headerlink" title="Pipeline 项目"></a>Pipeline 项目</h1><h4 id="01-基础概念"><a href="#01-基础概念" class="headerlink" title="01. 基础概念"></a>01. 基础概念</h4><p><strong>CI/CD 持续集成 / 持续部署</strong></p><p>持续集成 (Continuous integration) 是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员</p><p>每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动</p><p>化测试）来验证，从而尽早地发现集成错误。</p><p>比如（你家装修厨房，其中一项是铺地砖，边角地砖要切割大小。如果一次全切割完再铺上去，发现尺寸有误的话</p><p>浪费和返工时间就大了，不如切一块铺一块。这就是持续集成。）</p><p>持续部署（continuous deployment）是通过自动化的构建、测试和部署循环来快速交付高质量的产品。某种程度上代表了一个开发团队工程化的程度，毕竟快速运转的互联网公司人力成本会高于机器，投资机器优化开发流程化</p><p>相对也提高了人的效率。</p><p>比如（装修厨房有很多部分，每个部分都有检测手段，如地砖铺完了要测试漏水与否，线路铺完了要通电测试电路</p><p>通顺，水管装好了也要测试冷水热水。如果全部装完了再测，出现问题可能会互相影响，比如电路不行可能要把地</p><p>砖给挖开……。那么每完成一部分就测试，这是持续部署。）</p><p>持续交付 Continuous Delivery: 频繁地将软件的新版本，交付给质量团队或者用户，以供评审尽早发现生产环境中存在的问题；如果评审通过，代码就进入生产阶段.</p><p>比如（全部装修完了，你去验收，发现地砖颜色不合意，水池太小，灶台位置不对，返工吗？所以不如没完成一部</p><p>分，你就去用一下试用验收，这就是持续交付。）</p><p>敏捷思想中提出的这三个观点，还强调一件事：通过技术手段自动化这三个工作。加快交付速度。</p><p>\1. 什么是 pipeline</p><p>Jenkins 2.0 的精髓是 Pipeline as Code，是帮助 Jenkins 实现 CI 到 CD 转变的重要角色。什么是 Pipeline，简单来说，就是一套运行于 Jenkins 上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个</p><p>任务难以完成的复杂发布流程。Pipeline 的实现方式是一套 Groovy DSL，任何发布流程都可以表述为一段 Groovy<br>脚本，并且 Jenkins 支持从代码库直接读取脚本，从而实现了 Pipeline as Code 的理念。</p><p>2.Pipeline 概念</p><p>Pipeline 是一个用户定义的 CD 流水线模式。Pipeline 代码定义了通常包含构建、测试和发布步骤的完整的构</p><p>建过程。</p><p>Node<br>node 是一个机器，它是 Jenkins 环境的一部分，并且能够执行 Pipeline。同时，node 代码块也是脚本式</p><p>Pipeline 语法的关键特性。</p><p>Stage<br>Stage 块定义了在整个 Pipeline 中执行的概念上不同的任务子集（例如 “构建”，”测试” 和 “部署” 阶段），</p><p>许多插件使用它来可视化或呈现 Jenkins 管道状态 / 进度。</p><p>Step<br>一项任务。从根本上讲，一个步骤告诉 Jenkins 在特定时间点（或过程中的 “步骤”）要做什么。例如，使用</p><p>sh step：sh ‘make’ 可以执行 make 这个 shell 命令。</p><p>3.jenkins file<br>声明式<br>脚本式</p><p>脚本式语法格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123; </span><br><span class="line"> agent any </span><br><span class="line">stages&#123; </span><br><span class="line"> stage(&quot;get code&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">     echo &quot;get code from scm&quot; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> stage(&quot;package&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">   echo &quot;packge code&quot; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> stage(&quot;deploy&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">     echo &quot;deploy packge to node1&quot; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="02-创建-pipeline-项目"><a href="#02-创建-pipeline-项目" class="headerlink" title="02. 创建 pipeline 项目"></a>02. 创建 pipeline 项目</h4><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_147.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_148.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_149.png" alt="img"></p><p>在仓库创建一个 Jenkinsfile 文件进行调用</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_150.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_152.png" alt="img"></p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_152.png" alt="img"></p><p>编辑 Jenkinsfile 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123; </span><br><span class="line"> agent any </span><br><span class="line">stages&#123; </span><br><span class="line"> stage(&quot;get code&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">     echo &quot;get code&quot; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> stage(&quot;unit test&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">   echo &quot;unit test&quot; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> stage(&quot;package&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line"> sh &#39;tar zcf &#x2F;opt&#x2F;web-$&#123;BUILD_ID&#125;.tar.gz .&#x2F; --exclude&#x3D;.&#x2F;.git --exclude&#x3D;Jenkinsfile&#39; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> stage(&quot;deploy&quot;)&#123; </span><br><span class="line">   steps&#123; </span><br><span class="line">     sh &#39;ssh 10.0.0.80 &quot;mkdir &#x2F;opt&#x2F;web-$&#123;BUILD_ID&#125;&quot;&#39; </span><br><span class="line">     sh &#39;scp &#x2F;opt&#x2F;web-$&#123;BUILD_ID&#125;.tar.gz 10.0.0.80:&#x2F;opt&#39; </span><br><span class="line">     sh &#39;ssh 10.0.0.80 &quot;tar xf &#x2F;opt&#x2F;web-$&#123;BUILD_ID&#125;.tar.gz -C &#x2F;code&quot;&#39; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_153.png" alt="img"></p><p>执行构建报错</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_154.png" alt="img"></p><p>修改脚本再次构建</p><p><img src="https://gitee.com/xoxoyun/img/raw/master/image/112319_1634_155.png" alt="img"></p><h1 id="回滚脚本"><a href="#回滚脚本" class="headerlink" title="回滚脚本"></a>回滚脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;nginx</span><br><span class="line">ls -d web-*</span><br><span class="line">read -p &quot;请复制你需要回滚的目录版本&quot; ver</span><br><span class="line">rm -rf html*</span><br><span class="line">ln -s $ver html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> CA </tag>
            
            <tag> CI </tag>
            
            <tag> Maven </tag>
            
            <tag> Pipeline项目 </tag>
            
            <tag> 回滚脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GItlab设计与部署</title>
      <link href="/posts/52492/"/>
      <url>/posts/52492/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h1><p>GitLab简介<br> GitLab 是一个用于仓库管理系统的开源项目。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理权限和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用。<br> 常用的网站：<br> 官网：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a><br> 国内镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/</a><br> 安装环境：<br> 1、CentOS 6或者7<br> 2、2G内存（实验）生产（至少4G）<br> 3、安装包：gitlab-ce-10.2.2-ce<br> 4、禁用防火墙，关闭selinux</p><p> <a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a>           # git官网 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_22.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_23.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_24.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_25.png" alt="img"></p><p> [root@git ~]# yum install -y curl policycoreutils-python openssh-server # 安装依赖</p><p> #上传gitlab安装包<br>下载方式可通过国内清华源gitlab-ce社区版本下载</p><p> [root@git ~]# ll<br> drwxr-xr-x 3 root root 39 Nov 16 15:04 git_data<br> -rw-r–r– 1 root root 389758391 Aug 22 2018 gitlab-ce-10.2.2-ce.0.el7.x86_64.rpm  </p><p> #rpm安装，发现缺少依赖</p><p> [root@git ~]# rpm -ivh gitlab-ce-10.2.2-ce.0.el7.x86_64.rpm<br> warning: gitlab-ce-10.2.2-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY<br> error: Failed dependencies:<br>   policycoreutils-python is needed by gitlab-ce-10.2.2-ce.0.el7.x86_64  </p><p> #安装依赖之后再次安装</p><p> [root@git ~]# yum install -y policycoreutils-python  </p><p> [root@git ~]# vim /etc/gitlab/gitlab.rb # gitlab 配置文件</p><p> 更改url地址为本机IP地址 external_url ‘<a href="http://10.0.0.100&/#39;">http://10.0.0.100&#39;</a>  </p><h1 id="更改配置文件后需重新配置"><a href="#更改配置文件后需重新配置" class="headerlink" title="更改配置文件后需重新配置"></a>更改配置文件后需重新配置</h1><p> [root@git ~]# gitlab-ctl reconfigure  </p><p> /opt/gitlab/ # gitlab的程序安装目录</p><p> /var/opt/gitlab # gitlab目录数据目录</p><p> /var/opt/gitlab/git-dfata # 存放仓库数据</p><p> gitlab-ctl status # 查看目前gitlab所有服务运维状态</p><p> gitlab-ctl stop # 停止gitlab服务</p><p> gitlab-ctl stop nginx # 单独停止某个服务</p><p> gitlab-ctl tail # 查看所有服务的日志</p><p> Gitlab的服务构成：</p><p> nginx：           #静态web服务器</p><p> gitlab-workhorse:        #轻量级的反向代理服务器</p><p> logrotate：          #日志文件管理工具</p><p> postgresql：          #数据库</p><p> redis：            #缓存数据库</p><p> sidekiq：          #用于在后台执行队列任务（异步执行）。（Ruby）</p><p> unicorn：An HTTP server for Rack applications，GitLab Rails应用是托管在这个服务器上面的。（Ruby Web Server,主要使用Ruby编写）</p><p> #通过浏览器输入IP地址进行访问gitlab  </p><p> 使用默认用户登录：  root<br> 密码：        12345678  </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_26.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_27.png" alt="img"></p><h3 id="7-Gitlab使用"><a href="#7-Gitlab使用" class="headerlink" title="7. Gitlab使用"></a>7. Gitlab使用</h3><h4 id="01-外观配置"><a href="#01-外观配置" class="headerlink" title="01. 外观配置"></a>01. 外观配置</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_28.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_29.png" alt="img"></p><h4 id="02-Gitlab汉化配置"><a href="#02-Gitlab汉化配置" class="headerlink" title="02. Gitlab汉化配置"></a>02. Gitlab汉化配置</h4><p> 1、下载汉化补丁<br> git clone <a href="https://gitlab.com/xhang/gitlab.git">https://gitlab.com/xhang/gitlab.git</a><br> 2、查看全部分支版本<br> git branch -a<br> 3、对比版本、生成补丁包<br> git diff remotes/origin/10-2-stable remotes/origin/10-2-stable-zh &gt; ../10.2.2-zh.diff<br> 4、停止服务器<br> gitlab-ctl stop<br> 5、打补丁<br> patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; /tmp/10.2.2-zh.diff<br> 6、启动和重新配置<br> gitlab-ctl start<br> gitlab-ctl reconfigure </p><h4 id="03-注册限制"><a href="#03-注册限制" class="headerlink" title="03. 注册限制"></a>03. 注册限制</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_30.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_31.png" alt="img"></p><h4 id="04-创建用户及组"><a href="#04-创建用户及组" class="headerlink" title="04. 创建用户及组"></a>04. 创建用户及组</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_32.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_33.png" alt="img"></p><h4 id="05-创建用户"><a href="#05-创建用户" class="headerlink" title="05. 创建用户"></a>05. 创建用户</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_34.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_35.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_36.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_37.png" alt="img"></p><h4 id="06-把用户添加到组"><a href="#06-把用户添加到组" class="headerlink" title="06. 把用户添加到组"></a>06. 把用户添加到组</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_38.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_39.png" alt="img"></p><h4 id="07-创建项目"><a href="#07-创建项目" class="headerlink" title="07. 创建项目"></a>07. 创建项目</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_40.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_41.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_42.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_43.png" alt="img"></p><p>  返回首页，进入项目  </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_44.png" alt="img"></p><p> #删除github的仓库</p><p> [root@git ~/git_data]# git remote remove origin<br> [root@git ~/git_data]# git remote</p><p> #添加gitlab的远程仓库，进行代码上传</p><p> [root@git ~/git_data]# git remote add origin <a href="mailto:&#x67;&#x69;&#x74;&#64;&#49;&#48;&#x2e;&#48;&#46;&#48;&#46;&#x31;&#x30;&#x30;">&#x67;&#x69;&#x74;&#64;&#49;&#48;&#x2e;&#48;&#46;&#48;&#46;&#x31;&#x30;&#x30;</a>:OPS/git_test.git<br> [root@git ~/git_data]# git push -u origin master<br> The authenticity of host ‘10.0.0.100 (10.0.0.100)’ can’t be established.<br> ECDSA key fingerprint is SHA256:6gbyCCIw3zFuNSUR2Y7UOG8fbSrj/BVUaeXwllvrGXM.<br> ECDSA key fingerprint is MD5:95:10:02:7c:71:73:c6:4a:b2:f9:d8:88:5d:4a:3d:e0.<br> Are you sure you want to continue connecting (yes/no)? yes<br> Warning: Permanently added ‘10.0.0.100’ (ECDSA) to the list of known hosts.<br> Counting objects: 17, done.<br> Compressing objects: 100% (8/8), done.<br> Writing objects: 100% (17/17), 1.25 KiB | 0 bytes/s, done.<br> Total 17 (delta 1), reused 0 (delta 0)<br> To <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x31;&#48;&#46;&#x30;&#x2e;&#x30;&#x2e;&#x31;&#x30;&#x30;">&#x67;&#105;&#x74;&#x40;&#x31;&#48;&#46;&#x30;&#x2e;&#x30;&#x2e;&#x31;&#x30;&#x30;</a>:OPS/git_test.git<br>   [new branch] master -&gt; master<br> Branch master set up to track remote branch master from origin. </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_45.png" alt="img"></p><h4 id="08-推送代码到Gitlab"><a href="#08-推送代码到Gitlab" class="headerlink" title="08. 推送代码到Gitlab"></a>08. 推送代码到Gitlab</h4><p> [root@git ~/git_data]# echo oldboy &gt;&gt;a.txt<br> [root@git ~/git_data]# git add .<br> [root@git ~/git_data]# git commit -m “create a.txt”<br> [master a5c15de] create a.txt<br> 1 file changed, 1 insertion(+)<br> create mode 100644 a.txt<br> [root@git ~/git_data]# git push -u origin master<br> Counting objects: 4, done.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 289 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> To <a href="mailto:&#x67;&#105;&#x74;&#64;&#49;&#48;&#46;&#x30;&#x2e;&#48;&#46;&#49;&#x30;&#x30;">&#x67;&#105;&#x74;&#64;&#49;&#48;&#46;&#x30;&#x2e;&#48;&#46;&#49;&#x30;&#x30;</a>:OPS/git_test.git<br> 0924a70..a5c15de master -&gt; master<br> Branch master set up to track remote branch master from origin.</p><p> #刷新Gitlab仓库 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_46.png" alt="img"></p><h4 id="09-开发推送代码到Gitlab"><a href="#09-开发推送代码到Gitlab" class="headerlink" title="09. 开发推送代码到Gitlab"></a>09. 开发推送代码到Gitlab</h4><p> #给其创建dev用户，并给其分配到项目组，然后进行登录 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_47.png" alt="img"></p><p> #克隆一台服务器，作为开发人员使用，并进行生成密钥文件，进行密钥认证</p><p> [root@dev ~]# ssh-keygen -t rsa<br> Generating public/private rsa key pair.<br> Enter file in which to save the key (/root/.ssh/id_rsa):<br> Created directory ‘/root/.ssh’.<br> Enter passphrase (empty for no passphrase):<br> Enter same passphrase again:<br> Your identification has been saved in /root/.ssh/id_rsa.<br> Your public key has been saved in /root/.ssh/id_rsa.pub.<br> The key fingerprint is:<br> SHA256:qx5BldjQ4qy+HTSH9zpg8nVQqJDNP/M8gfq/4k+E09c root@dev<br> The key’s randomart image is:<br> +—[RSA 2048]—-+<br> | +.=.o |<br> | o =.= . |<br> | +.+ o |<br> | .+. o. . |<br> | .=.S o.. E |<br> | o.+=.==. |<br> | . +o+..o. |<br> | …++o |<br> | .o+.o=+. |<br> +—-[SHA256]—–+<br> [root@dev ~]# cat .ssh/id_rsa.pub<br> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDa4HBEOk10oode36lPcrybpjK++3bsjbaO67CjzY9S8w2WbAFfsVUwM+Hz8uRlehfjiCxuXF/oQgK2TATDdVYw89CrUMMmjuR1nRKKslA/Xhj0XxIjtUY+86UpVYp0t3963mmHrvoe45DTHYHIQqHEP8FM1fi5T6EzYrVhWFmmjqQYbVYQL+4oHwJBsCvQ4XZ6PCgTBlw2D8s1jk2Sx2vTsPLURA/+iL7WqzM5bGQLcAP5R3yG09v5O0+C/RLIHMw/qY54DaxVGTXhs0PnrfQhdzlUcKREsGkF7Ya3khyfss1jY+/QslS3Y6be9s8sfBKuWwx3Llob2nkgKiZOpQ+5 root@dev    #复制其公钥 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_48.png" alt="img"></p><p> #进行将代码克隆下来，进行更改</p><p> [root@dev ~]# git clone <a href="mailto:&#x67;&#105;&#x74;&#64;&#49;&#48;&#46;&#x30;&#46;&#48;&#46;&#x31;&#x30;&#x30;">&#x67;&#105;&#x74;&#64;&#49;&#48;&#46;&#x30;&#46;&#48;&#46;&#x31;&#x30;&#x30;</a>:OPS/git_test.git<br> Cloning into ‘git_test’…<br> The authenticity of host ‘10.0.0.100 (10.0.0.100)’ can’t be established.<br> ECDSA key fingerprint is SHA256:6gbyCCIw3zFuNSUR2Y7UOG8fbSrj/BVUaeXwllvrGXM.<br> ECDSA key fingerprint is MD5:95:10:02:7c:71:73:c6:4a:b2:f9:d8:88:5d:4a:3d:e0.<br> Are you sure you want to continue connecting (yes/no)? yes<br> Warning: Permanently added ‘10.0.0.100’ (ECDSA) to the list of known hosts.<br> remote: Counting objects: 20, done.<br> remote: Compressing objects: 100% (10/10), done.<br> remote: Total 20 (delta 1), reused 0 (delta 0)<br> Receiving objects: 100% (20/20), done.<br> Resolving deltas: 100% (1/1), done.<br> [root@dev ~]# ll<br> drwxr-xr-x 3 root root 52 Nov 17 17:21 git_test<br> [root@dev ~]# ll git_test/<br> total 8<br> -rw-r–r– 1 root root 16 Nov 17 17:21 a<br> -rw-r–r– 1 root root 7 Nov 17 17:21 a.txt<br> -rw-r–r– 1 root root 0 Nov 17 17:21 test</p><p> #修改代码</p><p> [root@dev ~]# cd git_test/<br> [root@dev ~/git_test]# echo dev01 &gt;&gt; a<br> [root@dev ~/git_test]# git commit -am “dev01 add a”</p><pre><code> Please tell me who you are.</code></pre><p> Run</p><p> git config –global user.email “<a href="mailto:&#121;&#111;&#117;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#x6d;">&#121;&#111;&#117;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#x6d;</a>“<br> git config –global user.name “Your Name”</p><p> to set your account’s default identity.<br> Omit –global to set the identity only in this repository.</p><p> fatal: unable to auto-detect email address (got ‘root@dev.(none)’)</p><p> #配置邮件及用户信息</p><p> [root@dev ~/git_test]# git config –global user.email “<a href="mailto:&#100;&#x65;&#118;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#100;&#x65;&#118;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a>“<br> [root@dev ~/git_test]# git config –global user.name “dev01”</p><p> [root@dev ~/git_test]# git commit -am “dev01 add a”<br> [master 6cc6aff] dev01 add a<br> 1 file changed, 1 insertion(+)</p><p> #推送到远程仓库</p><p> [root@dev ~/git_test]# git push -u origin master<br> Counting objects: 5, done.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 305 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> To <a href="mailto:&#x67;&#105;&#x74;&#64;&#49;&#x30;&#46;&#48;&#46;&#48;&#46;&#49;&#x30;&#x30;">&#x67;&#105;&#x74;&#64;&#49;&#x30;&#46;&#48;&#46;&#48;&#46;&#49;&#x30;&#x30;</a>:OPS/git_test.git<br> a5c15de..6cc6aff master -&gt; master<br> Branch master set up to track remote branch master from origin. </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_49.png" alt="img"></p><h4 id="10-分支保护"><a href="#10-分支保护" class="headerlink" title="10. 分支保护"></a>10. 分支保护</h4><p> #创建一个dev分支</p><p> [root@dev ~/git_test]# git branch dev<br> [root@dev ~/git_test]# git push -u origin dev<br> Total 0 (delta 0), reused 0 (delta 0)<br> remote:<br> remote: To create a merge request for dev, visit:<br> remote: <a href="http://10.0.0.100/OPS/git_test/merge_requests/new?merge_request%5Bsource_branch%5D=dev">http://10.0.0.100/OPS/git_test/merge_requests/new?merge_request%5Bsource_branch%5D=dev</a><br> remote:<br> To <a href="mailto:&#103;&#x69;&#x74;&#64;&#49;&#48;&#46;&#x30;&#x2e;&#x30;&#x2e;&#x31;&#48;&#48;">&#103;&#x69;&#x74;&#64;&#49;&#48;&#46;&#x30;&#x2e;&#x30;&#x2e;&#x31;&#48;&#48;</a>:OPS/git_test.git<br>   [new branch] dev -&gt; dev<br> Branch dev set up to track remote branch dev from origin.</p><p> #登录root用户，进行分支保护 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_50.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_51.png" alt="img"></p><h4 id="11-代码合并"><a href="#11-代码合并" class="headerlink" title="11. 代码合并"></a>11. 代码合并</h4><p> #清除旧的分支，创建新的分支，并切换</p><p> [root@dev ~/git_test]# git branch -d dev<br> Deleted branch dev (was 6cc6aff).<br> [root@dev ~/git_test]# git checkout -b dev<br> Switched to a new branch ‘dev’<br> [root@dev ~/git_test]# git branch<br>   dev<br> master </p><p> #推送到远程仓库 </p><p> [root@dev ~/git_test]# git push -u origin dev<br> Counting objects: 5, done.<br> Compressing objects: 100% (2/2), done.<br> Writing objects: 100% (3/3), 311 bytes | 0 bytes/s, done.<br> Total 3 (delta 0), reused 0 (delta 0)<br> remote:<br> remote: To create a merge request for dev, visit:<br> remote: <a href="http://10.0.0.100/OPS/git_test/merge_requests/new?merge_request%5Bsource_branch%5D=dev">http://10.0.0.100/OPS/git_test/merge_requests/new?merge_request%5Bsource_branch%5D=dev</a><br> remote:<br> To <a href="mailto:&#103;&#105;&#x74;&#64;&#49;&#x30;&#x2e;&#48;&#x2e;&#x30;&#x2e;&#49;&#x30;&#48;">&#103;&#105;&#x74;&#64;&#49;&#x30;&#x2e;&#48;&#x2e;&#x30;&#x2e;&#49;&#x30;&#48;</a>:OPS/git_test.git<br> 6cc6aff..315f127 dev -&gt; dev<br> Branch dev set up to track remote branch dev from origin.</p><p> #dev分支上面有a文件的最新信息，而master中没有 </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_52.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_53.png" alt="img"></p><p>  进行合并分支  </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_54.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_55.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_56.png" alt="img"></p><p>  登录root用户进行处理请求  </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_57.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_58.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_59.png" alt="img"></p><h4 id="12-Git-gui安装"><a href="#12-Git-gui安装" class="headerlink" title="12. Git-gui安装"></a>12. Git-gui安装</h4><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_60.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_61.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_62.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_63.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_64.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_65.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_66.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_67.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_68.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_69.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_70.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_71.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_72.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_73.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_74.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_75.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_76.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_77.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_78.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_79.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_80.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_81.png" alt="img"></p><p>  修改代码  </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_82.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_83.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_84.png" alt="img"></p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_85.png" alt="img"></p><h3 id="8-Gitlab备份与恢复"><a href="#8-Gitlab备份与恢复" class="headerlink" title="8. Gitlab备份与恢复"></a>8. Gitlab备份与恢复</h3><p>   对gitlab进行备份将会创建一个包含所有库和附件的归档文件。对备份的恢复只能恢复到与备份时的gitlab相同的</p><p> 版本。将gitlab迁移到另一台服务器上的最佳方法就是通过备份和还原。</p><p>   gitlab提供了一个简单的命令行来备份整个gitlab，并且能灵活的满足需求。</p><p>   备份文件将保存在配置文件中定义的backup_path中，文件名为TIMESTAMP_gitlab_backup.tar,TIMESTAMP为备份时的时间戳。TIMESTAMP的格式为：EPOCH_YYYY_MM_DD_Gitlab‐version。如果自定义备份目录需要赋予git权限。</p><p>​    </p><h4 id="01-备份"><a href="#01-备份" class="headerlink" title="01. 备份"></a>01. 备份</h4><p> #配置文件中加入<br> [root@git ~/git_data]# vim /etc/gitlab/gitlab.rb<br> gitlab_rails[‘manage_backup_path’] = true      #开启备份<br> gitlab_rails[‘backup_path’] = ‘/data/backup/gitlab’ #备份目录<br> gitlab_rails[‘backup_archive_permissions’] = 0644 #生成的备份文件权限<br> gitlab_rails[‘backup_keep_time’] = 604800       #备份保留的时间（以秒为单位，这是七天默认值）<br> [root@git ~/git_data]# mkdir /data/backup/gitlab<br> [root@git ~/git_data]# chown ‐R git.git /data/backup/gitlab</p><p> #完成后执行下面命令进行生效</p><p> [root@git ~/git_data]# gitlab‐ctl reconfigure</p><p> #手动备份<br> [root@git ~/git_data]# gitlab-rake gitlab:backup:create</p><p> #检查结果<br> [root@git ~/git_data]# ll /data/opt/gitlab/<br> total 112<br> -rw-r–r– 1 git git 112640 Nov 17 18:22 1573986174_2019_11_17_10.2.2_gitlab_backup.tar</p><p> 自动备份需要写一个备份脚本及定时任务</p><p> #Gitlab恢复操作</p><p> Gitlab只能还原到与备份文件相同的gitlab版本。</p><p> #误删除数据</p><p> [root@git ~/git_test]# rm -rf ./ </p><p> #提交推送</p><p> [root@git ~/git_test]# git commit -am “add 123 “<br> [master 35ef629] add 123<br> 3 files changed, 8 deletions(-)<br> delete mode 100644 a<br> delete mode 100644 a.txt<br> delete mode 100644 test<br> [root@git ~/git_test]# git push -u origin master<br> Counting objects: 3, done.<br> Compressing objects: 100% (1/1), done.<br> Writing objects: 100% (2/2), 182 bytes | 0 bytes/s, done.<br> Total 2 (delta 0), reused 0 (delta 0)<br> To <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x31;&#48;&#46;&#x30;&#x2e;&#x30;&#46;&#x31;&#x30;&#x30;">&#x67;&#x69;&#116;&#x40;&#x31;&#48;&#46;&#x30;&#x2e;&#x30;&#46;&#x31;&#x30;&#x30;</a>:OPS/git_test.git<br> 02250b6..35ef629 master -&gt; master<br> Branch master set up to track remote branch master from origin. </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_86.png" alt="img"></p><h4 id="02-恢复"><a href="#02-恢复" class="headerlink" title="02. 恢复"></a>02. 恢复</h4><p> #停止相关服务</p><p> [root@git ~/git_test]# gitlab-ctl stop unicorn<br> ok: down: unicorn: 0s, normally up<br> [root@git ~/git_test]# gitlab-ctl stop sidekiq<br> ok: down: sidekiq: 1s, normally up<br> [root@git ~/git_test]# gitlab-ctl status<br> run: gitaly: (pid 78774) 15714s; run: log: (pid 78466) 15758s<br> run: gitlab-monitor: (pid 78790) 15713s; run: log: (pid 78565) 15746s<br> run: gitlab-workhorse: (pid 78762) 15714s; run: log: (pid 78419) 15776s<br> run: logrotate: (pid 106694) 1364s; run: log: (pid 78447) 15764s<br> run: nginx: (pid 78432) 15770s; run: log: (pid 78431) 15770s<br> run: node-exporter: (pid 78515) 15752s; run: log: (pid 78514) 15752s<br> run: postgres-exporter: (pid 78818) 15712s; run: log: (pid 78692) 15728s<br> run: postgresql: (pid 78190) 15819s; run: log: (pid 78189) 15819s<br> run: prometheus: (pid 78806) 15713s; run: log: (pid 78646) 15734s<br> run: redis: (pid 78130) 15825s; run: log: (pid 78129) 15825s<br> run: redis-exporter: (pid 78626) 15740s; run: log: (pid 78625) 15740s<br> down: sidekiq: 8s, normally up; run: log: (pid 78402) 15782s<br> down: unicorn: 20s, normally up; run: log: (pid 78363) 15788s</p><p> #Gitlab的恢复操作会先将当前所有的数据清空，然后再根据备份数据进行恢复</p><p> [root@git ~/git_test]# ll /data/opt/gitlab/<br> total 112<br> -rw——- 1 git git 112640 Nov 17 18:22 1573986174_2019_11_17_10.2.2_gitlab_backup.tar<br> [root@git ~/git_test]# gitlab-rake gitlab:backup:restore BACKUP=1573986174_2019_11_17_10.2.2</p><p> #启动gitlab<br> [root@git ~/git_test]# gitlab-ctl start<br> ok: run: gitaly: (pid 78774) 16168s<br> ok: run: gitlab-monitor: (pid 78790) 16167s<br> ok: run: gitlab-workhorse: (pid 78762) 16168s<br> ok: run: logrotate: (pid 106694) 1818s<br> ok: run: nginx: (pid 78432) 16224s<br> ok: run: node-exporter: (pid 78515) 16206s<br> ok: run: postgres-exporter: (pid 78818) 16166s<br> ok: run: postgresql: (pid 78190) 16273s<br> ok: run: prometheus: (pid 78806) 16167s<br> ok: run: redis: (pid 78130) 16279s<br> ok: run: redis-exporter: (pid 78626) 16194s<br> ok: run: sidekiq: (pid 109932) 1s<br> ok: run: unicorn: (pid 109939) 0s</p><p> #检查是否恢复成功<br> [root@git ~/git_test]# gitlab-rake gitlab:check SANITIZE=true </p><p><img src="https://www.increase93.com/wp-content/uploads/2019/11/112319_1634_87.png" alt="img"></p><p> #web界面数据已经恢复，从新克隆到本地</p><p> [root@git ~]# git clone <a href="mailto:&#103;&#105;&#116;&#64;&#x31;&#48;&#46;&#48;&#x2e;&#x30;&#46;&#x31;&#x30;&#48;">&#103;&#105;&#116;&#64;&#x31;&#48;&#46;&#48;&#x2e;&#x30;&#46;&#x31;&#x30;&#48;</a>:OPS/git_test.git<br> Cloning into ‘git_test’…<br> remote: Counting objects: 27, done.<br> remote: Compressing objects: 100% (14/14), done.<br> remote: Total 27 (delta 1), reused 27 (delta 1)<br> Receiving objects: 100% (27/27), done.<br> Resolving deltas: 100% (1/1), done.<br> [root@git ~/git_test]# ll<br> total 8<br> -rw-r–r– 1 root root 27 Nov 17 19:00 a<br> -rw-r–r– 1 root root 7 Nov 17 19:00 a.txt<br> -rw-r–r– 1 root root 0 Nov 17 19:00 test</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GItlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令集合~</title>
      <link href="/posts/5563/"/>
      <url>/posts/5563/</url>
      
        <content type="html"><![CDATA[<h1 id="水一篇文章"><a href="#水一篇文章" class="headerlink" title="水一篇文章"></a>水一篇文章</h1><p>1.git init 初始化仓库 把一个目录初始化为版本仓库 （可以是空的目录 也可以是带内容的仓库）</p><p>2.git status 查看当前仓库的状态    </p><p>3.git add file 添加文件到暂存区</p><p>4.git add . 或者git add * 添加当前所有的文件到暂存区</p><p>5.git rm –cached file 从缓存区撤回该文件</p><p>6.rm -rf file 删除工作区文件</p><p>7.git rm -f file 直接从暂存区域同工作区一同删除命令</p><p>小结：如果真正意义上通过版本控制系统 管理文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.工作目录必须有个代码文件</span><br><span class="line">2.通过 git add file 添加到暂存区域</span><br><span class="line">3.通过 git commit -m &quot;你自己输入的有关代码信息&quot; 添加到本地仓库 </span><br></pre></td></tr></table></figure><p>8.git mv old-filename new-filename 直接更改文件名称，包括缓存区</p><p>9.git diff 默认比对工作目录和暂存区域有什么不同</p><p>10.git diff –cached 比对暂存区域和本地仓库</p><p>11.如果某个文件已经被仓库管理 如果再更改此文件 直接需要一条命令提交即可</p><p>git commit -am “add newfile”</p><p>12.git log 查看历史提交信息</p><p>13.git log –oneline 一行显示提交信息 </p><p>-p 查看具体的改动</p><p>-1 查看最近一次</p><p>14.git reset –hard **** 回滚数据到某一个提交</p><p>15.git reflog 查看所有修改信息</p><p>16.git log –oneline –decorate 查看当前指针的指向</p><p>17.git branch 查看分支 （*在什么上面什么就是主分支）</p><p>18.git branch ** 创建分支</p><p>19.git checkout testing 切换分支</p><p>20.git checkout -b testing 创建并切换分支</p><p>21.git branch -d testing 删除分支</p><p>22.git merge testing 合并分支。操作必须在主分支上做</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIt </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S(kubernetes)实践认知</title>
      <link href="/posts/47211/"/>
      <url>/posts/47211/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes快速入门"><a href="#Kubernetes快速入门" class="headerlink" title="Kubernetes快速入门"></a>Kubernetes快速入门</h1><p>学习Kubernetes最权威的知识来源就是Kubernetes官方文档，而且对于初学者来说，官方文档可能不是最佳选择。本章将带你循循序渐进的学习Kubernetes，后面章节会通过大量的实践案例来理解和掌握Kubernetes的知识。</p><ul><li>Kubernetes官方文档：<a href="https://kubernetes.io/docs/home/">https://kubernetes.io/docs/home/</a></li><li>Kuernetes Github：<a href="https://github.com/kubernetes/">https://github.com/kubernetes/</a></li></ul><h2 id="Kubernetes架构介绍"><a href="#Kubernetes架构介绍" class="headerlink" title="Kubernetes架构介绍"></a>Kubernetes架构介绍</h2><p>Kubernetes 源于希腊语，意为 “舵手” 或 “飞行员”，是用于自动部署，扩展和管理容器化应用程序的开源系统，由于K和S之间有8个字母，被简称为K8S。Kubernetes 构建在 Google 15 年生产环境经验基础之上，可以将Kubernetes看作为Google内部的容器管理平台Brog的开源版本，当然他们之间是有一些差异的。</p><h3 id="Kubernetes系统架构"><a href="#Kubernetes系统架构" class="headerlink" title="Kubernetes系统架构"></a>Kubernetes系统架构</h3><p>Kubernetes被设计为Master和Node两个角色，这类似于OpenStack的架构理念，Master为控制节点，Node为计算节点或者叫工作节点，在Master节点上有一个API Server服务，对外提供标准的RestAPI，这也是Kubernetes集群的入口，意外着只要和集群进行交互必须连接到API Server上。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/4f93fc22b605a967fa54a2491557c04e.png" alt="img"></p><p><strong>Master节点介绍</strong></p><p>Kubernetes Master节点主要有4个组件，API Server、Scheduler、Controller、etcd。如下图所示：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/0786901c59be2f756d7b979619a048b2.png" alt="img"></p><ul><li><strong>API Server</strong>：提供Kubernetes API接口，主要处理 Rest操作以及更新Etcd中的对象。是所有资源增删改查的唯一入口。</li><li><strong>Scheduler</strong>：绑定Pod到Node上，主要做资源调度。</li><li><strong>Controller Manager</strong>：所有其他群集级别的功能，目前由控制器Manager执行。资源对象的自动化控制中心，Kubernetes集群有很多控制器。</li><li><strong>Etcd</strong>：所有持久化的状态信息存储在Etcd中，这个是Kubernetes集群的数据库。</li></ul><p><strong>Node节点介绍</strong></p><p>Node节点是Kubernetes集群的工作节点，在Node节点上主要运行了Docker、Kubelet、kube-proxy三个服务（Fluentd请先忽略），如下图所示：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/ff26ae9ea18c1a93e50b8226abfa2fa7.png" alt="img"></p><ul><li><strong>Docker Engine</strong>：负责节点的容器的管理工作，最终创建出来的是一个Docker容器。</li><li><strong>Kubelet</strong>：安装在Node上的代理服务，用来管理Pods以及容器、镜像、Volume等，实现对集群对节点的管理。</li><li><strong>Kube-proxy</strong>：安装在Node上的网络代理服务，提供网络代理以及负载均衡，实现与Service通讯。</li></ul><h3 id="Kubernetes逻辑架构"><a href="#Kubernetes逻辑架构" class="headerlink" title="Kubernetes逻辑架构"></a>Kubernetes逻辑架构</h3><p>在上面的介绍中提到像Pod、Service这些概念，在Kubernetes的系统架构图中并没有体现出来，这些可以理解为Kubernetes逻辑架构中的组件。也就是在Master和Node上并不具体存在的一个服务或者进程，但却是Kubernetes的组件，也是我们的管理对象。主要有Pod、Service和各种控制器等。</p><p><strong>Pod</strong></p><p>Pod是Kubernetes的最小管理单元，一个Pod可以包含一组容器和卷。虽然一个Pod里面可以包含一个或者多个容器，但是Pod只有一个IP地址，而且Pod重启后，IP地址会发生变化。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/e2a89d5ac819b578808e62d8fee0e960.png" alt="img"></p><p><strong>Controller</strong></p><p>一个应用如果可以有一个或者多个Pod，就像你给某一个应用做集群，集群中的所有Pod是一模一样的。Kubernetes中有很多控制器可以来管理Pod，例如下图的Replication Controller可以控制Pod的副本数量，从而实现横向扩展。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/c4ae2886ff4fdb51b9a0dd20a14c8e50.png" alt="img"></p><p>Kubernetes中有很多控制器，后面的章节我们会一一讲到，常用的控制器如下：</p><ul><li>Replication Controller（新版本已经被ReplicaSet所替代）</li><li>ReplicaSet（新版本被封装在Deployment中）</li><li>Deployment：封装了Pod的副本管理、部署更新、回滚、扩容、缩容等功能。</li><li>DaemonSet：保证所有的Node上有且只有一个Pod在运行。</li><li>StatefulSet：有状态的应用，为 Pod 提供唯一的标识，它可以保证部署和 scale 的顺序。</li><li>Job：使用Kubernetes运行单一任务。</li><li>CronJob：使用Kubernetes运行定时任务。</li></ul><p><strong>Service</strong></p><p>由于Pod的生命周期是短暂的，而且每次重启Pod的IP地址都会发生变化，而且一个Pod有多个副本，也就是说一个集群中有了多个节点，就需要考虑负载均衡的问题。Kubernetes使用Service来实现Pod的访问，而且Service有一个Cluster IP，通常也称之为VIP，是固定不变的。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/2e61328894d1eaf548ad6ff06d85a6a3.png" alt="img"></p><h3 id="Kubernetes网络介绍"><a href="#Kubernetes网络介绍" class="headerlink" title="Kubernetes网络介绍"></a>Kubernetes网络介绍</h3><p>在Kubernetes集群中存在着三种网络，分别是Node网络、Pod网络和Service网络，这几种网络之间的通信需要依靠网络插件，Kubernetes本身并没有提供，社区提供了像Flannel、Calico、Cannal等，后面章节会详述。</p><p><strong>Node网络</strong></p><p>Node网络指的是Kubernetes Node节点本地的网络，在本实验环境中使用的是192.168.56.0/24这个网段，所有的Node和Master在该网段都可以正常通信。</p><p><strong>Pod网络</strong></p><p>后面创建的Pod，每一个Pod都会有一个IP地址，这个IP地址网络段被称之为Pod网络，如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-hpn68 1&#x2F;1 Running 0 9m7s 10.2.1.2 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-r4mfq 1&#x2F;1 Running 0 7m46s 10.2.1.3 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>Service网络</strong></p><p>Service是为Pod提供访问和负载均衡的网络地址段，如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line"></span><br><span class="line">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE</span><br><span class="line"></span><br><span class="line">kubernetes ClusterIP 10.1.0.1 &lt;none&gt; 443&#x2F;TCP 64m</span><br><span class="line"></span><br><span class="line">nginx NodePort 10.1.216.23 &lt;none&gt; 80:30893&#x2F;TCP 8m3s</span><br></pre></td></tr></table></figure><p>Kubernetes的组件和知识绝非如此，快速入门可以先了解这么多，下一章节，我们先快速的部署一个Kubernetes集群。</p><h2 id="使用kubeadm部署Kubernetes-v1-16-4"><a href="#使用kubeadm部署Kubernetes-v1-16-4" class="headerlink" title="使用kubeadm部署Kubernetes v1.16.4"></a>使用kubeadm部署Kubernetes v1.16.4</h2><p>想要快速的体验Kubernetes的功能，官方提供了非常多的部署方案，可以使用官方提供的kubeadm以容器的方式运行Kubernetes集群，也可以使用二进制方式部署更有利于理解Kubernetes的架构，我们先使用kubeadm快速的部署一个Kubernetes集群后，学习Kubernetes的使用，然后动手使用二进制的方式来深入理解Kubernetes架构。</p><blockquote><p>注意：请不要把目光仅仅放在部署上，要慢慢的了解其本质。</p></blockquote><p>Kubernetesv1.13版本发布后，kubeadm才正式进入GA，可以生产使用。目前Kubernetes的对应镜像仓库，在国内阿里云也有了镜像站点，使用kubeadm部署Kubernetes集群变得简单并且容易了很多，本文使用kubeadm带领大家快速部署Kubernetes v1.16.2版本。</p><p><strong>实验环境准备</strong></p><p>在本书的实验环境的基础上，我们如下来分配角色：</p><table><thead><tr><th>主机名</th><th>IP地址（NAT）</th><th>最低配置</th><th>描述</th></tr></thead><tbody><tr><td>linux-node1.linuxhot.com</td><td>eth0:192.168.56.11</td><td>1CPU/1G内存</td><td>Kubernets Master/Etcd节点</td></tr><tr><td>linux-node2.linuxhot.com</td><td>eth0:192.168.56.12</td><td>1CPU/1G内存</td><td>Kubernets Node节点</td></tr><tr><td>linux-node3.linuxhot.com</td><td>eth0:192.168.56.13</td><td>1CPU/1G内存</td><td>Kubernets Node节点</td></tr><tr><td>Service网段</td><td>10.1.0.0/16</td><td></td><td></td></tr><tr><td>Pod网段</td><td>10.2.0.0/16</td><td></td><td></td></tr><tr><td>备注</td><td>如果有条件可以部署多个Kubernets node，实验效果更佳。</td><td></td><td></td></tr></tbody></table><h3 id="部署Docker"><a href="#部署Docker" class="headerlink" title="部署Docker"></a>部署Docker</h3><p>首先需要在所有Kubernetes集群的节点中安装Docker和kubeadm。</p><p><strong>1.设置使用国内Yum源</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">[root@linux-node1 yum.repos.d]# wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>2.安装指定的Docker版本</strong></p><p>由于kubeadm对Docker的版本是有要求的，需要安装与Kubernetes匹配的版本，这个对应关系一般在每次发布的Changlog中可以找到，例如1.16.2的CHANGELOG如下：<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.16.md">CHANGELOG</a></p><p>当前v1.16.2支持的Docker版本有v1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09,可以通过下面命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line"> * updates: mirror.jdcloud.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line"> * extras: mirror.jdcloud.com</span><br><span class="line"> * epel: mirrors.njupt.edu.cn</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"> * base: mirrors.neusoft.edu.cn</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><p><strong>3.安装Docker18.09版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum -y install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9-3.el7</span><br></pre></td></tr></table></figure><p><strong>4.设置cgroup驱动使用systemd</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;etc&#x2F;docker</span><br><span class="line">[root@linux-node1 ~]# cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;dx5z2hy7.mirror.aliyuncs.com&quot;],</span><br><span class="line">      &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>5.启动后台进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>6.查看Docker版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker --version</span><br><span class="line">Docker version 18.09.9, build 039a7df9ba</span><br></pre></td></tr></table></figure><h3 id="部署kubadm和kubelet"><a href="#部署kubadm和kubelet" class="headerlink" title="部署kubadm和kubelet"></a>部署kubadm和kubelet</h3><p>在Kubernetes集群的所有节点上部署完毕Docker后，还需要全部部署kubeadm和kubelet，其中kubeadm是管理工具，kubelet是一个服务，用于启动Kubernetes对应的服务。</p><p><strong>1.设置kubernetes YUM仓库</strong></p><p>这里在官方文档的基础上修改为了国内阿里云的yum仓库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br></pre></td></tr></table></figure><blockquote><p>注意：最下面一行gpgkey的两个URL地址之间是空格，因为排版问题可能导致换行。</p></blockquote><p><strong>2.安装软件包</strong></p><p>由于版本更新频繁，请指定对应的版本号，本文采用1.16.2版本，其它版本未经测试，如果不指定版本默认安装最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 ipvsadm</span><br></pre></td></tr></table></figure><p><strong>3.配置kubelet</strong></p><p>默认情况下，Kubelet不允许所在的主机存在交换分区，后期规划的时候，可以考虑在系统安装的时候不创建交换分区，针对已经存在交换分区的可以设置忽略禁止使用Swap的限制，不然无法启动Kubelet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet</span><br><span class="line">KUBELET_CGROUP_ARGS&#x3D;&quot;--cgroup-driver&#x3D;systemd&quot;</span><br><span class="line">KUBELET_EXTRA_ARGS&#x3D;&quot;--fail-swap-on&#x3D;false&quot;</span><br></pre></td></tr></table></figure><p>在所有节点上关闭SWAP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# swapoff -a</span><br></pre></td></tr></table></figure><p><strong>4.设置内核参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# sysctl --system</span><br></pre></td></tr></table></figure><p><strong>5.启动kubelet并设置开机启动</strong></p><p>注意，此时kubelet是无法正常启动的，可以查看/var/log/messages有报错信息，等待执行初始化之后即可正常，为正常现象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><p><strong>6.使用IPVS进行负载均衡</strong></p><p>在Kubernetes集群中Kube-Proxy组件负载均衡的功能，默认使用iptables，生产环境建议使用ipvs进行负载均衡。在所有节点启用ipvs模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">[root@linux-node1 ~]# chmod +x &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br><span class="line">[root@linux-node1 ~]# source &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br></pre></td></tr></table></figure><p>查看模块是否加载正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line">ip_vs_sh               12688  0 </span><br><span class="line">ip_vs_wrr              12697  0 </span><br><span class="line">ip_vs_rr               12600  0 </span><br><span class="line">ip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack_ipv4      15053  15 </span><br><span class="line">nf_defrag_ipv4         12729  1 nf_conntrack_ipv4</span><br><span class="line">nf_conntrack          133095  7 ip_vs,nf_nat,nf_nat_ipv4,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4</span><br><span class="line">libcrc32c              12644  4 xfs,ip_vs,nf_nat,nf_conntrack</span><br></pre></td></tr></table></figure><ul><li>以上步骤请在Kubernetes的所有节点上执行，本实验环境是需要在linux-node1、linux-node2、linux-node3这三台机器上均安装Docker、kubeadm、kubelet，对于以上操作需要自动化可以参考我使用SaltStack完成的salt-kubeadm项目：<a href="https://github.com/unixhot/salt-kubeadm">https://github.com/unixhot/salt-kubeadm</a></li></ul><h3 id="初始化集群部署Master"><a href="#初始化集群部署Master" class="headerlink" title="初始化集群部署Master"></a>初始化集群部署Master</h3><p>在所有节点上安装完毕后，在linux-node1这台Master节点上进行集群的初始化工作。</p><p><strong>1.导出所有默认的配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm config print init-defaults &gt; kubeadm.yaml</span><br></pre></td></tr></table></figure><p>上面的命令会生成一个默认配置的kubeadm配置文件，然后在此基础上进行修改即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat kubeadm.yaml </span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.56.11  #修改为API Server的地址</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock</span><br><span class="line">  name: linux-node1.example.com</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    dataDir: &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers  #修改为阿里云镜像仓库</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.16.2  #修改为具体的版本</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.1.0.0&#x2F;16   #修改Service的网络</span><br><span class="line">  podSubnet: 10.2.0.0&#x2F;16      #新增Pod的网络</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---   #下面有增加的三行配置，用于设置Kubeproxy使用LVS</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io&#x2F;v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br></pre></td></tr></table></figure><p><strong>2. 执行初始化操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm init --config kubeadm.yaml</span><br><span class="line">[init] Using Kubernetes version: v1.16.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR NumCPU]: the number of available CPUs 1 is less than the required 2</span><br><span class="line">        [ERROR Swap]: running with swap on is not supported. Please disable swa</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with &#96;--ignore-preflight-errors&#x3D;...&#96;</span><br><span class="line">To see the stack trace of this error execute with --v&#x3D;5 or higher</span><br></pre></td></tr></table></figure><p>如果遇到上面这样的报错，是因为在实验环境开启了交换分区，以及CPU的核数小于2造成的，可以使用–ignore-preflight-errors=进行忽略。 –ignore-preflight-errors=：忽略运行时的错误，例如上面目前存在[ERROR NumCPU]和[ERROR Swap]，忽略这两个报错就是增加–ignore-preflight-errors=NumCPU 和–ignore-preflight-errors=Swap的配置即可。</p><p>再次执行初始化操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm init --config kubeadm.yaml \</span><br><span class="line">  --ignore-preflight-errors&#x3D;Swap,NumCPU </span><br><span class="line">[init] Using Kubernetes version: v1.16.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING NumCPU]: the number of available CPUs 1 is less than the required 2</span><br><span class="line">        [WARNING Swap]: running with swap on is not supported. Please disable swap</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;</span><br></pre></td></tr></table></figure><p>执行完毕后，会在当前输出下停留，等待下载Kubernetes组件的Docker镜像。根据你的网络情况，可以持续1-5分钟，你也可以使用docker images查看下载的镜像。镜像下载完毕之后，就会进行初始操作：</p><p>这里省略了所有输出，初始化操作主要经历了下面15个步骤，每个阶段均输出均使用[步骤名称]作为开头：</p><ol><li>[init]：指定版本进行初始化操作</li><li>[preflight] ：初始化前的检查和下载所需要的Docker镜像文件。</li><li>[kubelet-start]：生成kubelet的配置文件”/var/lib/kubelet/config.yaml”，没有这个文件kubelet无法启动，所以初始化之前的kubelet实际上启动失败。</li><li>[certificates]：生成Kubernetes使用的证书，存放在/etc/kubernetes/pki目录中。</li><li>[kubeconfig] ：生成 KubeConfig文件，存放在/etc/kubernetes目录中，组件之间通信需要使用对应文件。</li><li>[control-plane]：使用/etc/kubernetes/manifest目录下的YAML文件，安装 Master组件。</li><li>[etcd]：使用/etc/kubernetes/manifest/etcd.yaml安装Etcd服务。</li><li>[wait-control-plane]：等待control-plan部署的Master组件启动。</li><li>[apiclient]：检查Master组件服务状态。</li><li>[uploadconfig]：更新配置</li><li>[kubelet]：使用configMap配置kubelet。</li><li>[patchnode]：更新CNI信息到Node上，通过注释的方式记录。</li><li>[mark-control-plane]：为当前节点打标签，打了角色Master，和不可调度标签，这样默认就不会使用Master节点来运行Pod。</li><li>[bootstrap-token]：生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到</li><li>[addons]：安装附加组件CoreDNS和kube-proxy</li></ol><p>成功执行之后，你会看到下面的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line">kubeadm join 192.168.56.11:6443 --token 19fhhl.3mzkyk16tcgp6vga --discovery-token-ca-cert-hash sha256:76a88c38b673d3b2ac73e33127a809688cb3e58c533512ac6d92ecb66aa57a45</span><br></pre></td></tr></table></figure><p>如果执行失败，那意味着之前的操作存在问题，检查顺序如下：</p><ul><li>基础环境</li><li>主机名是否可以解析，SELinux，iptables是否关闭。</li><li>交换分区是否存在free -m查看</li><li>内核参数是否修改、IPVS是否修改（目前阶段不会造成失败）</li><li>基础软件</li><li>Docker是否安装并启动</li><li>Kubelet是否安装并启动</li><li>执行kubeadm是否有别的报错是否忽略</li><li>systemctl status kubelet查看kubelet是否启动</li><li>如果kubelet无法启动，查看日志有什么报错，并解决报错。</li><li>以上都解决完毕，需要重新初始化</li><li>kubeadm reset 进行重置（生产千万不要执行，会直接删除集群）</li><li>根据kubeadm reset 提升，清楚iptables和LVS。</li></ul><p>请根据上面输出的要求配置kubectl命令来访问集群。</p><p><strong>3.为kubectl准备Kubeconfig文件。</strong></p><p>kubectl默认会在执行的用户家目录下面的.kube目录下寻找config文件。这里是将在初始化时[kubeconfig]步骤生成的admin.conf拷贝到.kube/config。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir -p $HOME&#x2F;.kube</span><br><span class="line">[root@linux-node1 ~]# cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">[root@linux-node1 ~]# chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>在该配置文件中，记录了API Server的访问地址，所以后面直接执行kubectl命令就可以正常连接到API Server中。</p><p><strong>4.使用kubectl命令查看组件状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get cs</span><br><span class="line">NAME STATUS MESSAGE ERROR</span><br><span class="line">scheduler Healthy ok</span><br><span class="line">controller-manager Healthy ok</span><br><span class="line">etcd-0 Healthy &#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br></pre></td></tr></table></figure><p>**知识回顾：为什么上面的输出没有显示API Server组件的状态</p><p>因为API Server是Kubernetes集群的入口，所有和Kubernetes集群的交互都必须经过APIServer，kubectl命令也是连接到API Server上进行交互，所以如果能够正常使用kubectl执行命令，意味着API Server运行正常。</p><p><strong>5.使用kubectl获取Node信息</strong></p><p>目前只有一个节点，角色是Master，状态是NotReady。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get node</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.unixhot.com NotReady master 14m v1.16.2</span><br></pre></td></tr></table></figure><h3 id="部署网络插件"><a href="#部署网络插件" class="headerlink" title="部署网络插件"></a>部署网络插件</h3><p>Master节点NotReady的原因就是因为没有使用任何的网络插件，此时Node和Master的连接还不正常。目前最流行的Kubernetes网络插件有Flannel、Calico、Canal，这里分别列举了Canal和Flannel，你可以选择其中之一进行部署。 因为基础的Kubernetes集群已经配置完毕，后面的增加组件等操作，几乎都可以使用kubectl和一个YAML配置文件来完成。</p><p>【部署canal网络插件】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl apply -f https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;canal&#x2F;rbac.yaml</span><br><span class="line">[root@linux-node1 ~]# kubectl apply -f https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;canal&#x2F;canal.yaml</span><br></pre></td></tr></table></figure><p>【部署Flannel网络插件】（推荐） 部署Flannel网络插件需要修改Pod的IP地址段，修改为和你初始化一直的网段，可以先下载Flannel的YAML文件修改后，再执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;flannel.git</span><br><span class="line">[root@linux-node1 ~]# cd flannel&#x2F;Documentation&#x2F;</span><br><span class="line">[root@linux-node1 Documentation]# vim kube-flannel.yml</span><br><span class="line"># 修改&quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;为&quot;Network&quot;: &quot;10.2.0.0&#x2F;16&quot;,</span><br><span class="line"></span><br><span class="line">74   net-conf.json: |</span><br><span class="line">75     &#123;</span><br><span class="line">76       &quot;Network&quot;: &quot;10.2.0.0&#x2F;16&quot;,</span><br><span class="line">77       &quot;Backend&quot;: &#123;</span><br><span class="line">78         &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">79       &#125;</span><br><span class="line">80     &#125;</span><br><span class="line"></span><br><span class="line"># 请注意，Flannel的镜像拉取速度会比较慢，可以替换为国内镜像</span><br><span class="line"># image: quay.io&#x2F;coreos&#x2F;flannel:v0.10.0-amd64</span><br><span class="line">image: quay-mirror.qiniu.com&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</span><br><span class="line"></span><br><span class="line"># 如果Node中有多个网卡，可以使用--iface来指定对应的网卡参数。</span><br><span class="line">containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay-mirror.qiniu.com&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - &#x2F;opt&#x2F;bin&#x2F;flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface&#x3D;eth0</span><br></pre></td></tr></table></figure><p>部署Flannel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 Documentation]# kubectl create -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>查看Pod状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 Documentation]# kubectl get pod -n kube-system</span><br><span class="line">NAME                                              READY   STATUS     RESTARTS   AGE</span><br><span class="line">coredns-58cc8c89f4-cjhdv                          0&#x2F;1     Pending    0          41m</span><br><span class="line">coredns-58cc8c89f4-vdfn2                          0&#x2F;1     Pending    0          41m</span><br><span class="line">etcd-linux-node1.unixhot.com                      1&#x2F;1     Running    0          41m</span><br><span class="line">kube-apiserver-linux-node1.unixhot.com            1&#x2F;1     Running    0          40m</span><br><span class="line">kube-controller-manager-linux-node1.unixhot.com   1&#x2F;1     Running    1          40m</span><br><span class="line">kube-flannel-ds-amd64-bwsxl                       0&#x2F;1     Init:0&#x2F;1   0          20s</span><br><span class="line">kube-proxy-5qrmh                                  1&#x2F;1     Running    0          41m</span><br><span class="line">kube-scheduler-linux-node1.unixhot.com            1&#x2F;1     Running    1          41m</span><br></pre></td></tr></table></figure><p>可以看到此时CoreDNS处于Pending状态，需要等待网络插件canal或者Flannel的Pod状态变成Running之后CoreDNS也会正常。所有Pod的状态都变成Running之后，这个时候再次获取Node，会发现节点变成了Ready状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get node</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.unixhot.com Ready master 29m v1.16.2</span><br></pre></td></tr></table></figure><p><em>kubeadm其实使用Kubernetes部署Kubernetes，这样就存在先有鸡还是先有蛋的问题，所以，我们首先手动部署了Docker和kubelet，然后kubeadm调用kubelet以静态Pod的方式部署了Kubernetes集群中的其它组件。静态Pod在后面的章节会讲到。</em></p><h3 id="部署Node节点"><a href="#部署Node节点" class="headerlink" title="部署Node节点"></a>部署Node节点</h3><p>Master节点部署完毕之后，就可以部署Node节点，首先请遵循部署Docker和kubeadm章节为Node节点部署安装好docker、kubeadm和kubelet，此过程这里不再重复列出。</p><p><strong>1.在Master节点输出增加节点的命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm token create --print-join-command</span><br><span class="line">kubeadm join 192.168.56.11:6443 --token isggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569</span><br></pre></td></tr></table></figure><p><strong>2.在Node节点执行</strong></p><p>注意如果节点有交换分区，需要增加–ignore-preflight-errors=Swap。</p><p>部署linux-node2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# kubeadm join 192.168.56.11:6443 --token isggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569 --ignore-preflight-errors&#x3D;Swap</span><br></pre></td></tr></table></figure><p>部署linux-node3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node3 ~]# kubeadm join 192.168.56.11:6443 --tokenisggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569 --ignore-preflight-errors&#x3D;Swap</span><br></pre></td></tr></table></figure><p>这个时候kubernetes会使用DaemonSet在所有节点上都部署canal/flannel和kube-proxy。部署完毕之后节点即部署完毕。DaemonSet的内容后面会讲解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get daemonset --all-namespaces</span><br><span class="line">NAMESPACE NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE</span><br><span class="line">kube-system canal 2 2 1 2 1 beta.kubernetes.io&#x2F;os&#x3D;linux 17m</span><br><span class="line">kube-system kube-proxy 2 2 2 2 2 &lt;none&gt; 47m</span><br></pre></td></tr></table></figure><p>待所有Pod全部启动完毕之后，节点就恢复Ready状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE NAME READY STATUS RESTARTS AGE</span><br><span class="line">kube-system canal-lv92w 3&#x2F;3 Running 0 8m45s</span><br><span class="line">kube-system canal-rq5n5 3&#x2F;3 Running 0 23m</span><br><span class="line">kube-system coredns-78d4cf999f-5k4sg 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system coredns-78d4cf999f-bnbgf 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system etcd-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-apiserver-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-controller-manager-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-proxy-sddlp 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system kube-proxy-tw96b 1&#x2F;1 Running 0 8m45s</span><br><span class="line">kube-system kube-scheduler-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br></pre></td></tr></table></figure><p><strong>查看所有节点</strong> `` [root@linux-node1 ~]# kubectl get node NAME STATUS ROLES AGE VERSION linux-node1.linuxhot.com Ready master 49m v1.13.2 linux-node2.linuxhot.com Ready 4m48s v1.13.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">**如何给Node加上Roles标签**</span><br><span class="line"></span><br><span class="line">使用kubectl get node能够看到linux-node1.linuxhot.com的ROLES是master这个是在进行集群初始化的时候[mark-control-plane]进行标记的。</span><br><span class="line">[mark-control-plane] Marking the node linux-node1.linuxhot.com as control-plane</span><br><span class="line">by adding the label &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot;</span><br><span class="line"></span><br><span class="line">[mark-control-plane] Marking the node linux-node1.linuxhot.com as control-plane</span><br><span class="line">by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]</span><br><span class="line">1.查看节点的标签</span><br><span class="line">[root@linux-node1 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line">NAME STATUS ROLES AGE VERSION LABELS</span><br><span class="line"></span><br><span class="line">linux-node1.linuxhot.com Ready master 48m v1.13.3</span><br><span class="line">beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;hostname&#x3D;linux-node1.linuxhot.com,node-role.kubernetes.io&#x2F;master&#x3D;</span><br><span class="line"></span><br><span class="line">linux-node2.linuxhot.com Ready &lt;none&gt; 7m13s v1.13.3</span><br><span class="line">beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;hostname&#x3D;linux-node2.linuxhot.com</span><br><span class="line">2.增加标签</span><br><span class="line">[root@linux-node1 ~]# kubectl label nodes linux-node2.linuxhot.com</span><br><span class="line">node-role.kubernetes.io&#x2F;node&#x3D;</span><br><span class="line"></span><br><span class="line">node&#x2F;linux-node2.linuxhot.com labeled</span><br><span class="line">3.查看效果</span><br><span class="line">[root@linux-node1 ~]# kubectl get nodes</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.linuxhot.com Ready master 50m v1.13.3</span><br><span class="line">linux-node2.linuxhot.com Ready node 8m41s v1.13.3</span><br><span class="line">### 测试Kubernetes集群 &#123;#test&#125;</span><br><span class="line"></span><br><span class="line">在上面的步骤中，我们创建了一个Kubernetes集群，1个Master和2个Node节点，在生产环境需要考虑Master的高可用，这里先不用考虑，后面会讲到。</span><br><span class="line"></span><br><span class="line">**1.创建一个单Pod的Nginx应用**</span><br><span class="line">[root@linux-node1 ~]# kubectl create deployment nginx --image&#x3D;nginx:alpine</span><br><span class="line">deployment.apps&#x2F;nginx created</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME READY STATUS RESTARTS AGE</span><br><span class="line">nginx-54458cd494-9j7ql 0&#x2F;1 ContainerCreating 0 10s</span><br><span class="line">**2.查看Pod详细信息**</span><br><span class="line"></span><br><span class="line">待Pod的状态为Running后，可以获取Pod的IP地址，这个IP地址是从Master节点初始化的--pod-network-cidr&#x3D;10.2.0.0&#x2F;16地址段中分配的。</span><br><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-9j7ql 1&#x2F;1 Running 0 59s 10.2.1.2 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br><span class="line">**3.测试Nginx访问**</span><br><span class="line">[root@linux-node1 ~]# curl --head http:&#x2F;&#x2F;10.2.1.2</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.15.8</span><br><span class="line">Date: Sun, 13 Jan 2019 01:16:36 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Wed, 26 Dec 2018 23:21:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5c240d0d-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">**4.测试扩容**</span><br><span class="line"></span><br><span class="line">现在将Nginx应用的Pod副本数量拓展到2个节点</span><br><span class="line">[root@linux-node1 ~]# kubectl scale deployment nginx --replicas&#x3D;2</span><br><span class="line"></span><br><span class="line">deployment.extensions&#x2F;nginx scaled</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-9j7ql 1&#x2F;1 Running 0 2m13s</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-vnm4f 1&#x2F;1 Running 0 5s</span><br><span class="line">**5.为Nginx增加Service**</span><br><span class="line"></span><br><span class="line">为Nginx增加Service，会创建一个Cluster</span><br><span class="line">IP，从Master初始化的--service-cidr&#x3D;10.1.0.0&#x2F;16地址段中进行分配，</span><br><span class="line">并开启NodePort是在Node节点上进行端口映射，进行外部访问。</span><br><span class="line">[root@linux-node1 ~]# kubectl expose deployment nginx --port&#x3D;80</span><br><span class="line">--type&#x3D;NodePort</span><br><span class="line"></span><br><span class="line">service&#x2F;nginx exposed</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line"></span><br><span class="line">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE</span><br><span class="line">kubernetes ClusterIP 10.1.0.1 &lt;none&gt; 443&#x2F;TCP 88m</span><br><span class="line">nginx NodePort 10.1.147.204 &lt;none&gt; 80:30599&#x2F;TCP 67m</span><br><span class="line">**6.测试Service的VIP**</span><br><span class="line">[root@linux-node1 ~]# curl --head http:&#x2F;&#x2F;10.1.147.204&#x2F;</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK </span><br><span class="line">Server: nginx&#x2F;1.15.8</span><br><span class="line">Date: Sun, 13 Jan 2019 01:26:21 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Wed, 26 Dec 2018 23:21:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5c240d0d-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>``` <strong>7.测试NodePort，外部访问。</strong></p><p><img src="http://k8s.unixhot.com/kubernetes/media/1f9d523f359ce6d49515d04703d8e941.png" alt="img"></p><p>这一切看起来似乎不是十分完美，但是现在你已经拥有了一个Kubernetes集群，接下来就可以继续探索Kubernetes的世界了。</p><h2 id="公有云中的Kubernetes"><a href="#公有云中的Kubernetes" class="headerlink" title="公有云中的Kubernetes"></a>公有云中的Kubernetes</h2><p>截止2019年2月，大多数公有云已经提供了容器Kubernetes的产品服务，对于使用公有云的用户来说，最佳实践是直接购买公有云产品，而非自己部署Kubernetes集群，主要是因为公有云已经将网络和存储与Kubernetes集成好了，解决了生产应用的难题。</p><h3 id="阿里云中的Kubernetes"><a href="#阿里云中的Kubernetes" class="headerlink" title="阿里云中的Kubernetes"></a>阿里云中的Kubernetes</h3><p>国内阿里云提供了容器服务 Kubernetes 版（简称 ACK）提供高性能可伸缩的容器应用管理能力，支持企业级 Kubernetes 容器化应用的全生命周期管理。容器服务 Kubernetes 版简化集群的搭建和扩容等工作，整合阿里云虚拟化、存储、网络和安全能力，打造云端最佳的 Kubernetes 容器化应用运行环境。</p><p><strong>阿里云Kubernetes模式</strong></p><p>容器服务Kubernetes版包含了经典Dedicated Kubernetes以及Serverless两种形态，方便您按需选择。</p><ul><li>经典Dedicated Kubernetes模式：您可以对集群基础设施和容器应用进行更细粒度的控制，比如选择宿主机实例规格和操作系统，指定Kubernetes 版本、自定义 Kubernetes 特性开关设置等。阿里云 Kubernetes 服务负责为集群创建底层云资源，升级等自动化运维操作。而您需要规划、维护、升级服务器集群，手动或自动在集群中添加或删除服务器。</li><li>Serverless 模式：您无需创建底层虚拟化资源，可以利用 Kubernetes 命令指明应用容器镜像、CPU 和内存要求以及对外服务方式，直接启动。</li></ul><p><strong>阿里云Kubernetes产品架构</strong></p><p><img src="http://k8s.unixhot.com/kubernetes/media/43688d33a81f2bd6af354d0715b6b297.png" alt="C:\\Users\\jason\\Desktop\\15447553537457_zh-CN.png"></p><p><strong>阿里云Kubernetes创建</strong></p><p>默认情况下可以在阿里云中自行创建5个集群，每个集群最多可以添加 40 个节点。如需更高配额，需要提交工单申请。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/4c165d0ebc842862595f9fd0f4650d43.png" alt="img"></p><p>阿里云将网络、存储、安全等方面已经进行了深度集成，在创建Kubernetes集群时，阿里云容器服务提供两种网络插件：Terway和Flannel：</p><ul><li>Flannel：使用的是简单稳定的社区的Flannel CNI插件，配合阿里云的VPC的高速网络，能给集群高性能和稳定的容器网络体验，但功能偏简单，支持的特性少，例如：不支持基于Kubernetes标准的Network Policy。</li><li>Terway：是阿里云容器服务自研的网络插件，功能上完全兼容Flannel，支持将阿里云的弹性网卡分配给容器，支持基于Kubernetes标准的NetworkPolicy来定义容器间的访问策略，支持对单个容器做带宽的限流。对于不需要使用Network Policy的用户，可以选择Flannel，其他情况建议选择Terway。了解更多Terway网络插件的相关内容，请参见Terway网络插件。</li></ul><p>最终阿里云会使用kubeadm帮你创建一个指定版本的Kubernetes集群。</p><h3 id="私有云中的Kubernetes"><a href="#私有云中的Kubernetes" class="headerlink" title="私有云中的Kubernetes"></a>私有云中的Kubernetes</h3><p><strong>内网部署Kubernetes</strong></p><p>很多企业需要内网部署Kubernetes但是内网又无法访问外网，就需要本地化部署，无忘了本地话部署主要包括两个方面，一个是软件仓库的准备，一个是Kubernetes镜像的准备。</p><ol><li>准备内网YUM仓库（略）</li><li>准备Docker Registry（请参考Harbor章节）</li><li>下载并提交镜像到Harbor中，然后将Harbor的镜像部署直接COPY到生产环境中</li></ol><p>下载脚本如下，请根据需求自行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim k8s-images.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># EVN</span><br><span class="line">ALIYUN_REG&#x3D;&quot;registry.aliyuncs.com&#x2F;google_containers&quot;</span><br><span class="line">FLANNEL_REG&#x3D;&quot;quay-mirror.qiniu.com&#x2F;coreos&quot;</span><br><span class="line">LOCAL_REG&#x3D;&quot;192.168.56.11&#x2F;kubernetes&quot;</span><br><span class="line">K8S_VER&#x3D;v1.15.5</span><br><span class="line">PAUSE_VER&#x3D;3.1</span><br><span class="line">ETCD_VER&#x3D;3.3.10</span><br><span class="line">COREDNS_VER&#x3D;1.3.1</span><br><span class="line">FLANNEL_VER&#x3D;v0.11.0-amd64</span><br><span class="line"></span><br><span class="line"># Kubernetes Docker Images</span><br><span class="line">IMAGES&#x3D;(</span><br><span class="line">  kube-proxy:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-scheduler:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-controller-manager:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-apiserver:$&#123;K8S_VER&#125;</span><br><span class="line">  pause:$&#123;PAUSE_VER&#125;</span><br><span class="line">  etcd-amd64:$&#123;ETCD_VER&#125;</span><br><span class="line">  coredns:$&#123;COREDNS_VER&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for IMAGE in $&#123;IMAGES[@]&#125;</span><br><span class="line">do</span><br><span class="line">  docker pull $&#123;ALIYUN_REG&#125;&#x2F;$&#123;IMAGE&#125;</span><br><span class="line">  docker tag $&#123;ALIYUN_REG&#125;&#x2F;$&#123;IMAGE&#125; $&#123;LOCAL_REG&#125;&#x2F;$&#123;IMAGE&#125;</span><br><span class="line">  #docker push $&#123;LOCAL_REG&#125;&#x2F;$&#123;IMAGES&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># Flannel</span><br><span class="line"></span><br><span class="line">docker pull $&#123;FLANNEL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125;</span><br><span class="line">docker tag $&#123;FLANNEL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125; $&#123;LOCAL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125;</span><br></pre></td></tr></table></figure><h1 id="第五部分-将应用迁移至Kubernetes"><a href="#第五部分-将应用迁移至Kubernetes" class="headerlink" title="第五部分 将应用迁移至Kubernetes"></a>第五部分 将应用迁移至Kubernetes</h1><h1 id="6-第一步：将应用封装进容器中"><a href="#6-第一步：将应用封装进容器中" class="headerlink" title="6 第一步：将应用封装进容器中"></a>6 第一步：将应用封装进容器中</h1><h2 id="第一步：将应用封装进容器中"><a href="#第一步：将应用封装进容器中" class="headerlink" title="第一步：将应用封装进容器中"></a>第一步：将应用封装进容器中</h2><p>在之前的容器镜像实战中，我们已经学习了如何将应用容器化，这里我们将下载使用两个官方的Nginx镜像来完成接下来的实验。</p><h3 id="部署Harbor镜像仓库"><a href="#部署Harbor镜像仓库" class="headerlink" title="部署Harbor镜像仓库"></a>部署Harbor镜像仓库</h3><p>生产环境中可以使用Harbor来管理Docker镜像，请参考之前章节的内容完成Harbor镜像仓库的部署工作，并在Harbor中创建一个devopsedu的项目。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/093b4b731c05b54a1b8426e924f93d45.png" alt="img"></p><h3 id="制作实验用的Docker镜像"><a href="#制作实验用的Docker镜像" class="headerlink" title="制作实验用的Docker镜像"></a>制作实验用的Docker镜像</h3><p>这里不再演示Docker镜像的构建，直接下载两个官方镜像作为案例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker pull nginx:1.13.12</span><br><span class="line">[root@linux-node1 ~]# docker pull nginx:1.14.0</span><br></pre></td></tr></table></figure><h3 id="配置Docker仓库"><a href="#配置Docker仓库" class="headerlink" title="配置Docker仓库"></a>配置Docker仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root\@linux-node1 ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;tdimi5q1.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;insecure-registries&quot; : [&quot;http:&#x2F;&#x2F;192.168.56.11&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="登录Harbor镜像仓库"><a href="#登录Harbor镜像仓库" class="headerlink" title="登录Harbor镜像仓库"></a>登录Harbor镜像仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker login 192.168.56.11</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">    Configure a credential helper to remove this warning. See</span><br><span class="line">    https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;\#credentials-store</span><br><span class="line">    Login Succeeded</span><br></pre></td></tr></table></figure><h3 id="提交镜像到Registry"><a href="#提交镜像到Registry" class="headerlink" title="提交镜像到Registry"></a>提交镜像到Registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker tag nginx:1.13.12</span><br><span class="line">192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.13.12</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# docker tag nginx:1.14.0</span><br><span class="line">192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.14.0</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# docker push 192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.13.12</span><br><span class="line">[root@linux-node1 ~]# docker push 192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.14.0</span><br></pre></td></tr></table></figure><p>在上面的步骤中，模拟了生产环境如何构建和提交镜像，如果对于构建和提交镜像有疑问可以复习第3章的内容。</p><h1 id="7-第二步：将容器封装到Pod中"><a href="#7-第二步：将容器封装到Pod中" class="headerlink" title="7 第二步：将容器封装到Pod中"></a>7 第二步：将容器封装到Pod中</h1><p>Pod是Kubernetes最小的管理单元，一个Pod可以代表一个运行在集群里的进程。之前是在宿主机上运行不同的进程，现在是运行不同的Pod。前面介绍过Pod是一个逻辑架构的组件，Pod里封装了一个（或者多个）应用容器，存储资源和IP地址。</p><p><strong>为什么要造一个Pod出来？</strong> 学习Kubernetes遇到的最多的名称可能就是Pod了，其它开源的容器管理平台例如Mesos直接管理和调度的是容器，但是Kubernetes确是Pod，它在容器上面做了一层封装，方便用户将一组紧耦合的容器，放置在一个共享资源的单元中。对于很多没有此类场景的初学者，可以暂时将Pod看做是容器的一个壳，你也完全可以只在Pod中运行一个容器，随着学习的深入再慢慢理解。 Kubernetes运行Pod的两种方式：</p><ul><li>Pod里只运行一个单独容器，是Kubernetes最常见的使用场景；在这种情况下，可以把Pod看做是一个单独容器的连接器，Kubernetes通过Pod去管理容器，作为使用者几乎不用关心容器。</li><li>Pod里运行多个有关系容器。例如如果使用Nginx+Tomcat运行Java应用，可以制作一个镜像里面包含了Nginx+Tomcat，也可以分别制作两个镜像Nginx镜像和Tomcat镜像，如果使用Kubernetes就需要使用Pod，如果将Nginx和Tomcat单独放在两个Pod里面来管理，就会面临很多很多问题。这个时候，就可以把这两个容器放置在一个Pod中。</li></ul><h2 id="Pod管理"><a href="#Pod管理" class="headerlink" title="Pod管理"></a>Pod管理</h2><p>在Kubernetes中使用YAML格式来描述一个Pod。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nginx-pod.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:1.13.12</span><br><span class="line">    ports:</span><br><span class="line">- containerPort: 80</span><br></pre></td></tr></table></figure><p>Pod的YAML描述内容还有很多，在使用kubeadm部署Kubernetes的时候，就是使用静态Pod的方式运行的相关服务，YAML文件存放在，当然现在很多配置还是看不懂的，带着问题继续学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ls -l &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;</span><br><span class="line">total 16</span><br><span class="line">-rw------- 1 root root 2041 Feb 11 20:33 etcd.yaml</span><br><span class="line">-rw------- 1 root root 2700 Feb 11 20:33 kube-apiserver.yaml</span><br><span class="line">-rw------- 1 root root 2345 Feb 11 20:33 kube-controller-manager.yaml</span><br><span class="line">-rw------- 1 root root 1080 Feb 11 20:33 kube-scheduler.yaml</span><br></pre></td></tr></table></figure><p>创建Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nginx-pod.yaml </span><br><span class="line">pod &quot;nginx-pod&quot; created</span><br></pre></td></tr></table></figure><p>查看Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME                                READY     STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod                           1&#x2F;1       Running   0          49s</span><br></pre></td></tr></table></figure><p>查看Pod更多信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                                READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">nginx-pod  1&#x2F;1       Running   0          1m        10.2.53.18   192.168.56.13</span><br></pre></td></tr></table></figure><p>查看Pod详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl describe pod nginx-pod</span><br><span class="line">Name:         nginx-pod</span><br><span class="line">Namespace:    default</span><br><span class="line">Node:         192.168.56.13&#x2F;192.168.56.13</span><br><span class="line">Start Time:   Sat, 02 Jun 2018 06:42:53 +0800</span><br><span class="line">Labels:       app&#x3D;nginx</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.2.53.18</span><br></pre></td></tr></table></figure><p>查看Pod日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl logs pod&#x2F;nginx-pod</span><br></pre></td></tr></table></figure><p><strong>Pod中的镜像拉取策略</strong> 当kubelet尝试拉取指定的镜像时，[imagePullPolicy]和镜像的标签会生效。</p><ul><li>imagePullPolicy: IfNotPresent：仅当镜像在本地不存在时镜像才被拉取。</li><li>imagePullPolicy: Always：每次启动 pod 的时候都会拉取镜像。</li></ul><p>省略imagePullPolicy，镜像标签为:latest或被省略，Always被应用。 imagePullPolicy被省略，并且镜像的标签被指定且不是:latest，IfNotPresent被应用。 imagePullPolicy: Never：镜像被假设存在于本地。 没有尝试拉取镜像。</p><h1 id="7-3-第三步：使用Controllers管理Pod"><a href="#7-3-第三步：使用Controllers管理Pod" class="headerlink" title="7.3 第三步：使用Controllers管理Pod"></a>7.3 第三步：使用Controllers管理Pod</h1><p>在实际的生产环境中，我们其实很少单独创建Pod，而是通过控制器来进行Pod的管理，Kubernetes提供了很多的控制器，一个 Controllers 可以创建和管理很多个 Pod, 也提供复制、初始化，以及提供集群范围的自我恢复的功能。比如说： 如果一个节点宕机，Controller 将调度一个在其他节点上完全相同的 pod 来自动取代当前的 pod。</p><h1 id="8-1-Replication-Controller控制器"><a href="#8-1-Replication-Controller控制器" class="headerlink" title="8.1 Replication Controller控制器"></a>8.1 Replication Controller控制器</h1><h1 id="8-2-Replica-Sets控制器"><a href="#8-2-Replica-Sets控制器" class="headerlink" title="8.2 Replica Sets控制器"></a>8.2 Replica Sets控制器</h1><h1 id="8-3-Deployment控制器"><a href="#8-3-Deployment控制器" class="headerlink" title="8.3 Deployment控制器"></a>8.3 Deployment控制器</h1><h1 id="8-4-DaemonSet控制器"><a href="#8-4-DaemonSet控制器" class="headerlink" title="8.4 DaemonSet控制器"></a>8.4 DaemonSet控制器</h1><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。 使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个 Node 上运行 glusterd、ceph。</li><li>在每个 Node 上运行日志收集 daemon，例如filebeat、logstash。</li><li>在每个 Node 上运行监控 daemon，例如 Prometheus Node Exporter、collectd、Datadog 代理、Zabbix Agent。</li></ul><p><strong>创建DaemonSet</strong></p><p>DaemonSet的描述文件和Deployment非常相似，只需要修改Kind，并去掉副本数量的配置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 example]# vim nginx-daemonset.yaml</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-daemonset</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>查看Pod在Node上的分布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                    READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">nginx-daemonset-hk28q   1&#x2F;1       Running   0          1m        10.2.56.10   192.168.56.12</span><br><span class="line">nginx-daemonset-wtt68   1&#x2F;1       Running   0          1m        10.2.53.10   192.168.56.13</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get daemonset</span><br><span class="line">NAME              DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">nginx-daemonset   2         2         2         2            2           &lt;none&gt;          1m</span><br></pre></td></tr></table></figure><h1 id="7-4-第四步：使用Service管理Pod访问"><a href="#7-4-第四步：使用Service管理Pod访问" class="headerlink" title="7.4 第四步：使用Service管理Pod访问"></a>7.4 第四步：使用Service管理Pod访问</h1><p>在上面的小节，我们通过Deployment可以为一个应用创建多个Pod，而且可以动态的进行增加、或者删除多余的Pod，Kubernetes Pod 是有生命周期的，它们可以被创建，也可以被销毁，但是每次Pod的IP地址就会发生变化，外面如何访问到该Pod呢？总不能每次Pod重启就修改访问的IP地址吧。 每个 Pod 都会获取它自己的 IP 地址，但是每次即使这些 IP 地址不总是稳定可依赖的。 这会导致一个问题：在 Kubernetes 集群中，如果一组 Pod（称为 backend）为其它 Pod （称为 frontend）提供服务，那么那些 frontend 该如何发现，并连接到这组 Pod 中的哪些 backend 呢？</p><h1 id="9-1-Service介绍和管理"><a href="#9-1-Service介绍和管理" class="headerlink" title="9.1 Service介绍和管理"></a>9.1 Service介绍和管理</h1><h3 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h3><p>继续我们Nginx的案例，我们为之前的应用创建一个Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat nginx-service.yaml </span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure><ul><li>第1行：定义资源类型为Service</li><li>第2行：定义当前Service API的版本</li><li>第3行：metadata设置</li><li>第4行：设置Service的名称为nginx-service</li><li>第5行：spec: 开始设置Service的内容</li><li>第6行：selector: 为该Service指定一个匹配的标签</li><li>第7行：app: nginx 所有带有标签app ：nginx的Pod将使用该Service</li><li>第8行：ports: 指定Service需要对外的端口</li><li>第9行：设置端口协议：支持TCP和UDP</li><li>第10行：设置Service的端口</li><li>第11行：设置Pod的端口，Kubernetes会将发送给Service端口的连接，转发到Pod的端口上。</li></ul><p>创建Nginx Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nginx-service.yaml </span><br><span class="line">service &quot;nginx-service&quot; created</span><br></pre></td></tr></table></figure><p>查看Nginx Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line">NAME            TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes      ClusterIP   10.1.0.1      &lt;none&gt;        443&#x2F;TCP   7h</span><br><span class="line">nginx-service   ClusterIP   10.1.184.53   &lt;none&gt;        80&#x2F;TCP    25s</span><br></pre></td></tr></table></figure><p>访问Servce IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# curl --head 10.1.181.45</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.11.10</span><br><span class="line">Date: Tue, 21 Feb 2017 08:20:42 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 14 Feb 2017 15:36:04 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58a323e4-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h1 id="9-2-Service和Endpoint"><a href="#9-2-Service和Endpoint" class="headerlink" title="9.2 Service和Endpoint"></a>9.2 Service和Endpoint</h1><p>Service作为Kubernetes中为Pod实现负载均衡的组件，几乎在所有的文章中为了方便初学者理解，基本上说的是Service会来监听Pod的变化，然后来更新Pod的IP地址。其实这个事情不是Service干的，而是有一个幕后英雄：Endpoint Endpoints表示了一个Service对应的所有Pod副本的访问地址，而Endpoints Controller负责生成和维护所有Endpoints对象的控制器。它负责监听Service和对应的Pod副本的变化。</p><ul><li>如果监测到Service被删除，则删除和该Service同名的Endpoints对象；</li><li>如果监测到新的Service被创建或修改，则根据该Service信息获得相关的Pod列表，然后创建或更新Service对应的Endpoints对象。</li><li>如果监测到Pod的事件，则更新它对应的Service的Endpoints对象。</li></ul><p>kube-proxy进程获取每个Service的Endpoints，实现Service的负载均衡功能。</p><h3 id="创建一个Headless-Service"><a href="#创建一个Headless-Service" class="headerlink" title="创建一个Headless Service"></a>创建一个Headless Service</h3><p>编写一个Service不使用clusterip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat mysql-service.yaml </span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">  clusterIP: None</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl create -f mysql-service.yaml </span><br><span class="line">service &quot;mysql-service&quot; created</span><br></pre></td></tr></table></figure><p>查看Service，可以放心CLUSTER-IP为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service mysql-service</span><br><span class="line">NAME            TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">mysql-service   ClusterIP   None         &lt;none&gt;        3306&#x2F;TCP   17s</span><br></pre></td></tr></table></figure><p>2.创建一个Endpoint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim mysql-endpoint.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line"> name: mysql-service</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 192.168.56.13</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl create -f mysql-endpoint.yaml </span><br><span class="line">endpoints &quot;mysql-service&quot; created</span><br></pre></td></tr></table></figure><p>3.查看Service和Endpoint的关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get ep mysql-service</span><br><span class="line">NAME            ENDPOINTS            AGE</span><br><span class="line">mysql-service   192.168.56.13:3306   42s</span><br><span class="line">[root@linux-node1 ~]# kubectl describe svc mysql-service</span><br><span class="line">Name:              mysql-service</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          &lt;none&gt;</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                None</span><br><span class="line">Port:              &lt;unset&gt;  3306&#x2F;TCP</span><br><span class="line">TargetPort:        3306&#x2F;TCP</span><br><span class="line">Endpoints:         192.168.56.13:3306</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><h1 id="7-5-第五步：使用Ingress提供外部访问"><a href="#7-5-第五步：使用Ingress提供外部访问" class="headerlink" title="7.5 第五步：使用Ingress提供外部访问"></a>7.5 第五步：使用Ingress提供外部访问</h1><p>通过Service可以将Kubernetes集群中的服务以IP：Port的方式暴露出来，我们称之为4层的负载均衡，因为这个是OSI七层模型中传输层的功能。</p><p>那么如何实现七层的负载均衡呢，例如像Nginx那样，可以灵活的进行反向代理的设置，根据不同的URL进行转发等，难道我需要自己部署一个Nginx来做这个事情吗？首先，如果你有这个想法，并没有错，甚至你完全可以自己独立部署一个Nginx来完成，但是Kubernetes提供了更好的解决方案就是Ingress。 Ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转发到不同的service上。ingress相当于nginx反向代理服务器，它包括的规则定义就是URL的路由信息。</p><h2 id="10-1-Ingress-Controller"><a href="#10-1-Ingress-Controller" class="headerlink" title="10.1 Ingress Controller"></a>10.1 Ingress Controller</h2><p>在学习Service的时候，我们知道最终的负载均衡由kube-proxy和LVS来完成，那么Ingress靠什么来实现7层的路由机制呢？答案是Ingress Controller。</p><p>Ingress Controller 实质上可以理解为是个监视器，Ingress Controller 通过不断地跟 kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如新增和减少 pod，service 增加与减少等；当得到这些变化信息后，Ingress Controller 再结合下文的 Ingress 生成配置，然后更新反向代理负载均衡器，并刷新其配置，达到服务发现的作用。</p><p>Ingress Controller目前有两大开源项目，一个是Nginx Controller，一个是目前比较流行的Traefik，Traefik是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置。目前支持Docker, Swarm, Mesos/Marathon, Mesos, Kubernetes, Consul, Etcd, Zookeeper, BoltDB, Rest API等等后端模型。</p><h2 id="Ingress-Controller-Traefik"><a href="#Ingress-Controller-Traefik" class="headerlink" title="Ingress Controller Traefik"></a>Ingress Controller Traefik</h2><h3 id="部署Treafik"><a href="#部署Treafik" class="headerlink" title="部署Treafik"></a>部署Treafik</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl label nodes 192.168.56.12 edgenode&#x3D;true</span><br><span class="line">node &quot;192.168.56.12&quot; labeled</span><br><span class="line">[root@linux-node1 ~]# kubectl create -f &#x2F;srv&#x2F;addons&#x2F;ingress&#x2F;</span><br></pre></td></tr></table></figure><h1 id="11-第六步：使用PV和PVC管理数据存储"><a href="#11-第六步：使用PV和PVC管理数据存储" class="headerlink" title="11 第六步：使用PV和PVC管理数据存储"></a>11 第六步：使用PV和PVC管理数据存储</h1><p>截止目前我们所启动Pod的容器中的数据存储都是临时的，因此Pod重启或者被删除的时候，产生在容器中的数据会发生丢失。实际应用中，我们有些应用是无状态，有些应用则需要保持状态数据，确保Pod重启之后能够读取到之前的状态数据，有些应用则作为集群提供服务。这三种服务归纳为无状态服务、有状态服务以及有状态的集群服务，其中后面两个存在数据保存与共享的需求，因此就要采用容器外的存储方案。 Kubernetes中存储中有四个重要的概念：Volume、PersistentVolume（PV）、PersistentVolumeClaim （PVC）、StorageClass。掌握了这四个概念，就掌握了Kubernetes中存储系统的核心。</p><h1 id="11-1-Kubernetes-Volume"><a href="#11-1-Kubernetes-Volume" class="headerlink" title="11.1 Kubernetes Volume"></a>11.1 Kubernetes Volume</h1><h1 id="11-2-PersistentVolume（PV）"><a href="#11-2-PersistentVolume（PV）" class="headerlink" title="11.2 PersistentVolume（PV）"></a>11.2 PersistentVolume（PV）</h1><p>PersistentVolume（PV）是由管理员设置的存储，它是群集的一部分。就像节点是集群中的资源一样，PV 也是集群中的资源。 PV 是 Volume 之类的卷插件，但具有独立于使用 PV 的 Pod 的生命周期。此 API 对象包含存储实现的细节，即 NFS、iSCSI 或特定于云供应商的存储系统。</p><p><strong>1.安装并配置NFS</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y nfs-utils rpcbind</span><br><span class="line">[root@linux-node1 ~]# mkdir -p &#x2F;data&#x2F;k8s-nfs</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;exports</span><br><span class="line">&#x2F;data&#x2F;k8s-nfs *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>启动NFS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable rpcbind nfs</span><br><span class="line">[root@linux-node1 ~]# systemctl start rpcbind nfs</span><br></pre></td></tr></table></figure><p><strong>2.创建并查看PV</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nfs-pv.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-demo</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">storage: 1Gi</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: &#x2F;data&#x2F;k8s-nfs&#x2F;pv-demo</span><br><span class="line">    server: 192.168.56.11</span><br><span class="line">[root@linux-node1 ~]# kubectl create -f nfs-pv.yaml </span><br><span class="line">persistentvolume &quot;pv-demo&quot; created</span><br></pre></td></tr></table></figure><p>查看创建的PV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM     STORAGECLASS   REASON    AGE</span><br><span class="line">pv-demo   1Gi        RWO            Recycle          Available             nfs                      15s</span><br></pre></td></tr></table></figure><h1 id="11-3-PersistentVolumeClaim（PVC）"><a href="#11-3-PersistentVolumeClaim（PVC）" class="headerlink" title="11.3 PersistentVolumeClaim（PVC）"></a>11.3 PersistentVolumeClaim（PVC）</h1><p>PersistentVolumeClaim（PVC）是用户存储的请求。它与 Pod 相似。Pod 消耗节点资源，PVC 消耗 PV 资源。Pod 可以请求特定级别的资源（CPU 和内存）。声明可以请求特定的大小和访问模式（例如，可以以读/写一次或 只读多次模式挂载）。</p><p>1.创建PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nfs-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-demo</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br><span class="line">  storageClassName: nfs</span><br></pre></td></tr></table></figure><p>创建并查看PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nfs-pvc.yaml </span><br><span class="line">persistentvolumeclaim &quot;pvc-demo&quot; created</span><br><span class="line">[root@linux-node1 ~]# kubectl get pvc</span><br><span class="line">NAME       STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc-demo   Bound     pv-demo   1Gi        RWO            nfs            6s</span><br></pre></td></tr></table></figure><p>2.使用PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nginx-deployment-pvc.yaml</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &quot;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&quot;</span><br><span class="line">          name: pvc-demo</span><br><span class="line">      volumes:</span><br><span class="line">      - name: pvc-demo</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: pvc-demo</span><br></pre></td></tr></table></figure><h1 id="11-4-StorageClass"><a href="#11-4-StorageClass" class="headerlink" title="11.4 StorageClass"></a>11.4 StorageClass</h1><h1 id="7-第七步：使用Rancher管理Kubernetes集群"><a href="#7-第七步：使用Rancher管理Kubernetes集群" class="headerlink" title="7 第七步：使用Rancher管理Kubernetes集群"></a>7 第七步：使用Rancher管理Kubernetes集群</h1><p>现在我们已经具备把应用迁移到Kubernetes中来的能力，那么现在，迁移后，日常的运维工作就发生的变化，截止目前，在生产环境中，我们很少使用官方自带的Dashbaord来完成日常的运维工作，而是使用第三方的运维工具Rancher。</p><h2 id="7-1-Rancher快速入门"><a href="#7-1-Rancher快速入门" class="headerlink" title="7.1 Rancher快速入门"></a>7.1 Rancher快速入门</h2><p>快速部署单机版Rancher</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;opt&#x2F;rancher</span><br><span class="line">[root@linux-node1 ~]# docker run -d --restart&#x3D;unless-stopped -v &#x2F;opt&#x2F;rancher:&#x2F;var&#x2F;lib&#x2F;rancher&#x2F; -p 80:80 -p 443:443 rancher&#x2F;rancher</span><br></pre></td></tr></table></figure><h2 id="7-2-使用Rancher进行日常管理"><a href="#7-2-使用Rancher进行日常管理" class="headerlink" title="7.2 使用Rancher进行日常管理"></a>7.2 使用Rancher进行日常管理</h2><h2 id="7-3-Rancher生产集群部署"><a href="#7-3-Rancher生产集群部署" class="headerlink" title="7.3 Rancher生产集群部署"></a>7.3 Rancher生产集群部署</h2><h1 id="第六部分-管理Kubernetes中的应用"><a href="#第六部分-管理Kubernetes中的应用" class="headerlink" title="第六部分 管理Kubernetes中的应用"></a>第六部分 管理Kubernetes中的应用</h1><h1 id="13-应用的资源限制和健康检查"><a href="#13-应用的资源限制和健康检查" class="headerlink" title="13 应用的资源限制和健康检查"></a>13 应用的资源限制和健康检查</h1><h1 id="13-1-应用的资源限制"><a href="#13-1-应用的资源限制" class="headerlink" title="13.1 应用的资源限制"></a>13.1 应用的资源限制</h1><h1 id="13-2-应用的健康检查"><a href="#13-2-应用的健康检查" class="headerlink" title="13.2 应用的健康检查"></a>13.2 应用的健康检查</h1><h3 id="Liveness探测"><a href="#Liveness探测" class="headerlink" title="Liveness探测"></a>Liveness探测</h3><p>Kubernetes有两种探测机制，Liveness和Readiness，配置都是相似的，只是实现的功能不同。 Liveness探测是针对Pod健康状态的探测，类似于集群中的健康检查，用户可以自定义这个健康检查的条件，如果探测失败，Kubernetes将会重启容器。 如果您希望容器在探测失败时被杀死并重新启动，那么请指定一个Liveness配置，并指定restartPolicy 为 Always 或 OnFailure。 配置案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">livenessProbe:</span><br><span class="line">exec:</span><br><span class="line">    command:</span><br><span class="line">    - ps aux | grep nginx</span><br><span class="line">initialDelaySeconds: 10</span><br><span class="line">periodSeconds: 5</span><br><span class="line">timeoutSeconds: 3</span><br></pre></td></tr></table></figure><h3 id="Readiness探测"><a href="#Readiness探测" class="headerlink" title="Readiness探测"></a>Readiness探测</h3><p>Readiness探测是探测Pod是否准备好对外提供访问，例如我们在Pod里面运行一个Tomcat的容器，里面运行了一个Jenkins的应用，那么等Jenkins完全启动能提供服务可能需要1分钟，所以在在1分钟之前是不能提供给用户访问的，也就是不能加入Service的负载均衡中，这个就靠Readiness探测来控制。 Readiness用来控制告诉Kubernetes什么时间可以将容器加入到Service的负载均衡中，配置方法和Liveness一样，只需要修改livennessProbe替换为readinessProbe即可。</p><h2 id="健康检查的方法"><a href="#健康检查的方法" class="headerlink" title="健康检查的方法"></a>健康检查的方法</h2><p>Kubernetes的健康检查是由运行在各个Node上的kubelet来完成的，kubelet目前支持以下三种健康检查的方法：</p><ul><li>ExecAction：在容器中执行指定的命令。如果命令退出时状态码为0，则认为诊断成功。</li><li>TCPSocketAction:对指定端口上容器的IP地址执行TCP检查。如果端口是打开的，则认为诊断是成功的。</li><li>HTTPGetAction:对指定端口和路径上容器的IP地址执行HTTP Get请求。如果响应的状态码大于或等于200，小于400，则认为诊断是成功的。</li></ul><p>以上三种健康检查的方法会有三种返回结果：</p><ul><li><p>Success：成功，容器通过诊断。</p></li><li><p>Failure：失败，容器诊断失败。</p></li><li><p>Unknown：探测失败，无法执行探测，所以不应该采取任何行动。</p><p>针对于探针有以下配置参数，需要注意不管是Liveness还是Readiness探测，探针的使用都是相同的，唯一的不同是探测完毕后，执行操作的不同。</p></li><li><p>initialDelaySeconds: 探测的延迟时间，单位是秒。也就是说在容器启动多少秒之后开始进行第一次探测，例如你启动一个Java的应用需要50秒，那么这个值就需要大于50s。所以这个值是需要根据应用的具体情况来设置。</p></li><li><p>periodSeconds：探测执行的周期时间，单位是秒。是指每隔多长时间执行一次探测，频率越高，发现故障的时间也就越短，并不是越短越好。如果应用服务不够稳定，太高的频率反而会导致很多你认为的“误报”。默认是10秒，最小值是1秒。</p></li><li><p>timeoutSeconds: 探测超时时间，单位是秒，执行探测如果超过这个时间没有返回结果，变意味着探测的结果是失败。默认为1秒。最小值是1秒。</p></li><li><p>failureThreshold：探测成功后，最少连续探测失败多少次才被认定为失败。这个是Kubernetes将在放弃之前尝试失败阈值时间。放弃生命探测意味着重新启动Pod。一旦准备就绪，Pod将被标记为未准备就绪。默认为3。最小值是1。</p></li><li><p>successThreshold: 在探测失败后，最少连续探测成功多少次才被认定为成功。默认为1，也就是必须探测成功1次，才能认为状态恢复，最小值是1。</p><h1 id="管理应用的DNS访问"><a href="#管理应用的DNS访问" class="headerlink" title="管理应用的DNS访问"></a>管理应用的DNS访问</h1></li></ul><h1 id="14-1-Kubernetes中的DNS"><a href="#14-1-Kubernetes中的DNS" class="headerlink" title="14.1 Kubernetes中的DNS"></a><a href="http://k8s.unixhot.com/">14.1 Kubernetes中的DNS</a></h1><h1 id="应用的DNS管理"><a href="#应用的DNS管理" class="headerlink" title="应用的DNS管理"></a>应用的DNS管理</h1><h3 id="Pod的域名解析策略"><a href="#Pod的域名解析策略" class="headerlink" title="Pod的域名解析策略"></a>Pod的域名解析策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl run dns-test --generator&#x3D;run-pod&#x2F;v1 --image&#x3D;alpine --replicas&#x3D;1 sleep 360000</span><br><span class="line">pod&#x2F;dns-test created</span><br></pre></td></tr></table></figure><p>查看Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod dns-test</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">dns-test   1&#x2F;1     Running   0          79s</span><br></pre></td></tr></table></figure><p>Pod默认的DNS配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl exec -it dns-test &#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F; # cat &#x2F;etc&#x2F;resolv.conf </span><br><span class="line">nameserver 10.1.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br></pre></td></tr></table></figure><p>如何访问Service名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; # ping -c 3 wordpress-service.default.svc.cluster.local</span><br><span class="line">PING wordpress-service.default.svc.cluster.local (10.1.92.244): 56 data bytes</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.074 ms</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.141 ms</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.187 ms</span><br><span class="line"></span><br><span class="line">--- wordpress-service.default.svc.cluster.local ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min&#x2F;avg&#x2F;max &#x3D; 0.074&#x2F;0.134&#x2F;0.187 ms</span><br></pre></td></tr></table></figure><p>DNS查询策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod dns-test -o yaml | grep dnsPolicy</span><br><span class="line">  dnsPolicy: ClusterFirst</span><br></pre></td></tr></table></figure><ul><li>Default: Pod从其运行的节点中继承名称解析配置。</li><li>ClusterFirst:（默认策略）与配置的群集域名后缀不匹配的任何DNS查询都将转发到从节点继承的上游名称服务器。</li><li>ClusterFirstWithHostNet: 如果Pod使用了hostNetwork（例如Ingress Controller Treafik就是使用了hostNetwok），应显式设置其DNS策略为“ClusterFirstWithHostNet”。</li><li>None: 它允许Pod忽略Kubernetes环境中的DNS设置，这时候会使用Pod Spec中的dnsConfig字段提供的DNS设置。</li></ul><h2 id="应用的DNS管理-1"><a href="#应用的DNS管理-1" class="headerlink" title="应用的DNS管理"></a>应用的DNS管理</h2><h2 id="15-1-使用ConfigMap管理应用配置"><a href="#15-1-使用ConfigMap管理应用配置" class="headerlink" title="15.1 使用ConfigMap管理应用配置"></a>15.1 使用ConfigMap管理应用配置</h2><h3 id="通过kubectl命令创建ConfigMap"><a href="#通过kubectl命令创建ConfigMap" class="headerlink" title="通过kubectl命令创建ConfigMap"></a>通过kubectl命令创建ConfigMap</h3><p><strong>创建一个名称为cmd-config的ConfigMap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap cmd-config --from-literal&#x3D;host&#x3D;www.unixhot.com</span><br><span class="line">configmap&#x2F;cmd-config created</span><br></pre></td></tr></table></figure><p><strong>查看ConfigMap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap</span><br><span class="line">NAME         DATA   AGE</span><br><span class="line">cmd-config   1      63s</span><br></pre></td></tr></table></figure><p><strong>查看ConfigMap内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe configmap cmd-config</span><br><span class="line">Name:         cmd-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">host:</span><br><span class="line">----</span><br><span class="line">www.unixhot.com</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>ConfigMap中包含多个键值对</strong> 可以多次使用–from-literal为一个ConfigMap创建多个键值对，中间用空格分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap mcmd-config --from-literal&#x3D;host&#x3D;www.unixhot.com --from-literal&#x3D;port&#x3D;443 --from-literal&#x3D;ssl&#x3D;on</span><br><span class="line">configmap&#x2F;mcmd-config created</span><br></pre></td></tr></table></figure><h3 id="通过YAML文件创建ConfigMap"><a href="#通过YAML文件创建ConfigMap" class="headerlink" title="通过YAML文件创建ConfigMap"></a>通过YAML文件创建ConfigMap</h3><p>查看已创建的ConfigMap生成的YAML文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap mcmd-config -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  host: www.unixhot.com</span><br><span class="line">  port: &quot;443&quot;</span><br><span class="line">  ssl: &quot;on&quot;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2019-11-05T01:45:13Z&quot;</span><br><span class="line">  name: mcmd-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;5394993&quot;</span><br><span class="line">  selfLink: &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;default&#x2F;configmaps&#x2F;mcmd-config</span><br><span class="line">  uid: 02012d69-e324-4e9d-ba04-7132e9f6ecd8</span><br></pre></td></tr></table></figure><p>只需要将metadata中无需指定的字段去掉即可生成一个YAML文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap mcmd-config -o yaml &gt; mcmd-config-v2.yaml</span><br><span class="line">[root@k8s-master1 ~]# vim mcmd-config-v2.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  host: www.unixhot.com</span><br><span class="line">  port: &quot;443&quot;</span><br><span class="line">  ssl: &quot;on&quot;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: mcmd-config-v2</span><br><span class="line">  namespace: default</span><br></pre></td></tr></table></figure><p>注意需要修改metadata.name,修改完毕后直接创建即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create -f mcmd-config-v2.yaml </span><br><span class="line">configmap&#x2F;mcmd-config-v2 created</span><br><span class="line">[root@k8s-master1 ~]# kubectl get configmap</span><br><span class="line">NAME             DATA   AGE</span><br><span class="line">cmd-config       1      24m</span><br><span class="line">mcmd-config      3      16m</span><br><span class="line">mcmd-config-v2   3      9s</span><br></pre></td></tr></table></figure><h3 id="通过文件创建ConfigMap"><a href="#通过文件创建ConfigMap" class="headerlink" title="通过文件创建ConfigMap"></a>通过文件创建ConfigMap</h3><p>ConfigMap除了可以存储单个或者多个键值对之外，可以存储完整的配置文件，将单个配置文件直接转换为ConfigMap在生产中十分常用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap file-config --from-file&#x3D;&#x2F;etc&#x2F;hosts</span><br><span class="line">configmap&#x2F;file-config created</span><br></pre></td></tr></table></figure><p>可以看到ConfigMap直接存储了文件的内容，Key名称为文件名hosts，也可以手动指定Key的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe configmap file-config</span><br><span class="line">Name:         file-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">hosts:</span><br><span class="line">----</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.99.27 k8s-master1 k8s-master1.dianjoy.com </span><br><span class="line">192.168.99.28 k8s-master2 k8s-master2.dianjoy.com</span><br><span class="line">192.168.99.29 k8s-master3 k8s-master3.dianjoy.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>将Key手动指定为host-hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap file-config-v2 --from-file&#x3D;host-hosts&#x3D;&#x2F;etc&#x2F;hosts</span><br><span class="line">configmap&#x2F;file-config-v2 created</span><br><span class="line">[root@k8s-master1 ~]# kubectl describe configmap file-config-v2</span><br><span class="line">Name:         file-config-v2</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">host-hosts:</span><br><span class="line">----</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.99.27 k8s-master1 k8s-master1.dianjoy.com </span><br><span class="line">192.168.99.28 k8s-master2 k8s-master2.dianjoy.com</span><br><span class="line">192.168.99.29 k8s-master3 k8s-master3.dianjoy.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="从目录创建ConfigMap"><a href="#从目录创建ConfigMap" class="headerlink" title="从目录创建ConfigMap"></a>从目录创建ConfigMap</h3><p>ConfigMap还支持通过目录创建，kubectl会为目录中的每个文件单独创建条目，需要注意的是如果目录下面包含子目录，会忽略这些子目录和子目录里面的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap dir-config --from-file&#x3D;&#x2F;etc&#x2F;kubernetes</span><br><span class="line">configmap&#x2F;dir-config created</span><br></pre></td></tr></table></figure><h3 id="混合选项创建ConfigMap"><a href="#混合选项创建ConfigMap" class="headerlink" title="混合选项创建ConfigMap"></a>混合选项创建ConfigMap</h3><p>同时使用命令行、文件、目录创建ConfigMap也是支持的，只需要使用不同的选项即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap mycp --from-literal&#x3D;env&#x3D;test \</span><br><span class="line"> --from-file&#x3D;&#x2F;etc&#x2F;hosts \</span><br><span class="line"> --from-file&#x3D;myhosts&#x3D;&#x2F;etc&#x2F;hosts \</span><br><span class="line"> --from-file&#x3D;&#x2F;etc&#x2F;kubernetes</span><br><span class="line">configmap&#x2F;mycp created</span><br></pre></td></tr></table></figure><p>ConfigMap的内容可以通过环境变量的形成传递给容器，也可通过和Volume的形式挂载到容器中。</p><h3 id="通过环境变量给容器传递ConfigMap"><a href="#通过环境变量给容器传递ConfigMap" class="headerlink" title="通过环境变量给容器传递ConfigMap"></a>通过环境变量给容器传递ConfigMap</h3><p>可以将ConfigMap中的键值对数据通过环境变量的形式传递到容器中，这样在配置容器的时候有一些数据可以使用环境变量，然后使用ConfigMap进行填充，这样就可以实现配置和Pod的分离。</p><h2 id="15-2-使用Secret管理敏感数据"><a href="#15-2-使用Secret管理敏感数据" class="headerlink" title="15.2 使用Secret管理敏感数据"></a>15.2 使用Secret管理敏感数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在应用启动过程中经常会有一些敏感信息需要存储，例如用户名和密码等，如果直接明文的方式保存会有安全风险。在Kubernetes中Secret这个资源对象类型用来保存敏感信息，例如密码、密钥、访问令牌、SSH Key等你认为需要保密的敏感信息。相对于将这些内容保存到容器镜像或者Pod的定义文件中，更加的灵活和安全。</span><br></pre></td></tr></table></figure><h3 id="配置Pod使用Harbor镜像"><a href="#配置Pod使用Harbor镜像" class="headerlink" title="配置Pod使用Harbor镜像"></a>配置Pod使用Harbor镜像</h3><p>1．docker login得到 docker密码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker login 192.168.56.11</span><br></pre></td></tr></table></figure><p>2.对密码文件进行加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat &#x2F;root&#x2F;.docker&#x2F;config.json |base64</span><br></pre></td></tr></table></figure><p>3.创建harbor使用的Secret YAML文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim harbor-secret.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: harbor-secret</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: &#39;ewoJImF1dGhzIjogewoJCSJyZWcuZ3JlYXRvcHMubmV0IjogewoJCQkiYXV0aCI6ICJZV1J0YVc0Nk1YRmhlbmh6ZHpJPSIKCQl9Cgl9Cn0&#x3D;&#39;</span><br><span class="line">type: kubernetes.io&#x2F;dockerconfigjson</span><br></pre></td></tr></table></figure><p>4.创建Secret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins k8s-deploy]# kubectl create -f reg-harbor.yaml </span><br><span class="line">secret &quot;reg-harbor&quot; created</span><br></pre></td></tr></table></figure><p>5.创建pod并挂载资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: sectest</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: sectest</span><br><span class="line">    image: 123.207.154.16&#x2F;base&#x2F;redis:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: harbor-secret</span><br></pre></td></tr></table></figure><h1 id="使用Helm管理Kubernetes应用"><a href="#使用Helm管理Kubernetes应用" class="headerlink" title="使用Helm管理Kubernetes应用"></a>使用Helm管理Kubernetes应用</h1><p>通过前面的学习，掌握了将应用迁移至Kubernetes的步骤和技巧，过程比较艰辛。例如我们创建一个应用，涉及到Deployment、Service、Ingress、PV、PVC，如何有效的管理这些资源呢，Kubernetes给出了一个最佳实践就是Helm。 Helm是一个kubernetes应用的包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。 Helm chart是用来封装kubernetes原生应用程序的yaml文件，可以在你部署应用的时候自定义应用程序的一些metadata，便与应用程序的分发。</p><p>Helm和charts的主要作用：</p><ul><li>应用程序封装</li><li>版本管理</li><li>依赖检查</li><li>便于应用程序分发</li></ul><h2 id="Helm部署"><a href="#Helm部署" class="headerlink" title="Helm部署"></a>Helm部署</h2><h3 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h3><p>1.部署Helm客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">[root@linux-node1 src]# wget https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v3.0.2-linux-amd64.tar.gz</span><br><span class="line">[root@linux-node1 src]# tar zxf helm-v3.0.2-linux-amd64.tar.gz</span><br><span class="line">[root@linux-node1 src]# mv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>2.验证安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm version</span><br><span class="line">version.BuildInfo&#123;Version:&quot;v3.0.2&quot;, GitCommit:&quot;19e47ee3283ae98139d98460de796c1be1e3975f&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.13.5&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Helm部署第一个应用"><a href="#使用Helm部署第一个应用" class="headerlink" title="使用Helm部署第一个应用"></a>使用Helm部署第一个应用</h3><p>4.搜索Helm应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm search jenkins</span><br><span class="line">NAME              CHART VERSION    APP VERSION    DESCRIPTION                                       </span><br><span class="line">stable&#x2F;jenkins    0.13.5           2.73           Open source continuous integration server. It s...</span><br></pre></td></tr></table></figure><p>5.查看仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm repo list</span><br><span class="line">NAME      URL                                                   </span><br><span class="line">stable    https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts</span><br><span class="line">local     http:&#x2F;&#x2F;127.0.0.1:8879&#x2F;charts</span><br></pre></td></tr></table></figure><p>6.安装第一个应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm install stable&#x2F;jenkins</span><br><span class="line">NAME:   viable-seal</span><br><span class="line">LAST DEPLOYED: Thu Jul 26 19:21:07 2018</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;ConfigMap</span><br><span class="line">NAME                       DATA  AGE</span><br><span class="line">viable-seal-jenkins        3     1s</span><br><span class="line">viable-seal-jenkins-tests  1     1s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;PersistentVolumeClaim</span><br><span class="line">NAME                 STATUS   VOLUME  CAPACITY  ACCESS MODES  STORAGECLASS  AGE</span><br><span class="line">viable-seal-jenkins  Pending  1s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Service</span><br><span class="line">NAME                       TYPE          CLUSTER-IP   EXTERNAL-IP  PORT(S)         AGE</span><br><span class="line">viable-seal-jenkins-agent  ClusterIP     10.1.154.54  &lt;none&gt;       50000&#x2F;TCP       1s</span><br><span class="line">viable-seal-jenkins        LoadBalancer  10.1.63.24   &lt;pending&gt;    8080:20031&#x2F;TCP  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1beta1&#x2F;Deployment</span><br><span class="line">NAME                 DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">viable-seal-jenkins  1        1        1           0          0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Pod(related)</span><br><span class="line">NAME                                  READY  STATUS   RESTARTS  AGE</span><br><span class="line">viable-seal-jenkins-7f5c7bd8d4-gc5hv  0&#x2F;1    Pending  0         0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Secret</span><br><span class="line">NAME                 TYPE    DATA  AGE</span><br><span class="line">viable-seal-jenkins  Opaque  2     1s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">1. Get your &#39;admin&#39; user password by running:</span><br><span class="line">  printf $(kubectl get secret --namespace default viable-seal-jenkins -o jsonpath&#x3D;&quot;&#123;.data.jenkins-admin-password&#125;&quot; | base64 --decode);echo</span><br><span class="line">2. Get the Jenkins URL to visit by running these commands in the same shell:</span><br><span class="line">  NOTE: It may take a few minutes for the LoadBalancer IP to be available.</span><br><span class="line">        You can watch the status of by running &#39;kubectl get svc --namespace default -w viable-seal-jenkins&#39;</span><br><span class="line">  export SERVICE_IP&#x3D;$(kubectl get svc --namespace default viable-seal-jenkins --template &quot;&#123;&#123; range (index .status.loadBalancer.ingress 0) &#125;&#125;&#123;&#123; . &#125;&#125;&#123;&#123; end &#125;&#125;&quot;)</span><br><span class="line">  echo http:&#x2F;&#x2F;$SERVICE_IP:8080&#x2F;login</span><br><span class="line"></span><br><span class="line">3. Login with the password from step 1 and the username: admin</span><br><span class="line"></span><br><span class="line">For more information on running Jenkins on Kubernetes, visit:</span><br><span class="line">https:&#x2F;&#x2F;cloud.google.com&#x2F;solutions&#x2F;jenkins-on-container-engine</span><br></pre></td></tr></table></figure><h1 id="15-2-深入理解Helm"><a href="#15-2-深入理解Helm" class="headerlink" title="15.2 深入理解Helm"></a>15.2 深入理解Helm</h1><h3 id="Helm组件"><a href="#Helm组件" class="headerlink" title="Helm组件"></a>Helm组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# tree ~&#x2F;.helm&#x2F;</span><br><span class="line">&#x2F;root&#x2F;.helm&#x2F;</span><br><span class="line">├── cache</span><br><span class="line">│   └── archive</span><br><span class="line">│       └── jenkins-0.13.5.tgz</span><br><span class="line">├── plugins</span><br><span class="line">├── repository</span><br><span class="line">│   ├── cache</span><br><span class="line">│   │   ├── local-index.yaml -&gt; &#x2F;root&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;index.yaml</span><br><span class="line">│   │   └── stable-index.yaml</span><br><span class="line">│   ├── local</span><br><span class="line">│   │   └── index.yaml</span><br><span class="line">│   └── repositories.yaml</span><br><span class="line">└── starters</span><br><span class="line"></span><br><span class="line">7 directories, 5 files</span><br></pre></td></tr></table></figure><p>默认缓存的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd .helm&#x2F;cache&#x2F;archive&#x2F;</span><br><span class="line">[root@linux-node1 archive]# ls -l</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root 12650 Jul 26 19:21 jenkins-0.13.5.tgz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 archive]# tar zxf jenkins-0.13.5.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@linux-node1 archive]# mv jenkins ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# cd ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">[root@linux-node1 jenkins]# tree</span><br><span class="line">.</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── OWNERS</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── config.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── home-pvc.yaml</span><br><span class="line">│   ├── jenkins-agent-svc.yaml</span><br><span class="line">│   ├── jenkins-master-deployment.yaml</span><br><span class="line">│   ├── jenkins-master-ingress.yaml</span><br><span class="line">│   ├── jenkins-master-networkpolicy.yaml</span><br><span class="line">│   ├── jenkins-master-svc.yaml</span><br><span class="line">│   ├── jenkins-test.yaml</span><br><span class="line">│   ├── jobs.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── rbac.yaml</span><br><span class="line">│   ├── secret.yaml</span><br><span class="line">│   ├── service-account.yaml</span><br><span class="line">│   └── test-config.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line"></span><br><span class="line">1 directory, 19 files</span><br></pre></td></tr></table></figure><h3 id="自定义Jenkins的Chart"><a href="#自定义Jenkins的Chart" class="headerlink" title="自定义Jenkins的Chart"></a>自定义Jenkins的Chart</h3><p>修改为NodePort</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 jenkins]# vim values.yaml</span><br><span class="line">ServiceType: NodePort</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm lint ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">&#x3D;&#x3D;&gt; Linting &#x2F;root&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">Lint OK</span><br><span class="line"></span><br><span class="line">1 chart(s) linted, no failures</span><br></pre></td></tr></table></figure><p>查看有哪些应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm list</span><br><span class="line">NAME           REVISION    UPDATED                     STATUS      CHART          NAMESPACE</span><br><span class="line">viable-seal    1           Thu Jul 26 19:21:07 2018    DEPLOYED    jenkins-0.13.5 default</span><br><span class="line">[root@linux-node1 ~]# helm delete --purge viable-seal</span><br><span class="line">release &quot;viable-seal&quot; deleted</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# helm install ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F; --name devops-jenkins </span><br><span class="line">NAME:   devops-jenkins</span><br><span class="line">LAST DEPLOYED: Thu Jul 26 19:36:10 2018</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Secret</span><br><span class="line">NAME            TYPE    DATA  AGE</span><br><span class="line">devops-jenkins  Opaque  2     0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;ConfigMap</span><br><span class="line">NAME                  DATA  AGE</span><br><span class="line">devops-jenkins        3     0s</span><br><span class="line">devops-jenkins-tests  1     0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;PersistentVolumeClaim</span><br><span class="line">NAME            STATUS   VOLUME  CAPACITY  ACCESS MODES  STORAGECLASS  AGE</span><br><span class="line">devops-jenkins  Pending  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Service</span><br><span class="line">NAME                  TYPE       CLUSTER-IP   EXTERNAL-IP  PORT(S)         AGE</span><br><span class="line">devops-jenkins-agent  ClusterIP  10.1.74.175  &lt;none&gt;       50000&#x2F;TCP       0s</span><br><span class="line">devops-jenkins        NodePort   10.1.3.112   &lt;none&gt;       8080:23558&#x2F;TCP  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1beta1&#x2F;Deployment</span><br><span class="line">NAME            DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">devops-jenkins  1        1        1           0          0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Pod(related)</span><br><span class="line">NAME                            READY  STATUS   RESTARTS  AGE</span><br><span class="line">devops-jenkins-64d54b79c-pwjfb  0&#x2F;1    Pending  0         0s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">1. Get your &#39;admin&#39; user password by running:</span><br><span class="line">  printf $(kubectl get secret --namespace default devops-jenkins -o jsonpath&#x3D;&quot;&#123;.data.jenkins-admin-password&#125;&quot; | base64 --decode);echo</span><br><span class="line">2. Get the Jenkins URL to visit by running these commands in the same shell:</span><br><span class="line">  export NODE_PORT&#x3D;$(kubectl get --namespace default -o jsonpath&#x3D;&quot;&#123;.spec.ports[0].nodePort&#125;&quot; services devops-jenkins)</span><br><span class="line">  export NODE_IP&#x3D;$(kubectl get nodes --namespace default -o jsonpath&#x3D;&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;)</span><br><span class="line">  echo http:&#x2F;&#x2F;$NODE_IP:$NODE_PORT&#x2F;login</span><br><span class="line"></span><br><span class="line">3. Login with the password from step 1 and the username: admin</span><br><span class="line"></span><br><span class="line">For more information on running Jenkins on Kubernetes, visit:</span><br><span class="line">https:&#x2F;&#x2F;cloud.google.com&#x2F;solutions&#x2F;jenkins-on-container-engine</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm status devops-jenkins</span><br></pre></td></tr></table></figure><h2 id="创建自己的Chart"><a href="#创建自己的Chart" class="headerlink" title="创建自己的Chart"></a>创建自己的Chart</h2><h3 id="创建自定义Nginx的Chart"><a href="#创建自定义Nginx的Chart" class="headerlink" title="创建自定义Nginx的Chart"></a>创建自定义Nginx的Chart</h3><p>1.创建自定义Chart Nginx的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm create helm-nginx</span><br><span class="line">Creating helm-nginx</span><br><span class="line"> [root@linux-node1 ~]# tree helm-nginx&#x2F;</span><br><span class="line">opencmdb&#x2F;</span><br><span class="line">├── charts       #依赖的chart</span><br><span class="line">├── Chart.yaml   #本chart的信息</span><br><span class="line">├── templates    #模板目录</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml   #模板赋值</span><br></pre></td></tr></table></figure><p>2.编辑Chart配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd helm-nginx&#x2F;</span><br><span class="line">[root@linux-node1 helm-nginx]# vim values.yaml</span><br></pre></td></tr></table></figure><p>3.验证Chart配置，最后面的点表示当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 helm-nginx]# helm install --dry-run --debug --name helm-nginx .</span><br></pre></td></tr></table></figure><p>4.安装自定义Chart，最后面的点表示当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 helm-nginx]# helm install --name helm-nginx .</span><br></pre></td></tr></table></figure><h3 id="查看Helm实例"><a href="#查看Helm实例" class="headerlink" title="查看Helm实例"></a>查看Helm实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm list</span><br><span class="line">NAME          REVISION    UPDATED                     STATUS      CHART                 NAMESPACE</span><br><span class="line">helm-nginx    1           Sun Sep 16 19:32:19 2018    DEPLOYED    helm-nginx-0.1.0      default  </span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">helm-nginx-6975f8dbcd-htvtd   1&#x2F;1       Running   0          51s</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get ingress</span><br><span class="line">NAME         HOSTS                ADDRESS   PORTS     AGE</span><br><span class="line">helm-nginx   www.helm-nginx.com             80        1m</span><br></pre></td></tr></table></figure><h1 id="17-应用的日志采集与分析"><a href="#17-应用的日志采集与分析" class="headerlink" title="17 应用的日志采集与分析"></a>17 应用的日志采集与分析</h1><h2 id="Prometheus快速入门"><a href="#Prometheus快速入门" class="headerlink" title="Prometheus快速入门"></a>Prometheus快速入门</h2><h3 id="Prometheus架构介绍"><a href="#Prometheus架构介绍" class="headerlink" title="Prometheus架构介绍"></a>Prometheus架构介绍</h3><p>在学习Prometheus之前我们需要清晰的掌握其架构，Prometheus是由多个组件组成的的监控系统，主要有：Prometheus Server、Alertmanager、Pushgateway组成，这三个组件均为独立的应用服务，独立部署和运行，其中Prometheus Server中内置了Prometheus web UI。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/2ada1ece66fcc81d704c2ba46f9dd7d3.png" alt="architecture"></p><p><strong>Prometheus Server：</strong></p><p>Promethedus Server是核心组件，负责数据的获取、存储、查询。Prometheus通过Pull的方式定期的从Jobs/Exporters中获取数据，并保存在内置的TSDB中；内置的Prometheus web UI可以让用户通过PromQL的方式进行数据的检索。</p><p><strong>Exporters：</strong></p><p>Exporters也是一个独立的组件，有官方提供的Exporters也有社区贡献的Exportes，它将监控采集的数据通过HTTP的方式暴露给Prometheus Server，Server定期获取数据。例如有一个Exporters叫做Node Exporter，它安装在受采集的主机上，为Server提供数据，有点类似于Zabbix监控系统中的Zabbix Agent。</p><p><strong>Prometheus web UI：</strong></p><p>Prometheus web UI是Server启动后内置的一个Web界面，通过该Web界面我们可以进行数据查询工作，不包含设置的相关功能。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/cc11e0cf02ff729fb905ac3648af18f7.png" alt="img"></p><p><strong>PromQL：</strong></p><p>PromQL是Prometheus内置的自定义的查询语言，提供对Prometheus Server中的TSDB这个时间序列数据库进行数据查询，支持数据聚合和一些逻辑运算，是一个相对简单的查询语言，而且PromQL也提供了一些内置函数，帮助我们进行数据处理。</p><p><strong>Alertmanager：</strong></p><p>Alertmanager是Promethedus的告警管理组件，它支持基于PromQL来创建告警规则，类似于Zabbix中的告警表达式，对获取到的数据进行计算和比较，如果满足PromQL定义的规则条件，就会产生报警。</p><p><strong>Pushgateway：</strong></p><p>Pushgateway可以理解为数据的一个中转站，例如当Prometheus Server不能直接和Exporters进行通信的场景下。</p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><p>学习Prometheus的第一步就是先部署一个实验环境，官方提供了多种方式进行Prometheus安装：</p><ul><li>源码编译安装</li><li>下载预编译好的二进制文件</li><li>使用Docker部署</li><li>使用第三方工具：Ansible、SaltStack、Puppet、Chef。</li></ul><p>为了方便学习，首先我们使用二进制方式部署，可以在这里<a href="https://prometheus.io/download/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E3%80%82">https://prometheus.io/download/下载对应的预编译的二进制文件。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# wget</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;prometheus&#x2F;releases&#x2F;download&#x2F;v2.7.1&#x2F;prometheus-2.7.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# tar zxf prometheus-2.7.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# mv prometheus-2.7.1.linux-amd64 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# ln -s &#x2F;usr&#x2F;local&#x2F;prometheus-2.7.1.linux-amd64&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;prometheus</span><br></pre></td></tr></table></figure><p><strong>Prometheus配置</strong></p><p>Prometheus的配置文件在prometheus.yml中，直接启动也会到命令的当前目录下寻找该文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 prometheus]# vim prometheus.yml</span><br><span class="line"></span><br><span class="line"># my global config</span><br><span class="line"></span><br><span class="line">global:</span><br><span class="line">scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"># scrape_timeout is set to the global default (10s).</span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">alertmanagers:</span><br><span class="line">- static_configs:</span><br><span class="line">- targets:</span><br><span class="line"># - alertmanager:9093</span><br><span class="line"># Load rules once and periodically evaluate them according to the global</span><br><span class="line">&#39;evaluation_interval&#39;.</span><br><span class="line">rule_files:</span><br><span class="line"># - &quot;first_rules.yml&quot;</span><br><span class="line"># - &quot;second_rules.yml&quot;</span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#39;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"># The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries</span><br><span class="line">scraped from this config.</span><br><span class="line">- job_name: &#39;prometheus&#39;</span><br><span class="line"># metrics_path defaults to &#39;&#x2F;metrics&#39;</span><br><span class="line"># scheme defaults to &#39;http&#39;.</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;localhost:9090&#39;]</span><br></pre></td></tr></table></figure><p><strong>启动Prometheus</strong></p><p>默认情况下Prometheus会把数据写在启动目录的./data目录下，可以通过启动参数指定目录：–storage.tsdb.path=”data/“，更多参数可以通过—help查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 prometheus]# .&#x2F;prometheus –help</span><br><span class="line"></span><br><span class="line">[root@linux-node1 prometheus]# .&#x2F;prometheus</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.799169159Z caller&#x3D;main.go:620 msg&#x3D;&quot;Starting</span><br><span class="line">TSDB ...&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.835497463Z caller&#x3D;main.go:635 msg&#x3D;&quot;TSDB</span><br><span class="line">started&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.835598421Z caller&#x3D;main.go:695 msg&#x3D;&quot;Loading</span><br><span class="line">configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.83756508Z caller&#x3D;main.go:722 msg&#x3D;&quot;Completed</span><br><span class="line">loading of configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.83760078Z caller&#x3D;main.go:589 msg&#x3D;&quot;Server is</span><br><span class="line">ready to receive web requests.&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.837641772Z caller&#x3D;web.go:416 component&#x3D;web</span><br><span class="line">msg&#x3D;&quot;Start listening for connections&quot; address&#x3D;0.0.0.0:9090</span><br></pre></td></tr></table></figure><p>默认会在前台启动，并监听9090端口，会自动创建data目录，并存放数据。注意如何服务器时间不正确会有警告提示，请保证服务器时间同步。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/266a101825cbabc2782820895e161f59.png" alt="img"></p><p><strong>放置在后台运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# groupadd prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# useradd -g prometheus -d &#x2F;var&#x2F;lib&#x2F;prometheus -s</span><br><span class="line">&#x2F;sbin&#x2F;nologin prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;prometheus.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description&#x3D;prometheus</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;prometheus</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus</span><br><span class="line">--config.file&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus.yml</span><br><span class="line">--storage.tsdb.path&#x3D;&#x2F;var&#x2F;lib&#x2F;prometheus</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start prometheus</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep 9090</span><br><span class="line"></span><br><span class="line">tcp6 0 0 :::9090 :::* LISTEN 61333&#x2F;prometheus</span><br></pre></td></tr></table></figure><h3 id="使用Node-Exporter采集主机数据"><a href="#使用Node-Exporter采集主机数据" class="headerlink" title="使用Node Exporter采集主机数据"></a>使用Node Exporter采集主机数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# wget</span><br><span class="line">&lt;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;node_exporter&#x2F;releases&#x2F;download&#x2F;v0.17.0&#x2F;node_exporter-0.17.0.linux-amd64.tar.gz&gt;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# tar zxf node_exporter-0.17.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# mv node_exporter-0.17.0.linux-amd64 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# ln -s &#x2F;usr&#x2F;local&#x2F;node_exporter-0.17.0.linux-amd64&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;node_exporter</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;node_exporter.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;node_exporter</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;prometheus</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;node_exporter&#x2F;node_exporter</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>启动Node Exporter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable node_exporter</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start node_exporter</span><br></pre></td></tr></table></figure><p>查看状态<br>[root@linux-node1 ~]# netstat -ntlp | grep 9100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp6 0 0 :::9100 :::* LISTEN 66239&#x2F;node_exporter</span><br></pre></td></tr></table></figure><p>默认情况下Node Exporter监听9100端口，通过/metrics暴露采集到的监控数据，Prometheus默认也从该地址获取数据。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/1004a69a33423c72a2989005be5a790e.png" alt="img"></p><p><strong>配置Prometheus读取Node Exporter数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus.yml</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line"># The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries</span><br><span class="line">scraped from this config.</span><br><span class="line">- job_name: &#39;prometheus&#39;</span><br><span class="line"># metrics_path defaults to &#39;&#x2F;metrics&#39;</span><br><span class="line"># scheme defaults to &#39;http&#39;.</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;localhost:9090&#39;]</span><br><span class="line">- job_name: &#39;linux-node1&#39;</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;192.168.56.11:9100&#39;]</span><br><span class="line">labels:</span><br><span class="line">instance: linux-node1</span><br></pre></td></tr></table></figure><p><strong>重启prometheus</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart prometheus</span><br></pre></td></tr></table></figure><p><strong>查看监控状态</strong></p><p>登录Prometheus的Web控制台，StatusTargets如果可以linux-node1并且状态是UP的状态即为配置成功。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/8c3da60dbf5558dc649de1fd6ce43bf0.png" alt="img"></p><h3 id="使用Prometheus-UI查看数据"><a href="#使用Prometheus-UI查看数据" class="headerlink" title="使用Prometheus UI查看数据"></a>使用Prometheus UI查看数据</h3><p>现在Prometheus会定期的从<a href="http://192.168.56.11:9100/metrics%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%AD%98%E5%82%A8%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8Prometheus">http://192.168.56.11:9100/metrics获取数据，并存储，我们可以使用Prometheus</a> UI来查看监控数据。</p><h3 id="使用Grafana进行数据可视化"><a href="#使用Grafana进行数据可视化" class="headerlink" title="使用Grafana进行数据可视化"></a>使用Grafana进行数据可视化</h3><p><strong>1.安装Grafana</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;grafana.repo</span><br><span class="line"></span><br><span class="line">[grafana]</span><br><span class="line">name&#x3D;grafana</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;packages.grafana.com&#x2F;oss&#x2F;rpm</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;packages.grafana.com&#x2F;gpg.key</span><br><span class="line">sslverify&#x3D;1</span><br><span class="line">sslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# yum install -y grafana</span><br></pre></td></tr></table></figure><p><strong>2.配置Grafana</strong></p><p>Grafana的配置文件在/etc/grafana/grafana.ini，默认情况下Grafana监听3000端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;grafana&#x2F;grafana.ini</span><br></pre></td></tr></table></figure><p><strong>3.启动Grafana</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable grafana-server</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start grafana-server</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep 3000</span><br><span class="line"></span><br><span class="line">tcp6 0 0 :::3000 :::* LISTEN 81427&#x2F;grafana-serve</span><br></pre></td></tr></table></figure><p><strong>4.访问Grafana</strong></p><p>访问<a href="http://192.168.56.11:3000/">http://192.168.56.11:3000</a>，用户名和密码默认为admin/admin，第一次登陆会要求修改密码，请使用安全密码。</p><p><strong>5.增加Prometheus数据源</strong></p><p>点击</p><p><img src="http://k8s.unixhot.com/kubernetes/media/b681a9b528d2ff21ba66666ce2452e51.png" alt="img"></p><p>，然后选择</p><p><img src="http://k8s.unixhot.com/kubernetes/media/d3e83ac4f090a51c5b5e0c341b99dda5.png" alt="img"></p><p>。</p><p>配置URL为：<a href="http://192.168.56.11:9090/">http://192.168.56.11:9090</a>，并点击Save&amp;Test。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/e35d8aaebedd7e168ebd1b29b65b30bb.png" alt="img"></p><p><strong>6.设置Dashboard</strong></p><p>数据源设置完毕后，就可以设置Dashboard图形展示，可以手动添加，也可以直接下载别人配置好保持的Json文件直接导入即可。</p><p>下载地址：<a href="https://grafana.com/dashboards/405%EF%BC%8C%E5%9C%A8%E5%8F%B3%E4%BE%A7%E6%9C%89Download">https://grafana.com/dashboards/405，在右侧有Download</a> Json按钮，下载该Json文件。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/d9ab69b29a964a12df52512a7b128b5b.png" alt="img"></p><p>点击Home下的Import Dashboard</p><p><img src="http://k8s.unixhot.com/kubernetes/media/53ffc0e739ca7b9421f9568ae4cbf117.png" alt="img"></p><p>然后直接上传刚才下载的JSON文件。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/500958891a82067b0c987d514239ffb0.png" alt="img"></p><p>导入完毕后，就可以在Grafana上查看对应节点的监控数据图表。你可以通过鼠标拖拽进行图表的自定义大小和位置的修改，效果如下：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/698a6241faa0adc1af6c09cc369b259b.png" alt="img"></p><h1 id="第七部分-Kubernetes高级进阶"><a href="#第七部分-Kubernetes高级进阶" class="headerlink" title="第七部分 Kubernetes高级进阶"></a>第七部分 Kubernetes高级进阶</h1><h1 id="Kubernetes的权限控制RBAC"><a href="#Kubernetes的权限控制RBAC" class="headerlink" title="Kubernetes的权限控制RBAC"></a>Kubernetes的权限控制RBAC</h1><p><strong>角色</strong></p><ul><li><p>Role: 角色，命名空间范围内的一个权限集合。</p></li><li><p>ClusterRole：集群角色，集群范围内的一个权限的集合，</p><p>Role和ClusterROle在Kubernetes中都被定义为集群内部的 API 资源，和我们前面学习过的 Pod、ConfigMap 这些类似，都是我们集群的资源对象，所以同样的可以使用我们前面的kubectl相关的命令来进行操作 Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：</p></li></ul><p>User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用 KeyStone或者 Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的 API 来进行管理 Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和 namespace 进行关联的，适用于集群内部运行的应用程序，需要通过 API 来完成权限认证，所以在集群内部进行权限操作，我们都需要使用到 ServiceAccount，这也是我们这节课的重点 RoleBinding 和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。</p><p><strong>创建用户凭证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openssl genrsa -out jenkins.key 2048</span><br><span class="line">[root@linux-node1 ~]# openssl req -new -key jenkins.key -out jenkins.csr -subj &quot;&#x2F;CN&#x3D;jenkins&#x2F;O&#x3D;vmware&quot;</span><br><span class="line">[root@linux-node1 ~]# openssl x509 -req -in jenkins.csr -CA &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt -CAkey &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.key -CAcreateserial -out jenkins.crt -days 365</span><br><span class="line">[root@linux-node1 ~]# kubectl config set-credentials jenkins --client-certificate&#x3D;jenkins.crt  --client-key&#x3D;jenkins.key</span><br><span class="line">[root@linux-node1 ~]# kubectl config set-context jenkins-context --cluster&#x3D;kubernetes --namespace&#x3D;jenkins --user&#x3D;jenkins  </span><br><span class="line">[root@linux-node1 ~]# kubectl get pods --context&#x3D;jenkins-context</span><br></pre></td></tr></table></figure><p><strong>创建角色</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim jenkins-role.yml</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-role</span><br><span class="line">  namespace: jenkins</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;, &quot;extensions&quot;, &quot;apps&quot;]</span><br><span class="line">  resources: [&quot;deployments&quot;, &quot;replicasets&quot;, &quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br></pre></td></tr></table></figure><p><strong>创建角色绑定</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim jenkins-role-binding.yml</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-rolebinding</span><br><span class="line">  namespace: jenkins</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: jenkins</span><br><span class="line">  apiGroup: &quot;&quot;</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: jenkins-role</span><br><span class="line">  apiGroup: &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="22-深入理解Pod调度"><a href="#22-深入理解Pod调度" class="headerlink" title="22 深入理解Pod调度"></a>22 深入理解Pod调度</h1><h1 id="深入理解Pod调度"><a href="#深入理解Pod调度" class="headerlink" title="深入理解Pod调度"></a>深入理解Pod调度</h1><p>在前面的章节我们已经知道在Kubernetes中使用kube-scheduler进行Pod调度，它的目标是将Pod绑定到对应的Node上，经过一系列的条件和算法尽可能的让每个Pod都满意。kube-scheduler是Kubernetes默认的调度器。</p><p>kube-scheduler的代码位于<a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/scheduler">GitHub</a></p><p>可以将代码克隆到本地方便查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes.git</span><br></pre></td></tr></table></figure><p>在algorithm下有调度算法，调度算法分为两个阶段：Predicates和priorities，首先对Node进行过滤看哪些Node符合调度要求，然后在符合调度要求的Node上进行优先级计算，判断调度到哪个Node最合适。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 algorithm]# pwd</span><br><span class="line">&#x2F;root&#x2F;kubernetes&#x2F;pkg&#x2F;scheduler&#x2F;algorithm</span><br><span class="line">[root@linux-node1 algorithm]# ls -l</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root 1256 Dec 17 22:52 BUILD</span><br><span class="line">-rw-r--r-- 1 root root  735 Dec 17 22:52 doc.go</span><br><span class="line">drwxr-xr-x 2 root root  276 Dec 17 22:52 predicates</span><br><span class="line">drwxr-xr-x 3 root root 4096 Dec 17 22:52 priorities</span><br><span class="line">-rw-r--r-- 1 root root 3278 Dec 17 22:52 scheduler_interface.go</span><br><span class="line">-rw-r--r-- 1 root root 3383 Dec 17 22:52 types.go</span><br></pre></td></tr></table></figure><p>官方文档详细的介绍了所有的步骤：<a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/</a></p><p><strong>设置调度器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod kube-proxy-5wbtf -n kube-system -o yaml | grep schedulerName</span><br><span class="line">  schedulerName: default-scheduler</span><br></pre></td></tr></table></figure><h2 id="Taints（污点）"><a href="#Taints（污点）" class="headerlink" title="Taints（污点）"></a>Taints（污点）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl describe node linux-node1.unixhot.com | grep Taints</span><br><span class="line">Taints:             node-role.kubernetes.io&#x2F;master:NoSchedule</span><br></pre></td></tr></table></figure><p>Taints的表现形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;&#x3D;&lt;value&gt;:&lt;effect&gt;</span><br></pre></td></tr></table></figure><p>effect的三种类型：</p><ul><li>NoSchedule: 如果Pod没有容忍该污点，不调度到该节点上。</li><li>PreferNoSchedule：尽量阻止Pod被调度到这个节点上，但是如果没有其它节点能够调度，可以调度到该节点。</li><li>NoExecute： NoScheduler和PreferNoSchedule只是在调度阶段起作用，但是NoExecute会影响正常运行的Pod，如果一个节点被打了NoExecute的污点，而运行在该节点的Pod没有容忍会直接被这个节点移除。</li></ul><p>查看Flannel为何能调度到Master节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get po -n kube-system | grep flannel</span><br><span class="line">kube-flannel-ds-amd64-f2jrk                       1&#x2F;1     Running   2          22h</span><br><span class="line">kube-flannel-ds-amd64-mh75v                       1&#x2F;1     Running   2          22h</span><br><span class="line">kube-flannel-ds-amd64-n52zm                       1&#x2F;1     Running   4          22h</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl describe pod kube-flannel-ds-amd64-f2jrk -n kube-system</span><br><span class="line">...</span><br><span class="line">Tolerations:     :NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;disk-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;memory-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;network-unavailable:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;not-ready:NoExecute</span><br><span class="line">                 node.kubernetes.io&#x2F;pid-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;unreachable:NoExecute</span><br><span class="line">                 node.kubernetes.io&#x2F;unschedulable:NoSchedule</span><br></pre></td></tr></table></figure><h3 id="自定义污点"><a href="#自定义污点" class="headerlink" title="自定义污点"></a>自定义污点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl taint node linux-node2.example.com node-ytpe&#x3D;gpu:NoSchedule       </span><br><span class="line">node&#x2F;linux-node2.example.com tainted</span><br><span class="line">[root@linux-node1 example]# cat nginx-deployment-taint.yaml    </span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-type</span><br><span class="line">        operator: Equal</span><br><span class="line">        value: gpu</span><br><span class="line">        effect: Noschedule</span><br><span class="line">[root@linux-node1 example]# kubectl get po -o wide</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE     IP          NODE                      NOMINATED NODE   READINESS GATES</span><br><span class="line">dns-test                            1&#x2F;1     Running   1          6h15m   10.2.2.23   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-2jkw9   1&#x2F;1     Running   0          13s     10.2.2.26   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-4hrbf   1&#x2F;1     Running   0          13s     10.2.2.24   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-s2r4h   1&#x2F;1     Running   0          13s     10.2.2.25   linux-node3.example</span><br></pre></td></tr></table></figure><h2 id="亲缘性调度"><a href="#亲缘性调度" class="headerlink" title="亲缘性调度"></a>亲缘性调度</h2><h1 id="23-Kubernetes-API介绍"><a href="#23-Kubernetes-API介绍" class="headerlink" title="23 Kubernetes API介绍"></a>23 Kubernetes API介绍</h1><p>查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;192.168.56.11:6443</span><br><span class="line">KubeDNS is running at https:&#x2F;&#x2F;192.168.56.11:6443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.</span><br></pre></td></tr></table></figure><p>直接访问Kubernetes API需要验证，无法直接访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# curl -k https:&#x2F;&#x2F;192.168.56.11:6443</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;forbidden: User \&quot;system:anonymous\&quot; cannot get path \&quot;&#x2F;\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过Proxy访问Kubernetes API</strong></p><p>使用kubectl proxy可以在Master本地启动一个代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure><p>可以通过127.0.0.1:8001与API Server进行交互</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# curl http:&#x2F;&#x2F;127.0.0.1:8001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;paths&quot;: [</span><br><span class="line">    &quot;&#x2F;api&quot;,</span><br><span class="line">    &quot;&#x2F;api&#x2F;v1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;admissionregistration.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;admissionregistration.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiextensions.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiextensions.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&#x2F;v1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apps&quot;,</span><br><span class="line">...（省略其它输出）</span><br></pre></td></tr></table></figure><p>可以通过修改监听地址，并关闭过滤，实现在其它地方登录和查看，这样就可以在本地浏览器访问API。切记不要再生产环境将代理地址暴露在外网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl proxy --address&#x3D;0.0.0.0 --disable-filter&#x3D;true</span><br><span class="line">W1105 16:18:45.669591   16730 proxy.go:142] Request filter disabled, your proxy is vulnerable to XSRF attacks, please be cautious</span><br><span class="line">Starting to serve on [::]:8001</span><br></pre></td></tr></table></figure><h3 id="使用Swagger-UI进行API交互"><a href="#使用Swagger-UI进行API交互" class="headerlink" title="使用Swagger UI进行API交互"></a>使用Swagger UI进行API交互</h3><p>Kubernetes支持Swagger UI访问API，需要在API Server开启，如果已经根据本书使用kubeadm部署的集群，可以通过修改Pod的YAML文件，重建Pod来开启</p><p><strong>修改API Server的Pod定义文件</strong></p><p>在- kube-apiserver下面一行增加–enable-swagger-ui=true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: kube-apiserver</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: kube-apiserver</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-apiserver</span><br><span class="line">    - --enable-swagger-ui&#x3D;true</span><br><span class="line">    - --advertise-address&#x3D;192.168.56.11</span><br><span class="line">    - --allow-privileged&#x3D;true</span><br></pre></td></tr></table></figure><p>删除Pod，kubelet会通过该YAML重建Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get pod -n kube-system | grep api</span><br><span class="line">kube-apiserver-linux-node1.unixhot.com            1&#x2F;1     Running   0          55m</span><br><span class="line">[root@k8s-master1 ~]# kubectl delete pod kube-apiserver-linux-node1.unixhot.com -n kube-system</span><br></pre></td></tr></table></figure><p>可以看到配置已经生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe pod kube-apiserver-linux-node1.unixhot.com -n kube-system </span><br><span class="line">...</span><br><span class="line">    Command:</span><br><span class="line">      kube-apiserver</span><br><span class="line">      --enable-swagger-ui&#x3D;true</span><br><span class="line">      --advertise-address&#x3D;192.168.99.27</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>部署一个Swagger UI服务查看API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl run swagger-ui --image&#x3D;swaggerapi&#x2F;swagger-ui:latest</span><br><span class="line">[root@k8s-master1 ~]# kubectl expose deployment swagger-ui --port&#x3D;8080 --type&#x3D;NodePort</span><br><span class="line">[root@k8s-master1 ~]# kubectl get service</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1      &lt;none&gt;          443&#x2F;TCP          43d</span><br><span class="line">swagger-ui   NodePort    10.1.205.94   &lt;none&gt;   8080:30410&#x2F;TCP   34s</span><br></pre></td></tr></table></figure><p>因为我们部署的Swagger UI和API Server不在一个域名下，所以会有跨域的问题，Chrome浏览器需要提前安装Allow CROS插件解决</p><hr><hr><p>摘录自赵班长——–</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker+K8s实践指南</title>
      <link href="/posts/15099/"/>
      <url>/posts/15099/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>不得不承认中国的IT行业已经进入了云计算时代，越来越多的企业开始使用弹性的云服务来支撑自己的业务。云计算是机遇也是挑战，作为运维人员需要面临云计算时代企业对运维需求的萎缩，以及对运维技术能力要求的大幅度提高的困境。</p><p>如果说云计算对运维行业的影响是第一波浪潮，那我认为容器技术的发展对本行业的影响算是第二波浪潮，目前几乎所有的企业招聘运维工程师都要求熟悉KVM、OpenStack、Docker和Kubernetes技术，各大公有云平台也都上线了容器服务Kubernetes版（AWS、Azure（全球版）阿里云、腾讯云、华为云、Ucloud、京东云、天翼云（公测阶段）等），掌握这些技术已经是大势所需。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Docker官方文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>Kubernetes官方文档：<a href="https://kubernetes.io/docs/home/">https://kubernetes.io/docs/home/</a></li><li>OpenStack官方文档：<a href="https://docs.openstack.org/">https://docs.openstack.org/</a></li><li>Prometheus官方文档：<a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a></li></ul><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>硬件设备准备</strong></p><ul><li>电脑一台，CPU支持VT，内存&gt;4G，可用磁盘空间大于80G。</li><li>安装VMware Workstation Pro虚拟机软件，用于创建虚拟机。</li><li>创建三台虚拟机，安装CentOS-7.7-x86_64系统。</li></ul><p><strong>实验环境详情</strong></p><table><thead><tr><th>主机名</th><th>IP地址（NAT）</th><th>描述</th></tr></thead><tbody><tr><td>linux-node1.linuxhot.com</td><td>eth0:192.168.56.11</td><td>1VCPU、2G内存、一块硬盘sda50G（动态）</td></tr><tr><td>linux-node2.linuxhot.com</td><td>eth0:192.168.56.12</td><td>1VCPU、2G内存、一块硬盘sda50G（动态）</td></tr><tr><td>linux-node3.linuxhot.com</td><td>eth0:192.168.56.13</td><td>1VCPU、2G内存、一块硬盘sda50G（动态）</td></tr><tr><td>备注</td><td>1.如何在安装的时候将网卡命名为eth0、eth1，请参考《附录一》。 2.其中linux-node3在学习Kubernetes中使用。</td><td></td></tr></tbody></table><p><strong>环境准备</strong></p><ul><li>安装操作系统CentOS-7.7-x86_64。</li><li>基本系统：1VCPU+2048M内存+50G（动态）硬盘。</li><li>网络选择：使用网络地址转换（NAT）。</li><li>软件包选择：Minimal Install。</li><li>关闭iptables和SELinux。</li><li>设置所有节点的主机名和IP地址，同时使用内部DNS或者/etc/hosts做好主机名解析。</li></ul><p><strong>实验小技巧</strong></p><p>[hide]</p><ul><li>建议初学者保持实验环境和本书一致，包括但不局限于IP地址，主机名，网卡名称等，可以帮你节约很多因为环境问题的排错时间。</li><li>做好虚拟机的快照，比如可以根据本书的不同章节，创建不同的快照，便于保留实验环境和在实验过程中进行环境的回滚。</li><li>请不要把关注点仅仅放在实验环节，一定要在理解的基础上完成实验，对于不明白的地方需要反复阅读，或者根据本书前言提到的途径获取技术支持。<br>[/hide]</li></ul><h1 id="附录一-实验环境准备"><a href="#附录一-实验环境准备" class="headerlink" title="附录一 实验环境准备"></a>附录一 实验环境准备</h1><p><strong>环境准备案例：</strong></p><p><strong>界面位置：</strong>文件新建虚拟机，打开新建虚拟机选项，</p><p><strong>创建虚拟机</strong>：请参考目录前实验环境章节，按要求创建虚拟机（创建步骤略）。</p><p><strong>操作系统安装：</strong></p><p>为了统一环境，保证实验的通用性，将网卡名称设置为eth*，不使用CentOS 7默认的网卡命名规则。所以需要在安装的时候，增加内核参数。</p><p>1)光标选择“Install CentOS 7”</p><p><img src="http://k8s.unixhot.com/media/c4bb194b0f60ef7a32a7a4a269b31094.png" alt="img"></p><p>2)点击Tab，打开kernel启动选项后，增加net.ifnames=0 biosdevname=0，如下图所示。</p><p><img src="http://k8s.unixhot.com/media/40432332febddc210781b55066a87252.png" alt="img"></p><p><strong>安装完毕后设置：</strong></p><p>1.设置网络。</p><p>如果你的默认NAT地址段不是192.168.56.0/24可以修改VMware Workstation的配置，点击编辑虚拟网络配置，然后进行配置。</p><p><img src="http://k8s.unixhot.com/media/b4ac2c94cc558e1150c8cc77ecd6ad13.png" alt="img"></p><p>2.设置IP地址，请配置静态IP地址。注意将UUID和MAC地址删除掉，便于进行虚拟机克隆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">PEERDNS&#x3D;no</span><br><span class="line">PEERROUTES&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">NAME&#x3D;eth0</span><br><span class="line">DEVICE&#x3D;eth0</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">IPADDR&#x3D;192.168.56.11</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.56.2</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart network</span><br></pre></td></tr></table></figure><p>3.关闭NetworkManager和防火墙开启自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl disable firewalld</span><br><span class="line">[root@linux-node1 ~]# systemctl disable NetworkManager</span><br></pre></td></tr></table></figure><p>4.设置主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;hostname</span><br><span class="line">linux-node1.unixhot.com</span><br></pre></td></tr></table></figure><p>5.设置主机名解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.56.11 linux-node1 linux-node1.unixhot.com</span><br><span class="line">192.168.56.12 linux-node2 linux-node2.unixhot.com</span><br><span class="line">192.168.56.13 linux-node3 linux-node3.unixhot.com</span><br></pre></td></tr></table></figure><p>6.设置DNS解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">nameserver 192.168.56.2</span><br></pre></td></tr></table></figure><p>7.安装EPEL仓库和常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@linux-node1 ~]# yum install -y net-tools vim lrzsz tree screen lsof tcpdump nc mtr nmap</span><br></pre></td></tr></table></figure><p>8.关闭并确认SELinux处于关闭状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line">SELINUX&#x3D;disabled #修改为disabled</span><br></pre></td></tr></table></figure><p>9.更新系统并重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum update -y &amp;&amp; reboot</span><br></pre></td></tr></table></figure><p>10.克隆虚拟机</p><p>请关闭虚拟机，并克隆当前虚拟机linux-node1到linux-node2，建议选择“创建完整克隆”，而不是“创建链接克隆”。克隆完毕后请给linux-node2设置正确的IP地址和主机名。</p><p>11.给虚拟机做快照</p><p>分别给两台虚拟机做快照。以便于随时回到一个刚初始化完毕的系统中。可以有效的减少学习过程中的环境准备时间。</p><h1 id="第一部分-Cobbler自动化安装实践"><a href="#第一部分-Cobbler自动化安装实践" class="headerlink" title="第一部分 Cobbler自动化安装实践"></a>第一部分 Cobbler自动化安装实践</h1><h1 id="1-自动化安装概述"><a href="#1-自动化安装概述" class="headerlink" title="1 自动化安装概述"></a>1 自动化安装概述</h1><p>对于运维工程师来说，服务器上架和操作系统的安装，是实施运维工作的开始。对于自动化运维来说，自动化安装是实施自动化运维的第一步。面对大量的服务器设备，我们需要掌握如何快速，并且自动的将新上架的服务器安装上对应的操作系统、或者给已经在运行的服务器重新安装系统。而且很重要的是，从第一步开始，我们就要创建自己内部的软件仓库，而这一切的工作，Cobbler都可以完成。 对于Linux来说，我们通常使用PXE+KickStart的方式进行操作系统的自动化安装。那么首先需要先了解一下KickStart。</p><h2 id="1-1-PXE-Kickstart介绍"><a href="#1-1-PXE-Kickstart介绍" class="headerlink" title="1.1 PXE+Kickstart介绍"></a>1.1 PXE+Kickstart介绍</h2><h3 id="1-1-1-KickStart工作原理"><a href="#1-1-1-KickStart工作原理" class="headerlink" title="1.1.1 KickStart工作原理"></a>1.1.1 KickStart工作原理</h3><p>KickStart是Linux的一种无人职守的安装方式。KickStart的工作原理是通过记录典型的安装过程中所需人工干预填写的各种参数，并生成一个名为 ks.cfg的文件；这样在后面安装过程中当出现要求填写参数的情况时，安装程序会首先去查找 KickStart生成的文件，当找到合适的参数时，就采用找到的参数，当没有找到合适的参数时，才需要安装者手工干预。 如果KickStart文件涵盖了安装过程中出现的所有需要填写的参数时，那么就完全不需要人工干预，安装程序会根据ks.cfg中设置的选项自动进行安装，并通过设置重启选项来重启系统，并结束安装。那么如何让服务器开机就开始自动安装操作系统呢，我们要借助开机启动选项，比如从PXE启动。</p><h3 id="1-1-2-PXE工作原理"><a href="#1-1-2-PXE工作原理" class="headerlink" title="1.1.2 PXE工作原理"></a>1.1.2 PXE工作原理</h3><p>不管是服务器还是普通的PC机都支持多种启动方式，例如从硬盘、从U盘、从网络启动。而PXE是服务器开机启动的一种方式，也可以称之为网卡启动，因为进行PXE安装的必要条件是计算机上的网卡要支持PXE，即网卡中必须要有 PXE Client，不过不用担心基本上我们常见的服务器都支持这种方式。 首先我们需要了解下PXE的工作方式：PXE （Pre-boot Execution Environment）协议使计算机可以通过网络启动。PXE协议分为 Client 和 Server 端，PXE client 在网卡的 ROM 中，当计算机引导时，BIOS 把 PXE client 调入内存执行，由 PXE client 将放置在远端的文件通过网络下载到本地运行。 运行 PXE 协议需要设置 DHCP 服务器和 TFTP 服务器。DHCP 服务器用来给 PXE Client（将要安装系统的主机）分配一个 IP 地址，由于是给 PXE Client 分配 IP 地址，所以在配置 DHCP 服务器时需要增加相应的 PXE 设置。此外，在 PXE Client 的 ROM 中，已经存在了 TFTP Client。PXE Client 通过 TFTP 协议到 TFTP Server 上下载所需的文件。</p><h3 id="1-1-3-PXE-Kickstart工作流程"><a href="#1-1-3-PXE-Kickstart工作流程" class="headerlink" title="1.1.3 PXE+Kickstart工作流程"></a>1.1.3 PXE+Kickstart工作流程</h3><p>下图显示了PXE+Kickstart的工作流程</p><p>1.PXE Client发送DHCP请求到DHCP Server 2.DHCP Server提供相关信息包括IP地址和TFTP服务器的位置，以及要下载的文件。 3.PXE Client请求TFTP Server。 4.TFTP Server响应请求并将文件发送给PXE Client 5.PXE Client去下载对应的Kickstart文件，并根据Kickstart文件中的内容开始进行安装 6.安装操作系统。</p><h2 id="1-2-制作本地Yum仓库"><a href="#1-2-制作本地Yum仓库" class="headerlink" title="1.2 制作本地Yum仓库"></a>1.2 制作本地Yum仓库</h2><p>下面我们就要准备先手动来通过PXE+Kickstart来实现自动化的系统安装，那么首先需要有一个YUM仓库，而且是本地的。下面我就拿CentOS 7为例：</p><h3 id="1-2-1-准备安装源"><a href="#1-2-1-准备安装源" class="headerlink" title="1.2.1 准备安装源"></a>1.2.1 准备安装源</h3><ol><li><p>安装需要软件包 我们使用HTTP的方式作为YUM仓库的安装源，需要首先安装Apache，其中createrepo 是一个对rpm 文件进行索引建立的工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y httpd createrepo</span><br><span class="line">[root@linux-node1 ~]# systemctl start httpd.service</span><br></pre></td></tr></table></figure></li><li><p>下载iso镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;7.4.1708&#x2F;isos&#x2F;x86_64&#x2F;CentOS-7-x86_64-DVD-1708.iso</span><br></pre></td></tr></table></figure></li><li><p>创建yum仓库</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mount -o loop &#x2F;usr&#x2F;local&#x2F;src&#x2F;CentOS-7-x86_64-DVD-1511.iso &#x2F;mnt&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>如果你使用VMWare Workstation创建虚拟机的时候设置了ISO镜像，可以不用下载，直接挂载使用。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mount &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;</span><br><span class="line">mount: &#x2F;dev&#x2F;sr0 is write-protected, mounting read-only</span><br></pre></td></tr></table></figure><p>在默认Apache的家目录下创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;CentOS-7.4-x86_64</span><br><span class="line">[root@linux-node1 ~]# cp -a &#x2F;mnt&#x2F;* &#x2F;var&#x2F;www&#x2F;html&#x2F;CentOS-7.4-x86_64&#x2F;</span><br></pre></td></tr></table></figure><ol><li><p>准备Kickstart安装文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;var&#x2F;www&#x2F;html&#x2F;CentOS-7-x86_64&#x2F;</span><br><span class="line">[root@linux-node1 CentOS-7-x86_64]# vim CentOS-7-x86_64.cfg</span><br><span class="line">#Kickstart Configurator by Jason Zhao</span><br><span class="line">#platform&#x3D;x86, AMD64, or Intel EM64T</span><br><span class="line">#System  language</span><br><span class="line">lang en_US</span><br><span class="line">#System keyboard</span><br><span class="line">keyboard us</span><br><span class="line">#Sytem timezone</span><br><span class="line">timezone Asia&#x2F;Shanghai</span><br><span class="line">#Root password</span><br><span class="line">rootpw --iscrypted $1$example$I.i3m26O7QYNja8p5Cj9.0</span><br><span class="line">#Use text mode install</span><br><span class="line">text</span><br><span class="line">#Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line">#Use NFS installation Media</span><br><span class="line">url --url&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;CentOS-7-x86_64</span><br><span class="line">#System bootloader configuration</span><br><span class="line">bootloader --location&#x3D;mbr --driveorder&#x3D;sda --append&#x3D;&quot;net.ifnames&#x3D;0 biosdevname&#x3D;0&quot;</span><br><span class="line">#Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line">#Partition clearing information</span><br><span class="line">clearpart --all --initlabel </span><br><span class="line">#Disk partitioning information</span><br><span class="line">part &#x2F;boot --fstype&#x3D;xfs --size&#x3D;1024</span><br><span class="line">part swap --asprimary --fstype&#x3D;&quot;swap&quot; --size&#x3D;1024</span><br><span class="line">part &#x2F; --fstype&#x3D;xfs --size&#x3D;1 --grow</span><br><span class="line">#System authorization infomation</span><br><span class="line">auth  --useshadow  --enablemd5 </span><br><span class="line">#Network information</span><br><span class="line">network --bootproto&#x3D;dhcp --device&#x3D;eth0 --onboot&#x3D;on --activate</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line">#Firewall configuration</span><br><span class="line">firewall --disabled </span><br><span class="line">#SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line">#Service configuration</span><br><span class="line">services --disabled&#x3D;postfix</span><br><span class="line">#Do not configure XWindows</span><br><span class="line">skipx</span><br><span class="line">#Package install information</span><br><span class="line">%packages</span><br><span class="line">@ base</span><br><span class="line">@ core</span><br><span class="line">bash-completion</span><br><span class="line">sysstat</span><br><span class="line">ntp</span><br><span class="line">lrzsz</span><br><span class="line">openssl-devel</span><br><span class="line">zlib-devel</span><br><span class="line">OpenIPMI-tools</span><br><span class="line">screen</span><br><span class="line">%end</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-2-配置TFTP-Server"><a href="#1-2-2-配置TFTP-Server" class="headerlink" title="1.2.2 配置TFTP-Server"></a>1.2.2 配置TFTP-Server</h3><p>我们已经了解了PXE+Kickstart的原理，那么我们需要准备相关dhcp、tftp-server等。</p><ol><li><p>安装配置tftp-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y tftp-server xinetd</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;xinetd.d&#x2F;tftp</span><br><span class="line">disable                 &#x3D; no（修改为no）</span><br></pre></td></tr></table></figure></li><li><p>准备安装需要的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y syslinux</span><br><span class="line">[root@linux-node1 ~]# mkdir &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux</span><br><span class="line">[root@linux-node1 ~]# cp &#x2F;usr&#x2F;share&#x2F;syslinux&#x2F;pxelinux.0 &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux</span><br><span class="line">[root@linux-node1 ~]# cp &#x2F;mnt&#x2F;isolinux&#x2F;* &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux</span><br><span class="line">[root@linux-node1 ~]# cp &#x2F;mnt&#x2F;images&#x2F;pxeboot&#x2F;&#123;vmlinuz,initrd.img&#125; &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux&#x2F;</span><br></pre></td></tr></table></figure></li></ol><p>在tftpboot下创建pxelinux.cfg目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux&#x2F;pxelinux.cfg </span><br><span class="line">[root@linux-node1 ~]# cp &#x2F;mnt&#x2F;isolinux&#x2F;isolinux.cfg &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux&#x2F;pxelinux.cfg&#x2F;default</span><br></pre></td></tr></table></figure><ol><li>修改default配置，指定网站安装的kickstart文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default</span><br><span class="line">…省略…</span><br><span class="line">#在label linux上面增加自动化安装的配置</span><br><span class="line">label ks</span><br><span class="line">  menu label ^Auto Install CentOS 7</span><br><span class="line">  kernel vmlinuz</span><br><span class="line">  append initrd&#x3D;initrd.img ip&#x3D;dhcp inst.repo&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;CentOS-7-x86_64&#x2F; inst.ks&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;CentOS-7-x86_64&#x2F;CentOS-7-x86_64.cfg net.ifnames&#x3D;0 biosdevname&#x3D;0</span><br></pre></td></tr></table></figure><ol><li><p>配置DHCP Server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y dhcp</span><br><span class="line">[root@linux-node1 ~]# &#x2F;bin&#x2F;cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4.2.5&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</span><br><span class="line">option domain-name &quot;devopsedu.com&quot;;</span><br><span class="line">option domain-name-servers 192.168.56.2;</span><br><span class="line">#请删除其他的subnet配置</span><br><span class="line">subnet 192.168.56.0 netmask 255.255.255.0 &#123;</span><br><span class="line">     range dynamic-bootp 192.168.56.100 192.168.56.200;</span><br><span class="line">     option subnet-mask              255.255.255.0;  #设置子网掩码</span><br><span class="line">option routers                  192.168.56.2;    #设置网关</span><br><span class="line">     next-server                     192.168.56.11;   #设置TFTP-Server地址</span><br><span class="line">     filename                        &quot;pxelinux&#x2F;pxelinux.0&quot;;   #设置TFTP需要下载的文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动httpd、tftp和dhcpd服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl start xinetd.service dhcpd.service httpd.service</span><br></pre></td></tr></table></figure></li><li><p>检查服务是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# netstat -ntlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      871&#x2F;sshd            </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1321&#x2F;httpd          </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      871&#x2F;sshd</span><br></pre></td></tr></table></figure></li></ol><p>查看dhcpd和tftpd是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# netstat -nulp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">udp        0      0 0.0.0.0:67              0.0.0.0:*                           1487&#x2F;dhcpd          </span><br><span class="line">udp        0      0 0.0.0.0:69              0.0.0.0:*                           1486&#x2F;xinetd</span><br></pre></td></tr></table></figure><h3 id="1-2-4-自动化安装和流程总结"><a href="#1-2-4-自动化安装和流程总结" class="headerlink" title="1.2.4 自动化安装和流程总结"></a>1.2.4 自动化安装和流程总结</h3><p>现在就可以新创建一台虚拟机来进行测试了，记着选择网卡启动。DHCP后，就可以看到安装页面。我们刚才添加的Auto Install CentOS 也可以看到了。</p><p>下面我们可以来总结下PXE+KickStart的安装流程了： 需要经历以下的过程： 1.网卡上的PXE芯片有512字节，存放了DHCP和TFTP的客户端。 2.启动计算机选择网卡启动。 3.PXE上的DHCP客户端会向DHCP服务器，申请IP地址 4.DHCP服务器分配给它IP地址的同时通过以下字段，告诉pxe，TFTP的地址和它要下载的文件 next-server 192.168.56.11； filename “pxelinux.0”； 5.pxelinux.0告诉PXE要下载的配置文件是pxelinux.cfg目录下面的default 6.pxe下载并依据配置文件的内容下载启动必须的文件，并通过ks.cfg配置内容开始系统安装。</p><p><strong>我们都干了什么</strong> 所以我们看到设置一个网络环境可能涉及到许多步骤，才能为开始安装做好准备。您必须：</p><ul><li><p>配置服务，比如 DHCP、TFTP、DNS、HTTP、FTP 和 NFS</p></li><li><p>在 DHCP 和 TFTP 配置文件中填入各个客户端机器的信息</p></li><li><p>创建自动部署文件（比如 kickstart 和 autoinst）</p></li><li><p>将安装媒介解压缩到 HTTP/FTP/NFS 存储库中。 这个过程并不简单，甚至可以说复杂，我们要自己管理和创建不同的操作系统版本、手动管理DHCP等，那么如何能让我们有一个功能强大，更实用的自动化装机平台，开源社区给了我们答案就是Cobbler。 官方网站：<a href="http://cobbler.github.io/">http://cobbler.github.io/</a></p></li></ul><h1 id="2-Cobbler快速入门"><a href="#2-Cobbler快速入门" class="headerlink" title="2 Cobbler快速入门"></a>2 Cobbler快速入门</h1><p>使用 Cobbler，您无需进行人工干预即可安装机器。Cobbler设置一个PXE引导环境，并控制与安装相关的所有软件和环境准备，比如网络引导服务（DHCP 和 TFTP）与存储库镜像。当希望安装一台新机器时，Cobbler 可以：</p><ul><li>使用一个以前定义的模板来配置 DHCP 服务（如果启用了管理 DHCP）</li><li>将一个存储库（yum 或 rsync）建立镜像或解压缩一个媒介，以注册一个新操作系统</li><li>在 DHCP 配置文件中为需要安装的机器创建一个条目，并使用您指定的参数（IP 和 MAC 地址）</li><li>在 TFTFP 服务目录下创建适当的 PXE 文件</li><li>重新启动 DHCP 服务以反映更改</li><li>重新启动机器以开始安装（如果电源管理已启用）</li></ul><h2 id="2-1-Cobbler部署"><a href="#2-1-Cobbler部署" class="headerlink" title="2.1 Cobbler部署"></a>2.1 Cobbler部署</h2><h3 id="2-1-1-Cobbler功能"><a href="#2-1-1-Cobbler功能" class="headerlink" title="2.1.1 Cobbler功能"></a>2.1.1 Cobbler功能</h3><p>Cobbler 支持众多的发行版：Red Hat、Fedora、CentOS、Debian、Ubuntu 和 SuSE。当添加一个操作系统（通常通过使用 ISO 文件）时，Cobbler 知道如何解压缩合适的文件并调整网络服务，以正确引导机器。</p><p>Cobbler 可使用 kickstart 模板。基于 Red Hat 或 Fedora 的系统使用 kickstart 文件来自动化安装流程。通过使用模板，您就会拥有基本的 kickstart 模板，然后定义如何针对一种配置文件或机器配置而替换其中的变量。例如，一个模板可能包含两个变量 $domain 和 $machine_name。在 Cobbler 配置中，一个配置文件指定 domain=mydomain.com，并且每台使用该配置文件的机器在 machine_name 变量中指定其名称。该配置文件中的所有机器都使用相同的 kickstart 安装且针对 domain=mydomain.com 进行配置，但每台机器拥有其自己的机器名称。您仍然可以使用 kickstart 模板在不同的域中安装其他机器并使用不同的机器名称。</p><p>使用 koan 客户端，Cobbler 可从客户端配置虚拟机并重新安装系统。我不会讨论配置管理和 koan 特性，因为它们不属于本文的介绍范畴。但是，它们是值得研究的有用特性。</p><h3 id="2-1-2-Cobbler安装"><a href="#2-1-2-Cobbler安装" class="headerlink" title="2.1.2 Cobbler安装"></a>2.1.2 Cobbler安装</h3><ol><li>安装EPEL源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>yum安装cobbler</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y httpd dhcp tftp python-ctypes cobbler cobbler-web pykickstart fence-agents xinetd debmirror</span><br></pre></td></tr></table></figure><ol><li>启动并配置cobbler</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable httpd cobblerd</span><br><span class="line">[root@linux-node1 ~]# systemctl start httpd cobblerd</span><br></pre></td></tr></table></figure><ul><li>下载Cobbler需要的启动文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler get-loaders</span><br></pre></td></tr></table></figure><ul><li>检查Cobbler状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler check</span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line"></span><br><span class="line">1 : The &#39;server&#39; field in &#x2F;etc&#x2F;cobbler&#x2F;settings must be set to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP for the boot server as reachable by all machines that will use it.</span><br><span class="line">2 : For PXE to be functional, the &#39;next_server&#39; field in &#x2F;etc&#x2F;cobbler&#x2F;settings must be set to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class="line">3 : change &#39;disable&#39; to &#39;no&#39; in &#x2F;etc&#x2F;xinetd.d&#x2F;tftp</span><br><span class="line">4 : enable and start rsyncd.service with systemctl</span><br><span class="line">5 : comment out &#39;dists&#39; on &#x2F;etc&#x2F;debmirror.conf for proper debian support</span><br><span class="line">6 : comment out &#39;arches&#39; on &#x2F;etc&#x2F;debmirror.conf for proper debian support</span><br><span class="line">7 : The default password used by the sample templates for newly installed machines (default_password_crypted in &#x2F;etc&#x2F;cobbler&#x2F;settings) is still set to &#39;cobbler&#39; and should be changed, try: &quot;openssl passwd -1 -salt &#39;random-phrase-here&#39; &#39;your-password-here&#39;&quot; to generate new one</span><br><span class="line"></span><br><span class="line">Restart cobblerd and then run &#39;cobbler sync&#39; to apply changes.</span><br></pre></td></tr></table></figure><p>这段话的意思就是需要处理上面的所有问题，然后重启cobblerd服务，然后执行cobbler sync同步修改操作。</p><p><strong>将上面提到的7个问题进行修复</strong></p><ul><li>问题1和2解决</li></ul><p>均是需要修改cobbler的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">#修改以下两行即可，可以直接搜索127.0.0.1来定位</span><br><span class="line">server: 192.168.56.11   #设置cobbler server的IP地址</span><br><span class="line">next_server: 192.168.56.11  #设置PXE server的IP地址</span><br></pre></td></tr></table></figure><ul><li>问题3解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;xinetd.d&#x2F;tftp</span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">        socket_type             &#x3D; dgram</span><br><span class="line">        protocol                &#x3D; udp</span><br><span class="line">        wait                    &#x3D; yes</span><br><span class="line">        user                    &#x3D; root</span><br><span class="line">        server                  &#x3D; &#x2F;usr&#x2F;sbin&#x2F;in.tftpd</span><br><span class="line">        server_args             &#x3D; -s &#x2F;var&#x2F;lib&#x2F;tftpboot</span><br><span class="line">        disable                 &#x3D; no</span><br><span class="line">        per_source              &#x3D; 11</span><br><span class="line">        cps                     &#x3D; 100 2</span><br><span class="line">        flags                   &#x3D; IPv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>问题4解决</li></ul><p>启动rsyncd服务，并设置开机自动启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable rsyncd</span><br><span class="line">[root@linux-node1 ~]# systemctl start rsyncd</span><br></pre></td></tr></table></figure><ul><li>问题5、6解决</li></ul><p>安装debmirror是debian系列系统使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y debmirror</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;debmirror.conf</span><br><span class="line">#请注释掉下面两行配置</span><br><span class="line">#@dists&#x3D;&quot;sid&quot;;</span><br><span class="line">#@arches&#x3D;&quot;i386&quot;</span><br></pre></td></tr></table></figure><ul><li>问题7解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openssl passwd -1 -salt &#39;example&#39; &#39;devopsedu.com&#39;</span><br><span class="line">$1$example$I.i3m26O7QYNja8p5Cj9.0 </span><br><span class="line">[root@ops-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">将下面字段替换为上面生成的字段：</span><br><span class="line">default_password_crypted: &quot;$1$example$I.i3m26O7QYNja8p5Cj9.0&quot;</span><br><span class="line">[root@linux-node1 ~]# systemctl restart cobblerd</span><br></pre></td></tr></table></figure><ul><li>再次检查Cobbler</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> [root@ops-node1 ~]# cobbler check</span><br><span class="line">No configuration problems found.  All systems go.</span><br></pre></td></tr></table></figure><h3 id="2-1-3-Cobbler管理DHCP"><a href="#2-1-3-Cobbler管理DHCP" class="headerlink" title="2.1.3 Cobbler管理DHCP"></a>2.1.3 Cobbler管理DHCP</h3><ol><li>开启管理DHCP服务，这样Cobbler就可以接管DHCP的管理工作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ops-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">manage_dhcp: 1</span><br></pre></td></tr></table></figure><ol><li>首先修改dhcp的配置文件</li></ol><p>修改dhcp的模板配置文件，设置相对应的DHCP的IP地址和分配的网段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ops-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;dhcp.template </span><br><span class="line">subnet 192.168.56.0 netmask 255.255.255.0 &#123;</span><br><span class="line">     option routers             192.168.56.2;</span><br><span class="line">     option domain-name-servers 192.168.56.2;</span><br><span class="line">     option subnet-mask         255.255.255.0;</span><br><span class="line">     range dynamic-bootp        192.168.56.100 192.168.56.254;</span><br><span class="line">     default-lease-time         21600;</span><br><span class="line">     max-lease-time             43200;</span><br><span class="line">     next-server                $next_server;</span><br><span class="line">  …</span><br></pre></td></tr></table></figure><p>重启Cobbler并进行同步操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart cobblerd </span><br><span class="line">[root@linux-node1 ~]# cobbler sync</span><br></pre></td></tr></table></figure><blockquote><p>执行完毕cobbler sync后，会自动生成/etc/dhcpd.conf。并重启dhcp服务。所以说使用Cobbler管理DHCP后，请勿修改/etc/dhcpd.conf。以后所有dhcp相关的配置都是修改Cobbler的DHCP模板文件/etc/cobbler/dhcp.template。</p></blockquote><h3 id="2-1-4-Cobbler导入镜像"><a href="#2-1-4-Cobbler导入镜像" class="headerlink" title="2.1.4 Cobbler导入镜像"></a>2.1.4 Cobbler导入镜像</h3><ol><li>下载并导入镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ops-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">[root@ops-node1 ~]# wget https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;centos&#x2F;7.7.1908&#x2F;isos&#x2F;x86_64&#x2F;CentOS-7-x86_64-Minimal-1908.iso</span><br><span class="line">[root@ops-node1 ~]# mmount -o loop &#x2F;usr&#x2F;local&#x2F;src&#x2F;CentOS-7-x86_64-Minimal-1908.iso &#x2F;mnt&#x2F;</span><br><span class="line">[root@ops-node1 ~]# cobbler import --path&#x3D;&#x2F;mnt&#x2F; --name&#x3D;CentOS-7.7-x86_64 --arch&#x3D;x86_64</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>–name 为安装源定义一个名字</li><li>–arch 指定安装源是32位还是64位、ia64, 目前支持的选项有: x86│x86_64│ia64</li></ul><blockquote><p>小提示：Cobbler 会把安装的镜像ISO拷贝到源安装镜像目录下: /var/www/cobbler/ks_mirror/</p></blockquote><ol><li>查看导入后结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler list</span><br><span class="line">distros:</span><br><span class="line">   CentOS-7-x86_64</span><br><span class="line"></span><br><span class="line">profiles:</span><br><span class="line">   CentOS-7-x86_64</span><br></pre></td></tr></table></figure><h3 id="2-1-5-自定义kickstart文件"><a href="#2-1-5-自定义kickstart文件" class="headerlink" title="2.1.5 自定义kickstart文件"></a>2.1.5 自定义kickstart文件</h3><p>Cobbler的Kickstart文件和默认的不同，我们需要修改，主要是增加上Cobbler的变量。导入镜像后，我们一般会自定义kickstart文件给这个镜像。首先可以将自定义后的Cobbler的kickstart文件放置在/var/lib/cobbler/kickstarts目录下，这也是Cobbler的默认存放kickstart文件的地方。</p><ol><li>自定义Kickstart文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;var&#x2F;lib&#x2F;cobbler&#x2F;kickstarts&#x2F;CentOS-7.7-x86_64-Cobbler.cfg</span><br><span class="line">#Kickstart Configurator by Jason Zhao</span><br><span class="line">#platform&#x3D;x86, AMD64, or Intel EM64T</span><br><span class="line">#System  language</span><br><span class="line">lang en_US</span><br><span class="line">#System keyboard</span><br><span class="line">keyboard us</span><br><span class="line">#Sytem timezone</span><br><span class="line">timezone Asia&#x2F;Shanghai</span><br><span class="line">#Root password</span><br><span class="line">rootpw --iscrypted $default_password_crypted</span><br><span class="line">#Use text mode install</span><br><span class="line">text</span><br><span class="line">#Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line">#Use NFS installation Media</span><br><span class="line">url --url&#x3D;$tree</span><br><span class="line">#System bootloader configuration</span><br><span class="line">bootloader --location&#x3D;mbr --driveorder&#x3D;sda --append&#x3D;&quot;net.ifnames&#x3D;0 biosdevname&#x3D;0&quot;</span><br><span class="line">#Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line">#Partition clearing information</span><br><span class="line">clearpart --all --initlabel </span><br><span class="line">#Disk partitioning information</span><br><span class="line">part &#x2F;boot --fstype&#x3D;xfs --size&#x3D;1024</span><br><span class="line">part swap --asprimary --fstype&#x3D;&quot;swap&quot; --size&#x3D;1024</span><br><span class="line">part &#x2F; --fstype&#x3D;xfs --size&#x3D;1 --grow</span><br><span class="line">#System authorization infomation</span><br><span class="line">auth  --useshadow  --enablemd5 </span><br><span class="line">#Network information</span><br><span class="line">$SNIPPET(&#39;network_config&#39;)</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line">#Firewall configuration</span><br><span class="line">firewall --disabled </span><br><span class="line">#SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line">#Service configuration</span><br><span class="line">services --disabled&#x3D;postfix</span><br><span class="line">#Do not configure XWindows</span><br><span class="line">skipx</span><br><span class="line">#Package install information</span><br><span class="line"></span><br><span class="line">%pre</span><br><span class="line">$SNIPPET(&#39;log_ks_pre&#39;)</span><br><span class="line">$SNIPPET(&#39;kickstart_start&#39;)</span><br><span class="line">$SNIPPET(&#39;pre_install_network_config&#39;)</span><br><span class="line"># Enable installation monitoring</span><br><span class="line">$SNIPPET(&#39;pre_anamon&#39;)</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@ base</span><br><span class="line">@ core</span><br><span class="line">bash-completion</span><br><span class="line">sysstat</span><br><span class="line">ntp</span><br><span class="line">lrzsz</span><br><span class="line">openssl-devel</span><br><span class="line">zlib-devel</span><br><span class="line">OpenIPMI-tools</span><br><span class="line">screen</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><ol><li>然后编辑profile来制定kickstart文件。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ops-node1 ~]# cobbler profile edit --name&#x3D;CentOS-7.7-x86_64 --kickstart&#x3D;&#x2F;var&#x2F;lib&#x2F;cobbler&#x2F;kickstarts&#x2F;CentOS-7.7-x86_64-Cobbler.cfg</span><br></pre></td></tr></table></figure><ol><li>增加安装时的内核参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ops-node1 ~]# cobbler profile edit --name&#x3D;CentOS-7.7-x86_64 --kopts&#x3D;&#39;net.ifnames&#x3D;0 biosdevname&#x3D;0&#39;</span><br></pre></td></tr></table></figure><ol><li>最后，一定要执行同步，才能将Cobbler设置完成</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler sync</span><br></pre></td></tr></table></figure><h2 id="2-2-使用Cobbler自动化安装CentOS"><a href="#2-2-使用Cobbler自动化安装CentOS" class="headerlink" title="2.2 使用Cobbler自动化安装CentOS"></a>2.2 使用Cobbler自动化安装CentOS</h2><p>现在我们就可以使用Cobbler进行安装了。实验环境下，你可以新创建一个虚拟机（注意网卡的选择）来进行测试了。Cobbler非常人性化的创建了一个Local，即使从硬盘启动，这样也避免了有服务器从网卡启动开始自动安装的问题。</p><h3 id="2-2-1-使用Cobbler安装CentOS"><a href="#2-2-1-使用Cobbler安装CentOS" class="headerlink" title="2.2.1 使用Cobbler安装CentOS"></a>2.2.1 使用Cobbler安装CentOS</h3><ol><li>启动物理服务器</li><li>选择CentOS-7.7-x86_64之后即可重新开始安装。</li></ol><blockquote><p>在生产环境如果想要自动开始安装，我们的通常做法是有一个专门进行服务器安装的VLAN，安装完毕后，进入待调配状态，然后根据流程进入到生产环境。但是提醒大家，自动化开始进行操作系统安装风险依然很大。</p></blockquote><h3 id="2-2-2-Koan重新安装系统"><a href="#2-2-2-Koan重新安装系统" class="headerlink" title="2.2.2 Koan重新安装系统"></a>2.2.2 Koan重新安装系统</h3><p>在实践的运维工作中，你肯定需要重新安装操作系统，有了Cobbler你就不用去机房了，直接使用Koan就可以进行自动化重新安装操作系统。需要再待重装的服务器上安装koan。</p><p>安装Koan软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@localhost ~]# yum install -y koan</span><br></pre></td></tr></table></figure><p>列出可以安装的系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# koan --server&#x3D;192.168.56.11 --list&#x3D;profiles</span><br><span class="line">- looking for Cobbler at http:&#x2F;&#x2F;192.168.56.11:80&#x2F;cobbler_api</span><br><span class="line">CentOS-7.7-x86_64</span><br></pre></td></tr></table></figure><p>指定需要重新安装的操作系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# koan --replace-self --server&#x3D;192.168.56.11 --profile&#x3D;CentOS-7.7-x86_64</span><br><span class="line">- looking for Cobbler at http:&#x2F;&#x2F;192.168.56.11:80&#x2F;cobbler_api</span><br><span class="line">- reading URL: http:&#x2F;&#x2F;192.168.56.11&#x2F;cblr&#x2F;svc&#x2F;op&#x2F;ks&#x2F;profile&#x2F;CentOS-7.7-x86_64</span><br><span class="line">install_tree: http:&#x2F;&#x2F;192.168.56.11&#x2F;cblr&#x2F;links&#x2F;CentOS-7.7-x86_64</span><br><span class="line">downloading initrd initrd.img to &#x2F;boot&#x2F;initrd.img_koan</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;images&#x2F;CentOS-7.7-x86_64&#x2F;initrd.img</span><br><span class="line">- reading URL: http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;images&#x2F;CentOS-7.7-x86_64&#x2F;initrd.img</span><br><span class="line">downloading kernel vmlinuz to &#x2F;boot&#x2F;vmlinuz_koan</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;images&#x2F;CentOS-7.7-x86_64&#x2F;vmlinuz</span><br><span class="line">- reading URL: http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;images&#x2F;CentOS-7.4-x86_64&#x2F;vmlinuz</span><br><span class="line">- [&#39;&#x2F;sbin&#x2F;grubby&#39;, &#39;--add-kernel&#39;, &#39;&#x2F;boot&#x2F;vmlinuz_koan&#39;, &#39;--initrd&#39;, &#39;&#x2F;boot&#x2F;initrd.img_koan&#39;, &#39;--args&#39;, &#39;&quot;ksdevice&#x3D;link lang&#x3D; text net.ifnames&#x3D;0 ks&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cblr&#x2F;svc&#x2F;op&#x2F;ks&#x2F;profile&#x2F;CentOS-7.4-x86_64 biosdevname&#x3D;0 kssendmac &quot;&#39;, &#39;--copy-default&#39;, &#39;--make-default&#39;, &#39;--title&#x3D;kick1526449287&#39;]</span><br><span class="line">- [&#39;&#x2F;sbin&#x2F;grubby&#39;, &#39;--update-kernel&#39;, &#39;&#x2F;boot&#x2F;vmlinuz_koan&#39;, &#39;--remove-args&#x3D;root&#39;]</span><br><span class="line">- reboot to apply changes</span><br></pre></td></tr></table></figure><p>如下图所示，Koan会创建一个新的启动选项，重启后，直接开始自动安装。</p><p>我们先不要执行reboot先研究下是如何实现的。你打开Grub的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br><span class="line">你会发现这样的配置</span><br><span class="line">menuentry &#39;kick1526449287&#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &#39;gnulinux-3.10.0-693.el7.x86_64-advanced-49e658db-2c61-475a-9325-903fdbeb7cd4&#39; &#123;</span><br><span class="line">        load_video</span><br><span class="line">        set gfxpayload&#x3D;keep</span><br><span class="line">        insmod gzio</span><br><span class="line">        insmod part_msdos</span><br><span class="line">        insmod xfs</span><br><span class="line">        set root&#x3D;&#39;hd0,msdos1&#39;</span><br><span class="line">        if [ x$feature_platform_search_hint &#x3D; xy ]; then</span><br><span class="line">          search --no-floppy --fs-uuid --set&#x3D;root --hint-bios&#x3D;hd0,msdos1 --hint-efi&#x3D;hd0,msdos1 --hint-baremetal&#x3D;ahci0,msdos1 --hint&#x3D;&#39;hd0,msdos1&#39;  0a801c26-5320-448d-b261-883499529bc6</span><br><span class="line">        else</span><br><span class="line">          search --no-floppy --fs-uuid --set&#x3D;root 0a801c26-5320-448d-b261-883499529bc6</span><br><span class="line">        fi</span><br><span class="line">        linux16 &#x2F;vmlinuz_koan ro crashkernel&#x3D;auto biosdevname&#x3D;0 net.ifnames&#x3D;0 rhgb quiet LANG&#x3D;en_US.UTF-8 ksdevice&#x3D;link lang&#x3D; text net.ifnames&#x3D;0 ks&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cblr&#x2F;svc&#x2F;op&#x2F;ks&#x2F;profile&#x2F;CentOS-7.4-x86_64 biosdevname&#x3D;0 kssendmac</span><br><span class="line">        initrd16 &#x2F;initrd.img_koan</span><br><span class="line">也就是说，koan帮我们下载了安装需要的文件，并且修改了Grub的开机启动选项，增加了安装的配置，并且设置为默认启动选项，这样我们执行重启默认就开始安装了。现在执行重启来验证一下。</span><br><span class="line">[root@hadoop-node1 ~]# reboot</span><br></pre></td></tr></table></figure><p>你可以看到如下图所示的界面，然后开始进行自动化重新安装。</p><h2 id="2-3-Cobbler-Web介绍"><a href="#2-3-Cobbler-Web介绍" class="headerlink" title="2.3 Cobbler Web介绍"></a>2.3 Cobbler Web介绍</h2><p>Cobbler还提供了可视化的Web节界面叫做Cobbler Web。我们使用yum安装完毕后，会再/etc/http/conf.d/目录下生成cobbler_web.conf配置文件，可以通过<a href="https://ip/cobbler_web%E6%9D%A5%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E3%80%82">https://IP/cobbler_web来进行访问。</a></p><ol><li><p>安装Cobbler Web</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y cobbler-web</span><br></pre></td></tr></table></figure></li><li><p>配置Cobbler Web</p></li></ol><p>Cobbler web的权限管理有两个配置文件 /etc/cobbler/users.conf和/etc/cobbler/users.digest 后者为Cobbler权限配置文件，我们需要使用htdigest来为用户设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# htdigest  &#x2F;etc&#x2F;cobbler&#x2F;users.digest &quot;Cobbler&quot; cobbler</span><br><span class="line">Changing password for user cobbler in realm Cobbler</span><br><span class="line">New password: </span><br><span class="line">Re-type new password:</span><br></pre></td></tr></table></figure><p>然后就可以使用cobbler用户和你设置的密码登陆了。 <a href="https://192.168.56.11/cobbler_web">https://192.168.56.11/cobbler_web</a></p><h2 id="2-4-深入理解Cobbler"><a href="#2-4-深入理解Cobbler" class="headerlink" title="2.4 深入理解Cobbler"></a>2.4 深入理解Cobbler</h2><p>经过前面的内容，我们已经可以顺利的使用Cobbler进行操作系统的安装，使用Koan进行操作系统自动重新安装的操作了，那么我们还需要更多的掌握一些Cobbler的知识，才能在生产的应用中，更如鱼得水。</p><h3 id="2-4-1-Cobbler-配置文件"><a href="#2-4-1-Cobbler-配置文件" class="headerlink" title="2.4.1 Cobbler 配置文件"></a>2.4.1 Cobbler 配置文件</h3><ol><li>Cobbler的目录 Cobbler安装完毕后会在系统生成如下目录：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# find &#x2F; -name cobbler</span><br><span class="line">&#x2F;etc&#x2F;selinux&#x2F;targeted&#x2F;active&#x2F;modules&#x2F;100&#x2F;cobbler</span><br><span class="line">&#x2F;etc&#x2F;cobbler</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;cobbler</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;cobbler</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;cobbler</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;cobbler</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;cobbler</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;cobbler</span><br></pre></td></tr></table></figure><ol><li>Cobbler配置文件目录</li></ol><p>Cobbler的配置文件存放在/etc/cobbler下。</p><ul><li>/etc/cobbler/settings为主配置文件；</li><li>在/etc/cobbler下你还能看到dhcp、dns、pxe、dnsmasq的模板配置文件；</li><li>/etc/cobbler/users.digest为用于web访问的用户名密码配置文件；</li><li>/etc/cobbler/modules.conf 为模块配置文件；</li><li>/etc/cobbler/users.conf为Cobbler WebUI/Web service授权配置文件。</li><li>修改Cobbler提示</li></ul><p>如果你想修改Cobbler的提示，可以直接编辑下面文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@test-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;pxe&#x2F;pxedefault.template</span><br><span class="line">DEFAULT menu</span><br><span class="line">PROMPT 0</span><br><span class="line">MENU TITLE DevOpsEDU | http:&#x2F;&#x2F;www.devopsedu.com</span><br><span class="line">TIMEOUT 200</span><br><span class="line">TOTALTIMEOUT 6000</span><br><span class="line">ONTIMEOUT $pxe_timeout_profile</span><br><span class="line"></span><br><span class="line">LABEL local</span><br><span class="line">        MENU LABEL (local)</span><br><span class="line">        MENU DEFAULT</span><br><span class="line">        LOCALBOOT -1</span><br><span class="line"></span><br><span class="line">$pxe_menu_items</span><br><span class="line"></span><br><span class="line">MENU end</span><br></pre></td></tr></table></figure><ol><li>Cobbler数据目录/var/lib/cobbler，</li></ol><p>此目录存储和Cobbler profiles、systems、distros相关的配置。</p><ul><li>configs/ - 此目录用于存储distros、repos、systems和profiles相关信息。</li><li>backup/ - 备份目录</li><li>snippets/ - 用于放置一些可以在kickstarts导入的脚本小片段</li><li>triggers/ - 此目录用来放置一些可执行脚本</li><li>kickstarts/ - 此目录用来放置kickstart模板文件</li><li>Repo数据目录/var/www/cobbler</li></ul><p>导入的发行版，repos镜像和kickstart文件都放置在/var/www/cobbler目录下。确保/var目录有足够的空间来存储这些文件。</p><ul><li>images/ - 存储所有导入发行版的Kernel和initrd镜像用于远程网络启动</li><li>ks_mirror/ - 存储导入的发行版</li><li>repo_mirror/ - yum repos存储目录</li><li>Cobbler日志目录</li></ul><p>/var/log/cobbler用于存放日志文件/var/log/cobbler/cobbler.log</p><h3 id="2-4-2-Cobbler设计方式-cs"><a href="#2-4-2-Cobbler设计方式-cs" class="headerlink" title="2.4.2 Cobbler设计方式 {$cs}"></a>2.4.2 Cobbler设计方式 {$cs}</h3><p>Cobbler 有多个对象组成的，对象和对象之间可以相互引用：</p><ul><li>Repo（存储库）：保存一个 yum 或 rsync 存储库的镜像信息。例如我们可以将Zabbix的软件仓库同步到我们本地，就是一个Repo。</li><li>Distro（发行版）：表示一个操作系统。它承载了内核和 initrd 的信息，以及内核参数等其他数据。</li><li>profile（配置文件）：包含一个distro（发行版）、一个 kickstart 文件以及可能的Repo（存储库），还包含更多特定的内核参数等其他数据。</li><li>system（系统）：表示要安装的机器。它包含一个配置文件或一个镜像，还包含 IP 和 MAC 地址、电源管理（地址、凭据、类型）以及更为专业的数据等信息。</li><li>Image（镜像）：可替换一个包含不属于此类别的文件的发行版对象（例如，无法分为内核和 initrd 的对象）。 基于注册的对象以及各个对象之间的关联，Cobbler 知道如何更改文件系统以反映具体配置。因为系统配置的内部是抽象的，所以您可以仅关注想要执行的操作。</li></ul><h3 id="2-4-3-Cobbler-distro"><a href="#2-4-3-Cobbler-distro" class="headerlink" title="2.4.3 Cobbler distro"></a>2.4.3 Cobbler distro</h3><p>使用Cobbler的第一步就是定义Distro，回想下我们最早执行的cobbler import，就会帮我们创建一个distro，我们可以使用下面的命令进行查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler distro list</span><br><span class="line">   CentOS-7-x86_64</span><br></pre></td></tr></table></figure><p>Cobbler所有的命令都可以使用help这样的方式获取帮助。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler distro help</span><br><span class="line">usage</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">cobbler distro add</span><br><span class="line">cobbler distro copy</span><br><span class="line">cobbler distro edit</span><br><span class="line">cobbler distro find</span><br><span class="line">cobbler distro list</span><br><span class="line">cobbler distro remove</span><br><span class="line">cobbler distro rename</span><br><span class="line">cobbler distro report</span><br></pre></td></tr></table></figure><p>我们可以使用report命令来看distro都包含哪些内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler distro report</span><br><span class="line">Name                           : CentOS-7.7-x86_64</span><br><span class="line">Architecture                   : x86_64</span><br><span class="line">TFTP Boot Files                : &#123;&#125;</span><br><span class="line">Breed                          : redhat</span><br><span class="line">Comment                        : </span><br><span class="line">Fetchable Files                : &#123;&#125;</span><br><span class="line">Initrd                         : &#x2F;var&#x2F;www&#x2F;cobbler&#x2F;ks_mirror&#x2F;CentOS-7.7-x86_64&#x2F;images&#x2F;pxeboot&#x2F;initrd.img</span><br><span class="line">Kernel                         : &#x2F;var&#x2F;www&#x2F;cobbler&#x2F;ks_mirror&#x2F;CentOS-7.7-x86_64&#x2F;images&#x2F;pxeboot&#x2F;vmlinuz</span><br><span class="line">Kernel Options                 : &#123;&#125;</span><br><span class="line">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class="line">Kickstart Metadata             : &#123;&#39;tree&#39;: &#39;http:&#x2F;&#x2F;@@http_server@@&#x2F;cblr&#x2F;links&#x2F;CentOS-7.7-x86_64&#39;&#125;</span><br><span class="line">Management Classes             : []</span><br><span class="line">OS Version                     : rhel7</span><br><span class="line">Owners                         : [&#39;admin&#39;]</span><br><span class="line">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Template Files                 : &#123;&#125;</span><br><span class="line">  可以看到distro定义的仅仅是我们要安装操作系统发行版的kernel和initrd。</span><br></pre></td></tr></table></figure><h3 id="2-1-4-Cobbler-profile"><a href="#2-1-4-Cobbler-profile" class="headerlink" title="2.1.4 Cobbler profile"></a>2.1.4 Cobbler profile</h3><p>那么在cobbler import的同时也默认创建了一个和distro同名的profile，那么cobbler profile里面包括了distribution、kickstart file和repo。我们也可以把profile理解为一个配置集合，比如在distro的基础上增加可一个kiskstart文件来生成一个特定的系统安装配置。 比如前面我们多次使用cobbler profile edit为指定的Profile设置kickstart文件和内核参数，profile的名称即使我们在使用cobbler进行自动化安装选择的菜单名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler profile report</span><br></pre></td></tr></table></figure><h3 id="2-1-5Cobbler-repo"><a href="#2-1-5Cobbler-repo" class="headerlink" title="2.1.5Cobbler repo"></a>2.1.5Cobbler repo</h3><p>Cobbler repos可以帮我们管理yum仓库，把创建企业内部的yum源变成了一件极其简单的工作，比如通常生成环境我们想把EPEL仓库同步到本地，这样就避免每次安装软件包占用公网贷款。 添加EPEL源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cobbler repo add --name&#x3D;CentOS-7-x86_64-epel \</span><br><span class="line">--mirror&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;7&#x2F;x86_64&#x2F; --arch&#x3D;x86_64 --breed&#x3D;wget</span><br></pre></td></tr></table></figure><p>参数说明: –name 为安装源定义一个名字 –arch 指定安装源是32位还是64位、ia64, 目前支持的选项有: x86│x86_64│ia64 reposync 操作很重要，因为它会从远程存储库中复制文件。如果创建了存储库对象但未运行 reposync，那么您的存储库将是空的，而且您的安装可能会失败。 根据需要同步的仓库大小，注意硬盘空间，第一次同步时间比较长，建议放到screen里面允许。</p><p>添加repo到profile 把我们自定义的repo添加到对应的profile后，那么使用对应profile安装的机器，默认就会添加该repo，前提是需要进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cobbler profile edit --name&#x3D;CentOS-7-x86_64 --repos&#x3D;&quot;openstack-liberty&quot;</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">yum_post_install_mirror: 1  #默认是开启的。</span><br></pre></td></tr></table></figure><p>添加更新仓库源计划任务 如果使用的外包源链接，可以定期的进行同步，放在crontab里面每天执行。 echo “0 2 0 cobbler reposync –tries=3 –no-fail” &gt;&gt; /var/spool/cron/root</p><p>设置装机自动设置Yum 修改ks脚本，增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%post</span><br><span class="line"># Start yum configuration</span><br><span class="line">$yum_config_stanza</span><br><span class="line"># End yum configuration</span><br><span class="line">%end</span><br><span class="line">这样开机的时候就可以调用yum_config_stanza这个snippets进行设置了。等等，这个snippets是什么东东？</span><br></pre></td></tr></table></figure><h3 id="2-1-6-Cobbler-snippets"><a href="#2-1-6-Cobbler-snippets" class="headerlink" title="2.1.6 Cobbler snippets"></a>2.1.6 Cobbler snippets</h3><p>snippets可以说是cobbler管理中的精华部分，很少有文档提及，因为大多数人使用简单的cobbler功能已经足够了，如果你想对安装过程和安装后进行定制，可以自己编写Snippet来实现。现在我们可以参考Cobbler自带的kickstart模板，给我们的模板增加上snippets的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;var&#x2F;lib&#x2F;cobbler&#x2F;kickstarts&#x2F;sample_end.ks</span><br><span class="line">%post</span><br><span class="line">$SNIPPET(&#39;log_ks_post&#39;)</span><br><span class="line"># Start yum configuration</span><br><span class="line">$yum_config_stanza</span><br><span class="line"># End yum configuration</span><br><span class="line">$SNIPPET(&#39;post_install_kernel_options&#39;)</span><br><span class="line">$SNIPPET(&#39;post_install_network_config&#39;)</span><br><span class="line">$SNIPPET(&#39;func_register_if_enabled&#39;)</span><br><span class="line">$SNIPPET(&#39;download_config_files&#39;)</span><br><span class="line">$SNIPPET(&#39;koan_environment&#39;)</span><br><span class="line">$SNIPPET(&#39;redhat_register&#39;)</span><br><span class="line">$SNIPPET(&#39;cobbler_register&#39;)</span><br><span class="line"># Enable post-install boot notification</span><br><span class="line">$SNIPPET(&#39;post_anamon&#39;)</span><br><span class="line"># Start final steps</span><br><span class="line">$SNIPPET(&#39;kickstart_done&#39;)</span><br><span class="line"># End final steps</span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>将%post开始到%end的内容复制下来，编辑到 /var/lib/cobbler/kickstarts/CentOS-7.4-x86_64-Cobbler.cfg文件中。在后面的自动化实践和高级话题中，我们将用到这个功能。</p><h1 id="3-Cobbler自动化实践"><a href="#3-Cobbler自动化实践" class="headerlink" title="3 Cobbler自动化实践"></a>3 Cobbler自动化实践</h1><p>在了解了Cobbler的基本使用和Cobbler的各种组件之后，在生产环境中，我们就可以灵活的运用Cobbler来完成很多自动化的工作。</p><h2 id="3-1-Cobbler构建私有YUM仓库"><a href="#3-1-Cobbler构建私有YUM仓库" class="headerlink" title="3.1 Cobbler构建私有YUM仓库"></a>3.1 Cobbler构建私有YUM仓库</h2><p>Cobbler除了用来进行自动化安装之外，最方便的一个功能就是做YUM仓库了。从此再也不用担心，在服务器无法上外网的情况下，如何使用开源工具了。而且如果你需要，Cobbler可以帮你进行同步，及时的和官方的源保持一致。</p><h3 id="3-1-1-构建OpenStack私有仓库"><a href="#3-1-1-构建OpenStack私有仓库" class="headerlink" title="3.1.1 构建OpenStack私有仓库"></a>3.1.1 构建OpenStack私有仓库</h3><p>添加OpenStack源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler repo add --name&#x3D;openstack-queens-x86_64 \</span><br><span class="line"> --mirror&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;7.4.1708&#x2F;cloud&#x2F;x86_64&#x2F;openstack-queens&#x2F; \</span><br><span class="line"> --arch&#x3D;x86_64 --breed&#x3D;yum</span><br></pre></td></tr></table></figure><p>对于 yum 存储库 URL，Cobbler 接受 <a href="http://、ftp//%E3%80%81rsync://%E3%80%81%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B7%AF%E5%BE%84%E5%92%8C">http://、ftp://、rsync://、文件系统路径和</a> ssh 位置（通过使用基于私钥的身份验证）。</p><ul><li>http协议 方式：只能拉取到某一软件的最新版本，无法拉取所有版本。</li><li>rsync协议方式：镜像方式，可以拉取提供 rsync 服务目录下的所有目录和文件。</li></ul><p>同步仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler reposync</span><br></pre></td></tr></table></figure><blockquote><p>提示：OpenStack Queens的源同步完成大约在900M左右。</p></blockquote><h3 id="3-1-2-构建Zabbix私有仓库"><a href="#3-1-2-构建Zabbix私有仓库" class="headerlink" title="3.1.2 构建Zabbix私有仓库"></a>3.1.2 构建Zabbix私有仓库</h3><p>由于Zabbix官方不支持rsync的方式同步，所以只能使用http的方式同步最新版本的源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler repo add --name&#x3D;zabbix-3.4-rhel7-x86_64  \</span><br><span class="line">--mirror&#x3D;http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;</span><br><span class="line">[root@linux-node1 ~]# cobbler repo list</span><br><span class="line">   zabbix-3.4-rhel7-x86_64</span><br></pre></td></tr></table></figure><p>同步仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler reposync</span><br></pre></td></tr></table></figure><blockquote><p>提示：Zabbix 3.4版本的源同步完成大约在20M左右。</p></blockquote><h3 id="3-1-3-构建SaltStack私有仓库"><a href="#3-1-3-构建SaltStack私有仓库" class="headerlink" title="3.1.3 构建SaltStack私有仓库"></a>3.1.3 构建SaltStack私有仓库</h3><p>由于SaltStack的国外源相对比较慢，所以生产会使用Cobbler构建内部源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler repo add --name&#x3D;saltstack-2018.3-rhel7-x86_64 \</span><br><span class="line"> --mirror&#x3D;https:&#x2F;&#x2F;repo.saltstack.com&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;2018.3</span><br></pre></td></tr></table></figure><p>同步仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler reposync</span><br></pre></td></tr></table></figure><blockquote><p>提示：SaltStack 2018.3版本的源同步完成大约在50M左右。</p></blockquote><h3 id="3-1-4-将私有仓库添加到Profile"><a href="#3-1-4-将私有仓库添加到Profile" class="headerlink" title="3.1.4 将私有仓库添加到Profile"></a>3.1.4 将私有仓库添加到Profile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler repo list</span><br><span class="line">   openstack-queens-rhel7-x86_64</span><br><span class="line">   saltstack-2018.3-rhel7-x86_64</span><br><span class="line">   zabbix-3.4-rhel7-x86_64</span><br></pre></td></tr></table></figure><p>将自定义的Repo添加到对应的Profile之后，我们使用该Profile安装完毕的虚拟机默认就会增加这些仓库的配置。 提示：必须执行完毕reposync之后，才能添加到Profile。多个repo之间使用空格分隔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler profile edit --name CentOS-7.4-x86_64 \</span><br><span class="line">--repos&#x3D;&quot;openstack-queens-rhel7-x86_64 saltstack-2018.3-rhel7-x86_64 zabbix-3.4-rhel7-x86_64&quot;</span><br></pre></td></tr></table></figure><p>使用Profile CentOS-7.4-x86_64创建出来的虚拟机都会有一个cobbler-config.repo文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">[root@localhost yum.repos.d]# cat cobbler-config.repo </span><br><span class="line">[openstack-queens-rhel7-x86_64]</span><br><span class="line">name&#x3D;openstack-queens-rhel7-x86_64</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;repo_mirror&#x2F;openstack-queens-rhel7-x86_64</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">priority&#x3D;99</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[saltstack-2018.3-rhel7-x86_64]</span><br><span class="line">name&#x3D;saltstack-2018.3-rhel7-x86_64</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;repo_mirror&#x2F;saltstack-2018.3-rhel7-x86_64</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">priority&#x3D;99</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br><span class="line">[zabbix-3.4-rhel7-x86_64]</span><br><span class="line">name&#x3D;zabbix-3.4-rhel7-x86_64</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler&#x2F;repo_mirror&#x2F;zabbix-3.4-rhel7-x86_64</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">priority&#x3D;99</span><br><span class="line">gpgcheck&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="3-2-使用Cobbler自动化安装ESXi"><a href="#3-2-使用Cobbler自动化安装ESXi" class="headerlink" title="3.2 使用Cobbler自动化安装ESXi"></a>3.2 使用Cobbler自动化安装ESXi</h2><ol><li>挂载ESXI镜像并导入</li></ol><p>首先使用Vmware Workstation挂载对应的ESXi镜像，这里使用的6.5版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mount &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;</span><br><span class="line">mount: &#x2F;dev&#x2F;sr0 is write-protected, mounting read-only</span><br><span class="line">[root@linux-node1 ~]# cobbler import --path&#x3D;&#x2F;mnt --name&#x3D;ESXi6.5 --arch&#x3D;x86_64</span><br></pre></td></tr></table></figure><ol><li>会自动生成distros和profiles</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler list</span><br><span class="line">distros:</span><br><span class="line">   CentOS-7.4-x86_64</span><br><span class="line">   ESXi6.5-x86_64</span><br><span class="line"></span><br><span class="line">profiles:</span><br><span class="line">   CentOS-7.4-x86_64</span><br><span class="line">   ESXi6.5-x86_64</span><br></pre></td></tr></table></figure><ol><li>查看kickstart文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler profile report --name ESXi6.5-x86_64</span><br><span class="line">Name                           : ESXi6.5-x86_64</span><br><span class="line">TFTP Boot Files                : &#123;&#125;</span><br><span class="line">Comment                        : </span><br><span class="line">DHCP Tag                       : default</span><br><span class="line">Distribution                   : ESXi6.5-x86_64</span><br><span class="line">Enable gPXE?                   : 0</span><br><span class="line">Enable PXE Menu?               : 1</span><br><span class="line">Fetchable Files                : &#123;&#125;</span><br><span class="line">Kernel Options                 : &#123;&#125;</span><br><span class="line">Kernel Options (Post Install)  : &#123;&#125;</span><br><span class="line">Kickstart                      : &#x2F;var&#x2F;lib&#x2F;cobbler&#x2F;kickstarts&#x2F;sample_esxi6.ks</span><br><span class="line">Kickstart Metadata             : &#123;&#125;</span><br><span class="line">Management Classes             : []</span><br><span class="line">Management Parameters          : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Name Servers                   : []</span><br><span class="line">Name Servers Search Path       : []</span><br><span class="line">Owners                         : [&#39;admin&#39;]</span><br><span class="line">Parent Profile                 : </span><br><span class="line">Internal proxy                 : </span><br><span class="line">Red Hat Management Key         : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Red Hat Management Server      : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Repos                          : []</span><br><span class="line">Server Override                : &lt;&lt;inherit&gt;&gt;</span><br><span class="line">Template Files                 : &#123;&#125;</span><br><span class="line">Virt Auto Boot                 : 1</span><br><span class="line">Virt Bridge                    : xenbr0</span><br><span class="line">Virt CPUs                      : 1</span><br><span class="line">Virt Disk Driver Type          : raw</span><br><span class="line">Virt File Size(GB)             : 5</span><br><span class="line">Virt Path                      : </span><br><span class="line">Virt RAM (MB)                  : 512</span><br><span class="line">Virt Type                      : kvm</span><br></pre></td></tr></table></figure><ol><li>使用Cobbler安装ESXi</li></ol><p>首先需要同步一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler sync</span><br></pre></td></tr></table></figure><ol><li>创建虚拟机进行实验。</li></ol><h2 id="3-3-定制化服务器安装"><a href="#3-3-定制化服务器安装" class="headerlink" title="3.3 定制化服务器安装"></a>3.3 定制化服务器安装</h2><h3 id="3-3-1-自动化安装流程梳理"><a href="#3-3-1-自动化安装流程梳理" class="headerlink" title="3.3.1 自动化安装流程梳理"></a>3.3.1 自动化安装流程梳理</h3><ul><li>采购设备送到机房。</li><li>机房同事，开机，插电验收，验收完毕。</li><li>进行CMDB资产录入。提供机器位置和MAC地址列表（供应商也可以提供）</li><li>调用IPMI开机，Cobbler API安装操作系统。</li><li>安装完毕，启动后，自动启动SaltStack。然后剩下的以SaltStack为核心了。</li></ul><p>说明： 服务器网卡必须支持PXE功能 定制化 至少有这么几个：网络配置，Hostname 这些 注意： 如果不定制化，网卡通过PXE启动后，会出现一个菜单供人选择用哪个配置（其实就是Profile的名字）而且每个安装源 都有自己的默认KS文件，超过时间后，会指定使用默认的 KS文件 进行安装本文主要讨论 自动化一键部署，所以必须要做定制化 这部分的操作 主要通过 cobbler system 来实现</p><h3 id="3-3-2-Cobbler获取安装进度"><a href="#3-3-2-Cobbler获取安装进度" class="headerlink" title="3.3.2 Cobbler获取安装进度"></a>3.3.2 Cobbler获取安装进度</h3><p>后面有章节介绍如何通过Cobbler API来调用Cobbler，在开始进行系统定制安装之前，我们可能有一个需求就是需要想知道安装进度。针对于基于Redhat的Linux发行版的系统安装程序叫做Anaconda，Cobbler提供了对Anaconda的监控，从而获取安装进度。</p><ol><li><p>开启Anaconda监控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">anamon_enabled: 1</span><br></pre></td></tr></table></figure></li></ol><p>重启Cobbler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart cobblerd</span><br></pre></td></tr></table></figure><ol><li>查看Kickstart文件确保对应的snippet存在 ``` %pre $SNIPPET(‘pre_anamon’)</li></ol><p>%post $SNIPPET(‘post_anamon’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 进行系统安装后，会在&#x2F;var&#x2F;log&#x2F;cobbler&#x2F;anamon&#x2F;下创建对应的System目录</span><br></pre></td></tr></table></figure><p>[root@linux-node1 ~]# tree /var/log/cobbler/anamon/ /var/log/cobbler/anamon/ └── cobbler-api-test ├── anaconda.log ├── boot.log ├── dmesg ├── ks-post.log ├── ks-pre.log ├── messages ├── program.log ├── storage.log └── sys.log</p><p>1 directory, 9 files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### 3.3.3 Cobbler system定制安装</span><br><span class="line"></span><br><span class="line">Cobbler system是Cobbler提供的可以用来进行系统定制的模块，我们可以通过Cobbler system来定制待安装服务器的IP地址、主机名等操作。</span><br><span class="line"></span><br><span class="line">1. 添加一个主机</span><br></pre></td></tr></table></figure><p>[root@linux-node1 ~]# cobbler system add –name=linux-node3 –mac=00:50:56:3F:84:4F \ –profile=CentOS-7.4-x86_64 –ip-address=192.168.56.110 –subnet=255.255.255.0 \ –gateway=192.168.56.2 –interface=eth0 –static=1 –hostname=new.devopsedu.com \ –name-servers=”192.168.56.2” \ –kickstart=/var/lib/cobbler/kickstarts/CentOS-7.4-x86_64-Cobbler.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- --name&#x3D;linux-node3   #设置一个主机名称</span><br><span class="line">- --mac&#x3D;08:00:27:67:A0:BB  #设置对应的MAC地址</span><br><span class="line">- --profile&#x3D;CentOS-7.4-x86_64  #设置需要安装的操作系统</span><br><span class="line">- --ip-address&#x3D;192.168.56.13 #设置一个静态IP地址</span><br><span class="line">- --subnet&#x3D;255.255.255.0    #设置子网掩码</span><br><span class="line">- --gateway&#x3D;192.168.56.2    #设置网关</span><br><span class="line">- --interface&#x3D;eth0 \          设置网卡</span><br><span class="line">- --static&#x3D;1                 设置静态IP</span><br><span class="line">- --dns-name&#x3D;linux-node3.example.com  #设置dns name</span><br><span class="line">- --hostname&#x3D;linux-node3.example.com  #设置主机名</span><br><span class="line">- --netboot-enabled&#x3D;true #设置网络启动</span><br><span class="line">- --name-servers&#x3D;&quot;192.168.56.2&quot; #设置DNS域名服务器</span><br><span class="line"></span><br><span class="line">2. 查看主机</span><br></pre></td></tr></table></figure><p>[root@linux-node1 ~]# cobbler system list linux-node3 ``` 下面，我们来启动虚拟机，进行自动化安装，不再出现选择的菜单，直接安装你制定的操作系统。</p><h1 id="4-Cobbler高级话题"><a href="#4-Cobbler高级话题" class="headerlink" title="4 Cobbler高级话题"></a>4 Cobbler高级话题</h1><p>在实际的工作环境中，Cobbler还有很多高级的应用可以帮助我们更快的进行操作系统的部署工作。例如网卡绑定、电源管理和Cobbler API等。</p><h2 id="4-1-自定义物理网卡bonding"><a href="#4-1-自定义物理网卡bonding" class="headerlink" title="4.1 自定义物理网卡bonding"></a>4.1 自定义物理网卡bonding</h2><ol><li>添加一台主机linux-node4</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler system add --name&#x3D;linux-node4 --profile&#x3D;CentOS-7.7-x86_64 \</span><br><span class="line"> --hostname&#x3D;new.devopsedu.com \</span><br><span class="line"> --name-servers&#x3D;&quot;192.168.56.2&quot; \</span><br><span class="line"> --kickstart&#x3D;&#x2F;var&#x2F;lib&#x2F;cobbler&#x2F;kickstarts&#x2F;CentOS-7.7-x86_64-Cobbler.cfg</span><br></pre></td></tr></table></figure><ol><li>添加bonding网卡</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler system edit --name&#x3D;linux-node4 --interface&#x3D;eth0 \</span><br><span class="line"> --mac&#x3D;00:50:56:27:F0:07 --interface-type&#x3D;bond_slave --interface-master&#x3D;bond0</span><br></pre></td></tr></table></figure><ol><li>添加bonding网卡</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler system edit --name&#x3D;linux-node4 --interface&#x3D;eth1 \</span><br><span class="line"> --mac&#x3D;00:50:56:36:09:66 --interface-type&#x3D;bond_slave --interface-master&#x3D;bond0</span><br></pre></td></tr></table></figure><ol><li>设置绑定网卡</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cobbler system edit --name&#x3D;linux-node4 --interface&#x3D;bond0 \</span><br><span class="line"> --interface-type&#x3D;bond --bonding-opts&#x3D;&quot;miimon&#x3D;100 mode&#x3D;1&quot; \</span><br><span class="line"> --ip-address&#x3D;192.168.56.111 --subnet&#x3D;255.255.255.0 --gateway&#x3D;192.168.56.2 --static&#x3D;1</span><br></pre></td></tr></table></figure><p>好的，万事具备，就差开机安装操作系统了。等等，怎么开机呢？既然是自动化安装，打电话让机房值班人员帮我们开机当然是不合适的，还记得IPMI吗，我们可以使用IPMI来进行电源管理。</p><ol><li>网卡绑定后的效果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@new ~]# cat &#x2F;proc&#x2F;net&#x2F;bonding&#x2F;bond0 </span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: eth0</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth0</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:50:56:27:f0:07</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth1</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:50:56:36:09:66</span><br><span class="line">Slave queue ID: 0</span><br></pre></td></tr></table></figure><h2 id="4-2-Cobbler电源管理"><a href="#4-2-Cobbler电源管理" class="headerlink" title="4.2 Cobbler电源管理"></a>4.2 Cobbler电源管理</h2><p>要管理服务器的电源，你可以直接使用IPMI命令进行，也可以使用cobbler间接的调用IPMI进行操作。默认情况下Cobbler使用IPMI进行电源管理，我们可以在cobbler的settings配置看到以下配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;cobbler&#x2F;settings</span><br><span class="line">power_management_default_type: &#39;ipmitool&#39;</span><br><span class="line">power_template_dir: &quot;&#x2F;etc&#x2F;cobbler&#x2F;power&quot;</span><br><span class="line">[root@linux-node1 ~]# cobbler system edit --name&#x3D;linux-node3 --power-address&#x3D;192.168.0.21 --power-type&#x3D;&#39;ipmilan&#39; --power-user&#x3D;ipmi --power-pass&#x3D;ipmi</span><br></pre></td></tr></table></figure><p>服务器电源管理：</p><ul><li>cobbler system poweroff</li><li>cobbler system poweron</li><li>cobbler system powerstatus</li><li>cobbler system reboot</li></ul><p>重启从PXE引导启动，并指定安装的操作系统配置，如下命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@log-node1 ~]# cobbler system edit  --name&#x3D;host-188116  --netboot-enabled&#x3D;1 --profile&#x3D;centos5.8-x86_64</span><br><span class="line">[root@log-node1 ~]# cobbler reposync</span><br></pre></td></tr></table></figure><h2 id="4-3-Cobbler-API使用"><a href="#4-3-Cobbler-API使用" class="headerlink" title="4.3 Cobbler API使用"></a>4.3 Cobbler API使用</h2><ol><li><p>连接Cobbler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat cobbler.py </span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import xmlrpclib</span><br><span class="line">server &#x3D; xmlrpclib.Server(&quot;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler_api&quot;)</span><br><span class="line">print server.get_distros()</span><br><span class="line">print server.get_profiles()</span><br><span class="line">print server.get_systems()</span><br><span class="line">print server.get_images()</span><br><span class="line">print server.get_repos()</span><br></pre></td></tr></table></figure></li><li><p>登录Cobbler</p></li></ol><p>默认情况下，不用登录Cobbler就可以获取到Cobbler的信息，但是如果需要进行操作，就需要登录。使用用户名和密码登录后，Cobbler会返回一个token令牌，后面的操作，我们调用任何一个Cobbler的方法，都需要将token作为最后一个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat cobbler.py </span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import xmlrpclib</span><br><span class="line">server &#x3D; xmlrpclib.Server(&quot;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler_api&quot;)</span><br><span class="line">print server.get_distros()</span><br><span class="line">print server.get_profiles()</span><br><span class="line">print server.get_systems()</span><br><span class="line">print server.get_images()</span><br><span class="line">print server.get_repos()</span><br><span class="line">token &#x3D; server.login(&quot;cobbler&quot;,&quot;devopsedu.com&quot;)</span><br><span class="line">print(token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一个添加主机的例子</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python </span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import xmlrpclib </span><br><span class="line"></span><br><span class="line">class CobblerAPI(object):</span><br><span class="line">    def __init__(self,url,user,password):</span><br><span class="line">        self.cobbler_user&#x3D; user</span><br><span class="line">        self.cobbler_pass &#x3D; password</span><br><span class="line">        self.cobbler_url &#x3D; url</span><br><span class="line"></span><br><span class="line">    def add_system(self,hostname,ip_add,mac_add,profile):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        Add Cobbler System Infomation</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        ret &#x3D; &#123;</span><br><span class="line">            &quot;result&quot;: True,</span><br><span class="line">            &quot;comment&quot;: [],</span><br><span class="line">        &#125;</span><br><span class="line">        #get token</span><br><span class="line">        remote &#x3D; xmlrpclib.Server(self.cobbler_url) </span><br><span class="line">        token &#x3D; remote.login(self.cobbler_user,self.cobbler_pass) </span><br><span class="line"></span><br><span class="line">        #add system</span><br><span class="line">        system_id &#x3D; remote.new_system(token) </span><br><span class="line">        remote.modify_system(system_id,&quot;name&quot;,hostname,token) </span><br><span class="line">        remote.modify_system(system_id,&quot;hostname&quot;,hostname,token) </span><br><span class="line">        remote.modify_system(system_id,&#39;modify_interface&#39;, &#123; </span><br><span class="line">            &quot;macaddress-eth0&quot; : mac_add, </span><br><span class="line">            &quot;ipaddress-eth0&quot; : ip_add, </span><br><span class="line">            &quot;dnsname-eth0&quot; : hostname, </span><br><span class="line">        &#125;, token) </span><br><span class="line">        remote.modify_system(system_id,&quot;profile&quot;,profile,token) </span><br><span class="line">        remote.save_system(system_id, token) </span><br><span class="line">        try:</span><br><span class="line">            remote.sync(token)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            ret[&#39;result&#39;] &#x3D; False</span><br><span class="line">            ret[&#39;comment&#39;].append(str(e))</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    cobbler &#x3D; CobblerAPI(&quot;http:&#x2F;&#x2F;192.168.56.11&#x2F;cobbler_api&quot;,&quot;cobbler&quot;,&quot;devopsedu.com&quot;)</span><br><span class="line">    ret &#x3D; cobbler.add_system(hostname&#x3D;&#39;cobbler-api-test&#39;,ip_add&#x3D;&#39;192.168.56.111&#39;,mac_add&#x3D;&#39;00:50:56:25:C2:AA&#39;,profile&#x3D;&#39;CentOS-7.4-x86_64&#39;)</span><br><span class="line">    print ret</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="第二部分-KVM和OpenStack基础"><a href="#第二部分-KVM和OpenStack基础" class="headerlink" title="第二部分 KVM和OpenStack基础"></a>第二部分 KVM和OpenStack基础</h1><h1 id="云计算概述"><a href="#云计算概述" class="headerlink" title="云计算概述"></a>云计算概述</h1><p>在第一章，会介绍什么是云计算？什么是虚拟化？以及云计算与虚拟化的关系，然后讲解目前比较流行的虚拟化项目：KVM，了解KVM虚拟化的基本概念，使用KVM创建并管理虚拟机，为学习OpenStack打下坚实的基础。</p><h2 id="云计算概述-1"><a href="#云计算概述-1" class="headerlink" title="云计算概述"></a>云计算概述</h2><p>任何事物的出现都是有背景的，云计算也不例外。云计算是由需求驱动的，首先让我们看看没有云计算之前我们都面临什么问题。</p><p><strong>传统数据中心面临的问题？</strong></p><ul><li>资源利用率低：资源利用率低是数据中心目前普遍存在的问题，多项调查数据表明企业数据中心的服务器的平均利用率普遍低于15%。</li><li>资源分配不合理：系统统建设相对独立、各自为政，其基础设施相当于一个个独立的“孤岛”，因此很难从整体的角度考虑IT基础架构的资源分配及使用的合理性。</li><li>自动化能力差：资源配置和部署过程多采用人工方式，没有相应的平台支持，使大量人力资源耗费在繁重的重复性工作上，没有自服务和自动部署的能力。</li></ul><p><strong>什么是云计算？</strong></p><p>云计算（Cloud Computing）是基于互联网的相关服务的增加、使用和交付模式。 好吧，我承认！如果你把上面那句话告诉业内人员，估计只有很少一部分人可以理解，更不用说非业内人士了。对云计算的定义有多种说法。对于到底什么是云计算,目前广为接受的是美国国家标准与技术研究院（NIST）定义：云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问，进入可配置的计算资源共享池（资源包括网络，服务器，存储，应用软件，服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。</p><p><strong>用比较好理解的方式解释就是：</strong></p><ol><li>是什么：云计算指的是一种模式。</li><li>使用方法：云计算的必须通过网络来使用。</li><li>特点和优势：弹性计算、按需付费、快速扩展，也就是你用多少，付多少钱。同时也不用关心基础设施的管理，由云计算供应商提供。</li></ol><h3 id="云计算的分类"><a href="#云计算的分类" class="headerlink" title="云计算的分类"></a>云计算的分类</h3><p>根据云计算服务性质的不同,可以将云计算区分为公有云、私有云和混合云，如图1-1</p><p>（图1-1）</p><p><strong>公有云</strong></p><p>是将搭建好的云资源池放到Internet上，所有有使用权限的用户都可以按需使用。相对于私有云，公有云的所有者是提供商，企业用户只是具备使用权。 优势：云计算的最大优势就是其规模经济效益，大多数企业选择云计算方案是出于成本考虑，那么公有云不需要投入基础建设，可以实现按需付费，随时使用。</p><p><strong>私有云</strong> 是为一个客户单独使用而构建的一套IAAS（基础设施既服务），企业可以对数据、安全性和服务质量进行最有效控制。该公司拥有基础设施，并可以控制在此基础设施上部署应用程序的方式。私有云可部署在企业数据中心的防火墙内，也可以将它们部署在一个安全的主机托管场所。 优势：数据安全对于企业来说是至关重要的，公有云服务存在较大的安全隐患，公有云平台只适合那些非关键性业务。尤其是大型企业会更多地倾向于选择私有云计算平台。</p><p><strong>混合云</strong> 指公有云和私有云的混合，大多数是指在私有云搭建好自后，由于业务发展等原因，资源需求量超过了资源池，所以需要通过申请使用公有云作为私有云的补充。 优势：混合云既可以尽可能多地发挥云计算系统的规模经济效益，同时又可以保证数据安全性。对于不是很敏感的非关键业务可以由混合云中的公有模块实现，而对那些安全性要求较高的应用则可以迁移到私有模块实现。 公有云、私有云、混合云三种云计算模式并不会谁取代谁，谁优过谁。不同企业、不同需求，需要不同的解决方案。公有云、私有云、混合云会长期共存，优势互补，共同服务于企业用户。</p><h3 id="云计算的分层"><a href="#云计算的分层" class="headerlink" title="云计算的分层"></a>云计算的分层</h3><p>如果你理解了什么是云计算，那么就需要掌握，云基础是分层的。通常情况下，我们将云计算分为三层，分别是Infrastructure（基础设施）-as-a- Service，Platform（平台）-as-a-Service，Software（软件）-as-a-Service。基础设施在最下端，平台在中间，软件在顶端。</p><p>（图1-6） IaaS(Infrastructure as a Service，基础架构即服务)通过互联网提供了数据中心、基础架构硬件和软件资源。IaaS可以提供服务器、操作系统、磁盘存储、数据库和/或信息资源。最高端IaaS的代表产品是亚马逊的AWS(Elastic Compute Cloud)，不过IBM、Vmware和惠普以及其他一些传统IT厂商也提供这类的服务。国内的话阿里云、腾讯云、青云、盛大云等代表。 IaaS通常会按照”弹性云”的模式引入其他的使用和计价模式，也就是在任何一个特定的时间，都只使用你需要的服务，并且只为之付费。我们要讲的OpenStack就是IAAS的开源项目，可以用来构建公有云或者私有云。 PaaS(Platform as a Service，平台即服务)提供了基础架构，软件开发者可以在这个基础架构之上建设新的应用，或者扩展已有的应用，同时却不必购买开发、质量控制或生产服务器。Google的App Engine和新浪的SAE都采用了PASS的模式。这些平台允许公司创建个性化的应用，也允许独立软件厂商或者其他的第三方机构针对垂直细分行业创造新的解决方案。我们要讲的Docker可以用来构建PAAS平台，百度的PAAS平台核心就是基于Docker。 SaaS(Software as a Service，软件即服务)是最为成熟、最出名，也是得到最广泛应用的一种云计算。大家可以将它理解为一种软件分布模式，在这种模式下，应用软件安装在厂商或者服务供应商那里，用户可以通过某个网络来使用这些软件，通常使用的网络是互联网。这种模式通常也被称为”随需应变(on demand)”软件，这是最成熟的云计算模式，因为这种模式具有高度的灵活性、已经证明可靠的支持服务、强大的可扩展性，因此能够降低客户的维护成本和投入，而且由于这种模式的多宗旨式的基础架构，运营成本也得以降低。Google的Gmail和Jira都是SAAS的模式。</p><h2 id="云计算与虚拟化"><a href="#云计算与虚拟化" class="headerlink" title="云计算与虚拟化"></a>云计算与虚拟化</h2><p>首先请大家不要把虚拟化和我们之前讲解的云计算进行联想，先入为主很容易让我们陷入概念的误区，让我来代理大家搞明白云计算与虚拟化的恩恩怨怨。因为提到云计算就不得不提到虚拟化，甚至说很多人将云计算和虚拟化混为一谈，这是不正确的。好的，答案有了，云计算不等于虚拟化，那么为什么呢？ 虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。如图1.1.1所示：</p><p>（图1-1）</p><h3 id="全虚拟化和半虚拟化"><a href="#全虚拟化和半虚拟化" class="headerlink" title="全虚拟化和半虚拟化"></a>全虚拟化和半虚拟化</h3><p>虚拟化技术根据特点，可以分为全虚拟化和半虚拟化。 全虚拟化（Full Virtualization)， 是原始虚拟化技术，该模型使用虚拟机协调guest操作系统和原始硬件，VMM（Virtual Machine Monitor）在GuestOS和裸硬件之间用于工作协调，一些受保护指令必须由Hypervisor（虚拟机管理程序）来捕获处理，如图1-2。</p><p>（图1-2） KVM是全虚拟化的典型代表，KVM是集成到Linux内核的Hypervisor，是X86架构且硬件支持虚拟化技术（Intel VT或AMD-V）的Linux的全虚拟化解决方案。它是Linux的一个很小的模块，利用Linux做大量的事，如任务调度、内存管理与硬件设备交互等，如图1-3。</p><p>半虚拟化（Para Virtualization），是另一种类似于全虚拟化的技术，它使用Hypervisor分享存取底层的硬件，但是它的guest操作系统集成了虚拟化方面的代码。该方法无需重新编译或引起陷阱，因为操作系统自身能够与虚拟进程进行很好的协作。半虚拟化需要guest操作系统做一些修改，使guest操作系统意识到自己是处于虚拟化环境的，但是半虚拟化提供了与原操作系统相近的性能，如图1-4。</p><p>（图1-4） 半虚拟化的一个典型代表是Xen。Xen是第一类运行在裸机上的虚拟化管理程序(Hypervisor)。它支持全虚拟化和半虚拟化,Xen支持hypervisor和虚拟机互相通讯。Xen最重要的优势在于半虚拟化，此外未经修改的操作系统也可以直接在xen上运行(如Windows)，能让虚拟机有效运行而不需要仿真，因此虚拟机能感知到hypervisor，而不需要模拟虚拟硬件，从而能实现高性能，如图1-5。</p><p>（图1-5） 在Xen环境中，主要有两个组成部分。 一个是虚拟机监控器（VMM），也叫hypervisor。Hypervisor层硬件与虚拟机之间，最先被载入到硬件的第一层。 Hypervisor载入就可部署虚拟机。在Xen中，虚拟机叫做Domain。在这些虚拟机中，Domain0具有很高的特权,负责一些专门的工作。由于hypervisor中不包含任何与硬件对话的驱动，也没有与管理员对话的接口，这些驱动就由 domain0来提供了。通过domain0，管理员可以利用一些Xen工具来创建其它虚拟机（DomainU）。这些domainU属于无特权domain。</p><h3 id="虚拟化分类"><a href="#虚拟化分类" class="headerlink" title="虚拟化分类"></a>虚拟化分类</h3><p>刚才从类型中把虚拟化分为全虚拟化和半虚拟化，从使用场景中进行区分，虚拟化可以分为服务器虚拟化、桌面虚拟化和应用虚拟化。更详细的根据资源的不同还提出了网络虚拟化、存储虚拟化等。 服务器虚拟化是我们最常见的方式，我们通过KVM、Xen、VMWARE ESXi等软件将我们的服务器虚拟成多个来使用，提高硬件的使用效率。不熟悉的朋友可以使用搜索引擎来获取相关知识，目前我的生产环境还稳定的运行着数年前的ESXi。</p><p><strong>桌面虚拟</strong></p><p>化是指将计算机的终端系统（也称作桌面）进行虚拟化，以达到桌面使用的安全性和灵活性。可以通过任何设备，在任何地点，任何时间通过网络访问属于我们个人的桌面系统。目前在中小企业并没有完全普及，主要用于IT外包、呼叫中心、移动桌面等，因为在显示方面对于低成本的解决方案效果并不好，效果好的初始采购成本较高。 桌面虚拟化依赖于服务器虚拟化，首先在数据中心的服务器上进行服务器虚拟化，生成大量的独立的桌面操作系统（比如Win7），同时根据专有的虚拟桌面协议发送给终端设备（例如RDP、VNC、Spice协议）。用户终端通过以太网登陆到虚拟主机上，只需要记住用户名和密码及网关信息，即可随时随地的通过网络访问自己的桌面系统，从而实现单机多用户。 通过与IAAS的结合，桌面虚拟化也演变成桌面云（DAAS ：Desktop As a Service）.IAAS提供基础资源平台，桌面虚拟化和云平台的完美融合达到类似于SAAS一样的效果，这便是DAAS。</p><p><strong>应用虚拟化</strong></p><p>比较简单的解释就是通过虚拟化软件实现传统C/S结构的软件通过Web浏览器进行交付。在用户访问一个服务器虚拟化后的应用时，用户计算机只需要把人机交互逻辑传送到服务器端，服务器端为用户开设独立的会话空间，应用程序的计算逻辑在这个会话空间中运行，把变化后的人机交互逻辑传送给客户端，并且在客户端相应设备展示出来，从而使用户获得如同运行本地应用程序一样的访问感受。比如我曾经使用过Cirtrix公司的Xenapp这款应用虚拟化产品，实现ERP客户端的浏览器交付。 经过上面的理解，我们应该可以看出，从表面来看虚拟化是一种技术，那么云计算是一个概念。云计算里面包含了很多的技术，也包括虚拟化技术。云计算是和服务相关的，虚拟化是相对于物理设备的。所以说虚拟化绝不是云计算。而云计算则远远超出了虚拟化的范畴。</p><h3 id="云计算不等于虚拟化"><a href="#云计算不等于虚拟化" class="headerlink" title="云计算不等于虚拟化"></a>云计算不等于虚拟化</h3><p>经过之前对云计算和虚拟化的学习，我们可以直接得出答案：云计算不等于虚拟化，云计算实质上是根据需要通过 Internet 交付共享计算资源。云计算可以通过虚拟化来实现，千万不要以为云计算就是虚拟化。我们再总结一下，云计算是一种资源使用和交付方式，虚拟化是一种具体的技术实现。但是呢，云计算的具体实现需要使用到虚拟化这项技术。</p><h1 id="2-KVM虚拟化实战"><a href="#2-KVM虚拟化实战" class="headerlink" title="2 KVM虚拟化实战"></a>2 KVM虚拟化实战</h1><p>可翻阅<a href="http://www.xoxoyun.cn博客其他kvm文章进行学习/">www.xoxoyun.cn博客其他KVM文章进行学习</a></p><h1 id="3-OpenStack入门实战"><a href="#3-OpenStack入门实战" class="headerlink" title="3 OpenStack入门实战"></a>3 OpenStack入门实战</h1><p>在OpenStack入门实战章节，我们首先会介绍OpenStack的历史、架构。然后通过部署一个两个节点的OpenStack集群来学习OpenStack的基础组建。包括</p><ul><li>OpenStack共享服务MySQL、RabbitMQ、Memcached</li><li>OpenStack验证服务Keystone</li><li>OpenStack镜像服务Glance</li><li>OpenStack计算服务Nova</li><li>OpenSTack网络服务Neutron</li><li>OpenStack管理节目Horizon</li></ul><h1 id="1-1-OpenStack介绍"><a href="#1-1-OpenStack介绍" class="headerlink" title="1.1 OpenStack介绍"></a>1.1 OpenStack介绍</h1><p>OpenStack 是由 Rackspace 和 NASA（美国宇航局） 共同开发的云计算平台，是云计算中IAAS的开源实现。通过Apache许可证授权开放源码，它可以帮助服务商和企业实现类似于Amazon EC2和S3的云基础架构服务。</p><p>OpenStack是一个云平台管理的项目，它不是一个软件。OpenStack是一个可以管理整个数据中心里大量资源池的云操作系统，包括计算、存储及网络资源。管理员可以通过管理台管理整个系统，并可以通过web接口为用户划定资源。由以上可以知道OpenStack的主要目标是管理数据中心的资源，简化资源分派。它管理三部分资源，分别是：</p><ul><li><p>计算资源：OpenStack可以规划并管理大量云主机，从而允许企业或服务提供商按需提供计算资源；开发者可以通过API访问计算资源从而创建云应用，管理员与用户则可以通过web访问这些资源；</p></li><li><p>存储资源：OpenStack可以为云服务或云应用提供所需的对象及块存储资源；因对性能及价格有需求，很多组织已经不能满足于传统的企业级存储技术，因此OpenStack可以根据用户需要提供可配置的对象存储或块存储功能；</p></li><li><p>网络资源：如今的数据中心存在大量的设置，如服务器、网络设备、存储设备、安全设备而它们还将被划分成更多的虚拟设备或虚拟网络；这会导致IP地址的数量、路由配置、安全规则将爆炸式增长；传统的网络管理技术无法真正的可高扩展、高自动化地管理下一代网络；因而OpenStack提供了插件式、可扩展、API驱动型的网络及IP管理； OpenStack通过整合相关的一组服务，提供了基础设施即服务（IaaS）的解决方案。每个服务提供了一组应用程序接口（API）来促进他们之间的整合。你可以根据您的需要，选择安装这些服务中的一些或全部。</p></li></ul><h1 id="3-2-OpenStack环境准备"><a href="#3-2-OpenStack环境准备" class="headerlink" title="3.2 OpenStack环境准备"></a>3.2 OpenStack环境准备</h1><h3 id="3-2-1-OpenStack实战案例"><a href="#3-2-1-OpenStack实战案例" class="headerlink" title="3.2.1 OpenStack实战案例"></a>3.2.1 OpenStack实战案例</h3><p>从本章开始，开始介绍OpenStack的各个组件，为了让读者更直观的了解组件的作用和组件之间的依赖关系，将通过理论和实践部署相结合的方式进行讲解。 请参考《实验环境》来完成本实例的环境准备工作。</p><p>下图是我们快速学习OpenStack的实战架构图，目标是先以最小组件依赖运行一个OpenStack平台，然后再后面的章节添加其它组件。</p><p>注意：在后面的实验过程中，我们会使用到控制节点部署和计算节点部署这样的描述方法，请到对应的主机上进行操作。</p><h3 id="3-2-2-NTP时间同步"><a href="#3-2-2-NTP时间同步" class="headerlink" title="3.2.2 NTP时间同步"></a>3.2.2 NTP时间同步</h3><p>各个服务器的时间同步是OpenStack部署和运维中往往被忽视的问题。如果各个节点时间不同步，会影响OpenStack平台的正常。所以需要保证所有节点时间同步。 在CentOS 7推荐使用Chrony来进行时间同步。 Chrony是一个开源的自由软件，它能帮助你保持系统时钟与时钟服务器（NTP）同步，因此让你的时间保持精确。它由两个程序组成，分别是chronyd和chronyc。chronyd是一个后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿。chronyc提供了一个用户界面，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可以在一台不同的远程计算机上工作。</p><p><strong>控制节点部署</strong> 本实例中，我们把控制节点的chrony作为内部的时钟服务器，其它节点都同步控制节点的时间，如果你的环境中已经存在时间服务器可以设置为已经存在的时间服务器。</p><ol><li><p>安装chrony</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y chrony</span><br></pre></td></tr></table></figure></li><li><p>配置chrony</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;chrony.conf</span><br><span class="line">#设置时钟服务器，可以设置多个，这里推荐使用阿里云的公共NTP时间服务器</span><br><span class="line">server time1.aliyun.com iburst</span><br><span class="line">server time2.aliyun.com iburst</span><br><span class="line">server time3.aliyun.com iburst</span><br><span class="line">server time4.aliyun.com iburst</span><br><span class="line">#设置允许192.168.0.0&#x2F;16网段连接</span><br><span class="line">allow 192.168.56.0&#x2F;24</span><br></pre></td></tr></table></figure></li><li><p>启动 NTP 服务并将其配置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable chronyd.service</span><br><span class="line">[root@linux-node1 ~]# systemctl start chronyd.service</span><br></pre></td></tr></table></figure></li></ol><p><strong>其它节点部署</strong></p><ol><li><p>安装chrony</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# yum install -y chrony</span><br></pre></td></tr></table></figure></li><li><p>配置chrony</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# vim &#x2F;etc&#x2F;chrony.conf</span><br><span class="line">#设置为控制节点的IP地址，并将其它配置全部删除。</span><br><span class="line">server 192.168.56.11 iburst</span><br></pre></td></tr></table></figure></li><li><p>启动 NTP 服务并将其配置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# systemctl enable chronyd.service</span><br><span class="line">[root@linux-node2 ~]# systemctl start chronyd.service</span><br></pre></td></tr></table></figure></li></ol><p><strong>验证同步时间</strong></p><p>在同时时间之前要确保你的时区是正确的。CentOS7提供了timedatectl用来修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# timedatectl set-timezone Asia&#x2F;Shanghai</span><br><span class="line">在所有节点上执行chronyc source保证配置都正确</span><br><span class="line">[root@linux-node1 ~]# chronyc sources</span><br></pre></td></tr></table></figure><h3 id="3-2-3-基础软件包安装"><a href="#3-2-3-基础软件包安装" class="headerlink" title="3.2.3 基础软件包安装"></a>3.2.3 基础软件包安装</h3><p>基础软件包需要在所有的OpenStack节点上进行安装，包括控制节点和计算节点。</p><ol><li>安装EPEL仓库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><ol><li>安装OpenStack仓库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y centos-release-openstack-train</span><br></pre></td></tr></table></figure><ol><li>安装OpenStack客户端</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y python-openstackclient</span><br></pre></td></tr></table></figure><blockquote><p>注意：本文的实验环境是关闭SELinux，如果你启用了，需要安装openstack-selinux 包实现对OpenStac服务的安全策略进行自动管理。</p></blockquote><ol><li>安装openstack SELinux管理包</li></ol><p>虽然我们在实验环境准备中，已经要求环境中关闭SELinux，但是为了以防万一，你还是需要安装上openstack-selinux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y openstack-selinux</span><br></pre></td></tr></table></figure><p><strong>OpenStack源码包</strong></p><p>本案例使用的是yum安装，如果你想使用源码进行OpenStack部署和开发，目前OpenStack所有的源码包，都可以在这里找到<a href="http://tarballs.openstack.org/%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AEhttps://launchpad.net/openstack/%E8%8E%B7%E5%8F%96%E5%88%B0%E6%AF%8F%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AF%A6%E6%83%85%E5%92%8C%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E3%80%82">http://tarballs.openstack.org/，同时也可以访问https://launchpad.net/openstack/获取到每个项目的详情和下载地址。</a></p><h3 id="3-2-4-MySQL数据库部署"><a href="#3-2-4-MySQL数据库部署" class="headerlink" title="3.2.4 MySQL数据库部署"></a>3.2.4 MySQL数据库部署</h3><p>数据库是OpenStack的基础组件之一，OpenStack的大多数组件如KeyStone、Glance、Nova、Neutron和Cinder都需要使用数据库存储数据，包括Horizon也可以使用数据库来进行Session的存储。因此数据库的可用率会直接影响到整个OpenStack平台的可用率。如果数据库故障，OpenStack平台将无法创建新的虚拟机和管理虚拟机，但是不不会影响到正在运行的虚拟机。<br>OpenStack支持MySQL、PostgreSQL等多种数据库，需要注意的是在CentOS7上默认不是MySQL，而是mariadb。 你可以将MySQL Server安装在任意的服务器上，当然最好是专用的数据库服务器，使用更多的CPU和IO性能更好的硬盘。 注：生产环境可以咨询DBA进行MySQL的性能优化和高可用的配置。</p><ol><li>MySQL安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y mariadb mariadb-server python2-PyMySQL</span><br></pre></td></tr></table></figure><ol><li><p>修改MySQL配置文件</p><p>默认情况下MySQL已经包含了/etc/my.cnf.d的目录，我们需要把配置放在该目录下即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;my.cnf.d&#x2F;openstack.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">bind-address &#x3D; 192.168.56.11 #设置监听的IP地址</span><br><span class="line">default-storage-engine &#x3D; innodb  #设置默认的存储引擎</span><br><span class="line">innodb_file_per_table &#x3D; on#使用独享表空间</span><br><span class="line">collation-server &#x3D; utf8_general_ci #服务器的默认校对规则</span><br><span class="line">character-set-server &#x3D; utf8 #服务器安装时指定的默认字符集设定</span><br><span class="line">max_connections &#x3D; 4096 #设置MySQL的最大连接数，生产请根据实际情况设置。</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL Server并设置开机启动</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable mariadb.service </span><br><span class="line">[root@linux-node1 ~]# systemctl start mariadb.service</span><br></pre></td></tr></table></figure><ol><li>进行数据库安全设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li>数据库创建</li></ol><p>在部署完MySQL数据后，可以将各个服务的数据库创建上，给后期安装使用。注意在实际生产环境中，一定要使用复杂度更高的密码和做好访问控制，这里实验使用用户名和密码相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">…</span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br><span class="line">#Keystone数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE keystone;</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;keystone&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#39;keystone&#39;@&#39;%&#39; IDENTIFIED BY &#39;keystone&#39;;</span><br><span class="line"></span><br><span class="line">#Glance数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE glance;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;glance&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;%&#39; IDENTIFIED BY &#39;glance&#39;;</span><br><span class="line"></span><br><span class="line">#Placement数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE placement;</span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO placement@&#39;localhost&#39; IDENTIFIED BY &#39;placement&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO placement@&#39;%&#39; IDENTIFIED BY &#39;placement&#39;;</span><br><span class="line"></span><br><span class="line">#Nova数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE nova;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO &#39;nova&#39;@&#39;%&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE nova_api;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO &#39;nova&#39;@&#39;%&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE nova_cell0;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO &#39;nova&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO &#39;nova&#39;@&#39;%&#39; IDENTIFIED BY &#39;nova&#39;;</span><br><span class="line"></span><br><span class="line">#Neutron 数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE neutron;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;neutron&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO &#39;neutron&#39;@&#39;%&#39; IDENTIFIED BY &#39;neutron&#39;;</span><br><span class="line"></span><br><span class="line">#Cinder数据库</span><br><span class="line"></span><br><span class="line">CREATE DATABASE cinder;</span><br><span class="line">GRANT ALL PRIVILEGES ON cinder.* TO &#39;cinder&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;cinder&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON cinder.* TO &#39;cinder&#39;@&#39;%&#39; IDENTIFIED BY &#39;cinder&#39;;</span><br></pre></td></tr></table></figure><p>数据库部署完毕后，后期的很多操作都可以通过命令，甚至直接修改数据库的数据来进行。注意：本实例为了简化步骤，使用了较为简单的密码，生产环境请设置符合运维规范的复杂密码来进行替换。 注意：一定要给数据库做好相关的高可用和备份措施，像对待生成业务数据库一样对待它哦。</p><h3 id="消息代理RabbitMQ"><a href="#消息代理RabbitMQ" class="headerlink" title="消息代理RabbitMQ"></a>消息代理RabbitMQ</h3><p>OpenStack 使用（Message broker）消息代理在各个服务之间进行协调和状态管理。OpenStack支持三种开源的消息队列服务。分别为RabbitMQ、Qpid、ZeroMQ。Openstack默认使用RabbitMQ。 消息队列在OpenStack整个架构中扮演着交通枢纽的作用，正是因为OpenStack部署的灵活性、各个组件的松耦合、架构的扁平化，反而使得OpenStack更加依赖于消息队列。OpenStack的控制、计算、网络与存储服务均需要通过消息队列进行通信。 你可以将RabbitMQ部署在独立的服务器中，或者使用RabbitMQ集群这取决于你的实际情况，在实验环境，部署在控制节点即可。</p><ol><li>安装RabbitMQ</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y rabbitmq-server</span><br></pre></td></tr></table></figure><ol><li>设置开启启动，并启动RabbitMQ</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable rabbitmq-server.service</span><br><span class="line">[root@linux-node1 ~]# systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol><li>添加openstack用户。</li></ol><p>创建一个openstack用户，密码为openstack。注意实际使用中进行密码修改，这里设置的用户名和密码在后面配置OpenStack组件的时候需要在配置文件里面设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# rabbitmqctl add_user openstack openstack</span><br><span class="line">Creating user &quot;openstack&quot; ...</span><br></pre></td></tr></table></figure><ol><li>给刚才创建的openstack用户，创建权限。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">Setting permissions for user &quot;openstack&quot; in vhost &quot;&#x2F;&quot; ...</span><br></pre></td></tr></table></figure><ol><li>启用Web监控插件</li></ol><p>RabbitMQ自带了一个Web监控插件，可以通过Web界面监控RabbitMQ的运行状态。同时也提供了HTTP API。可以方便的集成到Nagios、Zabbix等监控平台上。 Web监控插件启用后就可以通过<a href="http://ip:15672/%E6%9D%A5%E8%AE%BF%E9%97%AEweb%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E3%80%82">http://IP:15672/来访问web管理界面。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# rabbitmq-plugins list</span><br><span class="line">[root@linux-node1 ~]# rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">（注：如果主机名不能解析，rabbitMQ将无法启动。在生产应用时建议设置为集群模式，建议三个节点。1个硬盘节点、两个内存节点。）</span><br><span class="line">[root@linux-node1 ~]# lsof -i:15672</span><br><span class="line">COMMAND  PID     USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">beam    2620 rabbitmq   15u  IPv4  16805      0t0  TCP *:15672 (LISTEN)</span><br></pre></td></tr></table></figure><p>默认情况下RabbitMQ服务使用5672端口，而Web管理插件监听15672端口，直接在浏览器输入<a href="http://192.168.56.11:15672/">http://192.168.56.11:15672</a></p><blockquote><p>RabbitMQ默认的用户名和密码均为guest。之前创建的openstack的用户是无法通过Web界面登录的。</p></blockquote><p>（图2.2.2）</p><blockquote><p>实践经验：消息队列收发消息的性能和消息队列的HA能力直接影响OpenStack的性能和高可用。如果消息队列Down机，OpenStack将无法创建新的云主机，以及进行其它的管理工作。所以在企业生产环境中，需要使用RabbitMQ的集群来保证可用性。同时做好监控工作，RabbitMQ自带HTTP的API，便于集成到企业的监控平台上。</p></blockquote><h1 id="1-3-OpenStack验证服务KeyStone"><a href="#1-3-OpenStack验证服务KeyStone" class="headerlink" title="1.3 OpenStack验证服务KeyStone"></a>1.3 OpenStack验证服务KeyStone</h1><p>Keystone（OpenStack Identity Service）是OpenStack框架中，负责身份验证、服务规则和服务令牌的功能，它实现了OpenStack的Identity API。</p><p>Keystone类似一个服务总线， 或者说是整个OpenStack框架的注册中心，其他服务通过keystone来注册其服务的Endpoint（服务访问的URL），任何服务之间相互的调用，需要经过Keystone的身份验证，来获得目标服务的Endpoint来找到目标服务。</p><h3 id="Keystone概述"><a href="#Keystone概述" class="headerlink" title="Keystone概述"></a>Keystone概述</h3><p>Keystone提供了以下两个主要的功能：</p><ul><li>用户与认证:用户权限与用户行为跟踪；</li><li>服务目录:提供一个服务目录，包括所有服务项与相关Api的端点。</li></ul><p>下面我们从这两个主要功能来了解Keystone的概念，和Keystone在Openstack中的作用。</p><ol><li><p>Keystone用户与认证</p><p>Keystone为各个Openstack组件提供用户和认证服务，各个组件都必须与Keystone进行交互。比如登陆认证是用户在访问Openstack各个组件中的API时，必须通过Keystone的用户名和密码验证，最终通过Kyestone验证获取token，完成对用户的登陆认证。如果认证失败，该用户将不能访问该API。</p></li></ol><p><strong>User</strong></p><p>User即用户，它是用一个数字代表使用OpenStack云服务的一个人、系统、或服务。身份验证服务将会验证传入的由用户声明将调用的请求。用户如果已经登录，可就能分配令牌（tokens）访问资源。 用户可能被直接分配给特定的租户，用户行为被包含在租户（tenant），Users通过认证信息（credentials，如密码、API Keys等）进行验证。</p><p><strong>Credentials</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Credentials即证书，用户可以通过身份验证，保证数据通常只被一个用户属于或拥有(因为没有其他人应该知道数据)。</span><br></pre></td></tr></table></figure><p>以下为证书的例子: 一个匹配的用户名和密码 一个匹配的用户名和API键 一个身份认证令牌</p><p><strong>Authentication</strong></p><p>Authentication即认证，认证是确认身份或识别真实性的行为。身份服务通过与用户的一组声明验证以确认传入的请求是由该用户声明过的。这些声明被初始化为一组证书 (username&amp;password, or username and API key)。初始确认后，身份服务将会给用户发布一个确认身份的令牌(Token)，在用户随后的请求中可以使用这个令牌授权访问。</p><p><strong>Token：</strong></p><p>Token即令牌，是一个用户访问资源的任意文本，每一个令牌都有一个范围，描述了可以访问哪些资源。令牌可能随时撤消，是有有效期的。身份认证是支持令牌认证的，它的目的为在未来支持额外的协议。其目的是为了让它首先成为一种集成服务，而不是一种渴望成为丰富的身份存储和管理的解决方案。 T <strong>Tenant：</strong></p><p>Tenant即租户，它是各个服务中的一些可以访问的资源集合。它是一个容器，用于组织和隔离资源，或标识对象。一个租户可以一个客户、账户、组织、项目的映射。例如，在Nova中一个tenant可以是一些机器，在Swift和Glance中一个tenant可以是一些镜像存储，在Neutron中一个tenant可以是一些网络资源。Users默认的总是绑定到某些tenant上。</p><p><strong>Role：</strong></p><p>Role即角色，Roles代表一组用户可以访问的资源权限，例如Nova中的虚拟机、Glance中的镜像。Users可以被添加到任意一个全局的或租户内的角色中。在全局的role中，用户的role权限作用于所有的租户，即可以对所有的租户执行role规定的权限；在租户内的role中，用户仅能在当前租户内执行role规定的权限。</p><p><strong>Domain：</strong></p><p>在KeyStone V3版本将 Tenant 改为 Project 并在其上添加 Domain 的概念，这更加符合现实世界和云服务的映射。利用 Domain 实现真正的多租户（multi-tenancy）架构，Domain 担任 Project 的高层容器。云服务的客户是 Domain 的所有者，他们可以在自己的 Domain 中创建多个 Projects、Users、Groups 和 Roles。通过引入 Domain，云服务客户可以对其拥有的多个 Project 进行统一管理，而不必再向过去那样对每一个 Project 进行单独管理。</p><p><strong>Group：</strong></p><p>Group 是一组 Users 的容器，可以向 Group 中添加用户，并直接给 Group 分配角色，那么在这个 Group 中的所有用户就都拥有了 Group 所拥有的角色权限。通过引入 Group 的概念，Keystone V3 实现了对用户组的管理，达到了同时管理一组用户权限的目的。这与 V2 中直接向 User/Project 指定 Role 不同，使得对云服务进行管理更加便捷。 Domain、Group、Project、User 和 Role 的关系图</p><p>如图 2 所示，在一个 Domain 中包含 3 个 Projects,可以通过 Group1 将 Role Sysadmin直接赋予 Domain,那么 Group1 中的所有用户将会对 Domain 中的所有 Projects 都拥有管理员权限。也可以通过 Group2 将 Role Engineer 只赋予 Project3,这样 Group2 中的 User 就只拥有对 Project3 相应的权限，而不会影响其它 Projects。</p><ol><li><p>Keystone服务目录</p><p>上文说过，Keystone除了用户管理相关的支撑，还有一个重要的作用是一个服务目录。KeyStone为Openstack各个服务提供了一个REST API端点列表。</p></li><li><p>Service Service即服务，如Nova、Glance、Swift。根据前三个概念（User，Tenant和Role）一个服务可以确认当前用户是否具有访问其资源的权限。但是当一个user尝试着访问其租户内的service时，他必须知道这个service是否存在以及如何访问这个service，这里通常使用一些不同的名称表示不同的服务。在上文中谈到的Role，实际上也是可以绑定到某个service的。</p></li><li><p>Endpoint Endpoint，翻译为“端点”，我们可以理解它是一个服务暴露出来的访问点，如果需要访问一个服务，则必须知道他的endpoint。因此，在keystone中包含一个endpoint模板（endpoint template，在安装keystone的时候我们可以在conf文件夹下看到这个文件），这个模板提供了所有存在的服务endpoints信息。一个endpoint template包含一个URLs列表，列表中的每个URL都对应一个服务实例的访问地址，并且具有public、private和admin这三种权限。public url可以被全局访问（如<a href="http://compute.example.com/">http://compute.example.com），private</a>%2Cprivate/) url只能被局域网访问（如<a href="http://compute.example.local/">http://compute.example.local），admin</a>%2Cadmin/) url被从常规的访问中分离。</p></li></ol><h3 id="KeyStone部署"><a href="#KeyStone部署" class="headerlink" title="KeyStone部署"></a>KeyStone部署</h3><p>OpenStack中所有服务的安装可以说是最简单的。复杂的就在于本身的配置文件的修改和与Keystone相关的配置。还记得上面说的，OpenStack的每个组件如果能够使用都必须在Keystone创建Service和Endpoint吗？好的，我们开始。</p><ol><li>安装keystone</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-keystone httpd mod_wsgi memcached python-memcached</span><br></pre></td></tr></table></figure><ol><li>设置Memcache开启启动并启动Memcached</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#keystone使用Memcached来缓存验证后生成的token。</span><br><span class="line">[root@linux-node1 ~]# systemctl enable memcached.service</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;memcached</span><br><span class="line">PORT&#x3D;&quot;11211&quot;</span><br><span class="line">USER&#x3D;&quot;memcached&quot;</span><br><span class="line">MAXCONN&#x3D;&quot;1024&quot;</span><br><span class="line">CACHESIZE&#x3D;&quot;64&quot;</span><br><span class="line">OPTIONS&#x3D;&quot;-l 192.168.56.11,::1&quot;</span><br><span class="line">[root@linux-node1 ~]# systemctl start memcached.service</span><br></pre></td></tr></table></figure><ol><li>Keystone配置</li></ol><p>KeyStone的配置只需要修改/etc/keystone/keystone.conf即可，涉及Admin Token和Mysql连接，其它均使用默认配置即可。所有配置文件都存放到/etc/keystone（项目名）目录下。日志都存放在/var/log/keystone（项目名）目录下，其它项目也是如此。 好的，我们暂停一下，在后面的部署中，我们会使用这样的方式列出配置，未列出的配置，保持默认不进行修改，除非特别提示到。另外要注意配置的位置，OpenStack所有服务都会有[DEFAULT] [dtabase] 这样的配置部分，请在文中列出的配置部分里面进行配置，切记！。因为确实有相同的配置存在在不同的配置端的情况，这样例外情况，如果没有按要求配置，可能就无法正常运行。</p><ul><li><p>配置KeyStone数据库</p><p>OpenStack中所有服务的数据库同步都需要依赖与配置文件中的数据库连接的配置，所以必须先修改完毕配置文件后，再进行数据库的初始化操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;keystone&#x2F;keystone.conf</span><br><span class="line">[database]</span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;keystone:keystone@192.168.56.11&#x2F;keystone</span><br></pre></td></tr></table></figure></li><li><p>设置Token和Memcached</p></li></ul><p>在之前的KeyStone版本由于所有的API通信都要请求Keystone来生产Token，之前是存放在MySQL表里，导致表特别大，经常需要手动清理，而且性能下降，现在新的版本我们可以存放在memcache里面了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[token]</span><br><span class="line">provider &#x3D; fernet</span><br></pre></td></tr></table></figure><ul><li>同步数据库：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure><blockquote><p>小提示：为什么要使用keystone用户来同步数据呢，因为同步操作会生产日志/var/log/keystone/keystone.log，如果使用root用户，那么生成的文件权限为root用户，keystone启动的时候没有权限读取该文件，会无法启动。如果你的同步执行有问题，那么可以查看日志获取详细的错误信息。</p></blockquote><ul><li>验证数据库创建是否正常：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mysql -h 192.168.56.11 -ukeystone -pkeystone -e &quot;use keystone;show tables;&quot;</span><br></pre></td></tr></table></figure><ol><li><p>初始化fernet keys</p><p>生成完毕之后，会创建/etc/keystone/fernet-keys目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">[root@linux-node1 ~]# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure></li><li><p>初始化keystone</p></li></ol><p>还记得上面说的Openstack的每个组件都必须在Keystone上进行注册。当然也包括Keystone本身。身份认证服务管理了一个与您环境相关的 API 端点的目录。服务使用这个目录来决定如何与您环境中的其他服务进行通信。 OpenStack使用三个API端点变种代表每种服务：admin，internal和public。默认情况下，管理API端点允许修改用户和租户而公共和内部APIs不允许这些操作。在生产环境中，处于安全原因，变种为了服务不同类型的用户可能驻留在单独的网络上。 对实例而言，公共API网络为了让顾客管理他们自己的云在互联网上是可见的。管理API网络在管理云基础设施的组织中操作也是有所限制的。内部API网络可能会被限制在包含OpenStack服务的主机上。此外，OpenStack支持可伸缩性的多区域。为了简单起见，我们这里均使用一个IP地址。192.168.56.11。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# keystone-manage bootstrap --bootstrap-password admin \</span><br><span class="line"> --bootstrap-admin-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-internal-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-public-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><ol><li>验证Keystone配置</li></ol><p>下面我将上面进行的配置列出来，供读者进行比对，配置应该和本文保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# grep &quot;^[a-z]&quot; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf </span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;keystone:keystone@192.168.56.11&#x2F;keystone</span><br><span class="line">provider &#x3D; fernet</span><br></pre></td></tr></table></figure><ol><li>KeyStone启动</li></ol><p>OpenStack Keystone使用Apache来进行启动，提高了性能。 配置ServerName，注意一定要配置，不然会有奇怪的问题出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">ServerName 192.168.56.11:80</span><br><span class="line">创建配置文件</span><br><span class="line">[root@linux-node1 ~]# ln -s &#x2F;usr&#x2F;share&#x2F;keystone&#x2F;wsgi-keystone.conf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;</span><br></pre></td></tr></table></figure><p>启动keystone，并查看端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable httpd.service</span><br><span class="line">[root@linux-node1 ~]# systemctl start httpd.service</span><br><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep httpd</span><br><span class="line">tcp6       0      0 :::5000                 :::*              LISTEN      3408&#x2F;httpd</span><br><span class="line">tcp6       0      0 :::80                   :::*              LISTEN      3408&#x2F;httpd</span><br><span class="line">现在，如果你的Keystone没有正常的监听端口，那么请查看日志，后期我们会不停的强调读者通过查看日志来排查问题，OpenStack的日志是值得信赖的。如果你想让朋友帮助解决问题，请不要使用日志截图的方式，请发送完整的日志。</span><br></pre></td></tr></table></figure><h3 id="Keystone权限管理"><a href="#Keystone权限管理" class="headerlink" title="Keystone权限管理"></a>Keystone权限管理</h3><p>我们已经成功的运行了Keystone服务，要提供身份认证服务，需要使用域、项目、用户和角色的组合。 首先我们要创建一个超级管理员用户、角色和项目。默认情况下。在创建用户之前，我们需要连接到Keystone。问题来了，现在我们没有任何用户，我们如何登录KeyStone呢？这个时候ADMIN_TOKEN就可以帮忙了，我们可以使用这个超级密码直接登录到KeyStone上，所以说，一定要保护好你的ADMIN_TOKEN。 好的，现在我们要连接到Keystone上，有两种方法：</p><ul><li>使用–os-token等参数的方式（就是通过参数的方式）</li><li>使用环境变量（将参数设置为环境变量，keystone直接读取环境变量）</li><li>设置环境变量</li></ul><p>在这里，我们使用三个环境变量用来连接keystone。admin用户和密码就是我们前面使用keystone-manage bootstrap初始化的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# </span><br><span class="line">export OS_USERNAME&#x3D;admin</span><br><span class="line">export OS_PASSWORD&#x3D;admin</span><br><span class="line">export OS_PROJECT_NAME&#x3D;admin</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br></pre></td></tr></table></figure><p>请注意环境变量的问题，不要打开新的会话进行操作。</p><ol><li>创建实验用的demo项目、用户和角色</li></ol><p>下面我们创建一个普通用户和租户，我们下面的实验均使用这个普通用户进行Openstack的管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># openstack domain create --description &quot;An Example Domain&quot; example</span><br><span class="line"># openstack project create --domain default --description &quot;Demo Project&quot; myproject</span><br><span class="line"># openstack user create --domain default --password-prompt myuser</span><br><span class="line"># openstack role create myrole</span><br><span class="line"># openstack role add --project myproject --user myuser myrole</span><br></pre></td></tr></table></figure><blockquote><p>在创建用户的时候可以使用–password-prompt，然后根据提示输入密码</p></blockquote><ol><li><p>创建一个服务的项目</p><p>OpenStack服务也需要使用用户名、租户和角色，用来访问OpenStack的各个服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># openstack project create --domain default --description &quot;Service Project&quot; service</span><br></pre></td></tr></table></figure></li><li><p>创建各个服务连接Keystone的账户 后面我们部署的其它服务都需要到Keystone上进行认证，所以现在就可以提前将各个服务的账号创建上。并全部加入service项目。</p><ul><li><p>创建glance用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password glance glance</span><br><span class="line"># openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure></li><li><p>创建nova用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password nova nova</span><br><span class="line"># openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure></li><li><p>创建placement用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password placement placement</span><br><span class="line"># openstack role add --project service --user placement admin</span><br></pre></td></tr></table></figure></li><li><p>创建Neutron用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password neutron neutron</span><br><span class="line"># openstack role add --project service --user neutron admin</span><br></pre></td></tr></table></figure></li><li><p>创建cinder用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password cinder cinder</span><br><span class="line"># openstack role add --project service --user cinder admin</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="验证Keystone安装"><a href="#验证Keystone安装" class="headerlink" title="验证Keystone安装"></a>验证Keystone安装</h3><p>首先，我们需要取消OS_TOKEN和OS_URL这两个变量。这两个变量是用于引导我们创建Admin用户和Keystone服务自身Service和Endpoint注册时候的用的，现在已经不需要了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# unset OS_AUTH_URL OS_PASSWORD</span><br></pre></td></tr></table></figure><p><strong>测试admin用户</strong></p><p>密码为admin，需要输入两次，如果能正常获取token说明配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack --os-auth-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3 \</span><br><span class="line">--os-project-domain-name Default --os-user-domain-name Default \</span><br><span class="line">--os-project-name admin --os-username admin token issue</span><br><span class="line">Password:</span><br><span class="line">…</span><br><span class="line">#密码为admin，需要输入两次，如果能正常获取token说明配置成功。</span><br></pre></td></tr></table></figure><p><strong>测试myuser用户</strong></p><p>密码为你设置的，需要输入两次，如果能正常获取token说明配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack --os-auth-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3 \</span><br><span class="line">--os-project-domain-name Default --os-user-domain-name Default \</span><br><span class="line">--os-project-name myproject --os-username myuser token issue</span><br><span class="line">Password:</span><br><span class="line">…</span><br></pre></td></tr></table></figure><h3 id="环境变量脚本配置"><a href="#环境变量脚本配置" class="headerlink" title="环境变量脚本配置"></a>环境变量脚本配置</h3><p>使用Keystone命令有两种方式，第一种就像上面。我们使用指定–os-username、–os-password和–os-password这样的选项来进行操作，但是这样在我们日常操作中会比较麻烦。第二种方式就是使用环境变量，这样可以避免每次使用都要制定变量。我们将这些常用的变量设置为环境变量。 下面建立环境变量为其它服务部署和配置使用</p><ol><li>设置admin环境变量脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;root&#x2F;admin-openstack.sh</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_NAME&#x3D;admin</span><br><span class="line">export OS_USERNAME&#x3D;admin</span><br><span class="line">export OS_PASSWORD&#x3D;admin</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br><span class="line">export OS_IMAGE_API_VERSION&#x3D;2</span><br></pre></td></tr></table></figure><ol><li>创建普通用户的环境变量脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;root&#x2F;demo-openstack.sh</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_NAME&#x3D;myproject</span><br><span class="line">export OS_USERNAME&#x3D;myuser</span><br><span class="line">export OS_PASSWORD&#x3D;123.com</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br><span class="line">export OS_IMAGE_API_VERSION&#x3D;2</span><br></pre></td></tr></table></figure><p>创建完毕变量后，在后期使用某个账户的权限，只需要source一下就可以使用，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;admin-openstack.sh</span><br><span class="line">[root@linux-node1 ~]# openstack token issue</span><br></pre></td></tr></table></figure><p>测试demo用户，是否能够获取token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;demo-openstack.sh </span><br><span class="line">[root@linux-node1 ~]# openstack token issue</span><br></pre></td></tr></table></figure><h1 id="1-3-OpenStack验证服务KeyStone-1"><a href="#1-3-OpenStack验证服务KeyStone-1" class="headerlink" title="1.3 OpenStack验证服务KeyStone"></a>1.3 OpenStack验证服务KeyStone</h1><p>Keystone（OpenStack Identity Service）是OpenStack框架中，负责身份验证、服务规则和服务令牌的功能，它实现了OpenStack的Identity API。</p><p>Keystone类似一个服务总线， 或者说是整个OpenStack框架的注册中心，其他服务通过keystone来注册其服务的Endpoint（服务访问的URL），任何服务之间相互的调用，需要经过Keystone的身份验证，来获得目标服务的Endpoint来找到目标服务。</p><h3 id="Keystone概述-1"><a href="#Keystone概述-1" class="headerlink" title="Keystone概述"></a>Keystone概述</h3><p>Keystone提供了以下两个主要的功能：</p><ul><li>用户与认证:用户权限与用户行为跟踪；</li><li>服务目录:提供一个服务目录，包括所有服务项与相关Api的端点。</li></ul><p>下面我们从这两个主要功能来了解Keystone的概念，和Keystone在Openstack中的作用。</p><ol><li><p>Keystone用户与认证</p><p>Keystone为各个Openstack组件提供用户和认证服务，各个组件都必须与Keystone进行交互。比如登陆认证是用户在访问Openstack各个组件中的API时，必须通过Keystone的用户名和密码验证，最终通过Kyestone验证获取token，完成对用户的登陆认证。如果认证失败，该用户将不能访问该API。</p></li></ol><p><strong>User</strong></p><p>User即用户，它是用一个数字代表使用OpenStack云服务的一个人、系统、或服务。身份验证服务将会验证传入的由用户声明将调用的请求。用户如果已经登录，可就能分配令牌（tokens）访问资源。 用户可能被直接分配给特定的租户，用户行为被包含在租户（tenant），Users通过认证信息（credentials，如密码、API Keys等）进行验证。</p><p><strong>Credentials</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Credentials即证书，用户可以通过身份验证，保证数据通常只被一个用户属于或拥有(因为没有其他人应该知道数据)。</span><br></pre></td></tr></table></figure><p>以下为证书的例子: 一个匹配的用户名和密码 一个匹配的用户名和API键 一个身份认证令牌</p><p><strong>Authentication</strong></p><p>Authentication即认证，认证是确认身份或识别真实性的行为。身份服务通过与用户的一组声明验证以确认传入的请求是由该用户声明过的。这些声明被初始化为一组证书 (username&amp;password, or username and API key)。初始确认后，身份服务将会给用户发布一个确认身份的令牌(Token)，在用户随后的请求中可以使用这个令牌授权访问。</p><p><strong>Token：</strong></p><p>Token即令牌，是一个用户访问资源的任意文本，每一个令牌都有一个范围，描述了可以访问哪些资源。令牌可能随时撤消，是有有效期的。身份认证是支持令牌认证的，它的目的为在未来支持额外的协议。其目的是为了让它首先成为一种集成服务，而不是一种渴望成为丰富的身份存储和管理的解决方案。 T <strong>Tenant：</strong></p><p>Tenant即租户，它是各个服务中的一些可以访问的资源集合。它是一个容器，用于组织和隔离资源，或标识对象。一个租户可以一个客户、账户、组织、项目的映射。例如，在Nova中一个tenant可以是一些机器，在Swift和Glance中一个tenant可以是一些镜像存储，在Neutron中一个tenant可以是一些网络资源。Users默认的总是绑定到某些tenant上。</p><p><strong>Role：</strong></p><p>Role即角色，Roles代表一组用户可以访问的资源权限，例如Nova中的虚拟机、Glance中的镜像。Users可以被添加到任意一个全局的或租户内的角色中。在全局的role中，用户的role权限作用于所有的租户，即可以对所有的租户执行role规定的权限；在租户内的role中，用户仅能在当前租户内执行role规定的权限。</p><p><strong>Domain：</strong></p><p>在KeyStone V3版本将 Tenant 改为 Project 并在其上添加 Domain 的概念，这更加符合现实世界和云服务的映射。利用 Domain 实现真正的多租户（multi-tenancy）架构，Domain 担任 Project 的高层容器。云服务的客户是 Domain 的所有者，他们可以在自己的 Domain 中创建多个 Projects、Users、Groups 和 Roles。通过引入 Domain，云服务客户可以对其拥有的多个 Project 进行统一管理，而不必再向过去那样对每一个 Project 进行单独管理。</p><p><strong>Group：</strong></p><p>Group 是一组 Users 的容器，可以向 Group 中添加用户，并直接给 Group 分配角色，那么在这个 Group 中的所有用户就都拥有了 Group 所拥有的角色权限。通过引入 Group 的概念，Keystone V3 实现了对用户组的管理，达到了同时管理一组用户权限的目的。这与 V2 中直接向 User/Project 指定 Role 不同，使得对云服务进行管理更加便捷。 Domain、Group、Project、User 和 Role 的关系图</p><p>如图 2 所示，在一个 Domain 中包含 3 个 Projects,可以通过 Group1 将 Role Sysadmin直接赋予 Domain,那么 Group1 中的所有用户将会对 Domain 中的所有 Projects 都拥有管理员权限。也可以通过 Group2 将 Role Engineer 只赋予 Project3,这样 Group2 中的 User 就只拥有对 Project3 相应的权限，而不会影响其它 Projects。</p><ol><li><p>Keystone服务目录</p><p>上文说过，Keystone除了用户管理相关的支撑，还有一个重要的作用是一个服务目录。KeyStone为Openstack各个服务提供了一个REST API端点列表。</p></li><li><p>Service Service即服务，如Nova、Glance、Swift。根据前三个概念（User，Tenant和Role）一个服务可以确认当前用户是否具有访问其资源的权限。但是当一个user尝试着访问其租户内的service时，他必须知道这个service是否存在以及如何访问这个service，这里通常使用一些不同的名称表示不同的服务。在上文中谈到的Role，实际上也是可以绑定到某个service的。</p></li><li><p>Endpoint Endpoint，翻译为“端点”，我们可以理解它是一个服务暴露出来的访问点，如果需要访问一个服务，则必须知道他的endpoint。因此，在keystone中包含一个endpoint模板（endpoint template，在安装keystone的时候我们可以在conf文件夹下看到这个文件），这个模板提供了所有存在的服务endpoints信息。一个endpoint template包含一个URLs列表，列表中的每个URL都对应一个服务实例的访问地址，并且具有public、private和admin这三种权限。public url可以被全局访问（如<a href="http://compute.example.com/">http://compute.example.com），private</a>%2Cprivate/) url只能被局域网访问（如<a href="http://compute.example.local/">http://compute.example.local），admin</a>%2Cadmin/) url被从常规的访问中分离。</p></li></ol><h3 id="KeyStone部署-1"><a href="#KeyStone部署-1" class="headerlink" title="KeyStone部署"></a>KeyStone部署</h3><p>OpenStack中所有服务的安装可以说是最简单的。复杂的就在于本身的配置文件的修改和与Keystone相关的配置。还记得上面说的，OpenStack的每个组件如果能够使用都必须在Keystone创建Service和Endpoint吗？好的，我们开始。</p><ol><li>安装keystone</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-keystone httpd mod_wsgi memcached python-memcached</span><br></pre></td></tr></table></figure><ol><li>设置Memcache开启启动并启动Memcached</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#keystone使用Memcached来缓存验证后生成的token。</span><br><span class="line">[root@linux-node1 ~]# systemctl enable memcached.service</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;memcached</span><br><span class="line">PORT&#x3D;&quot;11211&quot;</span><br><span class="line">USER&#x3D;&quot;memcached&quot;</span><br><span class="line">MAXCONN&#x3D;&quot;1024&quot;</span><br><span class="line">CACHESIZE&#x3D;&quot;64&quot;</span><br><span class="line">OPTIONS&#x3D;&quot;-l 192.168.56.11,::1&quot;</span><br><span class="line">[root@linux-node1 ~]# systemctl start memcached.service</span><br></pre></td></tr></table></figure><ol><li>Keystone配置</li></ol><p>KeyStone的配置只需要修改/etc/keystone/keystone.conf即可，涉及Admin Token和Mysql连接，其它均使用默认配置即可。所有配置文件都存放到/etc/keystone（项目名）目录下。日志都存放在/var/log/keystone（项目名）目录下，其它项目也是如此。 好的，我们暂停一下，在后面的部署中，我们会使用这样的方式列出配置，未列出的配置，保持默认不进行修改，除非特别提示到。另外要注意配置的位置，OpenStack所有服务都会有[DEFAULT] [dtabase] 这样的配置部分，请在文中列出的配置部分里面进行配置，切记！。因为确实有相同的配置存在在不同的配置端的情况，这样例外情况，如果没有按要求配置，可能就无法正常运行。</p><ul><li><p>配置KeyStone数据库</p><p>OpenStack中所有服务的数据库同步都需要依赖与配置文件中的数据库连接的配置，所以必须先修改完毕配置文件后，再进行数据库的初始化操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;keystone&#x2F;keystone.conf</span><br><span class="line">[database]</span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;keystone:keystone@192.168.56.11&#x2F;keystone</span><br></pre></td></tr></table></figure></li><li><p>设置Token和Memcached</p></li></ul><p>在之前的KeyStone版本由于所有的API通信都要请求Keystone来生产Token，之前是存放在MySQL表里，导致表特别大，经常需要手动清理，而且性能下降，现在新的版本我们可以存放在memcache里面了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[token]</span><br><span class="line">provider &#x3D; fernet</span><br></pre></td></tr></table></figure><ul><li>同步数据库：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure><blockquote><p>小提示：为什么要使用keystone用户来同步数据呢，因为同步操作会生产日志/var/log/keystone/keystone.log，如果使用root用户，那么生成的文件权限为root用户，keystone启动的时候没有权限读取该文件，会无法启动。如果你的同步执行有问题，那么可以查看日志获取详细的错误信息。</p></blockquote><ul><li>验证数据库创建是否正常：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mysql -h 192.168.56.11 -ukeystone -pkeystone -e &quot;use keystone;show tables;&quot;</span><br></pre></td></tr></table></figure><ol><li><p>初始化fernet keys</p><p>生成完毕之后，会创建/etc/keystone/fernet-keys目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">[root@linux-node1 ~]# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure></li><li><p>初始化keystone</p></li></ol><p>还记得上面说的Openstack的每个组件都必须在Keystone上进行注册。当然也包括Keystone本身。身份认证服务管理了一个与您环境相关的 API 端点的目录。服务使用这个目录来决定如何与您环境中的其他服务进行通信。 OpenStack使用三个API端点变种代表每种服务：admin，internal和public。默认情况下，管理API端点允许修改用户和租户而公共和内部APIs不允许这些操作。在生产环境中，处于安全原因，变种为了服务不同类型的用户可能驻留在单独的网络上。 对实例而言，公共API网络为了让顾客管理他们自己的云在互联网上是可见的。管理API网络在管理云基础设施的组织中操作也是有所限制的。内部API网络可能会被限制在包含OpenStack服务的主机上。此外，OpenStack支持可伸缩性的多区域。为了简单起见，我们这里均使用一个IP地址。192.168.56.11。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# keystone-manage bootstrap --bootstrap-password admin \</span><br><span class="line"> --bootstrap-admin-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-internal-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-public-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F; \</span><br><span class="line"> --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><ol><li>验证Keystone配置</li></ol><p>下面我将上面进行的配置列出来，供读者进行比对，配置应该和本文保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# grep &quot;^[a-z]&quot; &#x2F;etc&#x2F;keystone&#x2F;keystone.conf </span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;keystone:keystone@192.168.56.11&#x2F;keystone</span><br><span class="line">provider &#x3D; fernet</span><br></pre></td></tr></table></figure><ol><li>KeyStone启动</li></ol><p>OpenStack Keystone使用Apache来进行启动，提高了性能。 配置ServerName，注意一定要配置，不然会有奇怪的问题出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">ServerName 192.168.56.11:80</span><br><span class="line">创建配置文件</span><br><span class="line">[root@linux-node1 ~]# ln -s &#x2F;usr&#x2F;share&#x2F;keystone&#x2F;wsgi-keystone.conf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;</span><br></pre></td></tr></table></figure><p>启动keystone，并查看端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable httpd.service</span><br><span class="line">[root@linux-node1 ~]# systemctl start httpd.service</span><br><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep httpd</span><br><span class="line">tcp6       0      0 :::5000                 :::*              LISTEN      3408&#x2F;httpd</span><br><span class="line">tcp6       0      0 :::80                   :::*              LISTEN      3408&#x2F;httpd</span><br><span class="line">现在，如果你的Keystone没有正常的监听端口，那么请查看日志，后期我们会不停的强调读者通过查看日志来排查问题，OpenStack的日志是值得信赖的。如果你想让朋友帮助解决问题，请不要使用日志截图的方式，请发送完整的日志。</span><br></pre></td></tr></table></figure><h3 id="Keystone权限管理-1"><a href="#Keystone权限管理-1" class="headerlink" title="Keystone权限管理"></a>Keystone权限管理</h3><p>我们已经成功的运行了Keystone服务，要提供身份认证服务，需要使用域、项目、用户和角色的组合。 首先我们要创建一个超级管理员用户、角色和项目。默认情况下。在创建用户之前，我们需要连接到Keystone。问题来了，现在我们没有任何用户，我们如何登录KeyStone呢？这个时候ADMIN_TOKEN就可以帮忙了，我们可以使用这个超级密码直接登录到KeyStone上，所以说，一定要保护好你的ADMIN_TOKEN。 好的，现在我们要连接到Keystone上，有两种方法：</p><ul><li>使用–os-token等参数的方式（就是通过参数的方式）</li><li>使用环境变量（将参数设置为环境变量，keystone直接读取环境变量）</li><li>设置环境变量</li></ul><p>在这里，我们使用三个环境变量用来连接keystone。admin用户和密码就是我们前面使用keystone-manage bootstrap初始化的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# </span><br><span class="line">export OS_USERNAME&#x3D;admin</span><br><span class="line">export OS_PASSWORD&#x3D;admin</span><br><span class="line">export OS_PROJECT_NAME&#x3D;admin</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br></pre></td></tr></table></figure><p>请注意环境变量的问题，不要打开新的会话进行操作。</p><ol><li>创建实验用的demo项目、用户和角色</li></ol><p>下面我们创建一个普通用户和租户，我们下面的实验均使用这个普通用户进行Openstack的管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># openstack domain create --description &quot;An Example Domain&quot; example</span><br><span class="line"># openstack project create --domain default --description &quot;Demo Project&quot; myproject</span><br><span class="line"># openstack user create --domain default --password-prompt myuser</span><br><span class="line"># openstack role create myrole</span><br><span class="line"># openstack role add --project myproject --user myuser myrole</span><br></pre></td></tr></table></figure><blockquote><p>在创建用户的时候可以使用–password-prompt，然后根据提示输入密码</p></blockquote><ol><li><p>创建一个服务的项目</p><p>OpenStack服务也需要使用用户名、租户和角色，用来访问OpenStack的各个服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># openstack project create --domain default --description &quot;Service Project&quot; service</span><br></pre></td></tr></table></figure></li><li><p>创建各个服务连接Keystone的账户 后面我们部署的其它服务都需要到Keystone上进行认证，所以现在就可以提前将各个服务的账号创建上。并全部加入service项目。</p><ul><li><p>创建glance用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password glance glance</span><br><span class="line"># openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure></li><li><p>创建nova用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password nova nova</span><br><span class="line"># openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure></li><li><p>创建placement用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password placement placement</span><br><span class="line"># openstack role add --project service --user placement admin</span><br></pre></td></tr></table></figure></li><li><p>创建Neutron用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password neutron neutron</span><br><span class="line"># openstack role add --project service --user neutron admin</span><br></pre></td></tr></table></figure></li><li><p>创建cinder用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># openstack user create --domain default --password cinder cinder</span><br><span class="line"># openstack role add --project service --user cinder admin</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="验证Keystone安装-1"><a href="#验证Keystone安装-1" class="headerlink" title="验证Keystone安装"></a>验证Keystone安装</h3><p>首先，我们需要取消OS_TOKEN和OS_URL这两个变量。这两个变量是用于引导我们创建Admin用户和Keystone服务自身Service和Endpoint注册时候的用的，现在已经不需要了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# unset OS_AUTH_URL OS_PASSWORD</span><br></pre></td></tr></table></figure><p><strong>测试admin用户</strong></p><p>密码为admin，需要输入两次，如果能正常获取token说明配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack --os-auth-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3 \</span><br><span class="line">--os-project-domain-name Default --os-user-domain-name Default \</span><br><span class="line">--os-project-name admin --os-username admin token issue</span><br><span class="line">Password:</span><br><span class="line">…</span><br><span class="line">#密码为admin，需要输入两次，如果能正常获取token说明配置成功。</span><br></pre></td></tr></table></figure><p><strong>测试myuser用户</strong></p><p>密码为你设置的，需要输入两次，如果能正常获取token说明配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack --os-auth-url http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3 \</span><br><span class="line">--os-project-domain-name Default --os-user-domain-name Default \</span><br><span class="line">--os-project-name myproject --os-username myuser token issue</span><br><span class="line">Password:</span><br><span class="line">…</span><br></pre></td></tr></table></figure><h3 id="环境变量脚本配置-1"><a href="#环境变量脚本配置-1" class="headerlink" title="环境变量脚本配置"></a>环境变量脚本配置</h3><p>使用Keystone命令有两种方式，第一种就像上面。我们使用指定–os-username、–os-password和–os-password这样的选项来进行操作，但是这样在我们日常操作中会比较麻烦。第二种方式就是使用环境变量，这样可以避免每次使用都要制定变量。我们将这些常用的变量设置为环境变量。 下面建立环境变量为其它服务部署和配置使用</p><ol><li>设置admin环境变量脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;root&#x2F;admin-openstack.sh</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_NAME&#x3D;admin</span><br><span class="line">export OS_USERNAME&#x3D;admin</span><br><span class="line">export OS_PASSWORD&#x3D;admin</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br><span class="line">export OS_IMAGE_API_VERSION&#x3D;2</span><br></pre></td></tr></table></figure><ol><li>创建普通用户的环境变量脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;root&#x2F;demo-openstack.sh</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_USER_DOMAIN_NAME&#x3D;Default</span><br><span class="line">export OS_PROJECT_NAME&#x3D;myproject</span><br><span class="line">export OS_USERNAME&#x3D;myuser</span><br><span class="line">export OS_PASSWORD&#x3D;123.com</span><br><span class="line">export OS_AUTH_URL&#x3D;http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">export OS_IDENTITY_API_VERSION&#x3D;3</span><br><span class="line">export OS_IMAGE_API_VERSION&#x3D;2</span><br></pre></td></tr></table></figure><p>创建完毕变量后，在后期使用某个账户的权限，只需要source一下就可以使用，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;admin-openstack.sh</span><br><span class="line">[root@linux-node1 ~]# openstack token issue</span><br></pre></td></tr></table></figure><p>测试demo用户，是否能够获取token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;demo-openstack.sh </span><br><span class="line">[root@linux-node1 ~]# openstack token issue</span><br></pre></td></tr></table></figure><h1 id="1-4-OpenStack镜像服务Glance"><a href="#1-4-OpenStack镜像服务Glance" class="headerlink" title="1.4 OpenStack镜像服务Glance"></a>1.4 OpenStack镜像服务Glance</h1><h3 id="Glance概述"><a href="#Glance概述" class="headerlink" title="Glance概述"></a>Glance概述</h3><p>OpenStack中的Glance是镜像服务，能够提供发现、注册并查询虚拟机镜像，也是Openstack的一个组件或者说项目之一。镜像服务提供了一个Rest API的方式。 OpenStack的Glance镜像可以存放在本地文件系统，也可以存放在OpenStack的对象存储上。默认情况下是本地文件，存放在/var/lib/glance/images/目录下。 Glance还管理着快照，快照也是一种镜像，可以基于快照创建新的虚拟机。</p><p>Glance主要有两个组件</p><p>（图2.5.2）</p><ul><li>Glance-api接收REST API请求，然后通过其他模块（glance-registry及image store）来完成诸如镜像的查找、获取、上传、删除等操作，api默认监听端口9292。</li><li>glance-registry用于与MySQL数据库交互，用于存储或获取镜像的元数据（metadata）；提供镜像元数据相关的REST接口，通过glance-registry，可以向数据库中写入或获取镜像的各种数据，glance-registry监听端口9191。Glance的数据库中有两张表，一张是image表，另一张是image property表。Image表保存了镜像格式、大小等信息；image property表则主要保存镜像的定制化信息。</li><li>database 用户存放镜像的元数据。</li><li>image store是一个存储的接口层，通过这个接口，glance可以获取镜像，image store支持的存储有Amazon的S3、OpenStack本身的Swift，还有诸如ceph，sheepdog，GlusterFS等分布式存储。 Image store是镜像保存与获取的接口，它仅仅是一个接口层，具体的实现需要外部的存储支持，</li></ul><h3 id="Glance部署"><a href="#Glance部署" class="headerlink" title="Glance部署"></a>Glance部署</h3><ol><li><p>安装Glance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-glance</span><br></pre></td></tr></table></figure></li><li><p>配置Glance</p></li></ol><p>Glance的配置是通过修改两个组件的配置文件来完成。Glance使用了MySQL和Keystone。</p><ul><li>Glance数据库配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;glance&#x2F;glance-api.conf </span><br><span class="line">[database]</span><br><span class="line">connection&#x3D; mysql+pymysql:&#x2F;&#x2F;glance:glance@192.168.56.11&#x2F;glance</span><br></pre></td></tr></table></figure><ul><li>设置Keystone</li></ul><p>就像在Keystone章节提到了。OpenStack其它组件都需要和Keystone进行交互，来进行用户认证和服务目录的管理。对于Glance来说，Keystone的配置在glance-api.conf和glance-registry.conf都需要设置，而且配置相同。 glance-api.conf配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;glance&#x2F;glance-api.conf</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri  &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">memcached_servers &#x3D; 192.168.56.11:11211</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; Default</span><br><span class="line">user_domain_name &#x3D; Default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; glance</span><br><span class="line">password &#x3D; glance</span><br><span class="line"></span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor&#x3D;keystone</span><br></pre></td></tr></table></figure><ul><li><p>设置Glance镜像存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;glance&#x2F;glance-api.conf</span><br><span class="line">#默认的存储方式是文件，可以指定镜像存储的路径</span><br><span class="line">[glance_store]</span><br><span class="line">stores &#x3D; file,http</span><br><span class="line">default_store&#x3D;file</span><br><span class="line">filesystem_store_datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F;</span><br><span class="line">#也就是说，我们后面上传的镜像都保存在&#x2F;var&#x2F;lib&#x2F;glance&#x2F;images目录下。</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>同步数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;glance-manage db_sync&quot; glance</span><br><span class="line">测试数据库同步情况</span><br><span class="line">[root@linux-node1 ~]# mysql -h 192.168.56.11 -uglance -pglance -e &quot;use glance;show tables;&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动Glance服务</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable openstack-glance-api.service </span><br><span class="line">[root@linux-node1 ~]# systemctl start openstack-glance-api.service</span><br></pre></td></tr></table></figure><ol><li><p>Glance服务注册</p><p>想要让别的服务可以使用Glance，就需要在Keystone上完成服务的注册。注意需要先source一下admin的环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;admin-openstack.sh</span><br><span class="line"># openstack service create --name glance --description &quot;OpenStack Image&quot; image</span><br><span class="line"># openstack endpoint create --region RegionOne image public http:&#x2F;&#x2F;192.168.56.11:9292</span><br><span class="line"># openstack endpoint create --region RegionOne image internal http:&#x2F;&#x2F;192.168.56.11:9292</span><br><span class="line"># openstack endpoint create --region RegionOne image admin http:&#x2F;&#x2F;192.168.56.11:9292</span><br></pre></td></tr></table></figure></li></ol><h3 id="验证Glance安装"><a href="#验证Glance安装" class="headerlink" title="验证Glance安装"></a>验证Glance安装</h3><ol><li><p>测试Glance状态</p><p>我们可以直接使用glance命令列出现在的所有镜像，如果出现一个空列表，说明Glance启动并配置完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source &#x2F;root&#x2F;admin-openstack.sh </span><br><span class="line">[root@linux-node1 ~]# openstack image list</span><br></pre></td></tr></table></figure><p>如果未出现报错，基本上可以确实部署没有问题，可以上传镜像进行测试。</p></li><li><p>Glance镜像上传测试</p></li></ol><p>在刚开始实施OpenStack平台阶段，如果没有制作镜像。可以使用一个实验的镜像进行测试，这是一个小的Linux系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">[root@linux-node1 src]# wget http:&#x2F;&#x2F;download.cirros-cloud.net&#x2F;0.4.0&#x2F;cirros-0.4.0-x86_64-disk.img</span><br><span class="line"></span><br><span class="line">#上传并注册一个镜像。注意以后只要看到使用openstack命令，都需要保证，已经使用source命令导入了环境变量。因为这些操作都需要环境变量里面的账号进行认证授权。</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# openstack image create &quot;cirros&quot; --disk-format qcow2 \</span><br><span class="line">--container-format bare --file cirros-0.4.0-x86_64-disk.img --public</span><br></pre></td></tr></table></figure><h1 id="上传完毕后可以通过openstack-image-list再次查看上传的镜像。默认情况下，Glance使用本地文件系统来保存上传的镜像。默认存放在-var-lib-glance-images-目录下，会将镜像以image-id来进行命名。"><a href="#上传完毕后可以通过openstack-image-list再次查看上传的镜像。默认情况下，Glance使用本地文件系统来保存上传的镜像。默认存放在-var-lib-glance-images-目录下，会将镜像以image-id来进行命名。" class="headerlink" title="上传完毕后可以通过openstack image list再次查看上传的镜像。默认情况下，Glance使用本地文件系统来保存上传的镜像。默认存放在/var/lib/glance/images/目录下，会将镜像以image id来进行命名。"></a>上传完毕后可以通过openstack image list再次查看上传的镜像。默认情况下，Glance使用本地文件系统来保存上传的镜像。默认存放在/var/lib/glance/images/目录下，会将镜像以image id来进行命名。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 src]# openstack image list</span><br><span class="line">+--------------------------------------+--------+--------+</span><br><span class="line">| ID                                   | Name   | Status |</span><br><span class="line">+--------------------------------------+--------+--------+</span><br><span class="line">| cf154a84-a73a-451b-bcb3-83c98e7c0d3e | cirros | active |</span><br><span class="line">+--------------------------------------+--------+--------+</span><br></pre></td></tr></table></figure><h1 id="同时，这个文件会被保存到配置文件设置的目录下，并以ID命名。"><a href="#同时，这个文件会被保存到配置文件设置的目录下，并以ID命名。" class="headerlink" title="同时，这个文件会被保存到配置文件设置的目录下，并以ID命名。"></a>同时，这个文件会被保存到配置文件设置的目录下，并以ID命名。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ls -l &#x2F;var&#x2F;lib&#x2F;glance&#x2F;images&#x2F;</span><br><span class="line">total 12980</span><br><span class="line">-rw-r----- 1 glance glance 13287936 Dec  1 14:11 65f9826a-5ccb-47d9-8a1a-75e31fb88a4a</span><br></pre></td></tr></table></figure><p>Glance在OpenStack组件中，属于比较简单的一个。我建议读者如果一直跟着做实验的话，现在是时候停下来总结一下了。因为后面的服务的部署流程和glance都大同小异。</p><h1 id="3-5-Placement服务安装"><a href="#3-5-Placement服务安装" class="headerlink" title="3.5 Placement服务安装"></a>3.5 Placement服务安装</h1><h3 id="3-5-1-Placement概述"><a href="#3-5-1-Placement概述" class="headerlink" title="3.5.1 Placement概述"></a>3.5.1 Placement概述</h3><h3 id="3-5-2-Placement部署"><a href="#3-5-2-Placement部署" class="headerlink" title="3.5.2 Placement部署"></a>3.5.2 Placement部署</h3><ol><li>Placement服务注册</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># openstack service create --name placement   --description &quot;Placement API&quot; placement</span><br><span class="line"># openstack endpoint create --region RegionOne   placement public http:&#x2F;&#x2F;192.168.56.11:8778</span><br><span class="line"># openstack endpoint create --region RegionOne   placement internal http:&#x2F;&#x2F;192.168.56.11:8778</span><br><span class="line"># openstack endpoint create --region RegionOne   placement admin http:&#x2F;&#x2F;192.168.56.11:8778</span><br></pre></td></tr></table></figure><ol><li><p>安装Placement</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-placement-api</span><br></pre></td></tr></table></figure></li><li><p>配置Palacement</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;placement&#x2F;placement.conf</span><br><span class="line">[placement_database]</span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;placement:placement@192.168.56.11&#x2F;placement</span><br><span class="line">[api]</span><br><span class="line">auth_strategy &#x3D; keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">memcached_servers &#x3D; 192.168.56.11:11211</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; placement</span><br><span class="line">password &#x3D; placement</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;00-placement-api.conf </span><br><span class="line"></span><br><span class="line">#增加下面配置</span><br><span class="line">&lt;Directory &#x2F;usr&#x2F;bin&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">增加后如下：</span><br><span class="line"></span><br><span class="line">Listen 8778</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8778&gt;</span><br><span class="line">  &lt;Directory &#x2F;usr&#x2F;bin&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line">  WSGIProcessGroup placement-api</span><br><span class="line">  WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">  WSGIPassAuthorization On</span><br><span class="line">  WSGIDaemonProcess placement-api processes&#x3D;3 threads&#x3D;1 user&#x3D;placement group&#x3D;placement</span><br><span class="line">  WSGIScriptAlias &#x2F; &#x2F;usr&#x2F;bin&#x2F;placement-api</span><br><span class="line">  &lt;IfVersion &gt;&#x3D; 2.4&gt;</span><br><span class="line">    ErrorLogFormat &quot;%M&quot;</span><br><span class="line">  &lt;&#x2F;IfVersion&gt;</span><br><span class="line">  ErrorLog &#x2F;var&#x2F;log&#x2F;placement&#x2F;placement-api.log</span><br><span class="line">  #SSLEngine On</span><br><span class="line">  #SSLCertificateFile ...</span><br><span class="line">  #SSLCertificateKeyFile ...</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">Alias &#x2F;placement-api &#x2F;usr&#x2F;bin&#x2F;placement-api</span><br><span class="line">&lt;Location &#x2F;placement-api&gt;</span><br><span class="line">  SetHandler wsgi-script</span><br><span class="line">  Options +ExecCGI</span><br><span class="line">  WSGIProcessGroup placement-api</span><br><span class="line">  WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line">  WSGIPassAuthorization On</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br></pre></td></tr></table></figure><ol><li>同步数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;placement-manage db sync&quot; placement</span><br></pre></td></tr></table></figure><ol><li>重启httpd</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart httpd</span><br></pre></td></tr></table></figure><h1 id="1-6-OpenStack计算服务Nova"><a href="#1-6-OpenStack计算服务Nova" class="headerlink" title="1.6 OpenStack计算服务Nova"></a>1.6 OpenStack计算服务Nova</h1><p>Nova是OpenStack最早的两个模块之一（另一个是对象存储）。在OpenStack体系中是计算资源虚拟化的项目。同时Nova也是OpenStack项目中组件最多的一个项目。在中小型部署中，我们常常把除nova-compute之外的其它组件部署到一台服务器上，称之为控制节点。将nova-compute部署到单独的一台服务器上，称之为计算节点。</p><h3 id="Nova服务组件"><a href="#Nova服务组件" class="headerlink" title="Nova服务组件"></a>Nova服务组件</h3><ul><li><p>Nova-Api服务</p><p>主要用于接收和响应外部请求，它支持OpenStack API、Amazon EC2 等API</p><ul><li>nova-api组件实现了RESTful API功能，是外部访问Nova的唯一途径。</li><li>接收外部的请求并通过Message Queue将请求发送给其他的服务组件，同时也兼容EC2 API，所以也可以用EC2的管理工具对nova进行日常管理。</li></ul></li><li><p>Nova-Cert服务</p><p>是Nova的证书管理服务，用来为EC2服务提供身份验证，仅仅是在EC2 API的请求中使用。</p></li><li><p>Nova-Scheduler服务</p><p>用于Nova的调度工作，在创建虚拟机时，由它选择将虚拟机创建在哪台计算节点上。</p></li><li><p>Nova-Conductor服务</p><p>这个是服务是计算节点访问数据库时的一个中间层，它出现的作用是防止计算节点的Nova-Compute服务直接访问数据库。同时这个中间层可以进行水平扩展。</p></li><li><p>Nova-Console服务</p><p>Nova增强了它的控制台服务。控制台服务允许用户可以通过代理服务器访问虚拟化实例。这就涉及了一对新的守护进程（nova-console和nova-consoleauth).</p></li><li><p>Nova-Consoleauth服务</p><p>主要用于控制台的用户访问授权</p></li><li><p>Nova-Novncproxy服务</p><p>用于为用户访问虚拟机提供了一个VNC的代理。通过VNC协议，可以支持基于浏览器的novnc客户端，后面你在网页打开的console界面就是依靠这个服务提供的。</p></li><li><p>Nova-Compute</p><p>Nova-compute是Nova最重要的组件之一。</p><ul><li>nova-compute 一般运行在计算节点上，通过Message Queue接收并管理VM的生命周期。</li><li>Nova-compute 通过Libvirt管理KVM，通过XenAPI管理Xen等。</li></ul></li></ul><h3 id="Nova控制节点部署"><a href="#Nova控制节点部署" class="headerlink" title="Nova控制节点部署"></a>Nova控制节点部署</h3><p>首先我们需要先在控制节点部署除nova-compute之外的其它必备的服务。</p><ol><li>控制节点安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-nova-api \</span><br><span class="line">  openstack-nova-conductor \</span><br><span class="line">  openstack-nova-novncproxy openstack-nova-scheduler</span><br></pre></td></tr></table></figure><p>nova.conf是配置Nova的核心配置文件，Nova的配置主要围绕该配置文件。</p><ul><li>数据库配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[api_database]</span><br><span class="line">connection&#x3D; mysql+pymysql:&#x2F;&#x2F;nova:nova@192.168.56.11&#x2F;nova_api</span><br><span class="line">[database]</span><br><span class="line">connection&#x3D; mysql+pymysql:&#x2F;&#x2F;nova:nova@192.168.56.11&#x2F;nova</span><br></pre></td></tr></table></figure><ul><li><p>RabbitMQ配置</p><p>Nova和其它组件之间，以及Nova各个服务之间的通信都要通过消息队列来进行，所以需要配置RabbmitMQ的连接。注意是DEFAULT配置栏目下面。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">transport_url &#x3D; rabbit:&#x2F;&#x2F;openstack:openstack@192.168.56.11</span><br></pre></td></tr></table></figure><ul><li><p>Keystone相关配置</p><p>Nova需要连接到Keystone进行认证和服务管理。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[api]</span><br><span class="line">auth_strategy&#x3D;keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;</span><br><span class="line">memcached_servers &#x3D; 192.168.56.11:11211</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; Default</span><br><span class="line">user_domain_name &#x3D; Default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; nova</span><br><span class="line">password &#x3D; nova</span><br></pre></td></tr></table></figure><ul><li><p>关闭Nova的防火墙功能</p><p>因为我们要使用Neutron的防火墙功能，所以关闭Nova自己的防火墙驱动。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">use_neutron&#x3D;true</span><br><span class="line">firewall_driver &#x3D; nova.virt.firewall.NoopFirewallDriver</span><br></pre></td></tr></table></figure><ul><li><p>VNC配置</p><p>vnc的配置用于虚拟机VNC端口的监听和novncproxy的配置，这样后面我们通过DashBoard的novnc界面就可以查看虚拟机的界面。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[vnc]</span><br><span class="line">enabled&#x3D;true</span><br><span class="line">server_listen &#x3D; 0.0.0.0</span><br><span class="line">server_proxyclient_address &#x3D; 192.168.56.11</span><br></pre></td></tr></table></figure><ul><li>设置glance</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[glance]</span><br><span class="line">api_servers &#x3D; http:&#x2F;&#x2F;192.168.56.11:9292</span><br></pre></td></tr></table></figure><ul><li>在 [oslo_concurrency] 部分，配置锁路径：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path&#x3D;&#x2F;var&#x2F;lib&#x2F;nova&#x2F;tmp</span><br></pre></td></tr></table></figure><ul><li>设置启用的api</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis&#x3D;osapi_compute,metadata</span><br></pre></td></tr></table></figure><ul><li>设置placement</li></ul><h1 id="新增到配置文件末尾"><a href="#新增到配置文件末尾" class="headerlink" title="新增到配置文件末尾"></a>新增到配置文件末尾</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[placement]</span><br><span class="line">region_name &#x3D; RegionOne</span><br><span class="line">project_domain_name &#x3D; Default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">user_domain_name &#x3D; Default</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3</span><br><span class="line">username &#x3D; placement</span><br><span class="line">password &#x3D; placement</span><br></pre></td></tr></table></figure><ol><li>同步数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage api_db sync&quot; nova</span><br></pre></td></tr></table></figure><ul><li>注册cell0数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova</span><br></pre></td></tr></table></figure><ul><li>创建cell1的cell</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage cell_v2 create_cell --name&#x3D;cell1 --verbose&quot; nova</span><br></pre></td></tr></table></figure><ul><li>同步nova数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage db sync&quot; nova</span><br></pre></td></tr></table></figure><ul><li>验证cell0和cell1的注册是否正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage cell_v2 list_cells&quot; nova</span><br></pre></td></tr></table></figure><ul><li>测试数据库同步情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mysql -h 192.168.56.11 -unova -pnova -e &quot;use nova;show tables;&quot;</span><br><span class="line">[root@linux-node1 ~]# mysql -h 192.168.56.11 -unova -pnova -e &quot;use nova_api;show tables;&quot;</span><br></pre></td></tr></table></figure><ol><li>启动Nova Service<ul><li>设置开机自动启动</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable openstack-nova-api.service \</span><br><span class="line">openstack-nova-scheduler.service \</span><br><span class="line">openstack-nova-conductor.service \</span><br><span class="line">openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure><ul><li>启动控制节点服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl start openstack-nova-api.service \</span><br><span class="line">  openstack-nova-scheduler.service openstack-nova-conductor.service \</span><br><span class="line">  openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure><ol><li><p>Nova服务注册</p><p>和Keystone、Glance一样，Nova服务也需要在Keystone上做注册，并告诉Keystone它所暴漏的API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># source admin-openstack.sh</span><br><span class="line"># openstack service create --name nova --description &quot;OpenStack Compute&quot; compute</span><br><span class="line"># openstack endpoint create --region RegionOne compute public http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1</span><br><span class="line"># openstack endpoint create --region RegionOne compute internal http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1</span><br><span class="line"># openstack endpoint create --region RegionOne compute admin http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1</span><br></pre></td></tr></table></figure><ul><li>验证控制节点服务</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-node1 ~]# openstack compute service list</span><br><span class="line">+----+----------------+-----------------------------+----------+---------+-------+----------------------------+</span><br><span class="line">| ID | Binary         | Host                        | Zone     | Status  | State | Updated At                 |</span><br><span class="line">+----+----------------+-----------------------------+----------+---------+-------+----------------------------+</span><br><span class="line">|  4 | nova-scheduler | linux-node1.example.com | internal | enabled | up    | 2020-02-04T04:48:47.000000 |</span><br><span class="line">| 11 | nova-conductor | linux-node1.example.com | internal | enabled | up    | 2020-02-04T04:48:47.000000 |</span><br><span class="line">+----+----------------+-----------------------------+----------+---------+-------+----------------------------+</span><br></pre></td></tr></table></figure><h3 id="Nova计算节点部署"><a href="#Nova计算节点部署" class="headerlink" title="Nova计算节点部署"></a>Nova计算节点部署</h3><p>根据我们开始实验规划，我们将使用一个控制节点和一个计算节点。计算节点是真正运行虚拟机的服务器，对CPU、内存和硬盘要求都比较高，通常是配置比较强劲的服务器充当。当然在实验的过程中，完全可以和控制节点在一台服务器上。好的，现在请你打开第二台虚拟机并且登陆。</p><ol><li>计算节点安装</li></ol><p>计算节点需要依赖与虚拟化技术来运行虚拟机实例，还记得前面我们讨论OpenStack与虚拟化之间的关系吗？OpenStack默认使用KVM作为Hypervisor，所以在计算节点上需要安装KVM和libvirt。这样OpenStack的控制节点上的nova服务就可以调用Nova-compute进行虚拟机的创建和管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# yum install -y openstack-nova-compute</span><br></pre></td></tr></table></figure><ul><li><p>复制配置文件</p><p>计算节点的配置文件和控制节点的基本相同，我们可以在控制节点nova.conf的基础上进行增加即可，所以首先请将控制节点的配置文件直接复制过来吧。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# scp &#x2F;etc&#x2F;nova&#x2F;nova.conf 192.168.56.12:&#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[root@linux-node2 ~]# chown root:nova &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br></pre></td></tr></table></figure><ul><li><p>删除多余的数据配置</p><p>删除数据库配置 相对于控制节点的配置，计算节点需要变更VNC的配置。</p></li><li><p>修改VNC配置</p><p>计算节点需要监听所有IP，同时设置novncproxy的访问地址</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[vnc]</span><br><span class="line">enabled&#x3D;true</span><br><span class="line">server_listen &#x3D; 0.0.0.0</span><br><span class="line">server_proxyclient_address &#x3D; 192.168.56.12</span><br><span class="line">novncproxy_base_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:6080&#x2F;vnc_auto.html</span><br></pre></td></tr></table></figure><ul><li><p>虚拟化适配</p><p>查看计算节点的服务器是否支持硬件虚拟化。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# egrep -c &#39;(vmx|svm)&#39; &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">如果返回的是0，表示不支持硬件虚拟化，需要在nova.conf里面设置</span><br><span class="line">[libvirt]</span><br><span class="line">virt_type&#x3D;qemu</span><br><span class="line">如果返回的是非0的值，那么表示计算节点服务器支持硬件虚拟化，需要在nova.conf里面设置</span><br><span class="line">[libvirt]</span><br><span class="line">virt_type&#x3D;kvm</span><br></pre></td></tr></table></figure><ol><li>启动nova-compute</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class="line"># systemctl start libvirtd.service openstack-nova-compute.service</span><br></pre></td></tr></table></figure><ol><li>计算节点加入控制节点</li></ol><p>当添加新的计算节点时，必须在控制器节点上运行nova-manage cell_v2 discover_hosts来注册这些新的计算节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span><br></pre></td></tr></table></figure><p>或者，您可以在/etc/nova/nova.conf中设置适当的间隔:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[scheduler]</span><br><span class="line">discover_hosts_in_cells_interval &#x3D; 300</span><br></pre></td></tr></table></figure><ol><li>验证计算节点</li></ol><p>在控制节点再次执行host list，可以发现nova-compute已经成功注册。 再次执行host list可以看到。计算节点已经注册成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack host list</span><br><span class="line">+------------------------+-------------+----------+</span><br><span class="line">| Host Name              | Service     | Zone     |</span><br><span class="line">+------------------------+-------------+----------+</span><br><span class="line">| linux-node1.example.com | conductor   | internal |</span><br><span class="line">| linux-node1.example.com | consoleauth | internal |</span><br><span class="line">| linux-node1.example.com | scheduler   | internal |</span><br><span class="line">| linux-node2.example.com | compute     | nova     |</span><br><span class="line">+------------------------+-------------+----------+</span><br></pre></td></tr></table></figure><h3 id="验证Nova安装"><a href="#验证Nova安装" class="headerlink" title="验证Nova安装"></a>验证Nova安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack compute service list</span><br><span class="line">+----+------------------+-------------------------+----------+---------+-------+----------------------------+</span><br><span class="line">| ID | Binary           | Host                    | Zone     | Status  | State | Updated At                 |</span><br><span class="line">+----+------------------+-------------------------+----------+---------+-------+----------------------------+</span><br><span class="line">|  1 | nova-consoleauth | linux-node1.example.com | internal | enabled | up    | 2018-02-03T10:38:30.000000 |</span><br><span class="line">|  2 | nova-conductor   | linux-node1.example.com | internal | enabled | up    | 2018-02-03T10:38:30.000000 |</span><br><span class="line">|  3 | nova-scheduler   | linux-node1.example.com | internal | enabled | up    | 2018-02-03T10:38:30.000000 |</span><br><span class="line">|  6 | nova-compute     | linux-node2.example.com | nova     | enabled | up    | None                       |</span><br><span class="line">+----+------------------+-------------------------+----------+---------+-------+----------------------------+</span><br></pre></td></tr></table></figure><p>验证所有的Endpoint API是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack catalog list</span><br><span class="line">+-----------+-----------+--------------------------------------------+</span><br><span class="line">| Name      | Type      | Endpoints                                  |</span><br><span class="line">+-----------+-----------+--------------------------------------------+</span><br><span class="line">| placement | placement | RegionOne                                  |</span><br><span class="line">|           |           |   public: http:&#x2F;&#x2F;192.168.56.11:8778        |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   internal: http:&#x2F;&#x2F;192.168.56.11:8778      |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   admin: http:&#x2F;&#x2F;192.168.56.11:8778         |</span><br><span class="line">|           |           |                                            |</span><br><span class="line">| keystone  | identity  | RegionOne                                  |</span><br><span class="line">|           |           |   public: http:&#x2F;&#x2F;192.168.56.11:5000&#x2F;v3&#x2F;    |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   admin: http:&#x2F;&#x2F;192.168.56.11:35357&#x2F;v3&#x2F;    |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   internal: http:&#x2F;&#x2F;192.168.56.11:35357&#x2F;v3&#x2F; |</span><br><span class="line">|           |           |                                            |</span><br><span class="line">| glance    | image     | RegionOne                                  |</span><br><span class="line">|           |           |   public: http:&#x2F;&#x2F;192.168.56.11:9292        |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   admin: http:&#x2F;&#x2F;192.168.56.11:9292         |</span><br><span class="line">|           |           |                                            |</span><br><span class="line">| nova      | compute   | RegionOne                                  |</span><br><span class="line">|           |           |   admin: http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1    |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   public: http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1   |</span><br><span class="line">|           |           | RegionOne                                  |</span><br><span class="line">|           |           |   internal: http:&#x2F;&#x2F;192.168.56.11:8774&#x2F;v2.1 |</span><br><span class="line">|           |           |                                            |</span><br><span class="line">+-----------+-----------+--------------------------------------------+</span><br></pre></td></tr></table></figure><p>检查cells和placement API状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# nova-status upgrade check</span><br><span class="line">+---------------------------+</span><br><span class="line">| Upgrade Check Results     |</span><br><span class="line">+---------------------------+</span><br><span class="line">| Check: Cells v2           |</span><br><span class="line">| Result: Success           |</span><br><span class="line">| Details: None             |</span><br><span class="line">+---------------------------+</span><br><span class="line">| Check: Placement API      |</span><br><span class="line">| Result: Success           |</span><br><span class="line">| Details: None             |</span><br><span class="line">+---------------------------+</span><br><span class="line">| Check: Resource Providers |</span><br><span class="line">| Result: Success           |</span><br><span class="line">| Details: None             |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><h1 id="1-7-OpenStack网络服务Neutron"><a href="#1-7-OpenStack网络服务Neutron" class="headerlink" title="1.7 OpenStack网络服务Neutron"></a>1.7 OpenStack网络服务Neutron</h1><p>上一章我们讲到Nova服务提供了OpenStack平台计算资源池，实现了计算即服务。那么仅仅有一台孤立的云主机是无法正常使用的，我们需要把它接入网络，才能正常对外提供服务。</p><h3 id="Neutron概述"><a href="#Neutron概述" class="headerlink" title="Neutron概述"></a>Neutron概述</h3><p>OpenStack Networking Services（Neutron），OpenStack 网络服务，OpenStack核心项目之一，由早期的nova-network独立成一个子项目后演变而来，它为OpenStack提供了云计算环境下的虚拟网络功能。</p><p>在OpenStack世界中，网络组件最初叫nova-network，nova-network实现简单，直接采用基于Linux内核的Linux网桥。由于少了很多层抽象，所以比较简单稳定算。但是它的不足之处是支持的插件少（只支持Linux网桥），支持的网络拓扑少（只支持flat, vlan)。</p><p>为了支持更多的插件，支持更多的网络拓扑，于是有了quantum工程。quantum插件不仅支持Linux网桥，也支持OpenvSwitch，以及一些SDN的插件和其他商业公司的插件。在网络拓扑上，除了支持flat，vlan外，还支持gre, vxlan。quantum因为和一家公司的名称冲突，于是，改名为neutron。</p><ol><li>Neutron Server</li></ol><p>这一部分包含守护进程neutron-server和各种插件neutron-*-plugin。neutron-server提供API接口，并把对API的调用请求传给已经配置好的插件进行后续处理。插件需要访问数据库来维护各种配置数据和对应关系，例如路由器、网络、子网、端口、浮动IP、安全组等等。</p><ol><li>ML2(Module Layer2)plugin</li></ol><p>上述整体框架中提到Neutron组件内部有很多个不同的插件（plugin），而在Neutron中，实现一个插件包括两个部分的内容：一部分与数据库db打交道称之为plugin（虽然都是plugin，但是这个是具体实现中的plugin），一部分是调用具体的网络设备真正干活的称之为agent。 与db进行交互的plugin在功能上有很多重复，所以在代码上有很多重复，因此在Neutron中提供了一个公共的plugin叫ML2(ModuleLayer2) plugin。所以ML2 plugin的第一个作用就是：提供与数据库交互的公共plugin。 ML2的第二个作用就是实现支持多种pulgin（原先使用linux bridge，就不能用openvswitch），ML2通过MechanismDriver实现。MechanismDriver的作用是将agent的类型agent_type和vif_type关联，这样vif_type就可以直接通过扩展api设置了。 ML2的第三个作用就是支持不同的网络拓扑，如flat, vlan, gre, vxlan，直接在ml2_conf.ini这个配置文件里都配上即可。</p><ol><li><p>L3-Agent</p><p>上面的ml2解决的只是网络中L2层的问题，对于L3层的路由功能，neturon单独用l3-agent实现，为客户机访问外部网络提供3层转发服务。 L3 层的路由分静态路由和动态路由两种： 在 Linux 中，通过打开 ipv4 forward 特性可以让数据包从一块网卡路由到另外一块网卡上。 动态路由，如内部网关协议 RIP，OSPF；如外部网关协议 BGP。能够自动地学习建立路由表。</p></li></ol><p>目前 Neutron 只支持静态路由，要点如下： 对于不同 tenant 子网通过 namespace 功能进行隔离，在 Linux 中，一个命名空间 namespace 您可以简单理解成 linux 又启动了一个新的 TCP/IP 栈的进程。多个 tenant 意味着多个 namespace，也意味着多个 TCP/IP 栈。 对于同一tenant 中的不同子网的隔离通过 iptables 来做，也意味着，同一tenant中的相同子网的两个虚机不用走 L3 层，直接走 L2 层能通，没问题；但如果同一tenant中的不同子网的两个虚机要通讯的话，必须得绕道 L3-agent 网络节点，这是影响性能的。</p><ol><li>dhcp-agent</li></ol><p>Dhcp-agent主要负责为各个租户网络提供DHCP服务。 L4-L7的Agent 至于再之上的L4-L7层的FwaaS,VPNaaS, DNATaaS, DNSaaS的内容，在neutron又出来一个新的服务框架用于将所有这些除L2层以外的网络服务类似于上述ml2的思想在数据库这块一网打尽。 下面我们通过一个单一扁平的提供者网络FLAT来部署neutron。为虚拟机提供网络资源。</p><h3 id="Neutron控制节点部署"><a href="#Neutron控制节点部署" class="headerlink" title="Neutron控制节点部署"></a>Neutron控制节点部署</h3><ol><li>Neutron安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y openstack-neutron openstack-neutron-ml2 \</span><br><span class="line">openstack-neutron-linuxbridge ebtables</span><br></pre></td></tr></table></figure><ol><li>Neutron配置<ul><li>Neutron数据库配置</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;neutron.conf</span><br><span class="line">[database]</span><br><span class="line">connection &#x3D; mysql+pymysql:&#x2F;&#x2F;neutron:neutron@192.168.56.11:3306&#x2F;neutron</span><br></pre></td></tr></table></figure><ul><li>Keystone连接配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">…</span><br><span class="line">#注意：该配置默认不存在，需要添加</span><br><span class="line">auth_strategy &#x3D; keystone</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">memcached_servers &#x3D; 192.168.56.11:11211</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; neutron</span><br><span class="line">password &#x3D; neutron</span><br></pre></td></tr></table></figure><ul><li>RabbitMQ相关设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;neutron.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">transport_url &#x3D; rabbit:&#x2F;&#x2F;openstack:openstack@192.168.56.11</span><br><span class="line">#请注意是在DEFAULT配置栏目下，因为该配置文件有多个transport_url的配置</span><br></pre></td></tr></table></figure><ul><li>Neutron网络基础配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#注意：该配置默认不存在，需要添加</span><br><span class="line">[DEFAULT]</span><br><span class="line">core_plugin &#x3D; ml2</span><br><span class="line"># 这个配置没有错，就是设置为空</span><br><span class="line">service_plugins &#x3D;</span><br></pre></td></tr></table></figure><ul><li>网络拓扑变化Nova通知配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"># 这两行配置需要新增</span><br><span class="line">notify_nova_on_port_status_changes &#x3D; True</span><br><span class="line">notify_nova_on_port_data_changes &#x3D; True</span><br><span class="line"></span><br><span class="line"># 在配置文件最后增加以下配置段</span><br><span class="line">[nova]</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">region_name &#x3D; RegionOne</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; nova</span><br><span class="line">password &#x3D; nova</span><br></pre></td></tr></table></figure><ul><li>在 [oslo_concurrency] 部分，配置锁路径：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path &#x3D; &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp</span><br></pre></td></tr></table></figure><ol><li>Neutron ML2配置</li></ol><p>还是在控制节点上，我们需要配置Neutron ML2。ML2使用Linux桥接机制为实例创建Layer-2的虚拟网络基础设施。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini</span><br><span class="line"></span><br><span class="line">#以下所有配置目前均需要新增，默认配置文件已经移除，注意删除注释。</span><br><span class="line"></span><br><span class="line">[ml2]</span><br><span class="line">type_drivers &#x3D; flat,vlan,gre,vxlan,geneve #支持多选，所以把所有的驱动都选择上。</span><br><span class="line">tenant_network_types &#x3D; flat,vlan,gre,vxlan,geneve #支持多项，所以把所有的网络类型都选择上。</span><br><span class="line">mechanism_drivers &#x3D; linuxbridge,openvswitch,l2population #选择插件驱动，支持多选，开源的有linuxbridge和openvswitch</span><br><span class="line">#启用端口安全扩展驱动</span><br><span class="line">extension_drivers &#x3D; port_security,qos </span><br><span class="line"></span><br><span class="line">[ml2_type_flat]</span><br><span class="line">#设置网络提供</span><br><span class="line">flat_networks &#x3D; provider</span><br><span class="line"></span><br><span class="line">[securitygroup]</span><br><span class="line">#启用ipset</span><br><span class="line">enable_ipset &#x3D; True</span><br></pre></td></tr></table></figure><ol><li>Neutron Linuxbridge配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini</span><br><span class="line">#以下所有配置目前均需要新增，默认配置文件已经移除，注意删除注释。</span><br><span class="line"></span><br><span class="line">[linux_bridge]</span><br><span class="line">#映射虚拟网络接口和实际网络接口的对应</span><br><span class="line">physical_interface_mappings &#x3D; provider:eth0 </span><br><span class="line"></span><br><span class="line">[vxlan]</span><br><span class="line">#禁止vxlan网络</span><br><span class="line">enable_vxlan &#x3D; False</span><br><span class="line"></span><br><span class="line">[securitygroup]</span><br><span class="line">#设置使用Linux Bridge桥接的防火墙驱动和安全组</span><br><span class="line">firewall_driver &#x3D; neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line">enable_security_group &#x3D; True</span><br></pre></td></tr></table></figure><ol><li>Neutron DHCP-Agent配置</li></ol><p>Neutron中的dhcp-agent用来为云主机动态分配IP地址，DHCP Agent默认是通过调用dnsmasq来实现DHCP的分配工作。默认情况下dhcp-agent和后面要介绍的Lbaas-agent都需要依赖namespace,所以开始之前我们需要先介绍下linux的namespache。</p><p><strong>什么是namespace</strong> Namespace(命名空间)，简单的说就是不同的名字空间，打个简单的比方，进程在a空间是叫a进程，在b空间也就可能叫b进程。为什么要有命名空间呢？主要是满足虚拟化的一些需求。试想，如果有一台机器，不管它是个人pc还是服务器，或是 网络交换机，路由器，一般情况下，它也就被一个用户使用。但是如果某一天，另外一个用户也要使用同样的机器，一种方法是再买一个机器，装上同样的 linux系统，但是还有一种更好的方法，就是使用容器（container），每个用户有属于自己的容器，而且容器之间相互隔离，而namespace 就是实现容器的一种手段。Namespace可以实现pid、net、ipc、mnt、uts、user等namespace将容器的进程、网络、消息、文件系统、UTS(“UNIX Time-sharing System”)和用户空间隔离开。在Docker中，我们会详解讲解namespace。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;dhcp_agent.ini</span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver &#x3D; linuxbridge</span><br><span class="line">dhcp_driver &#x3D; neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata &#x3D; True</span><br></pre></td></tr></table></figure><ol><li>Neutron metadata配置</li></ol><p>metadata agent为实例提供诸如凭证的配置信息。需要设置Keystone的链接和nova的连接参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;metadata_agent.ini</span><br><span class="line">[DEFAULT]</span><br><span class="line">nova_metadata_host &#x3D; 192.168.56.11</span><br><span class="line">#注意这个是为元数据代理设置的密码，需要和nova的配置相对应。</span><br><span class="line">metadata_proxy_shared_secret &#x3D; unixhot.com</span><br></pre></td></tr></table></figure><ol><li>Neutron相关配置在nova.conf</li></ol><p>Neutron的配置，需要修改nova的配置文件，因为默认大多数OpenStack发行版里nova.conf里面的网络相关的配置都是比较老的，使用的最早的nova-network的配置。所以需要进行修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf </span><br><span class="line">[neutron]</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">region_name &#x3D; RegionOne</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; neutron</span><br><span class="line">password &#x3D; neutron</span><br><span class="line">service_metadata_proxy &#x3D; true</span><br><span class="line">metadata_proxy_shared_secret &#x3D; unixhot.com</span><br><span class="line">#注意这里设置的共享秘钥需要和之前的对应上。</span><br></pre></td></tr></table></figure><ol><li>配置完毕后，我们需要设置一个软连接，因为默认服务会读取plugin.ini。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ln -s &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini &#x2F;etc&#x2F;neutron&#x2F;plugin.ini</span><br></pre></td></tr></table></figure><ol><li>同步数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# su -s &#x2F;bin&#x2F;sh -c &quot;neutron-db-manage --config-file &#x2F;etc&#x2F;neutron&#x2F;neutron.conf \</span><br><span class="line">--config-file &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini upgrade head&quot; neutron</span><br></pre></td></tr></table></figure><ol><li>重启计算API 服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart openstack-nova-api.service</span><br></pre></td></tr></table></figure><ol><li>启动网络服务并配置他们开机自启动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable neutron-server.service \</span><br><span class="line">  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \</span><br><span class="line">  neutron-metadata-agent.service</span><br><span class="line"># systemctl start neutron-server.service \</span><br><span class="line">  neutron-linuxbridge-agent.service neutron-dhcp-agent.service \</span><br><span class="line">  neutron-metadata-agent.service</span><br></pre></td></tr></table></figure><ol><li>Neutron服务注册</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建service</span><br><span class="line"># openstack service create --name neutron --description &quot;OpenStack Networking&quot; network</span><br><span class="line">创建endpoint</span><br><span class="line"># openstack endpoint create --region RegionOne network public http:&#x2F;&#x2F;192.168.56.11:9696</span><br><span class="line"># openstack endpoint create --region RegionOne network internal http:&#x2F;&#x2F;192.168.56.11:9696</span><br><span class="line"># openstack endpoint create --region RegionOne network admin http:&#x2F;&#x2F;192.168.56.11:9696</span><br></pre></td></tr></table></figure><ol><li>测试Neutron安装**</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-compute-node1 neutron]# openstack network agent list</span><br><span class="line">WARNING: Failed to import plugin orchestration.</span><br><span class="line">WARNING: Failed to import plugin data_processing.</span><br><span class="line">+--------------------------------------+--------------------+-------------------------------------+-------------------+-------+-------+---------------------------+</span><br><span class="line">| ID                                   | Agent Type         | Host                                | Availability Zone | Alive | State | Binary                    |</span><br><span class="line">+--------------------------------------+--------------------+-------------------------------------+-------------------+-------+-------+---------------------------+</span><br><span class="line">| c4a78188-a3ad-4cda-8c47-41f854aad375 | Linux bridge agent | openstack-compute-node1.dianjoy.com | None              | :-)   | UP    | neutron-linuxbridge-agent |</span><br><span class="line">| e2325b10-281b-447c-b46f-7875c0eda1fc | Metadata agent     | openstack-compute-node1.dianjoy.com | None              | :-)   | UP    | neutron-metadata-agent    |</span><br><span class="line">| fb73fabc-2825-42c4-ae24-ea50bb1d37b8 | DHCP agent         | openstack-compute-node1.dianjoy.com | nova              | :-)   | UP    | neutron-dhcp-agent        |</span><br><span class="line">+--------------------------------------+--------------------+-------------------------------------+-------------------+-------+-------+---------------------------+</span><br></pre></td></tr></table></figure><p>如果可以正常输出，基本上Neutron的安装就没有问题。</p><h3 id="Neutron计算节点部署"><a href="#Neutron计算节点部署" class="headerlink" title="Neutron计算节点部署"></a>Neutron计算节点部署</h3><ol><li>安装软件包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# yum install -y openstack-neutron openstack-neutron-linuxbridge ebtables</span><br></pre></td></tr></table></figure><ol><li>配置计算节点Neutron<ul><li>Keystone连接配置</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;neutron.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">auth_strategy &#x3D; keystone</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">memcached_servers &#x3D; 192.168.56.11:11211</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; neutron</span><br><span class="line">password &#x3D; neutron</span><br></pre></td></tr></table></figure><ul><li>RabbitMQ相关设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;neutron&#x2F;neutron.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">transport_url &#x3D; rabbit:&#x2F;&#x2F;openstack:openstack@192.168.56.11</span><br><span class="line">#请注意是在DEFAULT配置栏目下，因为该配置文件有多个transport_url的配置</span><br></pre></td></tr></table></figure><ul><li>锁路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path &#x3D; &#x2F;var&#x2F;lib&#x2F;neutron&#x2F;tmp</span><br></pre></td></tr></table></figure><ol><li>配置LinuxBridge配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# scp &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;linuxbridge_agent.ini 192.168.56.12:&#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;</span><br></pre></td></tr></table></figure><ol><li>设置计算节点的nova.conf</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# vim &#x2F;etc&#x2F;nova&#x2F;nova.conf</span><br><span class="line">[neutron]</span><br><span class="line">auth_url &#x3D; http:&#x2F;&#x2F;192.168.56.11:5000</span><br><span class="line">auth_type &#x3D; password</span><br><span class="line">project_domain_name &#x3D; default</span><br><span class="line">user_domain_name &#x3D; default</span><br><span class="line">region_name &#x3D; RegionOne</span><br><span class="line">project_name &#x3D; service</span><br><span class="line">username &#x3D; neutron</span><br><span class="line">password &#x3D; neutron</span><br></pre></td></tr></table></figure><ol><li>重启计算服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure><ol><li>启动计算节点linuxbridge-agent</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# systemctl enable neutron-linuxbridge-agent.service</span><br><span class="line">[root@linux-node2 ~]# systemctl start neutron-linuxbridge-agent.service</span><br></pre></td></tr></table></figure><ol><li>在控制节点上测试Neutron安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source admin-openstack.sh </span><br><span class="line">[root@linux-node1 ~]# openstack network agent list</span><br><span class="line">+--------------------------------------+--------------------+-----------------------------+-------------------+-------+-------+---------------------------+</span><br><span class="line">| ID                                   | Agent Type         | Host                        | Availability Zone | Alive | State | Binary                    |</span><br><span class="line">+--------------------------------------+--------------------+-----------------------------+-------------------+-------+-------+---------------------------+</span><br><span class="line">| 11f1de57-836f-412f-b9b4-51dcdc9ae931 | Metadata agent     | linux-node1.example.com | None              | :-)   | UP    | neutron-metadata-agent    |</span><br><span class="line">| 197b84cd-7d6e-4ed2-9fa0-46499fe7cdb7 | Linux bridge agent | linux-node2.example.com | None              | :-)   | UP    | neutron-linuxbridge-agent |</span><br><span class="line">| 531afd6d-ee81-4b64-a0f4-ec5fd523eff8 | DHCP agent         | linux-node1.example.com | nova              | :-)   | UP    | neutron-dhcp-agent        |</span><br><span class="line">| dfc431ff-dede-4a54-8371-653c6e72ffd9 | Linux bridge agent | linux-node1.example.com | None              | :-)   | UP    | neutron-linuxbridge-agent |</span><br><span class="line">+--------------------------------------+--------------------+-----------------------------+-------------------+-------+-------+---------------------------+</span><br></pre></td></tr></table></figure><p>看是否有linux-node2.example.com的Linux bridge agent</p><h3 id="Bug解决"><a href="#Bug解决" class="headerlink" title="Bug解决"></a>Bug解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent [req-68a7936c-2bbc-454e-bee4-6785cd3dce7b - - - - -] Error in agent loop. Devices info: &#123;&#39;current&#39;: set([&#39;tap07dc4c9c-f3&#39;]), &#39;timestamps&#39;: &#123;&#39;tap07dc4c9c-f3&#39;: 7&#125;, &#39;removed&#39;: set([]), &#39;added&#39;: set([&#39;tap07dc4c9c-f3&#39;]), &#39;updated&#39;: set([])&#125;: KeyError: &#39;gateway&#39;</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent Traceback (most recent call last):</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;agent&#x2F;_common_agent.py&quot;, line 465, in daemon_loop</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     sync &#x3D; self.process_network_devices(device_info)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;osprofiler&#x2F;profiler.py&quot;, line 160, in wrapper</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     result &#x3D; f(*args, **kwargs)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;agent&#x2F;_common_agent.py&quot;, line 214, in process_network_devices</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     resync_a &#x3D; self.treat_devices_added_updated(devices_added_updated)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;osprofiler&#x2F;profiler.py&quot;, line 160, in wrapper</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     result &#x3D; f(*args, **kwargs)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;agent&#x2F;_common_agent.py&quot;, line 231, in treat_devices_added_updated</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     self._process_device_if_exists(device_details)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;agent&#x2F;_common_agent.py&quot;, line 258, in _process_device_if_exists</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     device, device_details[&#39;device_owner&#39;])</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 585, in plug_interface</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     network_segment.mtu)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 521, in add_tap_interface</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     return False</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;oslo_utils&#x2F;excutils.py&quot;, line 220, in __exit__</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     self.force_reraise()</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;oslo_utils&#x2F;excutils.py&quot;, line 196, in force_reraise</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     six.reraise(self.type_, self.value, self.tb)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 513, in add_tap_interface</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     tap_device_name, device_owner, mtu)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 546, in _add_tap_interface</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     mtu):</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 497, in ensure_physical_in_bridge</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     physical_interface)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 286, in ensure_flat_bridge</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     if self.ensure_bridge(bridge_name, physical_interface):</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 455, in ensure_bridge</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     self.update_interface_ip_details(bridge_name, interface)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 417, in update_interface_ip_details</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     gateway)</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py&quot;, line 401, in _update_interface_ip_details</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent     dst_device.route.add_gateway(gateway&#x3D;gateway[&#39;gateway&#39;],</span><br><span class="line">2020-01-29 14:09:22.599 6346 ERROR neutron.plugins.ml2.drivers.agent._common_agent KeyError: &#39;gateway&#39;</span><br></pre></td></tr></table></figure><p>分别修改控制节点和计算节点上的Neutron源码，并重启服务</p><ol><li>将priority修改为metric</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-compute-node3 ~]# vim +1503 &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;agent&#x2F;linux&#x2F;ip_lib.py</span><br><span class="line"></span><br><span class="line">#&#39;priority&#39;: get_attr(route, &#39;RTA_PRIORITY&#39;),</span><br><span class="line">&#39;metric&#39;: get_attr(route, &#39;RTA_PRIORITY&#39;),</span><br></pre></td></tr></table></figure><ol><li>将gateway修改为via</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-compute-node3 ~]# vim +402 &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;drivers&#x2F;linuxbridge&#x2F;agent&#x2F;linuxbridge_neutron_agent.py</span><br><span class="line"></span><br><span class="line">#dst_device.route.add_gateway(gateway&#x3D;gateway[&#39;gateway&#39;],</span><br><span class="line">            dst_device.route.add_gateway(gateway&#x3D;gateway[&#39;via&#39;],</span><br><span class="line">                                         metric&#x3D;metric)</span><br><span class="line">            #src_device.route.delete_gateway(gateway&#x3D;gateway[&#39;gateway&#39;])</span><br><span class="line">            src_device.route.delete_gateway(gateway&#x3D;gateway[&#39;via&#39;])</span><br></pre></td></tr></table></figure><p>计算节点重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-compute-node3 ~]# systemctl restart neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure><p>控制节点重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@openstack-compute-node1 ~]# systemctl restart neutron-server.service   neutron-linuxbridge-agent.s</span><br></pre></td></tr></table></figure><h1 id="1-8-创建第一台OpenStack云主机"><a href="#1-8-创建第一台OpenStack云主机" class="headerlink" title="1.8 创建第一台OpenStack云主机"></a>1.8 创建第一台OpenStack云主机</h1><p>好的，到目前为止，你已经完成了启动一台虚拟机所有的必备条件。</p><ul><li>MySQL：为各个服务提供数据存储</li><li>RabbitMQ：为各个服务之间通信提供交通枢纽</li><li>KeyStone：为各个服务器之间通信提供认证和服务注册</li><li>Glance：为虚拟机提供镜像管理</li><li>Nova：为虚拟机提供计算资源</li><li>Neutron：为虚拟机提供网络资源。</li></ul><p>现在你可以着手启动一台虚拟机，剩下的OpenStack服务都可以认为是可选的，不过通常我们会用到Dashboard来通过Web界面来管理，后面的章节我们会讲到，现在我们使用命令来创建我们的第一台虚拟机。</p><h3 id="创建FLAT网络"><a href="#创建FLAT网络" class="headerlink" title="创建FLAT网络"></a>创建FLAT网络</h3><p>首先我们需要创建一个网络。我们现在为demo租户，创建一个FLAT类型的网络。如下图所示。</p><ol><li>创建Flant网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source admin-openstack.sh</span><br><span class="line">[root@linux-node1 ~]# openstack network create  --share --external \</span><br><span class="line">  --provider-physical-network provider \</span><br><span class="line">  --provider-network-type flat provider</span><br></pre></td></tr></table></figure><ol><li>查看网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack network list</span><br></pre></td></tr></table></figure><ol><li>创建子网</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack subnet create --network provider \</span><br><span class="line">  --allocation-pool start&#x3D;192.168.56.100,end&#x3D;192.168.56.200 \</span><br><span class="line">  --dns-nameserver 223.5.5.5  --gateway 192.168.56.2 \</span><br><span class="line">  --subnet-range 192.168.56.0&#x2F;24 provider-subnet</span><br></pre></td></tr></table></figure><ol><li>查看子网</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack subnet list</span><br><span class="line">+--------------------------------------+----------+--------------------------------------+-----------------+</span><br><span class="line">| ID                                   | Name     | Network                              | Subnet          |</span><br><span class="line">+--------------------------------------+----------+--------------------------------------+-----------------+</span><br><span class="line">| 297530f8-62b6-4954-ad33-c8a4ba922a3e | provider | 6cf562b4-0537-4232-a2b9-ce5481e6a505 | 192.168.56.0&#x2F;24 |</span><br><span class="line">+--------------------------------------+----------+--------------------------------------+-----------------+</span><br></pre></td></tr></table></figure><h3 id="创建云主机"><a href="#创建云主机" class="headerlink" title="创建云主机"></a>创建云主机</h3><ol><li>创建云主机类型</li></ol><p>由于默认的云主机大小内存最小是512M，考虑到多数人自己PC的实验环境内存有限，我们创建一个比较小的云主机类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano</span><br></pre></td></tr></table></figure><ol><li>创建密钥对</li></ol><p>密钥对用来使用登录创建后的虚拟机，OpenStack在创建虚拟机的时候会把公钥放到虚拟机里面，这样我们就可以不使用密码连接。 注意现在切换到demo用户，因为我们要使用demo用户来创建第一台云主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source demo-openstack.sh</span><br><span class="line">[root@linux-node1 ~]# ssh-keygen -q -N &quot;&quot;</span><br><span class="line">[root@linux-node1 ~]# openstack keypair create --public-key ~&#x2F;.ssh&#x2F;id_rsa.pub mykey</span><br><span class="line">[root@linux-node1 ~]# openstack keypair list</span><br><span class="line">+-------+-------------------------------------------------+</span><br><span class="line">| Name  | Fingerprint                                     |</span><br><span class="line">+-------+-------------------------------------------------+</span><br><span class="line">| mykey | d2:e0:bc:3e:35:58:5f:7b:fd:c1:0a:93:5e:bf:8f:2d |</span><br><span class="line">+-------+-------------------------------------------------+</span><br></pre></td></tr></table></figure><ol><li>添加安全组规则</li></ol><p>默认情况下，有一个default安全组，这个安全组会拒绝所有访问，所以为了创建虚拟机能够连接，我们需要设置运行ICMP和22端口访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack security group rule create --proto icmp default</span><br><span class="line">[root@linux-node1 ~]# openstack security group rule create --proto tcp --dst-port 22 default</span><br></pre></td></tr></table></figure><ol><li>启动实例前准备</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# source demo-openstack.sh</span><br></pre></td></tr></table></figure><ul><li>查看可用的云主机类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack flavor list</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br><span class="line">| ID | Name    | RAM | Disk | Ephemeral | VCPUs | Is Public |</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br><span class="line">| 0  | m1.nano |  64 |    1 |         0 |     1 | True      |</span><br><span class="line">+----+---------+-----+------+-----------+-------+-----------+</span><br></pre></td></tr></table></figure><ul><li>查看可用的镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack image list</span><br><span class="line">+--------------------------------------+--------+--------+--------+</span><br><span class="line">| ID                                   | Name   | Status | Server |</span><br><span class="line">+--------------------------------------+--------+--------+--------+</span><br><span class="line">| 68615b2c-d10e-422f-9acb-c724808657ab | cirros | ACTIVE |        |</span><br><span class="line">+--------------------------------------+--------+--------+--------+</span><br></pre></td></tr></table></figure><ul><li>查看可用的网络</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack network list</span><br><span class="line">+--------------------------------------+--------+--------------------------------------+</span><br><span class="line">| ID                                   | Name   | Subnets                              |</span><br><span class="line">+--------------------------------------+--------+--------------------------------------+</span><br><span class="line">| 557a00fa-f61d-4244-b350-29ffe0a03125 | public | c003b4b5-23d1-4211-ad2d-a62ec07d8853 |</span><br><span class="line">+--------------------------------------+--------+--------------------------------------+</span><br></pre></td></tr></table></figure><ul><li>查看可用的安全组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack security group list</span><br><span class="line">+--------------------------------------+---------+------------------------+----------------------------------+</span><br><span class="line">| ID                                   | Name    | Description            | Project                          |</span><br><span class="line">+--------------------------------------+---------+------------------------+----------------------------------+</span><br><span class="line">| 74d74309-0660-4eb9-abba-e89fb6fd23ae | default | Default security group | aec911c3ae68464ba989213e5f6060b1 |</span><br></pre></td></tr></table></figure><ol><li>创建虚拟机</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack server create --flavor m1.nano --image cirros \</span><br><span class="line">--nic net-id&#x3D;5c4d0706-24cd-4d42-ba78-36a05b6c81c8 --security-group default \</span><br><span class="line">--key-name mykey demo-instance</span><br></pre></td></tr></table></figure><h1 id="注意指定网络的时候需要使用ID，而不是名称。"><a href="#注意指定网络的时候需要使用ID，而不是名称。" class="headerlink" title="注意指定网络的时候需要使用ID，而不是名称。"></a>注意指定网络的时候需要使用ID，而不是名称。</h1><h3 id="测试云主机"><a href="#测试云主机" class="headerlink" title="测试云主机"></a>测试云主机</h3><ol><li>查看云主机状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack server list</span><br><span class="line">+--------------------------------------+-----------------+--------+------------+-------------+-----------------------+</span><br><span class="line">| ID                                   | Name            | Status | Task State | Power State | Networks              |</span><br><span class="line">+--------------------------------------+-----------------+--------+------------+-------------+-----------------------+</span><br><span class="line">| 7f94df9a-e547-4f56-9887-bbc52c4e0fff | public-instance | ACTIVE | -          | Running     | public&#x3D;192.168.56.101 |</span><br><span class="line">+--------------------------------------+-----------------+--------+------------+-------------+-----------------------+</span><br></pre></td></tr></table></figure><ol><li>测试虚拟机连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ping -c 2 192.168.56.101</span><br><span class="line">PING 192.168.56.101 (192.168.56.101) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.56.101: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;5.90 ms</span><br><span class="line">64 bytes from 192.168.56.101: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.484 ms</span><br><span class="line"></span><br><span class="line">连接虚拟机</span><br><span class="line">[root@linux-node1 ~]# ssh cirros@192.168.56.101</span><br><span class="line">The authenticity of host &#39;192.168.56.101 (192.168.56.101)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is 29:4d:76:17:05:1a:4e:e6:f9:81:a5:1d:8c:27:ff:2c.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;192.168.56.101&#39; (RSA) to the list of known hosts.</span><br><span class="line">$ ifconfig eth0</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr FA:16:3E:E8:B9:C1  </span><br><span class="line">          inet addr:192.168.56.101  Bcast:192.168.56.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::f816:3eff:fee8:b9c1&#x2F;64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:150 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:162 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:18634 (18.1 KiB)  TX bytes:17264 (16.8 KiB)</span><br></pre></td></tr></table></figure><p>如果无法ping通虚拟机，还可以登陆虚拟机Web页面查看，是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openstack console url show demo-instance</span><br><span class="line">+-------+------------------------------------------------------------------------------------+</span><br><span class="line">| Type  | Url                                                                                |</span><br><span class="line">+-------+------------------------------------------------------------------------------------+</span><br><span class="line">| novnc | http:&#x2F;&#x2F;192.168.56.11:6080&#x2F;vnc_auto.html?token&#x3D;e97cffb8-cf0c-4c22-8dbc-fa88ff61f453 |</span><br><span class="line">+-------+------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>恭喜！你成功的使用OpenStack创建了第一台虚拟机，可能这一路走来有点坎坷，但是你成功了。不过这只是你在OpenStack世界里完成的第一步！</p><h1 id="OpenStack-Dashboard"><a href="#OpenStack-Dashboard" class="headerlink" title="OpenStack Dashboard"></a>OpenStack Dashboard</h1><p>目前我们已经讲解并安装了OpenStack的Keystone、Glance、Nova、Neutron。而且我们已经使用命令成功的创建了一台虚拟机，并且可以进行连接和访问。我相信大家已经迫不及待的想看到OpenStack的DashBoard了。 那么OpenStack的有三种管理方法Horizon、CLI和API。本小节，我们就来部署Horizon。 Horizon是OpenStack的Dashboard，是一个可以让云管理员和用户管理OpenStack各种资源和服务的web接口。Horizon通过OpenStack API和各个组件进行交互。 Dashboard会根据Keystone中注册的Service去显示相应的功能。所以如果你没有安装相应的服务，却再Keystone中做了注册，登陆Dashboard是会报错的。</p><h3 id="Horizon部署"><a href="#Horizon部署" class="headerlink" title="Horizon部署"></a>Horizon部署</h3><blockquote><p>需要将Keystone和Hoarizon分开部署，彼此之间有冲突。部署到linux-node2节点上。</p></blockquote><ol><li>安装Horizon</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# yum install -y openstack-dashboard</span><br></pre></td></tr></table></figure><ol><li>Horizon配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# vim &#x2F;etc&#x2F;openstack-dashboard&#x2F;local_settings</span><br><span class="line">#允许所有主机访问</span><br><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;, ]</span><br><span class="line"></span><br><span class="line">#设置Keystone地址</span><br><span class="line">OPENSTACK_HOST &#x3D; &quot;192.168.56.11&quot;</span><br><span class="line">OPENSTACK_KEYSTONE_URL &#x3D; &quot;http:&#x2F;&#x2F;%s:5000&#x2F;v3&quot; % OPENSTACK_HOST</span><br><span class="line"></span><br><span class="line">#设置API版本，需要新增</span><br><span class="line">OPENSTACK_API_VERSIONS &#x3D; &#123;</span><br><span class="line">    &quot;identity&quot;: 3,</span><br><span class="line">    &quot;volume&quot;: 2,</span><br><span class="line">    &quot;compute&quot;: 2,</span><br><span class="line">&#125;</span><br><span class="line">#为通过仪表盘创建的用户配置默认的 user 角色</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_ROLE &#x3D; &quot;user&quot;</span><br><span class="line">开启多域支持</span><br><span class="line">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT &#x3D; True</span><br><span class="line">设置默认的域</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN &#x3D; &#39;Default&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置Session存储到Memcached</span><br><span class="line">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;</span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,</span><br><span class="line">        &#39;LOCATION&#39;: &#39;192.168.56.11:11211&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#启用Web界面上修改密码</span><br><span class="line">OPENSTACK_HYPERVISOR_FEATURES &#x3D; &#123;</span><br><span class="line">    &#39;can_set_mount_point&#39;: True,</span><br><span class="line">    &#39;can_set_password&#39;: True,</span><br><span class="line">    &#39;requires_keypair&#39;: False,</span><br><span class="line">&#125;</span><br><span class="line">#设置时区</span><br><span class="line">TIME_ZONE &#x3D; &quot;Asia&#x2F;Shanghai&quot;</span><br><span class="line">#禁用自服务网络的一些高级特性</span><br><span class="line"></span><br><span class="line">OPENSTACK_NEUTRON_NETWORK &#x3D; &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#39;enable_router&#39;: False,</span><br><span class="line">    &#39;enable_quotas&#39;: False,</span><br><span class="line">    &#39;enable_distributed_router&#39;: False,</span><br><span class="line">    &#39;enable_ha_router&#39;: False,</span><br><span class="line">    &#39;enable_lb&#39;: False,</span><br><span class="line">    &#39;enable_firewall&#39;: False,</span><br><span class="line">    &#39;enable_vpn&#39;: False,</span><br><span class="line">    &#39;enable_fip_topology_check&#39;: False,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>重新生产Horizon配置文件</li></ol><p>如果根据官方文档，和默认安装的配置，访问/dashboard后跳转到/auth/login并且会提示404 Not Found，需要重新生成配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# cd &#x2F;usr&#x2F;share&#x2F;openstack-dashboard</span><br><span class="line">[root@linux-node2 ~]# python manage.py make_web_conf --apache &gt; &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-dashboard.conf</span><br></pre></td></tr></table></figure><ol><li>启动服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# systemctl enable httpd.service</span><br><span class="line">[root@linux-node2 ~]# systemctl restart httpd.service</span><br></pre></td></tr></table></figure><p>好的，现在你就可以使用<a href="http://192.168.56.11/%E6%9D%A5%E8%AE%BF%E9%97%AE%E4%BB%AA%E8%A1%A8%E7%9B%98%E4%BA%86%E3%80%82%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8admin%E6%88%96%E8%80%85demo%E3%80%82%E9%9C%80%E8%A6%81%E4%BD%A0%E4%BA%B2%E8%87%AA%E6%9D%A5%E4%BD%93%E9%AA%8C%E4%BB%96%E4%BB%AC%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E3%80%82">http://192.168.56.11/来访问仪表盘了。用户名和密码可以使用admin或者demo。需要你亲自来体验他们到底有什么不同。</a></p><h3 id="Horizon的Session存储"><a href="#Horizon的Session存储" class="headerlink" title="Horizon的Session存储"></a>Horizon的Session存储</h3><p>我们经常在负载均衡的环境下，会遇到Session的问题，一般的解决办法有三种：</p><ul><li>Session保持</li><li>Session复制</li><li>Session共享</li></ul><p>Horizon作为一个典型的Django应用，是使用 Django session架构来处理用户的session数据，目前session支持以下几种存储方式：</p><ul><li>本地内存缓存</li><li>键值对存储（Memcached或者Redis）</li><li>数据库存储</li><li>cookies</li></ul><p>通过修改 local_settings 文件的 SESSION_ENGINE 的配置值来自定制session后端</p><p><strong>本地内存缓存</strong></p><p>本地内存缓存是最快速和最简单的session后端配置方法，因为他不需要处理任何的依赖关系。尽管如此，他也拥有以下明显的缺点：</p><ul><li><p>存储为非共享的，不能跨进程</p></li><li><p>进程终止后没有持续性。 单一的Horizon安装的默认为本地内存后端，因为他没有依赖性问题。生产环境是不推荐使用这个后端的，甚至在严肃的开发工作中也不推荐。你仍旧可以这样启用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;</span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">  &#39;BACKEND&#39;: &#39;django.core.cache.backends.locmem.LocMemCache&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>键值对存储</strong></p><p>你可以使用Memcached 或 Redis 等应用程序作为session的外部缓存机制。这些应用程序为session提供了持久并可以共享的存储，这在小规模或开发环境中的部署中十分有用。</p><ol><li>Memcached</li></ol><p>Memcached 是一个高性能和分布式的内存对象缓存系统，为小块的任意数据提供进驻内存的键值对的存储。 需求： Memcached服务运行并可以访问。 安装了python-memcached 的 Python 模块 通过下面的方法启用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;</span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;</span><br><span class="line">    &#39;LOCATION&#39;: &#39;my_memcached_host:11211&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Redis</li></ol><p>Redis是一个开源的，BSD许可的，高级键值对存储。他通常被称为数据结构服务器。 需求： Redis服务运行并可以访问 安装了 redis 以及 django-redis 的python模块 通过以下配置方法启用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE &#x3D; &#39;django.contrib.sessions.backends.cache&#39;</span><br><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;redis_cache.cache.RedisCache&quot;,</span><br><span class="line">        &quot;LOCATION&quot;: &quot;127.0.0.1:6379:1&quot;,</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;redis_cache.client.DefaultClient&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三部分-OpenStack进阶指南"><a href="#第三部分-OpenStack进阶指南" class="headerlink" title="第三部分 OpenStack进阶指南"></a>第三部分 OpenStack进阶指南</h1><p>联系作者———————————————————————-</p><h1 id="第四部分-Docker和Kubernetes基础"><a href="#第四部分-Docker和Kubernetes基础" class="headerlink" title="第四部分 Docker和Kubernetes基础"></a>第四部分 Docker和Kubernetes基础</h1><p>1.docker基础入门</p><p>在全链路自动化运维体系中，我们已经可以完成自动化系统安装、自动化监控、配置管理、代码部署。通过SaltStack的配置管理可以保证开发、测试、生产的环境一致性；自动化代码部署可以实现一键部署、秒级回滚；但是，你有没有考虑过，SaltStack配置的环境是很难回滚的，就像你安装了一个软件包更新了其它的软件包。想回滚到你安装软件之前的状态，这个可能有点难。再或者你的代码和环境需要一起回滚！</p><p><img src="http://k8s.unixhot.com/docker/media/6b19e69aac9d176124a719ad038e3bb2.png" alt="img"></p><p>那么让我们马上进入容器的世界，虽然容器不仅仅是解决这些问题，但是至少我们遇到了运维痛点？引入一个新的解决方案一定是为了解决痛点。作为运维，我们不能局限于眼前的苟且，一定要高瞻远瞩，及时的跟上潮流。但是对于生产环境，我们必须要慎重的对待。</p><h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><p>Docker是Docker.Inc公司开源的一个基于LXC技术之上构建的Container容器引擎，源代码托管在GitHub上,基于Go语言并遵从Apache2.0协议开源。</p><p>Docker是通过内核虚拟化技术（namespaces及cgroups等）来提供容器的资源隔离与安全保障等。由于Docker在操作系统层实现隔离，所以Docker容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。</p><p><strong>Docker运行结构</strong></p><p><img src="http://k8s.unixhot.com/docker/media/3185f40a56d6a22b714b444d515be3f0.png" alt="说明: Docker Engine Components Flow"></p><p>Docker是一个C/S结构的项目，有Docker Client、RESTAPI、Docker Server组成。</p><ul><li>Docker Client：Docker客户端命令工具。</li><li>REST API：提供标准的RESTful接口。</li><li>Docker Server:：Docker daemon的主要组成部分，接收用户从Docker Client调用REST API发送过来的请求。</li></ul><p><strong>Docker 包括三个基本概念：</strong></p><ul><li>镜像（Image）</li><li>容器（Container）</li><li>仓库（Repository）</li></ul><p><strong>Docker镜像</strong></p><p>Docker 镜像就是一个只读的模板。你可以拿KVM虚拟机镜像来对比理解。</p><p>例如：一个镜像可以包含一个完整的CentOS操作系统运行（注意不包含内核），里面仅安装了Nginx或用户需要的其它应用程序。</p><p>镜像可以用来创建Docker容器。就像你使用创建好的镜像直接启动一个虚拟机一样。</p><p>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p><p><strong>小提示：为什么在CentOS的宿主机上可以运行一个Ubuntu的Docker容器？因为Docker镜像里面只是包含了容器运行时的文件、库文件等，并不包含Kernel，统一使用宿主机的Linux内核。</strong></p><p><strong>Docker容器</strong></p><p>Docker利用容器来运行应用，就像你运行一个KVM虚拟机一样。容器就是从镜像创建的运行实例，就像我们上面提到了虚拟机实例一样。它可以被启动、开始、停止、删除。每个容器都是相互独立的、隔离的个体。但其实没有虚拟机隔离的那么彻底，这个我们后面再说。</p><p>你可以把容器看做是一个简易版的Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><p><strong>Docker仓库</strong></p><p>Docker仓库是集中存放镜像文件的场所。就像OpenStack的Glance服务，仓库分为公开仓库（Public）和私有仓库（Private）两种形式。这个有点像Git代码托管，你可以把代码放在GitHub上并公开，也可是使用Gitlab创建一个私有的代码托管平台。</p><p>Docker最大的公开仓库是Docker Hub，存放了数量庞大的镜像供用户下载，后面你也可以创建自己的镜像分享到Docker Hub中。</p><p>同时你可以创建自己的镜像托管平台，Docker有一个叫做Registry的组件，使用Docker Registry可以启动一个私有的镜像托管平台，这个平台可以存放多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>有时候我们会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分，实际上不严谨的，不过也不用太纠结这些名词，可以根据上下文来理解。</p><p>当用户创建了自己的镜像之后就可以使用docker push命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上docker pull下来就可以了。是的，没错，就像你操作Git那样。</p><h3 id="Docker与虚拟化"><a href="#Docker与虚拟化" class="headerlink" title="Docker与虚拟化"></a>Docker与虚拟化</h3><p>Docker是一种容器技术，它和虚拟化是有区别，就像下图所示：</p><p><img src="http://k8s.unixhot.com/docker/media/50b4ac39d02c080a7e3284e9b078e0c2.jpg" alt="0731013"></p><p>可以看到Docker的容器并不需要运行一个Hypervisor。直接是Docker Engine来管理容器，减少了Hypervisor的开销，但是由于Docker容器并不是一个虚拟机，所以也无法提供像虚拟机一样的完全的资源隔离，还有很多隔离层面的问题。所以如果你的业务要求完全的资源隔离，可能Docker并不是一个好的选择。例如我们之前支付业务，需要在物理机上插入U Key，在虚拟机的情况下可以通过USB重定向来实现，但是Docker却并不支持。</p><p>所有的技术都有它适用的场景，只有深入了解Docker，我们才能发挥它的作用，提高工作效率。</p><h3 id="Docker与OpenStack对比"><a href="#Docker与OpenStack对比" class="headerlink" title="Docker与OpenStack对比"></a>Docker与OpenStack对比</h3><p>在Docker还没有普及之前，云计算、OpenStack等流行的技术铺面而来。严格来说Docker不应该和OpenStack做对比，他们没有在一个层级上，和KVM比会更好一些。</p><table><thead><tr><th>类别</th><th>Docker</th><th>OpenStack/KVM</th></tr></thead><tbody><tr><td>部署难度</td><td>非常简单</td><td>组件多，部署复杂</td></tr><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>执行性能</td><td>和物理系统几乎一致</td><td>VM会占用一些资源</td></tr><tr><td>镜像体积</td><td>镜像是MB级别</td><td>虚拟机镜像GB级别</td></tr><tr><td>管理效率</td><td>管理简单</td><td>组件相互依赖，管理复杂</td></tr><tr><td>隔离性</td><td>隔离性高</td><td>彻底隔离</td></tr><tr><td>可管理性</td><td>单进程、不建议启动SSH</td><td>完整的系统管理</td></tr><tr><td>网络连接</td><td>比较弱</td><td>借助Neutron可以灵活组件各类网络架构</td></tr></tbody></table><h3 id="Docker改变了什么？"><a href="#Docker改变了什么？" class="headerlink" title="Docker改变了什么？"></a>Docker改变了什么？</h3><p>我觉得Docker在不同的层面都改变了我的工作方式：</p><p><strong>面向产品</strong></p><p>增加了产品交付模式。在产品交付方面，之前做产品交付我们都是交付的软件包、安装操作文档等，需要用户进行部署。而现在可以直接交付Docker镜像，直接启动就可以访问。例如现在很多开源的项目都提供了Docker镜像或者Dockerfile，对于只想尝试一下的人员来说，再也不用进行繁琐的安装步骤了，而且往往部署成功后，发现并不能满足我们的要求。</p><p><strong>面向开发</strong></p><p>简化了开发环境配置。公司每次有开发入职，当天除了办手续就是准备开发环境了。如果使用Docker，我们可以给不同项目，构建不同的Docker镜像。开发入职后，就可以快速的进入开发工作。而且这个镜像一次构建，可以在开发、测试、预生产、生产都可以使用。</p><p><strong>面向测试</strong></p><p>Docker实现了多版本测试。之前我公司测试团队，如果想测试一个项目的不同分支，由于测试环境的局限性大家要排队，串行的进行测试。测试人员A再使用某个项目的测试环境时，其它人要排队。现在每个测试人员都可以创建不同分支的Docker容器。让测试团队可以并行测试。</p><p><strong>面向运维</strong></p><p>解决环境一致性、实现运行环境回滚。我们也不需要使用SaltStack进行配置管理了。做好一个Docker镜像之后，开发、测试、生产都用一套运行环境，只是上面的代码不同。当然这个虚拟机也可以实现，但是不够敏捷。而且在生产代码部署的时候，以Docker容器为单位进行发布。如果要进行回滚，直接把上一个版本的Docker容器启动即可。</p><p><strong>面向架构</strong></p><p>SOA服务部署、微服务部署、自动化扩容。之前我们做SOA、微服务的时候最多以虚拟机为单位进行管理。但是现在启动一个Docker容器要远远快速启动一个KVM虚拟机。而且不需要太复杂的操作步骤，你就可以在一个新的服务器上安装上Docker，并下载镜像，启动容器。</p><h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><p>目前Docker仅支持Linux和Unix环境，在Windows Server 2016版本支持Windows容器。</p><h3 id="Docker-for-CentOS："><a href="#Docker-for-CentOS：" class="headerlink" title="Docker for CentOS："></a>Docker for CentOS：</h3><p><strong>第一步：使用官方yum仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y yum-utils</span><br><span class="line">[root@linux-node1 ~]# yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p>使用国内Yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">[root@linux-node1 yum.repos.d]# wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p>第二步：Docker安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>第三步：启动后台进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl start docker</span><br><span class="line">[root@linux-node1 yum.repos.d]# docker --version</span><br><span class="line"></span><br><span class="line">Docker version 18.09.2, build 6247962</span><br></pre></td></tr></table></figure><h3 id="Docker-for-windows"><a href="#Docker-for-windows" class="headerlink" title="Docker for windows:"></a>Docker for windows:</h3><p>第一步：下载boot2docker：<a href="https://github.com/boot2docker/windows-installer/releases/latest">https://github.com/boot2docker/windows-installer/releases/latest</a></p><p>第二步：运行安装程序，</p><p><img src="http://k8s.unixhot.com/docker/media/ee82a72fe806ac1ae99ab7fa0aac210c.png" alt="img"></p><p>选择需要安装的组件，如果初次安装请选择Full installation。</p><p><img src="http://k8s.unixhot.com/docker/media/920a1b8c46b133f431f0255197ddb3f8.png" alt="img"></p><p><img src="http://k8s.unixhot.com/docker/media/bbe62c1244b68a92383658af3a72b3a0.png" alt="img"></p><p>安装完毕，打开Docker，默认会进行初始化，初始化会创建一个virtualbox的虚拟机。</p><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p>Docker之所以能这么快的火起来，和Docker Hub的作用是分不开的。Docker构建了像GitHub一样的仓库，用来存放大家构建好的Docker镜像，其中已经包括了超过15,000的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。</p><p><strong>搜索镜像</strong></p><p>搜索，你懂的，想寻找你需要的Docker镜像，先搜索吧，因为可能已经有人做好了，合并重复造轮子呢，尤其是很多是官方提供的，可以非常放心的使用。</p><p><img src="http://k8s.unixhot.com/docker/media/bd38bd717fa1a2f84aa5f62a965a7ecd.png" alt="img"></p><p>输出依次为镜像名字、描述、星级（表示该镜像的受欢迎程度）、是否官方创建、是否自动创建。OFFICIAL为OK的就是官方镜像。</p><p>本章快速的带领读者使用上Docker，了解Docker的基本操作和管理工作。记住，唯有实践才会掌握。</p><h2 id="Docker镜像管理"><a href="#Docker镜像管理" class="headerlink" title="Docker镜像管理"></a>Docker镜像管理</h2><p>镜像是Docker容器的基础，想运行一个Docker容器就需要有镜像。我们上面已经学会了使用search搜索镜像。那么这个镜像是怎么创建的呢？</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>镜像的创建有以下几种方法：</p><p><strong>使用ISO镜像：</strong>回顾下OpenStack，我们在创建虚拟机的时候，首先使用iso安装定制了镜像上传到Glance上面，对于Docker来说，我们同样可以使用ISO镜像来制作基本镜像。</p><p><strong>使用工具制作镜像：</strong>不同的操作系统都提供了相应的工具来让用户创建Docker镜像，比如Centos可以使用febootstrap。debian/ubuntu使用debootstrap。</p><p><strong>基于本地模板导入：</strong>Docker支持从一个操作系统模板文件导入一个镜像。</p><p>一般我们都是使用一些公共的基础镜像，然后在这个基础上，再根据自身需求进行定制。比如后面要讲到的Docker File的方式，来创建镜像。</p><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>既然有了Docker Hub，我们就不要重复造轮子了，直接下载一个官方提供的centos镜像吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library&#x2F;centos</span><br><span class="line">a02a4930cb5d: Pull complete</span><br><span class="line">Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br></pre></td></tr></table></figure><p>Docker镜像文件是有若干层组成的，行首的名称就是各层的ID。这就是Docker镜像的一个特点。其实分层设计是很多设计的最佳实践之一。由于网络原因，国内用户可能需要等待很久。如果下载中断可以再次执行docker pull centos。</p><p>镜像可以有不同的标签，例如v1.0、v1.1这样，默认情况下，如果我们不再centos后面增加任何的标签会下载标签为latest的镜像，也就是最新版本，而且默认是从docker hub上进行下载。</p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>使用docker images可以查看当前系统中都有哪些镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker images</span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">centos latest 1e1148e4cc2c 2 months ago 202MB</span><br></pre></td></tr></table></figure><p>使用docker images可以列出本地主机上已经存在的镜像，每个镜像都有一个唯一的镜像ID，我们可以看到有以下几个栏目：</p><ul><li>REPOSITORY：镜像来自于哪个仓库</li><li>TAG：镜像的标签。用来标记镜像的不同版本等。</li><li>IMAGE ID：镜像的唯一ID。</li><li>CREATED：镜像创建时间。</li><li>VIRTUAL SIZE：镜像的大小。</li></ul><h3 id="镜像的导入导出"><a href="#镜像的导入导出" class="headerlink" title="镜像的导入导出"></a>镜像的导入导出</h3><p>如果你想把自己的镜像传给别人怎么办，Docker提供了导入和导出的命令：</p><p><strong>导出镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker save -o centos.tar centos</span><br></pre></td></tr></table></figure><p><strong>导入镜像</strong></p><p>将导出的镜像scp到另外的一台机器上后做导入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# docker load --input centos.tar</span><br></pre></td></tr></table></figure><p>或者使用重定向进行导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# docker load &lt; centos.tar</span><br></pre></td></tr></table></figure><p>Docker镜像这种导入和导出是完整，可以看到镜像ID等都没有发生改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# docker images</span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">centos latest 1e1148e4cc2c 2 months ago 202MB</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用docker rmi命令可以删除本地的镜像，可以使用镜像的标签或者镜像的ID。他们两者之间是不同的。</p><p>docker rmi 标签：会删除指定标签的镜像，但是镜像本身不会被删除，因为一个镜像对象可以有多个标签，就像Linux文件的硬链接，当镜像只剩下一个标签的时候，使用标签删除镜像，才会删除镜像本身。</p><p>docker rmi ID：使用镜像的ID删除镜像，会先删除该镜像的所有标签，然后再删除镜像文件本身。</p><p>注意：如果镜像创建的容器存在时，镜像是无法被删除的。不过你可以使用-f的参数强制删除镜像，并不建议这么做。</p><p>看起来Docker的镜像操作是比虚拟机要便捷的多，目前来说使用几个简单的命令，就可以完成镜像的管理工作，不过这还只是基础。</p><h2 id="Docker容器管理"><a href="#Docker容器管理" class="headerlink" title="Docker容器管理"></a>Docker容器管理</h2><p>Docker容器相对于OpenStack的云主机实例，虽然他们本质上不同。我们需要基于镜像来创建容器。容器是独立运行的一个或一组应用，以及它们的运行环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>启动容器其实就是创建镜像并启动，启动镜像有两种方式，一种是将已经存在，但是是stopped状态的镜像启动，一种就是基于一个镜像新建一个新的容器并启动。</p><p><strong>新建并启动容器</strong></p><p>让我们先老生常谈，输出一个Hello World吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run centos &#x2F;bin&#x2F;echo &#39;Hello world&#39;</span><br><span class="line"></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>很神奇，可以在精通各种语言的Hello World计数器+1了，这个和你在本地系统运行/bin/echo ‘Hello world’ 几乎没有任何区别，但是它是Docker容器输出的，而且输出后，它就完成使命，自动退出了。</p><blockquote><p>注意：这里就是我们学习Docker要面临的第一个疑惑，就是容器只会在前台运行一个任务，任务结束，容器就终止了。</p></blockquote><p>使用docker ps –a可以查看当前启动的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker ps -a</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">789de67bb454 centos &quot;&#x2F;bin&#x2F;echo &#39;Hello wor&quot; 30 seconds ago Exited (0) 29 seconds</span><br><span class="line">ago pedantic_kare</span><br></pre></td></tr></table></figure><p>刚接触Docker到这里还会有第二个疑惑：</p><p>Docker自动帮你生成了一个名字，比如本例中是pedantic_kare。</p><p>很困惑？好吧，让我们来启动一个我们自定义名称，同时可以有终端的容器，就像启动一个虚拟机一样，不过只是像而已，它们本质上完全不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run --name mydocker -t -i centos &#x2F;bin&#x2F;bash</span><br><span class="line">[root@1b0cae722fa0 &#x2F;]#</span><br><span class="line">[root@1b0cae722fa0 &#x2F;]# ls &#x2F;</span><br><span class="line"></span><br><span class="line">anaconda-post.log bin dev etc home lib lib64 lost+found media mnt opt proc root</span><br><span class="line">run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>上面我们使用了两个选项，-t 选项让Docker分配一个伪终端并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p><p>在交互模式下，用户可以通过所创建的终端来输入命令，例如我们可以查看当前运行的进程，只有/bin/bash和你运行的命令，注意看/bin/bash的PID为1，有意思。先记着这个特殊的地方，随着我们深入学习，再回过头来研究它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@1b0cae722fa0 &#x2F;]# ps aux</span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 1 0.1 0.1 11776 1872 ? Ss 15:30 0:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 18 0.0 0.0 47424 1660 ? R+ 15:31 0:00 ps aux</span><br></pre></td></tr></table></figure><p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公共仓库下载；</li><li>利用镜像创建并启动一个容器；</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层；</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去；</li><li>从地址池配置一个ip地址给容器；</li><li>执行用户指定的应用程序；</li><li>执行完毕后容器被终止。</li></ul><p>让我们输入exit来退出这个容器，退出后，容器会自动终止运行。为什么呢？请参考我们第一个疑惑，Docker容器在前台运行一个单任务，任务结束，容器就终止。这就是Docker容器的特性！同时你有没有注意到一个小细节，默认docker容器的主机名就是CONTAINER ID。</p><p><strong>让容器容器后台运行</strong></p><p>在使用docker run运行容器更多时候，我们是需要容器在后台运行的，也就是以守护态形式运行。可以通过-d参数来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name mydocker2 centos &#x2F;bin&#x2F;bash</span><br><span class="line">38e42accfa2226bb6c7da2e28e12dc95f6b6d6717326442131887a24bb321cdd</span><br></pre></td></tr></table></figure><p>容器启动后就会在后台运行，然后返回一个容器ID到控制台，而且上面这个容器也终止了，带着问题继续前进。</p><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><p>在前面的输出Hello World的操作中我们看到了，当Docker容器中指定的应用程序运行完毕，容器也就自动终止了。同时我们可以使用exit命令退出运行/bin/bash的终端，同时我们也可以使用Ctrl+d来实现同样的效果。</p><p>使用docker stop来停止一个容器，默认是先给容器发送SIGTERM信号，然后10秒后发生SIGKILL信号终止容器，可以使用-t或者—time来设置等待的时间，单位是秒</p><p>docker stop 容器名称、容器ID</p><p>对于终止的容器，可以使用docker start来启动，或者使用docker restart来重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bc419cd0b8fa &#x2F;]# exit</span><br><span class="line">Exit</span><br></pre></td></tr></table></figure><p>可以使用docker ps –a来查看容器的状态，发现已经是停止模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker ps -a</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">38e42accfa22 centos &quot;&#x2F;bin&#x2F;bash&quot; 17 seconds ago Exited (0) 16 seconds ago</span><br><span class="line">mydocker2</span><br><span class="line">a5ef57e8783f centos &quot;&#x2F;bin&#x2F;bash&quot; 3 minutes ago Exited (0) About a minute ago</span><br><span class="line">mydocker</span><br><span class="line">d132d6e645ad centos &quot;&#x2F;bin&#x2F;echo &#39;Hello wo…&quot; 3 minutes ago Exited (0) 3 minutes</span><br><span class="line">ago serene_dijkstra</span><br></pre></td></tr></table></figure><p><strong>启动已终止容器</strong></p><p>可以使用docker start来开启已经终止的容器，可以通过输入容器的CONTAINER ID，或者NAMES来进行启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker start mydocker</span><br><span class="line">mydocker</span><br></pre></td></tr></table></figure><p>好的，我们又一次启动了运行/bin/bash的容器，那么问题来了，我们怎么进去呢。</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p><strong>Docker attach</strong></p><p>Docker提供了docker attach的命令，用来让我们进入已经启动的容器（如果容器已经终止，你需要使用docker start将它启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker attach mydocker</span><br><span class="line">[root@a5ef57e8783f &#x2F;]#</span><br></pre></td></tr></table></figure><p>你可以继续执行一些命令，没错，很多命令都没有。</p><p>注意，在我们使用 attach 进入容器的时候，如果同时有多个窗口 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。这可怎么办，如果我们是团队作战，可能多个同事需要同时进入容器操作呢?还有一个最关键的问题。你输入exit以后呢？之前运行的容器退出了。</p><p><strong>nsenter进入容器</strong></p><p>nsenter命令被包含在util-linux软件包里面，使用nsenter可以访问另一个进程的名字空间,大多数Linux发行版默认包含了该软件，CentOS默认是有的。如果你的系统里面没有可以使用以下命令进行安装：</p><blockquote><p><strong>Yum安装：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# yum install -y util-linux</span><br></pre></td></tr></table></figure><p>为了连接到容器，你还需要找到容器的第一个进程的 PID，可以通过下面的命令获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker inspect --format &quot;&#123;&#123; .State.Pid &#125;&#125;&quot; &lt;container ID or NAMES&gt;</span><br></pre></td></tr></table></figure><p>通过这个 PID，就可以连接到这个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nsenter --target $PID --mount --uts --ipc --net –pid</span><br></pre></td></tr></table></figure><p>如果你刚才停止了容器，请启动。</p><p>连接方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# PID&#x3D;$(docker inspect --format &quot;&#123;&#123; .State.Pid &#125;&#125;&quot;</span><br><span class="line">mydocker)</span><br><span class="line">[root@linux-node1 ~]# echo $PID</span><br><span class="line">8029</span><br></pre></td></tr></table></figure><p>注意如果你的PID变量为0，说明mydocker容器没有启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# nsenter --target $PID --mount --uts --ipc --net --pid</span><br><span class="line">[root@a5ef57e8783f &#x2F;]# ps -ef</span><br><span class="line"></span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line"></span><br><span class="line">root 1 0 0 21:11 pts&#x2F;0 00:00:00 &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">root 14 0 0 21:12 pts&#x2F;0 00:00:00 -bash</span><br><span class="line"></span><br><span class="line">root 27 14 0 21:12 pts&#x2F;0 00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p><strong>编写一个脚本用户进入容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim docker_in.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># Use nsenter to access docker</span><br><span class="line">docker_in()&#123;</span><br><span class="line">NAME_ID&#x3D;$1</span><br><span class="line">PID&#x3D;$(docker inspect --format &quot;&#123;&#123; .State.Pid &#125;&#125;&quot; $NAME_ID)</span><br><span class="line">nsenter --target $PID --mount --uts --ipc --net --pid</span><br><span class="line">&#125;</span><br><span class="line">docker_in $1</span><br><span class="line">[root@linux-node1 ~]# chmod +x docker_in.sh</span><br></pre></td></tr></table></figure><p>这么后面的内容，我们就直接使用docker_in.sh这个脚本来进入Docker容器，只要传给它名称或者容器ID即可，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# .&#x2F;docker_in.sh mydocker</span><br></pre></td></tr></table></figure><h3 id="不进入容器执行命令"><a href="#不进入容器执行命令" class="headerlink" title="不进入容器执行命令"></a>不进入容器执行命令</h3><p>或许你的本意不是想进去容器，而是想让容器执行一个命令，docker提供了exec，使用exec可以在容器内运行命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker exec mydocker whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>使用exec进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker exec -it mydocker &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>注意，现在你进入容器和其它方法都是不一样的，其实是你执行了一个/bin/bash的命令，所以你现在拥有了一个shell，你现在所在的shell应该是下图中PID为33的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@1b0cae722fa0 &#x2F;]# ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 15:37 ? 00:00:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 33 0 0 15:41 ? 00:00:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 46 33 0 15:41 ? 00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>或许你也发现使用docker exec、nsenter进入容器后，执行exit退出容器，容器并不会关闭。但是使用docker attach进入容器，输入exit退出容器后，容器也会自动终止。你可以想想为什么。因为除了attach，nsenter和exec实际中都是开了一个新的shell在执行。而attach是使用容器本身启动的/bin/bash，这个shell环境退出了。那么容器就自动退出了。所以Docker的魔咒来了：docker容器只能而且必须在前台运行一个进程，如果进程退出，容器就关闭。当然如果你想在Docker容器中启动多进程也是有办法的，我们后面会讲到。</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>可以使用 docker rm 来删除一个处于终止状态的容器。 例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]# docker rm mydocker</span><br></pre></td></tr></table></figure><p>如果要删除一个运行中的容器，可以添加-f参数。Docker会发送 SIGKILL信号给容器。</p><h3 id="学习中的小技巧"><a href="#学习中的小技巧" class="headerlink" title="学习中的小技巧"></a>学习中的小技巧</h3><p>如果你在学习和测试的过程中，经常因为启动非常多的容易想删除也很难，下面列举了几个小技巧，可以快速的帮我们进行容器的清理。</p><h4 id="容器停止后就自动删除："><a href="#容器停止后就自动删除：" class="headerlink" title="容器停止后就自动删除："></a>容器停止后就自动删除：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm centos &#x2F;bin&#x2F;echo &quot;One&quot;</span><br></pre></td></tr></table></figure><h4 id="杀死所有正在运行的容器："><a href="#杀死所有正在运行的容器：" class="headerlink" title="杀死所有正在运行的容器："></a>杀死所有正在运行的容器：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h4 id="删除所有已经停止的容器："><a href="#删除所有已经停止的容器：" class="headerlink" title="删除所有已经停止的容器："></a>删除所有已经停止的容器：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h4 id="删除所有未打-dangling-标签的镜像"><a href="#删除所有未打-dangling-标签的镜像" class="headerlink" title="删除所有未打 dangling 标签的镜像"></a>删除所有未打 dangling 标签的镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q -f dangling&#x3D;true)</span><br></pre></td></tr></table></figure><h4 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p>如果你觉得名称很长，不容易记，还可以为这些命令创建别名。</p><h4 id="杀死所有正在运行的容器"><a href="#杀死所有正在运行的容器" class="headerlink" title="杀死所有正在运行的容器."></a>杀死所有正在运行的容器.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias dockerkill&#x3D;&#39;docker kill $(docker ps -a -q)&#39;</span><br></pre></td></tr></table></figure><h4 id="删除所有已经停止的容器"><a href="#删除所有已经停止的容器" class="headerlink" title="删除所有已经停止的容器."></a>删除所有已经停止的容器.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias dockerclean&#x3D;&#39;docker rm $(docker ps -a -q)&#39;</span><br></pre></td></tr></table></figure><h4 id="删除所有未打标签的镜像"><a href="#删除所有未打标签的镜像" class="headerlink" title="删除所有未打标签的镜像."></a>删除所有未打标签的镜像.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias dockercleani&#x3D;&#39;docker rmi $(docker images -q -f dangling&#x3D;true)&#39;</span><br></pre></td></tr></table></figure><h4 id="删除所有已经停止的容器和未打标签的镜像"><a href="#删除所有已经停止的容器和未打标签的镜像" class="headerlink" title="删除所有已经停止的容器和未打标签的镜像."></a>删除所有已经停止的容器和未打标签的镜像.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias dockerclean&#x3D;&#39;dockercleanc || true &amp;&amp; dockercleani&#39;</span><br></pre></td></tr></table></figure><blockquote><p>注意：生产环境一定要慎用！！！</p></blockquote><h2 id="Docker网络访问"><a href="#Docker网络访问" class="headerlink" title="Docker网络访问"></a>Docker网络访问</h2><p>现在我们已经可以熟练的使用docker命令操作镜像和容器，并学会了如何进入到容器中去，那么实际的工作中，我们通常是在Docker中部署服务，我们需要在外部通过IP和端口进行访问的，那么如何访问到Docker的内部服务呢？</p><p>在后面我们会有专门的章节来讲解Docker的网络配置，这里我们先学习一个比较简单的通过网络访问容器的方法，就是端口映射。</p><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。</p><h3 id="随机映射"><a href="#随机映射" class="headerlink" title="随机映射"></a>随机映射</h3><p>当使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。</p><p>下面我们以一个nginx的容器为例子来测试一下-P的功能，大家可以使用search搜索下nginx镜像，我们使用官方的nginx镜像来启动一个容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker search nginx</span><br></pre></td></tr></table></figure><p>这次我们不执行docker pull。直接来启动容器，你会发现docker会先查找你本地是否有该镜像，如果没有它会自动下载后，然后启动容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -P nginx</span><br><span class="line">Unable to find image &#39;nginx:latest&#39; locally</span><br><span class="line">latest: Pulling from library&#x2F;nginx</span><br><span class="line">6ae821421a7d: Pull complete</span><br><span class="line">da4474e5966c: Pull complete</span><br><span class="line">eb2aec2b9c9f: Pull complete</span><br><span class="line">Digest: sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">ecf14adb9dec09555ae31673753093e03941c41d917669dd1f254b51fdec7b51</span><br></pre></td></tr></table></figure><p>我们又学习了一个新的参数-d可以让容器直接在后台运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">6819734a680c nginx &quot;nginx -g &#39;daemon off&quot; About an hour ago Up About an hour</span><br><span class="line">0.0.0.0:32769-&gt;80&#x2F;tcp, 0.0.0.0:32768-&gt;443&#x2F;tcp hungry_mayer</span><br></pre></td></tr></table></figure><p>可以看到，随机映射了一个32769端口到容器的80端口。下面就可以直接访问了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# curl --head http:&#x2F;&#x2F;192.168.56.11:32769&#x2F;</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.11.3</span><br><span class="line">Date: Fri, 02 Sep 2016 17:44:14 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 26 Jul 2016 14:54:48 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;579779b8-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>同样的，可以通过 docker logs 命令来查看应用的日志信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker logs hungry_mayer</span><br><span class="line"></span><br><span class="line">192.168.56.11 - - [02&#x2F;Sep&#x2F;2016:17:44:01 +0000] &quot;HEAD &#x2F; HTTP&#x2F;1.1&quot; 200 0 &quot;-&quot;</span><br><span class="line">&quot;curl&#x2F;7.29.0&quot; &quot;-&quot;</span><br><span class="line"></span><br><span class="line">192.168.56.11 - - [02&#x2F;Sep&#x2F;2016:17:44:06 +0000] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 612 &quot;-&quot;</span><br><span class="line">&quot;curl&#x2F;7.29.0&quot; &quot;-&quot;</span><br><span class="line"></span><br><span class="line">192.168.56.11 - - [02&#x2F;Sep&#x2F;2016:17:44:14 +0000] &quot;HEAD &#x2F; HTTP&#x2F;1.1&quot; 200 0 &quot;-&quot;</span><br><span class="line">&quot;curl&#x2F;7.29.0&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><p>是不是老使用随机的名字和ID操作容器很不方面，那么下面我们再创建容器的时候，一定要给它定义一个可读的名字。</p><h3 id="指定端口映射"><a href="#指定端口映射" class="headerlink" title="指定端口映射"></a>指定端口映射</h3><p>-p（小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有以下三种：</p><ul><li>hostPort:containerPort。</li><li>ip:hostPort:containerPort</li><li>ip::containerPort</li></ul><p><strong>映射所有IP地址的指定端口</strong></p><p>使用 hostPort:containerPort，将本地的 80 端口映射到Nginx容器的 80 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 80:80 --name nginx-demo1 nginx</span><br></pre></td></tr></table></figure><p>此时默认会绑定本地所有接口上的所有地址。注意镜像名称需要放到最后。</p><p><strong>映射到指定地址的指定端口</strong></p><p>如果你宿主机拥有多个IP地址，可以使用 ip:hostPort:containerPort 格式指定映射使用一个特定地址，比如将Nginx的80端口绑定到本地IP地址的81端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 192.168.56.11:81:80 --name nginx-demo2</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p><strong>映射到指定地址的任意端口</strong></p><p>使用 ip::containerPort 绑定Nginx80端口到本地192.168.56.11的任意端口，本地主机会自动分配一个端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 192.168.56.11::80 --name nginx-demo3 nginx</span><br></pre></td></tr></table></figure><p><strong>使用 udp 标记来指定 udp 端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 192.168.56.11:53:53&#x2F;udp –name dns-udp</span><br></pre></td></tr></table></figure><p><strong>绑定多个端口</strong></p><p>如果你想绑定Docker容器里面的多个端口，可以使用多次使用-p 标记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 80:80 -p 443:443 nginx</span><br></pre></td></tr></table></figure><p><strong>查看映射端口配置</strong></p><p>使用 docker port 来查看当前映射的端口配置，也可以查看到绑定的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker port nginx-demo1</span><br><span class="line">80&#x2F;tcp -&gt; 0.0.0.0:80 </span><br></pre></td></tr></table></figure><h2 id="Docker数据管理"><a href="#Docker数据管理" class="headerlink" title="Docker数据管理"></a>Docker数据管理</h2><p>为了能够存储持久化数据以及共享容器间的数据，Docker提出了Volume的概念。让我们通过类似mount的方式将宿主机的文件或者目录挂载到容器中。</p><p>在容器中管理数据主要有两种方式：</p><ul><li>数据卷（Data volumes）</li><li>数据卷容器（Data volume containers）</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p><strong>创建一个数据卷</strong></p><p>在使用docker run命令的时候，使用-v选项创建一个数据卷并挂载到容器里。</p><p>下面创建一个测试容器nginx，并加载一个数据卷到容器的/data目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name nginx-volume-test1 -v &#x2F;data nginx</span><br></pre></td></tr></table></figure><p>容器启动后，登录到容器会发现/data目录是空的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# .&#x2F;docker_in.sh nginx-volume-test1</span><br><span class="line">root@00741a2a44ad:&#x2F;# ls -l &#x2F;data</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure><p>上面的命令会挂载一个data目录到容器中，并绕过联合文件系统，我们可以在主机上直接操作该目录。任何在该镜像/data 路径的文件会将被复制到Volume。那么在我们宿主机上，这个目录到底在哪里呢。</p><p>我们可以使用 docker inspect 命令找到Volume在主机上的存储位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker inspect -f &#123;&#123;.Mounts&#125;&#125; nginx-volume-test1</span><br><span class="line"></span><br><span class="line">[&#123;861cbee5b650461490633fc60bd94a0df0f8b01e4a4dcc4adff4825dff509159</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;861cbee5b650461490633fc60bd94a0df0f8b01e4a4dcc4adff4825dff509159&#x2F;_data</span><br><span class="line">&#x2F;data local true &#125;]</span><br></pre></td></tr></table></figure><p>你会发现，容器中的/data目录实际上挂载到了/var/lib/docker/volumes/容器ID/_data的目录下。</p><p>我们现在在宿主机该目录下创建一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 _data]# touch mount-test</span><br></pre></td></tr></table></figure><p>我们再次在容器中查看，发现已经有了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# .&#x2F;docker_in.sh nginx-volume-test1</span><br><span class="line">root@00741a2a44ad:&#x2F;# ls -l &#x2F;data</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Sep 2 18:58 mount-test</span><br></pre></td></tr></table></figure><p><strong>指定一个宿主机目录作为数据卷</strong></p><p>有的时候，我们需要将宿主机的某个目录挂载到容器中来进行访问，可以通过-v 源路径：目标目录的方式进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir -p &#x2F;data&#x2F;docker-volume-nginx</span><br><span class="line">[root@linux-node1 ~]# docker run -d --name nginx-volume-test2 \</span><br><span class="line">-v &#x2F;data&#x2F;docker-volume-nginx:&#x2F;data nginx</span><br></pre></td></tr></table></figure><p>你会发现，目前容器中的/data目录和宿主机中的/data/ docker-volume-nginx目录是相同的。</p><p><strong>文件挂载</strong></p><p>数据卷也可以挂载一个宿主机的文件作到容器中作为数据卷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name nginx-volume-test3 \</span><br><span class="line">-v &#x2F;$HOME&#x2F;.bash_history:&#x2F;root&#x2F;.bash_history nginx</span><br></pre></td></tr></table></figure><p>上面案例将宿主机的.bash_history挂载到了容器中，这样就可以记录容器中的命令历史记录。</p><p><strong>只读挂载</strong></p><p>Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name nginx-volume-test \</span><br><span class="line">-v &#x2F;data&#x2F;docker-volume-nginx:&#x2F;data:ro nginx</span><br></pre></td></tr></table></figure><h3 id="数据卷生产实践"><a href="#数据卷生产实践" class="headerlink" title="数据卷生产实践"></a>数据卷生产实践</h3><p>那么这种将本地的目录挂载到容器中的方法，在生产中有哪些应用场景呢？</p><p><strong>在开发环境中</strong></p><p>在基于Docker的开发环境中，例如我们将本地的/home/code目录挂载到容器中的/data/webroot，然后容器的应用的webroot同样设置为/data/webroot，那么容器启动后，我们就可以自由的本地进行代码的编写和调试，对于解释性的语言，就比较方便了。如果你的Docker运行在虚拟机中，可以先将本地例如D:code目录通过虚拟机软件共享到虚拟机里，目前VirtualBox和Vmware workstation都支持目录映射。在Vmware中需要在虚拟机中安装Vmware Tools。</p><p><img src="http://k8s.unixhot.com/docker/media/03822b520894cafdde1dbbc64b8b99e6.png" alt="img"></p><p><strong>在生产环境中</strong></p><p>如果我们的容器里面运行的程序需要写一些持久化的数据到硬盘，或者共享宿主机的一些文件或者目录，显然这种数据卷的挂载非常的方便。</p><p>不过数据卷最大的缺陷应该是不灵活了，因为Docker的理念是Build、Ship、Run。因为有这个挂载目录的依赖，那么这个Docker镜像在新的宿主机上运行就需要考虑挂载的目录是否存在等问题。</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>Docker还支持让一个容器访问另一个容器的Volume，我们可以使用 -volumes-from 参数挂载其它容器的卷。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name nginx-volume-test4 \</span><br><span class="line">--volumes-from nginx-volume-test1 nginx</span><br><span class="line">7d650d332e3d9bf4086be35ae5a04b618f9d8e1df03fa2fef5f5766318a4ca12</span><br><span class="line">[root@linux-node1 ~]# .&#x2F;docker_in.sh nginx-volume-test4</span><br><span class="line">root@7d650d332e3d:~# ls &#x2F;data</span><br><span class="line">mount-test</span><br></pre></td></tr></table></figure><p>注意：不管数据卷容器nginx-volume-test1是否运行，nginx-volume-test4都可以访问到nginx-volume-test1里面挂载的数据卷。所以说数据卷容器，其实就是一个普通的容器，只不过是专门用来提供数据卷供其它容器挂载使用的。</p><h3 id="数据卷容器生产实践"><a href="#数据卷容器生产实践" class="headerlink" title="数据卷容器生产实践"></a>数据卷容器生产实践</h3><p>在生产中使用数据卷容器的方案有很多，一个非常典型的就是在进行日志收集的时候。我们可以在一台服务器上启动一个logstash或者filebeat的容器log-volume，然后其它所有应用容器启动都使用–volumes-from log-volume，将日志写入对应路径，然后使用统一收集，这样就避免在所有需要进行日志收集的容器中去部署logstash。相对于直接挂载本地目录也更加的方便。</p><h1 id="Docker镜像生产构建"><a href="#Docker镜像生产构建" class="headerlink" title="Docker镜像生产构建"></a>Docker镜像生产构建</h1><p>我们已经了解了Docker的基本概念和管理，下面就开始着手创建自己的第一个Docker镜像，这里我们选用最早pull下来的centos作为基础镜像，然后在上面部署Nginx来做案例讲解。</p><h2 id="手动构建镜像"><a href="#手动构建镜像" class="headerlink" title="手动构建镜像"></a>手动构建镜像</h2><p>手动构建镜像，简单的说就是我们基于一个基础镜像启动一个容器，然后对这个容器进行更改，更改完毕后，进行提交。</p><h3 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h3><p>运行一个CentOS容器，命名为mynginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker pull centos</span><br><span class="line">[root@linux-node1 ~]# docker run --name mynginx -it centos</span><br></pre></td></tr></table></figure><p>在容器里面安装Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@2e110e00eef4 &#x2F;]# rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">[root@2e110e00eef4 &#x2F;]# yum install -y nginx</span><br></pre></td></tr></table></figure><p>想要Docker容器保持活跃的状态，需要其中运行的进程不能中断，默认情况下，Nginx会以守护进程的方式启动，这会导致容器只是短暂运行，在守护进程被fork启动后，发起守护进程的原始进程就会退出，这时容器就会停止运行了。所以我们需要将Nginx放在前端运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@2e110e00eef4 &#x2F;]# vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">#在配置文件最上面增加下面配置</span><br><span class="line">daemon off;</span><br><span class="line">[root@2e110e00eef4 &#x2F;]# exit</span><br></pre></td></tr></table></figure><h3 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h3><p><strong>获取容器ID</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker ps -a | grep mynginx</span><br><span class="line">2e110e00eef4 centos &quot;&#x2F;bin&#x2F;bash&quot; 8 minutes ago Exited (0) 2 minutes ago mynginx</span><br></pre></td></tr></table></figure><p><strong>提交修改后的容器为镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker commit -m &quot;My Nginx&quot; 2e110e00eef4 test&#x2F;mynginx:v1</span><br><span class="line">sha256:cfd25da2c9c5dd2bcce9e5d2ef4e316b46b5f03617176b97b60a34f2958a6d70</span><br></pre></td></tr></table></figure><ul><li>-m：指定提交的说明信息，类似SVN和Git。</li><li>之后是用来创建镜像的容器的 ID；</li><li>最后指定目标镜像的仓库名和标签信息。</li></ul><p><strong>查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker images</span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br><span class="line">test&#x2F;mynginx v1 cfd25da2c9c5 49 seconds ago 373MB</span><br><span class="line">nginx latest f09fe80eb0e7 2 weeks ago 109MB</span><br><span class="line">centos latest 1e1148e4cc2c 2 months ago 202MB</span><br></pre></td></tr></table></figure><p><strong>从我们创建的镜像运行一个容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 91:80 test&#x2F;mynginx:v1 nginx</span><br></pre></td></tr></table></figure><p>现在你的手动构建的第一个镜像就完成了。你可以用同样的方式安装任意你需要的软件到镜像里面，然后使用镜像来启动一个容器，只要记住容器启动必须要有一个不会退出的进程在执行即可。</p><h2 id="Dockerfile构建"><a href="#Dockerfile构建" class="headerlink" title="Dockerfile构建"></a>Dockerfile构建</h2><p>Dockerfile是为快速构建docker image而设计的，当你使用docker build命令的时候，docker 会读取当前目录下的命名为Dockerfile(首字母大写)的纯文本文件并执行里面的指令构建出一个docker image。这比SaltStack的配置管理要简单的多，不过还是要掌握一些简单的指令。</p><p>Dockerfile 由一行行命令语句组成，并且支持以#开头的注释行。指令是不区分大小写的，但是通常我们都大写。</p><p>下面我们通过构建一个Nginx的镜像来学习Dockerfile的编写。</p><h3 id="Nginx-Dockerfile实战"><a href="#Nginx-Dockerfile实战" class="headerlink" title="Nginx Dockerfile实战"></a>Nginx Dockerfile实战</h3><p><strong>注意：第一个指令必须是FROM。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir -p &#x2F;opt&#x2F;dockerfile&#x2F;mynginx</span><br><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;mynginx&#x2F;</span><br><span class="line">[root@test-node1 nginx]# vim Dockerfile</span><br><span class="line"># This docker file uses the centos image</span><br><span class="line"># VERSION 1</span><br><span class="line"># Author: Jason Zhao</span><br><span class="line"># Base image</span><br><span class="line">FROM centos</span><br><span class="line"># Maintainer</span><br><span class="line">MAINTAINER shundong.zhao zhaoshundong@gmail.com</span><br><span class="line">#Commands to update the image</span><br><span class="line">RUN rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">RUN yum install -y nginx --enablerepo&#x3D;epel</span><br><span class="line">ADD index.html &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">RUN echo &quot;daemon off;&quot; &gt;&gt; &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure><p>为了大家更容易学习，我这里总结一个命令的介绍：</p><p>一般的，我们将Dockerfile 分为四部分：</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="常用指令的介绍"><a href="#常用指令的介绍" class="headerlink" title="常用指令的介绍"></a>常用指令的介绍</h3><p><img src="http://k8s.unixhot.com/docker/media/74da151d98647093a4d1ade4f222fbe7.png" alt="img"></p><p><strong>构建Dockerfile</strong></p><p>注意：ADD index.html就是放一个文件进去，这个文件需要大家自己准备一下。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 mynginx]# echo &quot;nginx in docker test&quot; &gt; index.html</span><br></pre></td></tr></table></figure><p>使用dokcer build命令构建镜像，最后的.表示当前路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 mynginx]# docker build -t mynginx:v2 .</span><br></pre></td></tr></table></figure><p>构建完毕之后，我们就可以Run起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d -p 92:80 mynginx:v2 nginx</span><br></pre></td></tr></table></figure><p>测试访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 mynginx]# curl http:&#x2F;&#x2F;192.168.56.11:92</span><br><span class="line">nginx in docker test</span><br></pre></td></tr></table></figure><p>现在你应该发现编写Dockerfile有多么的简单了吧，不过我们还是要系统的再来学习一遍。</p><h3 id="Dockerfile命令详解"><a href="#Dockerfile命令详解" class="headerlink" title="Dockerfile命令详解"></a>Dockerfile命令详解</h3><p>下面我们来分别介绍下上面使用到的命令：</p><p><strong>FROM</strong></p><p>格式：FROM <img src="" alt="img">或FROM <img src="" alt="img">:。 解释：FROM必须是Dockerfile里的第一条指令（注视除外），后面跟有效的镜像名（如果该镜像你的本地仓库没有则会从远程仓库Pull取）。然后后面的其它指令FROM的镜像中执行。</p><p><strong>MAINTAINER</strong></p><p>格式：MAINTAINER 解释：指定维护者的信息。</p><p><strong>RUN</strong></p><p>格式：RUN 或 RUN [“executable”, “param1”, “param2”]。 解释：运行命令，命令较长使可以使用来换行。推荐使用上面数组的格式</p><p><strong>CMD</strong></p><p>格式：</p><p>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式； CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用； CMD [“param1”,”param2”] 提供给ENTRYPOINT的默认参数；</p><p>解释：</p><p>CMD指定容器启动是执行的命令，每个Dockerfile只能有一条CMD命令，如果指定了多条，只有最后一条会被执行。如果你在启动容器的时候也指定的命令，那么会覆盖Dockerfile构建的镜像里面的CMD命令。</p><p><strong>ENTRYPOINT</strong></p><p>格式：</p><p>ENTRYPOINT [“executable”, “param1”, “param2”] ENTRYPOINT command param1 param2（shell中执行）。 解释：和CMD类似都是配置容器启动后执行的命令，并且不可被 docker run提供的参数覆盖。</p><p>每个 Dockerfile 中只能有一个ENTRYPOINT，当指定多个时，只有最后一个起效。ENTRYPOINT没有CMD的可替换特性，也就是你启动容器的时候增加运行的命令不会覆盖ENTRYPOINT指定的命令。</p><p>所以生产实践中我们可以同时使用ENTRYPOINT和CMD，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;rethinkdb&quot;]</span><br><span class="line">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure><p><strong>USER</strong></p><p>格式：USER daemon 解释：指定运行容器时的用户名和UID，后续的RUN指令也会使用这里指定的用户。</p><p><strong>EXPOSE</strong></p><p>格式：EXPOSE […] 解释：设置Docker容器内部暴露的端口号，如果需要外部访问，还需要启动容器时增加-p或者-P参数进行分配。</p><p><strong>ENV</strong></p><p>格式：ENV ENV = … 解释：设置环境变量，可以在RUN之前使用，然后RUN命令时调用，容器启动时这些环境变量都会被指定</p><p><strong>ADD</strong></p><p>格式： ADD … ADD [“”,… “”] 解释：将指定的复制到容器文件系统中的</p><p>所有拷贝到container中的文件和文件夹权限为0755,uid和gid为0<br>如果文件是可识别的压缩格式，则docker会帮忙解压缩</p><p><strong>VOLUME</strong></p><p>格式：VOLUME [“/data”] 解释：可以将本地文件夹或者其他container的文件夹挂载到container中。</p><p><strong>WORKDIR</strong></p><p>格式：WORKDIR /path/to/workdir 解释：切换目录，为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。可以多次切换(相当于cd命令)，也可以使用多个 WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure><p>则最终路径为 /a/b/c。</p><p><strong>ONBUILD</strong></p><p>ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行</p><p><strong>ARG</strong></p><p>格式：ARG [=] 解释：ARG指定了一个变量在docker build的时候使用，可以使用–build-arg =来指定参数的值，不过如果构建的时候不指定就会报错。</p><h2 id="Docker镜像生产规划实践"><a href="#Docker镜像生产规划实践" class="headerlink" title="Docker镜像生产规划实践"></a>Docker镜像生产规划实践</h2><p>现在我们学会了如何使用Dockerfile来构建镜像，没错，真正生产环境我们也是大规模的使用Dockerfile。那么我们应该如何入手呢？</p><p>首先我们需要参考一些别人编写的Dockerfile，学习一些规范和技巧，可以来这里找找答案：<a href="https://github.com/dockerfile%E3%80%82">https://github.com/dockerfile。</a></p><p>可以参考网友编写的Dockerfile的技巧和方法，那么真正的生产环境，肯定要根据自己公司或者团队的技术栈来构建不同的Docker镜像，根据Docker镜像的分层观念，我们可以在这个基础上对我们的镜像进行分层。</p><ul><li>系统层</li><li>运行环境层</li><li>应用服务层</li></ul><p>案例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;opt&#x2F;dockerfile</span><br><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;</span><br><span class="line">[root@linux-node1 dockerfile]# mkdir system runtime app</span><br><span class="line">[root@linux-node1 dockerfile]# tree</span><br><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">├── runtime</span><br><span class="line">└── system</span><br></pre></td></tr></table></figure><h2 id="基础系统镜像"><a href="#基础系统镜像" class="headerlink" title="基础系统镜像"></a>基础系统镜像</h2><h3 id="CentOS系统镜像"><a href="#CentOS系统镜像" class="headerlink" title="CentOS系统镜像"></a>CentOS系统镜像</h3><p>默认的官方CentOS镜像有很多常用的命令并不提供，可以根据企业需求进行定制。需要注意的是使用yum安装完毕后，记得执行yum clean all。</p><p>因为yum会把下载的软件包和header存储在cache中，而不会自动删除。如果我们觉得它们占用了磁盘空间，可以使用yum clean all指令进行清除，可以减少镜像的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;system&#x2F;</span><br><span class="line">[root@linux-node1 system]# mkdir centos</span><br></pre></td></tr></table></figure><p><strong>1.编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# vim centos&#x2F;Dockerfile</span><br><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">**FROM** centos</span><br><span class="line">#Who</span><br><span class="line">**MAINTAINER** Jason.Zhao xxx@gmail.com</span><br><span class="line">#Base pkg</span><br><span class="line">**RUN** rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">**RUN** yum install -y wget mysql-devel supervisor git redis tree net-tools sudo</span><br><span class="line">psmisc &amp;&amp; yum clean all</span><br></pre></td></tr></table></figure><p><strong>2.构建镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker build -t unixhot&#x2F;centos .&#x2F;centos&#x2F;</span><br></pre></td></tr></table></figure><p><strong>3.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;centos latest 4edcb790dacf 24 seconds ago 303 MB</span><br></pre></td></tr></table></figure><p><strong>4.使用镜像创建容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker run --name mycentos -it unixhot&#x2F;centos</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br><span class="line">[root@b137b1cdd3ac &#x2F;]# ps aux</span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 1 0.3 0.0 11776 1872 ? Ss 03:56 0:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 15 0.0 0.0 47424 1668 ? R+ 03:56 0:00 ps aux</span><br></pre></td></tr></table></figure><h3 id="CentOS系统镜像包含SSH"><a href="#CentOS系统镜像包含SSH" class="headerlink" title="CentOS系统镜像包含SSH"></a>CentOS系统镜像包含SSH</h3><p>在很多时候如果你需要在CentOS里面启动sshd服务，那么就需要安装openssh-server并且重新生成SSH的主机密钥。同时如果，你需要给镜像设置一个密码，可以使用chpasswd非交互的方式来进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;system&#x2F;</span><br><span class="line">[root@linux-node1 system]# mkdir centos-ssh</span><br></pre></td></tr></table></figure><p><strong>1.编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# vim centos-ssh&#x2F;Dockerfile</span><br><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">FROM centos</span><br><span class="line">#Who</span><br><span class="line">MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line">#EPEL</span><br><span class="line">RUN rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">#Base pkg</span><br><span class="line">RUN yum install -y openssh-clients openssl-devel openssh-server wget mysql-devel</span><br><span class="line">supervisor git redis tree net-tools sudo psmisc &amp;&amp; yum clean all</span><br><span class="line"># For SSHD</span><br><span class="line">RUN ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class="line">RUN ssh-keygen -t ecdsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class="line">RUN ssh-keygen -A -t dsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa_key</span><br><span class="line"># Set root password</span><br><span class="line">RUN echo &quot;root:unixhot.com&quot; | chpasswd</span><br></pre></td></tr></table></figure><p><strong>2.构建镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker build -t unixhot&#x2F;centos-ssh:v1 .&#x2F;centos-ssh&#x2F;</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM centos</span><br><span class="line">---&gt; 980e0e4c79ec</span><br><span class="line">Step 2 : MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line">---&gt; **Using cache**</span><br><span class="line">---&gt; d08da8648d91</span><br><span class="line">Step 3 : RUN rpm -ivh</span><br><span class="line">http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">---&gt; **Using cache**</span><br><span class="line">---&gt; ad9a05bcfb78</span><br><span class="line">…（省略后面输出）</span><br></pre></td></tr></table></figure><blockquote><p>这里有一个小技巧，为了加快构建的速度，注意到上面前三步的输出Using cache，因为Docker镜像的分层原理，已经构建过的layer不会重复构建。</p></blockquote><p><strong>3.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;centos-ssh v1 ff1ab7d7e7f4 19 seconds ago 304 MB</span><br><span class="line">unixhot&#x2F;centos latest 4edcb790dacf 2 hours ago 303 MB</span><br></pre></td></tr></table></figure><p><strong>4.使用镜像创建容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker run -d --name centos-ssh-demo -p 8022:22</span><br><span class="line">unixhot&#x2F;centos-ssh:v1 &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br><span class="line">5f5bbe98a17c620f91a7d3e68a605a4bcbd48621f32aaa095245e59a8691e229</span><br><span class="line"></span><br><span class="line">[root@linux-node1 system]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">5f5bbe98a17c unixhot&#x2F;centos-ssh:v1 &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd -D&quot; 5 seconds ago Up 2</span><br><span class="line">seconds 0.0.0.0:8022-&gt;22&#x2F;tcp centos-ssh-demo</span><br></pre></td></tr></table></figure><p><strong>5.使用ssh连接容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ssh -p 8022 root@192.168.56.11</span><br><span class="line">root@192.168.56.11&#39;s password:</span><br><span class="line">[root@5f5bbe98a17c ~]# ps aux</span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 1 0.0 0.0 82560 3600 ? Ss 05:46 0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br><span class="line">root 7 0.0 0.0 11636 1116 ? Ss 05:47 0:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 13 0.0 0.0 11636 1116 ? Ss 05:48 0:00 &#x2F;bin&#x2F;bash</span><br><span class="line">root 63 0.7 0.0 139272 5424 ? Ss 05:51 0:00 sshd: root@pts&#x2F;0</span><br><span class="line">root 65 0.5 0.0 13376 1988 pts&#x2F;0 Ss 05:51 0:00 -bash</span><br><span class="line">root 78 0.0 0.0 49024 1808 pts&#x2F;0 R+ 05:51 0:00 ps aux</span><br></pre></td></tr></table></figure><p>Good Job，你现在可以通过ssh连接到自己创建的Docker容器上了。但是有没有发现一个问题，Docker只允许在前台运行一个进程，那已经运行了sshd。那么如何运行别的进程呢。显然我们做一个能ssh的镜像，目的就是为了在上面运行各种服务。怎么办呢？有很多解决方案。例如你编写一个脚本start.sh。可以在里面写多个服务的启动命令，只要start.sh不执行完毕，即可。当然真正生产推荐的是使用Supervisor。</p><h3 id="使用Supervisor管理进程"><a href="#使用Supervisor管理进程" class="headerlink" title="使用Supervisor管理进程"></a>使用Supervisor管理进程</h3><p>Supervisor (<a href="http://supervisord.org/">http://supervisord.org</a>) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程。</p><p>Supervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>现在让我们重新创建一个新的不启动ssh的容器，来实验下supervisor的安装和相关配置。以便于，我们编写Dockerfile。</p><p><strong>1.启动测试supervisor的docker容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 system]# docker run --rm -it unixhot&#x2F;centos-ssh:v1 &#x2F;bin&#x2F;bash</span><br><span class="line">[root@98aced104917 &#x2F;]# ls -l &#x2F;etc&#x2F;supervisord*</span><br><span class="line">-rw-r--r-- 1 root root 7953 Aug 20 2015 &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line">&#x2F;etc&#x2F;supervisord.d:</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure><p>注意，在上一小节的镜像构建中，我们已经使用yum安装了supervisord。supervisor的配置文件为/etc/supervisord.conf。</p><p><strong>2.Supervisor配置</strong></p><p>Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 &#x2F;]# vi &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"></span><br><span class="line">#下面并没有列出完整的supervisord.conf的配置，默认注释掉的内容，请自行查看。</span><br><span class="line"></span><br><span class="line">**[unix_http_server]**</span><br><span class="line"></span><br><span class="line"># file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor&#x2F;supervisor.sock #UNIX socket 文件，supervisorctl</span><br><span class="line">会使用</span><br><span class="line"></span><br><span class="line">**[supervisord]**</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log #主要日志文件，默认位置是</span><br><span class="line">$CWD&#x2F;supervisord.log</span><br><span class="line">logfile_maxbytes&#x3D;50MB #日志文件大小，超出会 rotate，默认 50MB</span><br><span class="line">logfile_backups&#x3D;10 #日志文件保留备份数量默认 10</span><br><span class="line">loglevel&#x3D;info #日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid #pid文件位置</span><br><span class="line">**nodaemon&#x3D;true #注意需要修改的为此处，将supervisor放在前台运行。**</span><br><span class="line">minfds&#x3D;1024 #可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs&#x3D;200 #可以打开的进程数的最小值，默认 200</span><br><span class="line">**[supervisorctl]**</span><br><span class="line"></span><br><span class="line">#通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line"></span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL for a</span><br><span class="line">unix socket</span><br><span class="line"></span><br><span class="line">**[include]**</span><br><span class="line"></span><br><span class="line">#包含supervisord.d目录下*.ini文件，也就是说，我们可以将需要启动应用程序的配置放在这个目录下，这就是运维标准化。</span><br><span class="line"></span><br><span class="line">files &#x3D; supervisord.d&#x2F;*.ini</span><br></pre></td></tr></table></figure><p><strong>3. program 配置</strong></p><p>supervisor主配置文件的变更只需要修改nodaemon=true，可以看到关于程序的配置在主配置文件里面都是注释掉的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">;[program:theprogramname]</span><br><span class="line">;command&#x3D;&#x2F;bin&#x2F;cat ; the program (relative uses PATH, can take args)</span><br><span class="line">;process_name&#x3D;%(program_name)s ; process_name expr (default %(program_name)s)</span><br><span class="line">;numprocs&#x3D;1 ; number of processes copies to start (def 1)</span><br><span class="line">;directory&#x3D;&#x2F;tmp ; directory to cwd to before exec (def no cwd)</span><br><span class="line">;umask&#x3D;022 ; umask for process (default None)</span><br><span class="line">;priority&#x3D;999 ; the relative start priority (default 999)</span><br><span class="line">;autostart&#x3D;true ; start at supervisord start (default: true)</span><br><span class="line">;autorestart&#x3D;true ; retstart at unexpected quit (default: true)</span><br><span class="line"></span><br><span class="line">（省略部分输出）</span><br></pre></td></tr></table></figure><p>我们现在要做的事情，就是编写一个sshd的程序管理配置，放置到/etc/supervisord.d目录下，注意文件后缀是.ini，你可以复制上面注释掉的内容进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 &#x2F;]# vi &#x2F;etc&#x2F;supervisord.d&#x2F;sshd.ini</span><br><span class="line">[program:sshd]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br><span class="line">process_name&#x3D;%(program_name)s</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">stdout_logfile_maxbytes&#x3D;100MB</span><br><span class="line">stdout_logfile_backups&#x3D;10</span><br></pre></td></tr></table></figure><p><strong>4.启动supervisord</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 ~]# &#x2F;usr&#x2F;bin&#x2F;supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line">[root@98aced104917 ~]# netstat -ntlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address Foreign Address State PID&#x2F;Program name</span><br><span class="line">tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 31&#x2F;sshd</span><br><span class="line">tcp6 0 0 :::22 :::* LISTEN 31&#x2F;sshd</span><br></pre></td></tr></table></figure><p>可以看到sshd已经启动了。是由supervisor进行启动的。</p><p><strong>5. 使用 supervisorctl</strong></p><p>Supervisorctl 是 supervisord 的一个命令行客户端工具，可以用来管理supervisord启动的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 ~]# supervisorctl status</span><br><span class="line">sshd RUNNING pid 31, uptime 0:02:35</span><br></pre></td></tr></table></figure><p><strong>停止与启动sshd</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 ~]# supervisorctl stop sshd</span><br><span class="line">sshd: stopped</span><br><span class="line"></span><br><span class="line">[root@98aced104917 ~]# supervisorctl status</span><br><span class="line">sshd STOPPED Oct 14 06:45 AM</span><br><span class="line"></span><br><span class="line">[root@98aced104917 ~]# supervisorctl start sshd</span><br><span class="line">sshd: started</span><br><span class="line"></span><br><span class="line">[root@98aced104917 ~]# supervisorctl status</span><br><span class="line">sshd RUNNING pid 42, uptime 0:00:03</span><br></pre></td></tr></table></figure><p><strong>6..将supervisord.conf配置文件scp到宿主机目录下，和Dockerfile同目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@98aced104917 &#x2F;]# scp &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line">192.168.56.11:&#x2F;opt&#x2F;dockerfile&#x2F;system&#x2F;centos-ssh&#x2F;</span><br><span class="line"></span><br><span class="line">[root@98aced104917 ~]# scp &#x2F;etc&#x2F;supervisord.d&#x2F;sshd.ini</span><br><span class="line">192.168.56.11:&#x2F;opt&#x2F;dockerfile&#x2F;system&#x2F;centos-ssh&#x2F;</span><br></pre></td></tr></table></figure><p>好的，可以退出容器，这个容器的生命周期结束。</p><h3 id="标准化CentOS系统镜像"><a href="#标准化CentOS系统镜像" class="headerlink" title="标准化CentOS系统镜像"></a>标准化CentOS系统镜像</h3><p>现在我们来构建一个全新的包含ssh的centos系统镜像。同时如果你不需要ssh。你依然可以使用supervisor连进行进程管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;system&#x2F;centos-ssh&#x2F;</span><br><span class="line">[root@linux-node1 centos-ssh]# ls -l</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root 554 Oct 14 01:40 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root 142 Oct 14 02:53 sshd.ini</span><br><span class="line">-rw-r--r-- 1 root root 7953 Oct 14 02:30 supervisord.conf</span><br></pre></td></tr></table></figure><p><strong>1.重新编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 centos-ssh]# vim Dockerfile</span><br><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">FROM centos</span><br><span class="line">#Who</span><br><span class="line">MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line">#EPEL</span><br><span class="line">RUN rpm -ivh http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm</span><br><span class="line">#Base pkg</span><br><span class="line">RUN yum install -y openssh-clients openssl-devel openssh-server wget mysql-devel</span><br><span class="line">supervisor git redis tree net-tools sudo psmisc &amp;&amp; yum clean all</span><br><span class="line"># For SSHD</span><br><span class="line">RUN ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class="line">RUN ssh-keygen -t ecdsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class="line">RUN ssh-keygen -A -t dsa -f &#x2F;etc&#x2F;ssh&#x2F;ssh_host_dsa_key</span><br><span class="line"># Set root password</span><br><span class="line">RUN echo &quot;root:unixhot.com&quot; | chpasswd</span><br><span class="line">#Supervisord config</span><br><span class="line">ADD supervisord.conf &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line">ADD sshd.ini &#x2F;etc&#x2F;supervisord.d&#x2F;sshd.ini</span><br><span class="line"># Outside Port</span><br><span class="line">EXPOSE 22</span><br><span class="line">#supervisord start</span><br><span class="line">CMD [&quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot;, &quot;-c&quot;, &quot;&#x2F;etc&#x2F;supervisord.conf&quot;]</span><br></pre></td></tr></table></figure><p><strong>2.构建镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 centos-ssh]# docker build -t unixhot&#x2F;centos-ssh:latest .</span><br></pre></td></tr></table></figure><p><strong>3.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 centos-ssh]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;centos-ssh latest 0d4b39f9100e 31 seconds ago 304 MB</span><br><span class="line">unixhot&#x2F;centos-ssh v1 ff1ab7d7e7f4 About an hour ago 304 MB</span><br><span class="line">unixhot&#x2F;centos latest 4edcb790dacf 3 hours ago 303 MB</span><br></pre></td></tr></table></figure><p><strong>4.构建容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name centos-ssh-supervisor -p 2222:22</span><br><span class="line">unixhot&#x2F;centos-ssh</span><br><span class="line">9ebf53b3cacd093c11a9b5773c5fc62875626061f3f3fe0b5380013c78f2f15b</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">9ebf53b3cacd unixhot&#x2F;centos-ssh &quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot; 6 seconds ago Up 3</span><br><span class="line">seconds 0.0.0.0:2222-&gt;22&#x2F;tcp centos-ssh-supervisor</span><br></pre></td></tr></table></figure><p><strong>5.使用ssh连接容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ssh root@192.168.56.11 -p 2222</span><br><span class="line">root@192.168.56.11&#39;s password:</span><br><span class="line">[root@9ebf53b3cacd ~]# ps aux</span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 1 0.3 0.0 117248 14668 ? Ss 07:25 0:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;supervisord</span><br><span class="line">-c &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line">root 9 0.0 0.0 82560 3608 ? S 07:25 0:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br><span class="line">root 25 1.2 0.0 139272 5428 ? Ss 07:26 0:00 sshd: root@pts&#x2F;0</span><br><span class="line">root 27 0.0 0.0 13376 1984 pts&#x2F;0 Ss 07:27 0:00 -bash</span><br><span class="line">root 40 0.0 0.0 49024 1808 pts&#x2F;0 R+ 07:27 0:00 ps aux</span><br></pre></td></tr></table></figure><p><strong>操作系统标准化约定：</strong></p><p>统一使用supervisor进行进程的管理</p><p>所有Docker容器，使用centos-ssh镜像时提供supervisor的ini配置文件。</p><h2 id="运行环境镜像"><a href="#运行环境镜像" class="headerlink" title="运行环境镜像"></a>运行环境镜像</h2><p>现在有了系统镜像，当然文中的知识案例，具体的情况可以根据你所在企业的具体情况进行相关的配置，现在我们可以在系统镜像的基础上来构建运行环境。</p><h3 id="Java-运行环境"><a href="#Java-运行环境" class="headerlink" title="Java 运行环境"></a>Java 运行环境</h3><p>Java环境在生产中非常常见，例如会启动一个单一的Java小进程处理队列里面的内容，只需要有JDK即可。那首先我们先构建一个只包含JDK的运行环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;runtime&#x2F;</span><br><span class="line">[root@linux-node1 runtime]# mkdir java</span><br></pre></td></tr></table></figure><p>Java运行环境要基于centos-ssh的镜像来操作，所以先运行一个临时容器来构建Java运行环境，然后把操作步骤转换为Dockerfile。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run --rm -it unixhot&#x2F;centos-ssh &#x2F;bin&#x2F;bash</span><br><span class="line">[root@ec2696c0f9f4 &#x2F;]# yum install -y java-1.8.0-openjdk</span><br><span class="line">java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure><p>使用yum安装的openjdk，默认可以不设置JAVA_HOME，即可执行相关的java程序。</p><p><strong>1.编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 runtime]# vim java&#x2F;Dockerfile</span><br><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">FROM unixhot&#x2F;centos-ssh</span><br><span class="line">#Who</span><br><span class="line">MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line">#Base pkg</span><br><span class="line">RUN yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel &amp;&amp; yum clean all</span><br><span class="line"># JAVA_HOME</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</span><br><span class="line"># Outside Port</span><br><span class="line">EXPOSE 22</span><br><span class="line">#supervisord start</span><br><span class="line">CMD [&quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot;, &quot;-c&quot;, &quot;&#x2F;etc&#x2F;supervisord.conf&quot;]</span><br></pre></td></tr></table></figure><p><strong>2.构建镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 runtime]# docker build -t unixhot&#x2F;runtime-java .&#x2F;java&#x2F;</span><br></pre></td></tr></table></figure><p><strong>3.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;runtime-java latest ff3a2bb0b2a9 2 minutes ago 505.1 MB</span><br><span class="line">unixhot&#x2F;centos-ssh latest 02d375a33cd1 38 minutes ago 304 MB</span><br><span class="line">unixhot&#x2F;centos-ssh v1 ff1ab7d7e7f4 2 hours ago 304 MB</span><br><span class="line">unixhot&#x2F;centos latest 4edcb790dacf 4 hours ago 303 MB</span><br></pre></td></tr></table></figure><p>当然十分可以使用，需要大家去运行一个小程序进行测试，这里就不演示了。</p><h3 id="Tomcat运行环境"><a href="#Tomcat运行环境" class="headerlink" title="Tomcat运行环境"></a>Tomcat运行环境</h3><p><strong>相对于单一使用Java命令启动Java服务，Tomcat</strong></p><p><strong>1.启动centos-ssh镜像的实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run --rm -it unixhot&#x2F;centos-ssh &#x2F;bin&#x2F;bash</span><br><span class="line">[root@80f529b965ef &#x2F;]# yum install -y java-1.8.0-openjdk</span><br><span class="line">java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure><p><strong>为什么不直接使用Java的运行环境构建Tomcat？</strong></p><p>首先，确实可以直接使用Java的运行环境来进行Tomcat的构建，但是会破坏我们系统层、运行环境层、业务层的架构，也就是将依赖关系复杂话了，这要根据企业自身情况来做。我先说说我的理由：</p><p>如果Tomcat使用的Java版本要升级到JDK 1.8版本，而Java运行环境的版本是1.7，不能升级，因为有很多服务就是在JDK 1.7的环境下开发的，未进行迁移。这个时候，如果Tomcat是基于Java 1.7的运行环境构建的，就出现依赖关系了。所以，仅仅是个人的建议：让问题简单化！</p><p><strong>2.安装部署Tomcat 8</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@80f529b965ef &#x2F;]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">[root@80f529b965ef src]# wget http:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.6&#x2F;bin&#x2F;apache-tomcat-8.5.6.tar.gz</span><br><span class="line">[root@80f529b965ef src]# tar zxf apache-tomcat-8.5.6.tar</span><br><span class="line">[root@80f529b965ef src]# mv apache-tomcat-8.5.6 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">[root@80f529b965ef src]# ln -s &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.6&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;tomcat</span><br></pre></td></tr></table></figure><p><strong>3.使用supervisor启动tomcat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@897cc10b8adf ~]# cd &#x2F;etc&#x2F;supervisord.d&#x2F;</span><br><span class="line">[root@897cc10b8adf supervisord.d]# vi tomcat.ini</span><br><span class="line">[program:tomcat]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;catalina.sh run</span><br><span class="line">process_name&#x3D;%(program_name)s</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">stdout_logfile_maxbytes&#x3D;100MB</span><br><span class="line">stdout_logfile_backups&#x3D;10</span><br></pre></td></tr></table></figure><p><strong>更新supervisor并查看tomcat状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@897cc10b8adf supervisord.d]# supervisorctl update</span><br><span class="line">tomcat: stopped</span><br><span class="line">tomcat: updated process group</span><br><span class="line">[root@897cc10b8adf supervisord.d]# supervisorctl status</span><br><span class="line">sshd RUNNING pid 408, uptime 0:06:00</span><br><span class="line">tomcat RUNNING pid 704, uptime 0:00:03</span><br></pre></td></tr></table></figure><p><strong>4.准备Dockerfile的构建环境</strong></p><p>现在我们开始编写Dockerfile，在编写之前，我们先决定一件事情，apache-tomcat的包，我们应该是像实验中使用wget进行下载并解压呢，还是应该提前将包放在宿主机，构建的时候使用Dockerfile ADD进行呢。</p><p>我建议选择后者，因为实际的工作中，我们通常要对Tomcat进行很多定制化的配置，例如进行安全规范的调整等。</p><p>这里我们能演示的就是直接下载，可以想象一下，这个已经是你修改过的软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;runtime&#x2F;</span><br><span class="line">[root@linux-node1 runtime]# mkdir tomcat</span><br><span class="line">[root@linux-node1 runtime]# cd tomcat&#x2F;</span><br><span class="line">[root@linux-node1 tomcat]# wget http:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.6&#x2F;bin&#x2F;apache-tomcat-8.5.6.tar.gz</span><br></pre></td></tr></table></figure><p><strong>5.编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">FROM unixhot&#x2F;centos-ssh</span><br><span class="line">#Who</span><br><span class="line">MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line">#Base pkg</span><br><span class="line">RUN yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel &amp;&amp; yum clean all</span><br><span class="line"># JAVA_HOME</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk</span><br><span class="line"># Tomcat</span><br><span class="line">ADD apache-tomcat-8.5.6.tar.gz &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">RUN ln -s &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.6 &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">ADD tomcat.ini &#x2F;etc&#x2F;supervisord.d&#x2F;tomcat.ini</span><br><span class="line">ENV TOMCAT_HOME &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line"># Outside Port</span><br><span class="line">EXPOSE 22 8080</span><br><span class="line">#supervisord start</span><br><span class="line">CMD [&quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot;, &quot;-c&quot;, &quot;&#x2F;etc&#x2F;supervisord.conf&quot;]</span><br></pre></td></tr></table></figure><p><strong>6.构建tomcat镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 tomcat]# ls -l</span><br><span class="line">total 9096</span><br><span class="line">-rw-r--r-- 1 root root 9304958 Oct 6 16:39 apache-tomcat-8.5.6.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 546 Oct 14 05:51 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root 165 Oct 14 06:33 tomcat.ini</span><br><span class="line">[root@linux-node1 tomcat]# docker build -t unixhot&#x2F;runtime-tomcat .</span><br></pre></td></tr></table></figure><p><strong>7.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 tomcat]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;runtime-tomcat latest ef8372a88ad4 6 minutes ago 518.2 MB</span><br><span class="line">unixhot&#x2F;runtime-java latest ff3a2bb0b2a9 2 hours ago 505.1 MB</span><br><span class="line">unixhot&#x2F;centos-ssh latest 02d375a33cd1 3 hours ago 304 MB</span><br><span class="line">unixhot&#x2F;centos-ssh v1 ff1ab7d7e7f4 4 hours ago 304 MB</span><br><span class="line">unixhot&#x2F;centos latest 4edcb790dacf 6 hours ago 303 MB</span><br></pre></td></tr></table></figure><p><strong>8.构建tomcat-demo容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 tomcat]# docker run -d --name tomcat-demo -p 88:8080 -p</span><br><span class="line">89:22 unixhot&#x2F;runtime-tomcat</span><br><span class="line">8cea3ef85634210eb0cfab0f65a63b0ebd6961b5a67fc765b762785c01cd2c18</span><br><span class="line">[root@linux-node1 tomcat]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">8cea3ef85634 unixhot&#x2F;runtime-tomcat &quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot; 5 seconds ago Up 2</span><br><span class="line">seconds 0.0.0.0:89-&gt;22&#x2F;tcp, 0.0.0.0:88-&gt;8080&#x2F;tcp tomcat-demo</span><br></pre></td></tr></table></figure><p><strong>9.访问tomcat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.56.11:88&#x2F;</span><br></pre></td></tr></table></figure><h2 id="应用镜像"><a href="#应用镜像" class="headerlink" title="应用镜像"></a>应用镜像</h2><p>最上层的业务镜像就是在运行环境的基础上，直接使用或者根据业务情况再次进行二次定制。例如对于PHP运行环境，默认只安装基础通用的模块，对于业务需要的时候再次进行二次构建。这里我们拿一个比较简单的Jenkins来模拟。</p><h3 id="Jenkins镜像构建"><a href="#Jenkins镜像构建" class="headerlink" title="Jenkins镜像构建"></a>Jenkins镜像构建</h3><p>JenkinsJenkins是基于Java开发的一种持续集成工具，它有自己的yum安装方式，但是最直接的还是直接下载war包存放到tomcat目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;opt&#x2F;dockerfile&#x2F;app&#x2F;</span><br><span class="line">[root@linux-node1 app]# mkdir jenkins</span><br><span class="line">[root@linux-node1 app]# cd jenkins&#x2F;</span><br><span class="line">[root@linux-node1 jenkins]# wget http:&#x2F;&#x2F;mirrors.jenkins-ci.org&#x2F;war&#x2F;latest&#x2F;jenkins.war</span><br></pre></td></tr></table></figure><p><strong>2.编写Dockerfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Docker for CentOS</span><br><span class="line">#Base image</span><br><span class="line">FROM unixhot&#x2F;runtime-tomcat</span><br><span class="line">#Who</span><br><span class="line">MAINTAINER Jason.Zhao xxx@gmail.com</span><br><span class="line"># Jenkins</span><br><span class="line">ADD jenkins.war &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;</span><br><span class="line"># Outside Port</span><br><span class="line">EXPOSE 22 8080</span><br><span class="line">#supervisord start</span><br><span class="line">CMD [&quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot;, &quot;-c&quot;, &quot;&#x2F;etc&#x2F;supervisord.conf&quot;]</span><br></pre></td></tr></table></figure><p><strong>3.构建jenkins镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 jenkins]# docker build -t unixhot&#x2F;jenkins .</span><br></pre></td></tr></table></figure><p><strong>4.查看镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 jenkins]# docker images | grep unixhot</span><br><span class="line">unixhot&#x2F;jenkins latest a7b16bc093ed 40 seconds ago 588.7 MB</span><br><span class="line">unixhot&#x2F;runtime-tomcat latest 3b596c9a7696 2 hours ago 518.8 MB</span><br><span class="line">unixhot&#x2F;runtime-java latest 476a6a2fc074 2 hours ago 505.8 MB</span><br><span class="line">unixhot&#x2F;centos-ssh latest d85aa8a9dfd4 3 hours ago 304.6 MB</span><br><span class="line">unixhot&#x2F;centos-ssh v1 3309208ed679 4 hours ago 300.9 MB</span><br><span class="line">unixhot&#x2F;centos latest 83f0491a30e1 4 hours ago 282.3 MB</span><br></pre></td></tr></table></figure><p><strong>5.创建jenkins-demo容器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 jenkins]# docker run -d --name jenkins-demo -p 91:22 -p</span><br><span class="line">92:8080 unixhot&#x2F;jenkins</span><br><span class="line">6d88ba756befc84ef1820818994be028c12ac13825c2b439d680358d101e922e</span><br><span class="line">[root@linux-node1 jenkins]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">6d88ba756bef unixhot&#x2F;jenkins &quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot; 7 seconds ago Up 2 seconds</span><br><span class="line">0.0.0.0:91-&gt;22&#x2F;tcp, 0.0.0.0:92-&gt;8080&#x2F;tcp jenkins-demo</span><br></pre></td></tr></table></figure><p><strong>6.访问jenkins并进行初始化安装</strong></p><p><img src="http://k8s.unixhot.com/docker/media/e59722d6316d2cc9702c1989e1c9f3f1.png" alt="img"></p><p>当然如果你想构建一个启动后直接就可以使用的Jenkins，可以在安装完毕后，把刚才的容器重新提交成为镜像。</p><p><strong>7.安装Jenkins并提交成为jenkins-login镜像。</strong></p><p>进入镜像或者安装的密码，填入密码框并继续。后面步骤省略。全部安装默认即可。注意安装插件时时间会比较长。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# .&#x2F;docker_in.sh jenkins-demo</span><br><span class="line">[root@b3bbada66693 &#x2F;]# cat &#x2F;root&#x2F;.jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br><span class="line">b5257b8891464ebf890b38c00d24de71</span><br></pre></td></tr></table></figure><p><strong>获取Container ID：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">b3bbada66693 unixhot&#x2F;jenkins &quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot; 9 minutes ago Up 9 minutes</span><br><span class="line">0.0.0.0:91-&gt;22&#x2F;tcp, 0.0.0.0:92-&gt;8080&#x2F;tcp jenkins-demo</span><br></pre></td></tr></table></figure><p><strong>提交新的镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker commit -m &quot;jenkins login&quot; b3bbada66693</span><br><span class="line">unixhot&#x2F;jenkins-login</span><br><span class="line">[root@linux-node1 ~]# docker images | grep jenkins</span><br><span class="line">unixhot&#x2F;jenkins-login latest c453363bb9f7 22 seconds ago 776.6 MB</span><br><span class="line">unixhot&#x2F;jenkins latest a7b16bc093ed 13 minutes ago 588.7 MB</span><br></pre></td></tr></table></figure><p><strong>8.使用jenkins-login镜像构建容器</strong></p><p>现在可以使用的Jenkins容器诞生了，赶紧创建一个容器来进行使用吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name jenkins-login -p 93:22 -p 94:8080</span><br><span class="line">unixhot&#x2F;jenkins-login</span><br><span class="line">af421b4d5b076c756ab58ed8cc95c615a321f9517d30b755667d5d80d1336a63</span><br><span class="line">[root@linux-node1 ~]# docker ps -l</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">af421b4d5b07 unixhot&#x2F;jenkins-login &quot;&#x2F;usr&#x2F;bin&#x2F;supervisord&quot; 4 seconds ago Up 2</span><br><span class="line">seconds 0.0.0.0:93-&gt;22&#x2F;tcp, 0.0.0.0:94-&gt;8080&#x2F;tcp jenkins-login</span><br></pre></td></tr></table></figure><p><strong>9.访问Jenkins容器，开始持续集成之路</strong></p><p><img src="http://k8s.unixhot.com/docker/media/04b8b149d6c7ce1e18f67796998be9b5.png" alt="img"></p><h1 id="3-Docker私有仓库实践"><a href="#3-Docker私有仓库实践" class="headerlink" title="3 Docker私有仓库实践"></a>3 Docker私有仓库实践</h1><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><h3 id="创建Docker-Registry"><a href="#创建Docker-Registry" class="headerlink" title="创建Docker Registry"></a>创建Docker Registry</h3><p>在安装了 Docker 后，可以通过获取官方 registry 镜像来运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker run -d --name docker-registry -p 5000:5000 registry</span><br><span class="line">b822d0a3e77e6a3144408119ccc2e7344f60f7404651adc025ce84561245b2d2</span><br></pre></td></tr></table></figure><h3 id="配置Docker信任仓库"><a href="#配置Docker信任仓库" class="headerlink" title="配置Docker信任仓库"></a>配置Docker信任仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;tdimi5q1.mirror.aliyuncs.com&quot;],</span><br><span class="line">&quot;insecure-registries&quot; : [&quot;http:&#x2F;&#x2F;192.168.56.11:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[root@linux-node1 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Push镜像到Docker-Registry"><a href="#Push镜像到Docker-Registry" class="headerlink" title="Push镜像到Docker Registry"></a>Push镜像到Docker Registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker tag system&#x2F;centos 192.168.56.11:5000&#x2F;system&#x2F;centos</span><br><span class="line">[root@linux-node1 ~]# docker push 192.168.56.11:5000&#x2F;system&#x2F;centos</span><br></pre></td></tr></table></figure><h2 id="Registry项目Harbor"><a href="#Registry项目Harbor" class="headerlink" title="Registry项目Harbor"></a>Registry项目Harbor</h2><p>上面我们简单的介绍了Docker Registry的使用，但是真正生产环境，我们无法有效的管理Docker Regisry。官方提供了收费版的Registry，社区有开源版本的Harbor。</p><p><strong>Harbor简介</strong></p><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><p>基于角色的访问控制 - 用户与Docker镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间（project）里有不同的权限。</p><p>镜像复制 - 镜像可以在多个Registry实例中复制（同步）。尤其适合于负载均衡，高可用，混合云和多云的场景。</p><p>图形化用户界面 - 用户可以通过浏览器来浏览，检索当前Docker镜像仓库，管理项目和命名空间。</p><p>AD/LDAP 支持 - Harbor可以集成企业内部已有的AD/LDAP，用于鉴权认证管理。</p><p>审计管理 - 所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</p><p>国际化 - 已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来。</p><p>RESTful API - RESTful API 提供给管理员对于Harbor更多的操控, 使得与其它管理软件集成变得更容易。</p><p>部署简单 - 提供在线和离线两种安装工具， 也可以安装到vSphere平台(OVA方式)虚拟设备。</p><h3 id="Harbor部署"><a href="#Harbor部署" class="headerlink" title="Harbor部署"></a>Harbor部署</h3><p>Harbor为运维提供了多种部署方法，你可以直接clone最新代码，也可以支持offline的部署方法，直接下载官方构建好的镜像来进行使用。可以在github的releases查看最新版本，本文是1.7.1版本。<em><a href="https://github.com/vmware/harbor/releases">https://github.com/vmware/harbor/releases</a></em></p><p>建议下载offline的压缩包，里面包含了harbor启动所用的所有docker镜像，可以快速的部署harbor。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;storage.googleapis.com&#x2F;harbor-releases&#x2F;release-1.7.0&#x2F;harbor-offline-installer-v1.7.1.tgz</span><br><span class="line"># tar zxf harbor-offline-installer-v1.7.1.tgz</span><br></pre></td></tr></table></figure><p>Harbor的每个组件都是以Docker容器的形式构建的，使用Docker Compose来对它进行部署，你可以查看docker-compose.yml文件。</p><h3 id="Harbor配置"><a href="#Harbor配置" class="headerlink" title="Harbor配置"></a>Harbor配置</h3><p><strong>为Harbor配置HTTP访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd harbor</span><br><span class="line">[root@linux-node1 harbor]# vim harbor.cfg</span><br><span class="line">hostname &#x3D; 192.168.56.11</span><br></pre></td></tr></table></figure><p><strong>配置Docker信任仓库</strong></p><p>如果使用http的方式配置harbor需要为所有Docker添加信任配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;tdimi5q1.mirror.aliyuncs.com&quot;],</span><br><span class="line">&quot;insecure-registries&quot; : [&quot;http:&#x2F;&#x2F;192.168.56.11&quot;]</span><br><span class="line">&#125;</span><br><span class="line">[root@linux-node1 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>为Harbor配置https访问</strong></p><p>默认情况下Harbor是使用http进行访问，官方提供了自签名证书的方法，不过生产环境还是建议购买SSL证书。</p><p><strong>1.申请证书</strong></p><p>如果你没有SSL证书，那么也不要使用网上复杂的自签名证书的步骤了。目前阿里云提供Symantec 免费型DV SSL证书。申请成功后，下载Nginx版本的证书文件。</p><p><strong>2.Harbor配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-node1 harbor]# cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;harbor&#x2F;</span><br><span class="line">[root@docker-node1 harbor]# vim harbor.cfg</span><br><span class="line">hostname &#x3D; reg.unixhot.com</span><br><span class="line">ui_url_protocol &#x3D; https</span><br><span class="line">ssl_cert &#x3D; &#x2F;usr&#x2F;local&#x2F;src&#x2F;harbor&#x2F;1_registry.linuxhot.com_bundle.crt</span><br><span class="line">ssl_cert_key &#x3D; &#x2F;usr&#x2F;local&#x2F;src&#x2F;harbor&#x2F;2_registry.linuxhot.com.key</span><br></pre></td></tr></table></figure><p>请将证书放置在宿主机上，并配置正确的证书路径。</p><p><strong>Docker Compose安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]#yum install -y docker-compose</span><br><span class="line">[root@linux-node1 ~]# docker-compose --version</span><br><span class="line">docker-compose version 1.8.0, build 94f7016</span><br></pre></td></tr></table></figure><p><strong>安装Harbor</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-harbor-1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;harbor&#x2F;</span><br><span class="line">[root@k8s-harbor-1 harbor]# .&#x2F;install.sh</span><br></pre></td></tr></table></figure><p><strong>查看Harbor状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-harbor-1 harbor]# docker-compose ps</span><br><span class="line">Name Command State Ports</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">harbor-adminserver &#x2F;harbor&#x2F;start.sh Up</span><br><span class="line">harbor-core &#x2F;harbor&#x2F;start.sh Up</span><br><span class="line">harbor-db &#x2F;entrypoint.sh postgres Up 5432&#x2F;tcp</span><br><span class="line">harbor-jobservice &#x2F;harbor&#x2F;start.sh Up</span><br><span class="line">harbor-log &#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;local&#x2F;bin&#x2F; ... Up 127.0.0.1:1514-&gt;10514&#x2F;tcp</span><br><span class="line">harbor-portal nginx -g daemon off; Up 80&#x2F;tcp</span><br><span class="line">nginx nginx -g daemon off; Up 0.0.0.0:443-&gt;443&#x2F;tcp, 0.0.0.0:4443-&gt;4443&#x2F;tcp,</span><br><span class="line">0.0.0.0:80-&gt;80&#x2F;tcp</span><br><span class="line">redis docker-entrypoint.sh redis ... Up 6379&#x2F;tcp</span><br><span class="line">registry &#x2F;entrypoint.sh &#x2F;etc&#x2F;regist ... Up 5000&#x2F;tcp</span><br><span class="line">registryctl &#x2F;harbor&#x2F;start.sh Up</span><br></pre></td></tr></table></figure><h3 id="使用Harbor管理Registry"><a href="#使用Harbor管理Registry" class="headerlink" title="使用Harbor管理Registry"></a>使用Harbor管理Registry</h3><p>现在你就可以访问你的域名<a href="http://reg.linuxhot.com进行登录.默认用户admin,密码harbor12345./">http://reg.linuxhot.com进行登录。默认用户admin，密码Harbor12345。</a></p><p><img src="http://k8s.unixhot.com/docker/media/366c20c68d5e6467434fb8108baa6081.png" alt="img"></p><p>登录后的第一件事情永远都是修改默认密码。然后你就可以在项目管理中，新建和管理项目了。不过默认情况下创建的项目library是公开的，如果你要使用这个项目，而且域名放在公网上，请取消公开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker login reg.linuxhot.com</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p><strong>提交镜像到Registry</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker tag centos:latest reg.linuxhot.com&#x2F;system&#x2F;centos:latest</span><br><span class="line"># docker push reg.linuxhot.com&#x2F;system&#x2F;centos:latest</span><br></pre></td></tr></table></figure><h1 id="Kubernetes快速入门"><a href="#Kubernetes快速入门" class="headerlink" title="Kubernetes快速入门"></a>Kubernetes快速入门</h1><p>学习Kubernetes最权威的知识来源就是Kubernetes官方文档，而且对于初学者来说，官方文档可能不是最佳选择。本章将带你循循序渐进的学习Kubernetes，后面章节会通过大量的实践案例来理解和掌握Kubernetes的知识。</p><ul><li>Kubernetes官方文档：<a href="https://kubernetes.io/docs/home/">https://kubernetes.io/docs/home/</a></li><li>Kuernetes Github：<a href="https://github.com/kubernetes/">https://github.com/kubernetes/</a></li></ul><h2 id="Kubernetes架构介绍"><a href="#Kubernetes架构介绍" class="headerlink" title="Kubernetes架构介绍"></a>Kubernetes架构介绍</h2><p>Kubernetes 源于希腊语，意为 “舵手” 或 “飞行员”，是用于自动部署，扩展和管理容器化应用程序的开源系统，由于K和S之间有8个字母，被简称为K8S。Kubernetes 构建在 Google 15 年生产环境经验基础之上，可以将Kubernetes看作为Google内部的容器管理平台Brog的开源版本，当然他们之间是有一些差异的。</p><h3 id="Kubernetes系统架构"><a href="#Kubernetes系统架构" class="headerlink" title="Kubernetes系统架构"></a>Kubernetes系统架构</h3><p>Kubernetes被设计为Master和Node两个角色，这类似于OpenStack的架构理念，Master为控制节点，Node为计算节点或者叫工作节点，在Master节点上有一个API Server服务，对外提供标准的RestAPI，这也是Kubernetes集群的入口，意外着只要和集群进行交互必须连接到API Server上。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/4f93fc22b605a967fa54a2491557c04e.png" alt="img"></p><p><strong>Master节点介绍</strong></p><p>Kubernetes Master节点主要有4个组件，API Server、Scheduler、Controller、etcd。如下图所示：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/0786901c59be2f756d7b979619a048b2.png" alt="img"></p><ul><li><strong>API Server</strong>：提供Kubernetes API接口，主要处理 Rest操作以及更新Etcd中的对象。是所有资源增删改查的唯一入口。</li><li><strong>Scheduler</strong>：绑定Pod到Node上，主要做资源调度。</li><li><strong>Controller Manager</strong>：所有其他群集级别的功能，目前由控制器Manager执行。资源对象的自动化控制中心，Kubernetes集群有很多控制器。</li><li><strong>Etcd</strong>：所有持久化的状态信息存储在Etcd中，这个是Kubernetes集群的数据库。</li></ul><p><strong>Node节点介绍</strong></p><p>Node节点是Kubernetes集群的工作节点，在Node节点上主要运行了Docker、Kubelet、kube-proxy三个服务（Fluentd请先忽略），如下图所示：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/ff26ae9ea18c1a93e50b8226abfa2fa7.png" alt="img"></p><ul><li><strong>Docker Engine</strong>：负责节点的容器的管理工作，最终创建出来的是一个Docker容器。</li><li><strong>Kubelet</strong>：安装在Node上的代理服务，用来管理Pods以及容器、镜像、Volume等，实现对集群对节点的管理。</li><li><strong>Kube-proxy</strong>：安装在Node上的网络代理服务，提供网络代理以及负载均衡，实现与Service通讯。</li></ul><h3 id="Kubernetes逻辑架构"><a href="#Kubernetes逻辑架构" class="headerlink" title="Kubernetes逻辑架构"></a>Kubernetes逻辑架构</h3><p>在上面的介绍中提到像Pod、Service这些概念，在Kubernetes的系统架构图中并没有体现出来，这些可以理解为Kubernetes逻辑架构中的组件。也就是在Master和Node上并不具体存在的一个服务或者进程，但却是Kubernetes的组件，也是我们的管理对象。主要有Pod、Service和各种控制器等。</p><p><strong>Pod</strong></p><p>Pod是Kubernetes的最小管理单元，一个Pod可以包含一组容器和卷。虽然一个Pod里面可以包含一个或者多个容器，但是Pod只有一个IP地址，而且Pod重启后，IP地址会发生变化。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/e2a89d5ac819b578808e62d8fee0e960.png" alt="img"></p><p><strong>Controller</strong></p><p>一个应用如果可以有一个或者多个Pod，就像你给某一个应用做集群，集群中的所有Pod是一模一样的。Kubernetes中有很多控制器可以来管理Pod，例如下图的Replication Controller可以控制Pod的副本数量，从而实现横向扩展。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/c4ae2886ff4fdb51b9a0dd20a14c8e50.png" alt="img"></p><p>Kubernetes中有很多控制器，后面的章节我们会一一讲到，常用的控制器如下：</p><ul><li>Replication Controller（新版本已经被ReplicaSet所替代）</li><li>ReplicaSet（新版本被封装在Deployment中）</li><li>Deployment：封装了Pod的副本管理、部署更新、回滚、扩容、缩容等功能。</li><li>DaemonSet：保证所有的Node上有且只有一个Pod在运行。</li><li>StatefulSet：有状态的应用，为 Pod 提供唯一的标识，它可以保证部署和 scale 的顺序。</li><li>Job：使用Kubernetes运行单一任务。</li><li>CronJob：使用Kubernetes运行定时任务。</li></ul><p><strong>Service</strong></p><p>由于Pod的生命周期是短暂的，而且每次重启Pod的IP地址都会发生变化，而且一个Pod有多个副本，也就是说一个集群中有了多个节点，就需要考虑负载均衡的问题。Kubernetes使用Service来实现Pod的访问，而且Service有一个Cluster IP，通常也称之为VIP，是固定不变的。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/2e61328894d1eaf548ad6ff06d85a6a3.png" alt="img"></p><h3 id="Kubernetes网络介绍"><a href="#Kubernetes网络介绍" class="headerlink" title="Kubernetes网络介绍"></a>Kubernetes网络介绍</h3><p>在Kubernetes集群中存在着三种网络，分别是Node网络、Pod网络和Service网络，这几种网络之间的通信需要依靠网络插件，Kubernetes本身并没有提供，社区提供了像Flannel、Calico、Cannal等，后面章节会详述。</p><p><strong>Node网络</strong></p><p>Node网络指的是Kubernetes Node节点本地的网络，在本实验环境中使用的是192.168.56.0/24这个网段，所有的Node和Master在该网段都可以正常通信。</p><p><strong>Pod网络</strong></p><p>后面创建的Pod，每一个Pod都会有一个IP地址，这个IP地址网络段被称之为Pod网络，如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-hpn68 1&#x2F;1 Running 0 9m7s 10.2.1.2 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-r4mfq 1&#x2F;1 Running 0 7m46s 10.2.1.3 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>Service网络</strong></p><p>Service是为Pod提供访问和负载均衡的网络地址段，如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line"></span><br><span class="line">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE</span><br><span class="line"></span><br><span class="line">kubernetes ClusterIP 10.1.0.1 &lt;none&gt; 443&#x2F;TCP 64m</span><br><span class="line"></span><br><span class="line">nginx NodePort 10.1.216.23 &lt;none&gt; 80:30893&#x2F;TCP 8m3s</span><br></pre></td></tr></table></figure><p>Kubernetes的组件和知识绝非如此，快速入门可以先了解这么多，下一章节，我们先快速的部署一个Kubernetes集群。</p><h2 id="使用kubeadm部署Kubernetes-v1-16-4"><a href="#使用kubeadm部署Kubernetes-v1-16-4" class="headerlink" title="使用kubeadm部署Kubernetes v1.16.4"></a>使用kubeadm部署Kubernetes v1.16.4</h2><p>想要快速的体验Kubernetes的功能，官方提供了非常多的部署方案，可以使用官方提供的kubeadm以容器的方式运行Kubernetes集群，也可以使用二进制方式部署更有利于理解Kubernetes的架构，我们先使用kubeadm快速的部署一个Kubernetes集群后，学习Kubernetes的使用，然后动手使用二进制的方式来深入理解Kubernetes架构。</p><blockquote><p>注意：请不要把目光仅仅放在部署上，要慢慢的了解其本质。</p></blockquote><p>Kubernetesv1.13版本发布后，kubeadm才正式进入GA，可以生产使用。目前Kubernetes的对应镜像仓库，在国内阿里云也有了镜像站点，使用kubeadm部署Kubernetes集群变得简单并且容易了很多，本文使用kubeadm带领大家快速部署Kubernetes v1.16.2版本。</p><p><strong>实验环境准备</strong></p><p>在本书的实验环境的基础上，我们如下来分配角色：</p><table><thead><tr><th>主机名</th><th>IP地址（NAT）</th><th>最低配置</th><th>描述</th></tr></thead><tbody><tr><td>linux-node1.linuxhot.com</td><td>eth0:192.168.56.11</td><td>1CPU/1G内存</td><td>Kubernets Master/Etcd节点</td></tr><tr><td>linux-node2.linuxhot.com</td><td>eth0:192.168.56.12</td><td>1CPU/1G内存</td><td>Kubernets Node节点</td></tr><tr><td>linux-node3.linuxhot.com</td><td>eth0:192.168.56.13</td><td>1CPU/1G内存</td><td>Kubernets Node节点</td></tr><tr><td>Service网段</td><td>10.1.0.0/16</td><td></td><td></td></tr><tr><td>Pod网段</td><td>10.2.0.0/16</td><td></td><td></td></tr><tr><td>备注</td><td>如果有条件可以部署多个Kubernets node，实验效果更佳。</td><td></td><td></td></tr></tbody></table><h3 id="部署Docker"><a href="#部署Docker" class="headerlink" title="部署Docker"></a>部署Docker</h3><p>首先需要在所有Kubernetes集群的节点中安装Docker和kubeadm。</p><p><strong>1.设置使用国内Yum源</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">[root@linux-node1 yum.repos.d]# wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>2.安装指定的Docker版本</strong></p><p>由于kubeadm对Docker的版本是有要求的，需要安装与Kubernetes匹配的版本，这个对应关系一般在每次发布的Changlog中可以找到，例如1.16.2的CHANGELOG如下：<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.16.md">CHANGELOG</a></p><p>当前v1.16.2支持的Docker版本有v1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09,可以通过下面命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line"> * updates: mirror.jdcloud.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line"> * extras: mirror.jdcloud.com</span><br><span class="line"> * epel: mirrors.njupt.edu.cn</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"> * base: mirrors.neusoft.edu.cn</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><p><strong>3.安装Docker18.09版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum -y install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9-3.el7</span><br></pre></td></tr></table></figure><p><strong>4.设置cgroup驱动使用systemd</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;etc&#x2F;docker</span><br><span class="line">[root@linux-node1 ~]# cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;dx5z2hy7.mirror.aliyuncs.com&quot;],</span><br><span class="line">      &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>5.启动后台进程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>6.查看Docker版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker --version</span><br><span class="line">Docker version 18.09.9, build 039a7df9ba</span><br></pre></td></tr></table></figure><h3 id="部署kubadm和kubelet"><a href="#部署kubadm和kubelet" class="headerlink" title="部署kubadm和kubelet"></a>部署kubadm和kubelet</h3><p>在Kubernetes集群的所有节点上部署完毕Docker后，还需要全部部署kubeadm和kubelet，其中kubeadm是管理工具，kubelet是一个服务，用于启动Kubernetes对应的服务。</p><p><strong>1.设置kubernetes YUM仓库</strong></p><p>这里在官方文档的基础上修改为了国内阿里云的yum仓库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br></pre></td></tr></table></figure><blockquote><p>注意：最下面一行gpgkey的两个URL地址之间是空格，因为排版问题可能导致换行。</p></blockquote><p><strong>2.安装软件包</strong></p><p>由于版本更新频繁，请指定对应的版本号，本文采用1.16.2版本，其它版本未经测试，如果不指定版本默认安装最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 ipvsadm</span><br></pre></td></tr></table></figure><p><strong>3.配置kubelet</strong></p><p>默认情况下，Kubelet不允许所在的主机存在交换分区，后期规划的时候，可以考虑在系统安装的时候不创建交换分区，针对已经存在交换分区的可以设置忽略禁止使用Swap的限制，不然无法启动Kubelet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet</span><br><span class="line">KUBELET_CGROUP_ARGS&#x3D;&quot;--cgroup-driver&#x3D;systemd&quot;</span><br><span class="line">KUBELET_EXTRA_ARGS&#x3D;&quot;--fail-swap-on&#x3D;false&quot;</span><br></pre></td></tr></table></figure><p>在所有节点上关闭SWAP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# swapoff -a</span><br></pre></td></tr></table></figure><p><strong>4.设置内核参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# sysctl --system</span><br></pre></td></tr></table></figure><p><strong>5.启动kubelet并设置开机启动</strong></p><p>注意，此时kubelet是无法正常启动的，可以查看/var/log/messages有报错信息，等待执行初始化之后即可正常，为正常现象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><p><strong>6.使用IPVS进行负载均衡</strong></p><p>在Kubernetes集群中Kube-Proxy组件负载均衡的功能，默认使用iptables，生产环境建议使用ipvs进行负载均衡。在所有节点启用ipvs模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">[root@linux-node1 ~]# chmod +x &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br><span class="line">[root@linux-node1 ~]# source &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules</span><br></pre></td></tr></table></figure><p>查看模块是否加载正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line">ip_vs_sh               12688  0 </span><br><span class="line">ip_vs_wrr              12697  0 </span><br><span class="line">ip_vs_rr               12600  0 </span><br><span class="line">ip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack_ipv4      15053  15 </span><br><span class="line">nf_defrag_ipv4         12729  1 nf_conntrack_ipv4</span><br><span class="line">nf_conntrack          133095  7 ip_vs,nf_nat,nf_nat_ipv4,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4</span><br><span class="line">libcrc32c              12644  4 xfs,ip_vs,nf_nat,nf_conntrack</span><br></pre></td></tr></table></figure><ul><li>以上步骤请在Kubernetes的所有节点上执行，本实验环境是需要在linux-node1、linux-node2、linux-node3这三台机器上均安装Docker、kubeadm、kubelet，对于以上操作需要自动化可以参考我使用SaltStack完成的salt-kubeadm项目：<a href="https://github.com/unixhot/salt-kubeadm">https://github.com/unixhot/salt-kubeadm</a></li></ul><h3 id="初始化集群部署Master"><a href="#初始化集群部署Master" class="headerlink" title="初始化集群部署Master"></a>初始化集群部署Master</h3><p>在所有节点上安装完毕后，在linux-node1这台Master节点上进行集群的初始化工作。</p><p><strong>1.导出所有默认的配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm config print init-defaults &gt; kubeadm.yaml</span><br></pre></td></tr></table></figure><p>上面的命令会生成一个默认配置的kubeadm配置文件，然后在此基础上进行修改即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat kubeadm.yaml </span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.56.11  #修改为API Server的地址</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock</span><br><span class="line">  name: linux-node1.example.com</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    dataDir: &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers  #修改为阿里云镜像仓库</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.16.2  #修改为具体的版本</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.1.0.0&#x2F;16   #修改Service的网络</span><br><span class="line">  podSubnet: 10.2.0.0&#x2F;16      #新增Pod的网络</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---   #下面有增加的三行配置，用于设置Kubeproxy使用LVS</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io&#x2F;v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br></pre></td></tr></table></figure><p><strong>2. 执行初始化操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm init --config kubeadm.yaml</span><br><span class="line">[init] Using Kubernetes version: v1.16.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR NumCPU]: the number of available CPUs 1 is less than the required 2</span><br><span class="line">        [ERROR Swap]: running with swap on is not supported. Please disable swa</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with &#96;--ignore-preflight-errors&#x3D;...&#96;</span><br><span class="line">To see the stack trace of this error execute with --v&#x3D;5 or higher</span><br></pre></td></tr></table></figure><p>如果遇到上面这样的报错，是因为在实验环境开启了交换分区，以及CPU的核数小于2造成的，可以使用–ignore-preflight-errors=进行忽略。 –ignore-preflight-errors=：忽略运行时的错误，例如上面目前存在[ERROR NumCPU]和[ERROR Swap]，忽略这两个报错就是增加–ignore-preflight-errors=NumCPU 和–ignore-preflight-errors=Swap的配置即可。</p><p>再次执行初始化操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm init --config kubeadm.yaml \</span><br><span class="line">  --ignore-preflight-errors&#x3D;Swap,NumCPU </span><br><span class="line">[init] Using Kubernetes version: v1.16.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING NumCPU]: the number of available CPUs 1 is less than the required 2</span><br><span class="line">        [WARNING Swap]: running with swap on is not supported. Please disable swap</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;</span><br></pre></td></tr></table></figure><p>执行完毕后，会在当前输出下停留，等待下载Kubernetes组件的Docker镜像。根据你的网络情况，可以持续1-5分钟，你也可以使用docker images查看下载的镜像。镜像下载完毕之后，就会进行初始操作：</p><p>这里省略了所有输出，初始化操作主要经历了下面15个步骤，每个阶段均输出均使用[步骤名称]作为开头：</p><ol><li>[init]：指定版本进行初始化操作</li><li>[preflight] ：初始化前的检查和下载所需要的Docker镜像文件。</li><li>[kubelet-start]：生成kubelet的配置文件”/var/lib/kubelet/config.yaml”，没有这个文件kubelet无法启动，所以初始化之前的kubelet实际上启动失败。</li><li>[certificates]：生成Kubernetes使用的证书，存放在/etc/kubernetes/pki目录中。</li><li>[kubeconfig] ：生成 KubeConfig文件，存放在/etc/kubernetes目录中，组件之间通信需要使用对应文件。</li><li>[control-plane]：使用/etc/kubernetes/manifest目录下的YAML文件，安装 Master组件。</li><li>[etcd]：使用/etc/kubernetes/manifest/etcd.yaml安装Etcd服务。</li><li>[wait-control-plane]：等待control-plan部署的Master组件启动。</li><li>[apiclient]：检查Master组件服务状态。</li><li>[uploadconfig]：更新配置</li><li>[kubelet]：使用configMap配置kubelet。</li><li>[patchnode]：更新CNI信息到Node上，通过注释的方式记录。</li><li>[mark-control-plane]：为当前节点打标签，打了角色Master，和不可调度标签，这样默认就不会使用Master节点来运行Pod。</li><li>[bootstrap-token]：生成token记录下来，后边使用kubeadm join往集群中添加节点时会用到</li><li>[addons]：安装附加组件CoreDNS和kube-proxy</li></ol><p>成功执行之后，你会看到下面的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line">kubeadm join 192.168.56.11:6443 --token 19fhhl.3mzkyk16tcgp6vga --discovery-token-ca-cert-hash sha256:76a88c38b673d3b2ac73e33127a809688cb3e58c533512ac6d92ecb66aa57a45</span><br></pre></td></tr></table></figure><p>如果执行失败，那意味着之前的操作存在问题，检查顺序如下：</p><ul><li>基础环境</li><li>主机名是否可以解析，SELinux，iptables是否关闭。</li><li>交换分区是否存在free -m查看</li><li>内核参数是否修改、IPVS是否修改（目前阶段不会造成失败）</li><li>基础软件</li><li>Docker是否安装并启动</li><li>Kubelet是否安装并启动</li><li>执行kubeadm是否有别的报错是否忽略</li><li>systemctl status kubelet查看kubelet是否启动</li><li>如果kubelet无法启动，查看日志有什么报错，并解决报错。</li><li>以上都解决完毕，需要重新初始化</li><li>kubeadm reset 进行重置（生产千万不要执行，会直接删除集群）</li><li>根据kubeadm reset 提升，清楚iptables和LVS。</li></ul><p>请根据上面输出的要求配置kubectl命令来访问集群。</p><p><strong>3.为kubectl准备Kubeconfig文件。</strong></p><p>kubectl默认会在执行的用户家目录下面的.kube目录下寻找config文件。这里是将在初始化时[kubeconfig]步骤生成的admin.conf拷贝到.kube/config。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir -p $HOME&#x2F;.kube</span><br><span class="line">[root@linux-node1 ~]# cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">[root@linux-node1 ~]# chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>在该配置文件中，记录了API Server的访问地址，所以后面直接执行kubectl命令就可以正常连接到API Server中。</p><p><strong>4.使用kubectl命令查看组件状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get cs</span><br><span class="line">NAME STATUS MESSAGE ERROR</span><br><span class="line">scheduler Healthy ok</span><br><span class="line">controller-manager Healthy ok</span><br><span class="line">etcd-0 Healthy &#123;&quot;health&quot;: &quot;true&quot;&#125;</span><br></pre></td></tr></table></figure><p>**知识回顾：为什么上面的输出没有显示API Server组件的状态</p><p>因为API Server是Kubernetes集群的入口，所有和Kubernetes集群的交互都必须经过APIServer，kubectl命令也是连接到API Server上进行交互，所以如果能够正常使用kubectl执行命令，意味着API Server运行正常。</p><p><strong>5.使用kubectl获取Node信息</strong></p><p>目前只有一个节点，角色是Master，状态是NotReady。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get node</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.unixhot.com NotReady master 14m v1.16.2</span><br></pre></td></tr></table></figure><h3 id="部署网络插件"><a href="#部署网络插件" class="headerlink" title="部署网络插件"></a>部署网络插件</h3><p>Master节点NotReady的原因就是因为没有使用任何的网络插件，此时Node和Master的连接还不正常。目前最流行的Kubernetes网络插件有Flannel、Calico、Canal，这里分别列举了Canal和Flannel，你可以选择其中之一进行部署。 因为基础的Kubernetes集群已经配置完毕，后面的增加组件等操作，几乎都可以使用kubectl和一个YAML配置文件来完成。</p><p>【部署canal网络插件】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl apply -f https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;canal&#x2F;rbac.yaml</span><br><span class="line">[root@linux-node1 ~]# kubectl apply -f https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;canal&#x2F;canal.yaml</span><br></pre></td></tr></table></figure><p>【部署Flannel网络插件】（推荐） 部署Flannel网络插件需要修改Pod的IP地址段，修改为和你初始化一直的网段，可以先下载Flannel的YAML文件修改后，再执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;flannel.git</span><br><span class="line">[root@linux-node1 ~]# cd flannel&#x2F;Documentation&#x2F;</span><br><span class="line">[root@linux-node1 Documentation]# vim kube-flannel.yml</span><br><span class="line"># 修改&quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;为&quot;Network&quot;: &quot;10.2.0.0&#x2F;16&quot;,</span><br><span class="line"></span><br><span class="line">74   net-conf.json: |</span><br><span class="line">75     &#123;</span><br><span class="line">76       &quot;Network&quot;: &quot;10.2.0.0&#x2F;16&quot;,</span><br><span class="line">77       &quot;Backend&quot;: &#123;</span><br><span class="line">78         &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">79       &#125;</span><br><span class="line">80     &#125;</span><br><span class="line"></span><br><span class="line"># 请注意，Flannel的镜像拉取速度会比较慢，可以替换为国内镜像</span><br><span class="line"># image: quay.io&#x2F;coreos&#x2F;flannel:v0.10.0-amd64</span><br><span class="line">image: quay-mirror.qiniu.com&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</span><br><span class="line"></span><br><span class="line"># 如果Node中有多个网卡，可以使用--iface来指定对应的网卡参数。</span><br><span class="line">containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay-mirror.qiniu.com&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - &#x2F;opt&#x2F;bin&#x2F;flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface&#x3D;eth0</span><br></pre></td></tr></table></figure><p>部署Flannel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 Documentation]# kubectl create -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>查看Pod状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 Documentation]# kubectl get pod -n kube-system</span><br><span class="line">NAME                                              READY   STATUS     RESTARTS   AGE</span><br><span class="line">coredns-58cc8c89f4-cjhdv                          0&#x2F;1     Pending    0          41m</span><br><span class="line">coredns-58cc8c89f4-vdfn2                          0&#x2F;1     Pending    0          41m</span><br><span class="line">etcd-linux-node1.unixhot.com                      1&#x2F;1     Running    0          41m</span><br><span class="line">kube-apiserver-linux-node1.unixhot.com            1&#x2F;1     Running    0          40m</span><br><span class="line">kube-controller-manager-linux-node1.unixhot.com   1&#x2F;1     Running    1          40m</span><br><span class="line">kube-flannel-ds-amd64-bwsxl                       0&#x2F;1     Init:0&#x2F;1   0          20s</span><br><span class="line">kube-proxy-5qrmh                                  1&#x2F;1     Running    0          41m</span><br><span class="line">kube-scheduler-linux-node1.unixhot.com            1&#x2F;1     Running    1          41m</span><br></pre></td></tr></table></figure><p>可以看到此时CoreDNS处于Pending状态，需要等待网络插件canal或者Flannel的Pod状态变成Running之后CoreDNS也会正常。所有Pod的状态都变成Running之后，这个时候再次获取Node，会发现节点变成了Ready状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get node</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.unixhot.com Ready master 29m v1.16.2</span><br></pre></td></tr></table></figure><p><em>kubeadm其实使用Kubernetes部署Kubernetes，这样就存在先有鸡还是先有蛋的问题，所以，我们首先手动部署了Docker和kubelet，然后kubeadm调用kubelet以静态Pod的方式部署了Kubernetes集群中的其它组件。静态Pod在后面的章节会讲到。</em></p><h3 id="部署Node节点"><a href="#部署Node节点" class="headerlink" title="部署Node节点"></a>部署Node节点</h3><p>Master节点部署完毕之后，就可以部署Node节点，首先请遵循部署Docker和kubeadm章节为Node节点部署安装好docker、kubeadm和kubelet，此过程这里不再重复列出。</p><p><strong>1.在Master节点输出增加节点的命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubeadm token create --print-join-command</span><br><span class="line">kubeadm join 192.168.56.11:6443 --token isggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569</span><br></pre></td></tr></table></figure><p><strong>2.在Node节点执行</strong></p><p>注意如果节点有交换分区，需要增加–ignore-preflight-errors=Swap。</p><p>部署linux-node2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node2 ~]# kubeadm join 192.168.56.11:6443 --token isggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569 --ignore-preflight-errors&#x3D;Swap</span><br></pre></td></tr></table></figure><p>部署linux-node3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node3 ~]# kubeadm join 192.168.56.11:6443 --tokenisggqa.xjwsm3i6nex91d2x --discovery-token-ca-cert-hash sha256:718827895a9a5e63dfa9ff54e16ad6dc0c493139c9c573b67ad66968036cd569 --ignore-preflight-errors&#x3D;Swap</span><br></pre></td></tr></table></figure><p>这个时候kubernetes会使用DaemonSet在所有节点上都部署canal/flannel和kube-proxy。部署完毕之后节点即部署完毕。DaemonSet的内容后面会讲解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get daemonset --all-namespaces</span><br><span class="line">NAMESPACE NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE</span><br><span class="line">kube-system canal 2 2 1 2 1 beta.kubernetes.io&#x2F;os&#x3D;linux 17m</span><br><span class="line">kube-system kube-proxy 2 2 2 2 2 &lt;none&gt; 47m</span><br></pre></td></tr></table></figure><p>待所有Pod全部启动完毕之后，节点就恢复Ready状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE NAME READY STATUS RESTARTS AGE</span><br><span class="line">kube-system canal-lv92w 3&#x2F;3 Running 0 8m45s</span><br><span class="line">kube-system canal-rq5n5 3&#x2F;3 Running 0 23m</span><br><span class="line">kube-system coredns-78d4cf999f-5k4sg 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system coredns-78d4cf999f-bnbgf 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system etcd-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-apiserver-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-controller-manager-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br><span class="line">kube-system kube-proxy-sddlp 1&#x2F;1 Running 0 53m</span><br><span class="line">kube-system kube-proxy-tw96b 1&#x2F;1 Running 0 8m45s</span><br><span class="line">kube-system kube-scheduler-linux-node1.linuxhot.com 1&#x2F;1 Running 0 52m</span><br></pre></td></tr></table></figure><p><strong>查看所有节点</strong> `` [root@linux-node1 ~]# kubectl get node NAME STATUS ROLES AGE VERSION linux-node1.linuxhot.com Ready master 49m v1.13.2 linux-node2.linuxhot.com Ready 4m48s v1.13.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">**如何给Node加上Roles标签**</span><br><span class="line"></span><br><span class="line">使用kubectl get node能够看到linux-node1.linuxhot.com的ROLES是master这个是在进行集群初始化的时候[mark-control-plane]进行标记的。</span><br><span class="line">[mark-control-plane] Marking the node linux-node1.linuxhot.com as control-plane</span><br><span class="line">by adding the label &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot;</span><br><span class="line"></span><br><span class="line">[mark-control-plane] Marking the node linux-node1.linuxhot.com as control-plane</span><br><span class="line">by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]</span><br><span class="line">1.查看节点的标签</span><br><span class="line">[root@linux-node1 ~]# kubectl get nodes --show-labels</span><br><span class="line"></span><br><span class="line">NAME STATUS ROLES AGE VERSION LABELS</span><br><span class="line"></span><br><span class="line">linux-node1.linuxhot.com Ready master 48m v1.13.3</span><br><span class="line">beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;hostname&#x3D;linux-node1.linuxhot.com,node-role.kubernetes.io&#x2F;master&#x3D;</span><br><span class="line"></span><br><span class="line">linux-node2.linuxhot.com Ready &lt;none&gt; 7m13s v1.13.3</span><br><span class="line">beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;hostname&#x3D;linux-node2.linuxhot.com</span><br><span class="line">2.增加标签</span><br><span class="line">[root@linux-node1 ~]# kubectl label nodes linux-node2.linuxhot.com</span><br><span class="line">node-role.kubernetes.io&#x2F;node&#x3D;</span><br><span class="line"></span><br><span class="line">node&#x2F;linux-node2.linuxhot.com labeled</span><br><span class="line">3.查看效果</span><br><span class="line">[root@linux-node1 ~]# kubectl get nodes</span><br><span class="line">NAME STATUS ROLES AGE VERSION</span><br><span class="line">linux-node1.linuxhot.com Ready master 50m v1.13.3</span><br><span class="line">linux-node2.linuxhot.com Ready node 8m41s v1.13.3</span><br><span class="line">### 测试Kubernetes集群 &#123;#test&#125;</span><br><span class="line"></span><br><span class="line">在上面的步骤中，我们创建了一个Kubernetes集群，1个Master和2个Node节点，在生产环境需要考虑Master的高可用，这里先不用考虑，后面会讲到。</span><br><span class="line"></span><br><span class="line">**1.创建一个单Pod的Nginx应用**</span><br><span class="line">[root@linux-node1 ~]# kubectl create deployment nginx --image&#x3D;nginx:alpine</span><br><span class="line">deployment.apps&#x2F;nginx created</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME READY STATUS RESTARTS AGE</span><br><span class="line">nginx-54458cd494-9j7ql 0&#x2F;1 ContainerCreating 0 10s</span><br><span class="line">**2.查看Pod详细信息**</span><br><span class="line"></span><br><span class="line">待Pod的状态为Running后，可以获取Pod的IP地址，这个IP地址是从Master节点初始化的--pod-network-cidr&#x3D;10.2.0.0&#x2F;16地址段中分配的。</span><br><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-9j7ql 1&#x2F;1 Running 0 59s 10.2.1.2 linux-node2.linuxhot.com</span><br><span class="line">&lt;none&gt; &lt;none&gt;</span><br><span class="line">**3.测试Nginx访问**</span><br><span class="line">[root@linux-node1 ~]# curl --head http:&#x2F;&#x2F;10.2.1.2</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.15.8</span><br><span class="line">Date: Sun, 13 Jan 2019 01:16:36 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Wed, 26 Dec 2018 23:21:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5c240d0d-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">**4.测试扩容**</span><br><span class="line"></span><br><span class="line">现在将Nginx应用的Pod副本数量拓展到2个节点</span><br><span class="line">[root@linux-node1 ~]# kubectl scale deployment nginx --replicas&#x3D;2</span><br><span class="line"></span><br><span class="line">deployment.extensions&#x2F;nginx scaled</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line"></span><br><span class="line">NAME READY STATUS RESTARTS AGE</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-9j7ql 1&#x2F;1 Running 0 2m13s</span><br><span class="line"></span><br><span class="line">nginx-54458cd494-vnm4f 1&#x2F;1 Running 0 5s</span><br><span class="line">**5.为Nginx增加Service**</span><br><span class="line"></span><br><span class="line">为Nginx增加Service，会创建一个Cluster</span><br><span class="line">IP，从Master初始化的--service-cidr&#x3D;10.1.0.0&#x2F;16地址段中进行分配，</span><br><span class="line">并开启NodePort是在Node节点上进行端口映射，进行外部访问。</span><br><span class="line">[root@linux-node1 ~]# kubectl expose deployment nginx --port&#x3D;80</span><br><span class="line">--type&#x3D;NodePort</span><br><span class="line"></span><br><span class="line">service&#x2F;nginx exposed</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line"></span><br><span class="line">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE</span><br><span class="line">kubernetes ClusterIP 10.1.0.1 &lt;none&gt; 443&#x2F;TCP 88m</span><br><span class="line">nginx NodePort 10.1.147.204 &lt;none&gt; 80:30599&#x2F;TCP 67m</span><br><span class="line">**6.测试Service的VIP**</span><br><span class="line">[root@linux-node1 ~]# curl --head http:&#x2F;&#x2F;10.1.147.204&#x2F;</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK </span><br><span class="line">Server: nginx&#x2F;1.15.8</span><br><span class="line">Date: Sun, 13 Jan 2019 01:26:21 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Wed, 26 Dec 2018 23:21:49 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;5c240d0d-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>``` <strong>7.测试NodePort，外部访问。</strong></p><p><img src="http://k8s.unixhot.com/kubernetes/media/1f9d523f359ce6d49515d04703d8e941.png" alt="img"></p><p>这一切看起来似乎不是十分完美，但是现在你已经拥有了一个Kubernetes集群，接下来就可以继续探索Kubernetes的世界了。</p><h2 id="公有云中的Kubernetes"><a href="#公有云中的Kubernetes" class="headerlink" title="公有云中的Kubernetes"></a>公有云中的Kubernetes</h2><p>截止2019年2月，大多数公有云已经提供了容器Kubernetes的产品服务，对于使用公有云的用户来说，最佳实践是直接购买公有云产品，而非自己部署Kubernetes集群，主要是因为公有云已经将网络和存储与Kubernetes集成好了，解决了生产应用的难题。</p><h3 id="阿里云中的Kubernetes"><a href="#阿里云中的Kubernetes" class="headerlink" title="阿里云中的Kubernetes"></a>阿里云中的Kubernetes</h3><p>国内阿里云提供了容器服务 Kubernetes 版（简称 ACK）提供高性能可伸缩的容器应用管理能力，支持企业级 Kubernetes 容器化应用的全生命周期管理。容器服务 Kubernetes 版简化集群的搭建和扩容等工作，整合阿里云虚拟化、存储、网络和安全能力，打造云端最佳的 Kubernetes 容器化应用运行环境。</p><p><strong>阿里云Kubernetes模式</strong></p><p>容器服务Kubernetes版包含了经典Dedicated Kubernetes以及Serverless两种形态，方便您按需选择。</p><ul><li>经典Dedicated Kubernetes模式：您可以对集群基础设施和容器应用进行更细粒度的控制，比如选择宿主机实例规格和操作系统，指定Kubernetes 版本、自定义 Kubernetes 特性开关设置等。阿里云 Kubernetes 服务负责为集群创建底层云资源，升级等自动化运维操作。而您需要规划、维护、升级服务器集群，手动或自动在集群中添加或删除服务器。</li><li>Serverless 模式：您无需创建底层虚拟化资源，可以利用 Kubernetes 命令指明应用容器镜像、CPU 和内存要求以及对外服务方式，直接启动。</li></ul><p><strong>阿里云Kubernetes产品架构</strong></p><p><img src="http://k8s.unixhot.com/kubernetes/media/43688d33a81f2bd6af354d0715b6b297.png" alt="C:\\Users\\jason\\Desktop\\15447553537457_zh-CN.png"></p><p><strong>阿里云Kubernetes创建</strong></p><p>默认情况下可以在阿里云中自行创建5个集群，每个集群最多可以添加 40 个节点。如需更高配额，需要提交工单申请。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/4c165d0ebc842862595f9fd0f4650d43.png" alt="img"></p><p>阿里云将网络、存储、安全等方面已经进行了深度集成，在创建Kubernetes集群时，阿里云容器服务提供两种网络插件：Terway和Flannel：</p><ul><li>Flannel：使用的是简单稳定的社区的Flannel CNI插件，配合阿里云的VPC的高速网络，能给集群高性能和稳定的容器网络体验，但功能偏简单，支持的特性少，例如：不支持基于Kubernetes标准的Network Policy。</li><li>Terway：是阿里云容器服务自研的网络插件，功能上完全兼容Flannel，支持将阿里云的弹性网卡分配给容器，支持基于Kubernetes标准的NetworkPolicy来定义容器间的访问策略，支持对单个容器做带宽的限流。对于不需要使用Network Policy的用户，可以选择Flannel，其他情况建议选择Terway。了解更多Terway网络插件的相关内容，请参见Terway网络插件。</li></ul><p>最终阿里云会使用kubeadm帮你创建一个指定版本的Kubernetes集群。</p><h3 id="私有云中的Kubernetes"><a href="#私有云中的Kubernetes" class="headerlink" title="私有云中的Kubernetes"></a>私有云中的Kubernetes</h3><p><strong>内网部署Kubernetes</strong></p><p>很多企业需要内网部署Kubernetes但是内网又无法访问外网，就需要本地化部署，无忘了本地话部署主要包括两个方面，一个是软件仓库的准备，一个是Kubernetes镜像的准备。</p><ol><li>准备内网YUM仓库（略）</li><li>准备Docker Registry（请参考Harbor章节）</li><li>下载并提交镜像到Harbor中，然后将Harbor的镜像部署直接COPY到生产环境中</li></ol><p>下载脚本如下，请根据需求自行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim k8s-images.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># EVN</span><br><span class="line">ALIYUN_REG&#x3D;&quot;registry.aliyuncs.com&#x2F;google_containers&quot;</span><br><span class="line">FLANNEL_REG&#x3D;&quot;quay-mirror.qiniu.com&#x2F;coreos&quot;</span><br><span class="line">LOCAL_REG&#x3D;&quot;192.168.56.11&#x2F;kubernetes&quot;</span><br><span class="line">K8S_VER&#x3D;v1.15.5</span><br><span class="line">PAUSE_VER&#x3D;3.1</span><br><span class="line">ETCD_VER&#x3D;3.3.10</span><br><span class="line">COREDNS_VER&#x3D;1.3.1</span><br><span class="line">FLANNEL_VER&#x3D;v0.11.0-amd64</span><br><span class="line"></span><br><span class="line"># Kubernetes Docker Images</span><br><span class="line">IMAGES&#x3D;(</span><br><span class="line">  kube-proxy:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-scheduler:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-controller-manager:$&#123;K8S_VER&#125;</span><br><span class="line">  kube-apiserver:$&#123;K8S_VER&#125;</span><br><span class="line">  pause:$&#123;PAUSE_VER&#125;</span><br><span class="line">  etcd-amd64:$&#123;ETCD_VER&#125;</span><br><span class="line">  coredns:$&#123;COREDNS_VER&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for IMAGE in $&#123;IMAGES[@]&#125;</span><br><span class="line">do</span><br><span class="line">  docker pull $&#123;ALIYUN_REG&#125;&#x2F;$&#123;IMAGE&#125;</span><br><span class="line">  docker tag $&#123;ALIYUN_REG&#125;&#x2F;$&#123;IMAGE&#125; $&#123;LOCAL_REG&#125;&#x2F;$&#123;IMAGE&#125;</span><br><span class="line">  #docker push $&#123;LOCAL_REG&#125;&#x2F;$&#123;IMAGES&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># Flannel</span><br><span class="line"></span><br><span class="line">docker pull $&#123;FLANNEL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125;</span><br><span class="line">docker tag $&#123;FLANNEL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125; $&#123;LOCAL_REG&#125;&#x2F;flannel:$&#123;FLANNEL_VER&#125;</span><br></pre></td></tr></table></figure><h1 id="第五部分-将应用迁移至Kubernetes"><a href="#第五部分-将应用迁移至Kubernetes" class="headerlink" title="第五部分 将应用迁移至Kubernetes"></a>第五部分 将应用迁移至Kubernetes</h1><h1 id="6-第一步：将应用封装进容器中"><a href="#6-第一步：将应用封装进容器中" class="headerlink" title="6 第一步：将应用封装进容器中"></a>6 第一步：将应用封装进容器中</h1><h2 id="第一步：将应用封装进容器中"><a href="#第一步：将应用封装进容器中" class="headerlink" title="第一步：将应用封装进容器中"></a>第一步：将应用封装进容器中</h2><p>在之前的容器镜像实战中，我们已经学习了如何将应用容器化，这里我们将下载使用两个官方的Nginx镜像来完成接下来的实验。</p><h3 id="部署Harbor镜像仓库"><a href="#部署Harbor镜像仓库" class="headerlink" title="部署Harbor镜像仓库"></a>部署Harbor镜像仓库</h3><p>生产环境中可以使用Harbor来管理Docker镜像，请参考之前章节的内容完成Harbor镜像仓库的部署工作，并在Harbor中创建一个devopsedu的项目。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/093b4b731c05b54a1b8426e924f93d45.png" alt="img"></p><h3 id="制作实验用的Docker镜像"><a href="#制作实验用的Docker镜像" class="headerlink" title="制作实验用的Docker镜像"></a>制作实验用的Docker镜像</h3><p>这里不再演示Docker镜像的构建，直接下载两个官方镜像作为案例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker pull nginx:1.13.12</span><br><span class="line">[root@linux-node1 ~]# docker pull nginx:1.14.0</span><br></pre></td></tr></table></figure><h3 id="配置Docker仓库"><a href="#配置Docker仓库" class="headerlink" title="配置Docker仓库"></a>配置Docker仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root\@linux-node1 ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;tdimi5q1.mirror.aliyuncs.com&quot;],</span><br><span class="line">    &quot;insecure-registries&quot; : [&quot;http:&#x2F;&#x2F;192.168.56.11&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="登录Harbor镜像仓库"><a href="#登录Harbor镜像仓库" class="headerlink" title="登录Harbor镜像仓库"></a>登录Harbor镜像仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker login 192.168.56.11</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">    Configure a credential helper to remove this warning. See</span><br><span class="line">    https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;\#credentials-store</span><br><span class="line">    Login Succeeded</span><br></pre></td></tr></table></figure><h3 id="提交镜像到Registry"><a href="#提交镜像到Registry" class="headerlink" title="提交镜像到Registry"></a>提交镜像到Registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker tag nginx:1.13.12</span><br><span class="line">192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.13.12</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# docker tag nginx:1.14.0</span><br><span class="line">192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.14.0</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# docker push 192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.13.12</span><br><span class="line">[root@linux-node1 ~]# docker push 192.168.56.11&#x2F;devopsedu&#x2F;nginx:1.14.0</span><br></pre></td></tr></table></figure><p>在上面的步骤中，模拟了生产环境如何构建和提交镜像，如果对于构建和提交镜像有疑问可以复习第3章的内容。</p><h1 id="7-第二步：将容器封装到Pod中"><a href="#7-第二步：将容器封装到Pod中" class="headerlink" title="7 第二步：将容器封装到Pod中"></a>7 第二步：将容器封装到Pod中</h1><p>Pod是Kubernetes最小的管理单元，一个Pod可以代表一个运行在集群里的进程。之前是在宿主机上运行不同的进程，现在是运行不同的Pod。前面介绍过Pod是一个逻辑架构的组件，Pod里封装了一个（或者多个）应用容器，存储资源和IP地址。</p><p><strong>为什么要造一个Pod出来？</strong> 学习Kubernetes遇到的最多的名称可能就是Pod了，其它开源的容器管理平台例如Mesos直接管理和调度的是容器，但是Kubernetes确是Pod，它在容器上面做了一层封装，方便用户将一组紧耦合的容器，放置在一个共享资源的单元中。对于很多没有此类场景的初学者，可以暂时将Pod看做是容器的一个壳，你也完全可以只在Pod中运行一个容器，随着学习的深入再慢慢理解。 Kubernetes运行Pod的两种方式：</p><ul><li>Pod里只运行一个单独容器，是Kubernetes最常见的使用场景；在这种情况下，可以把Pod看做是一个单独容器的连接器，Kubernetes通过Pod去管理容器，作为使用者几乎不用关心容器。</li><li>Pod里运行多个有关系容器。例如如果使用Nginx+Tomcat运行Java应用，可以制作一个镜像里面包含了Nginx+Tomcat，也可以分别制作两个镜像Nginx镜像和Tomcat镜像，如果使用Kubernetes就需要使用Pod，如果将Nginx和Tomcat单独放在两个Pod里面来管理，就会面临很多很多问题。这个时候，就可以把这两个容器放置在一个Pod中。</li></ul><h2 id="Pod管理"><a href="#Pod管理" class="headerlink" title="Pod管理"></a>Pod管理</h2><p>在Kubernetes中使用YAML格式来描述一个Pod。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nginx-pod.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:1.13.12</span><br><span class="line">    ports:</span><br><span class="line">- containerPort: 80</span><br></pre></td></tr></table></figure><p>Pod的YAML描述内容还有很多，在使用kubeadm部署Kubernetes的时候，就是使用静态Pod的方式运行的相关服务，YAML文件存放在，当然现在很多配置还是看不懂的，带着问题继续学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# ls -l &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;</span><br><span class="line">total 16</span><br><span class="line">-rw------- 1 root root 2041 Feb 11 20:33 etcd.yaml</span><br><span class="line">-rw------- 1 root root 2700 Feb 11 20:33 kube-apiserver.yaml</span><br><span class="line">-rw------- 1 root root 2345 Feb 11 20:33 kube-controller-manager.yaml</span><br><span class="line">-rw------- 1 root root 1080 Feb 11 20:33 kube-scheduler.yaml</span><br></pre></td></tr></table></figure><p>创建Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nginx-pod.yaml </span><br><span class="line">pod &quot;nginx-pod&quot; created</span><br></pre></td></tr></table></figure><p>查看Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME                                READY     STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod                           1&#x2F;1       Running   0          49s</span><br></pre></td></tr></table></figure><p>查看Pod更多信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                                READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">nginx-pod  1&#x2F;1       Running   0          1m        10.2.53.18   192.168.56.13</span><br></pre></td></tr></table></figure><p>查看Pod详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl describe pod nginx-pod</span><br><span class="line">Name:         nginx-pod</span><br><span class="line">Namespace:    default</span><br><span class="line">Node:         192.168.56.13&#x2F;192.168.56.13</span><br><span class="line">Start Time:   Sat, 02 Jun 2018 06:42:53 +0800</span><br><span class="line">Labels:       app&#x3D;nginx</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           10.2.53.18</span><br></pre></td></tr></table></figure><p>查看Pod日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl logs pod&#x2F;nginx-pod</span><br></pre></td></tr></table></figure><p><strong>Pod中的镜像拉取策略</strong> 当kubelet尝试拉取指定的镜像时，[imagePullPolicy]和镜像的标签会生效。</p><ul><li>imagePullPolicy: IfNotPresent：仅当镜像在本地不存在时镜像才被拉取。</li><li>imagePullPolicy: Always：每次启动 pod 的时候都会拉取镜像。</li></ul><p>省略imagePullPolicy，镜像标签为:latest或被省略，Always被应用。 imagePullPolicy被省略，并且镜像的标签被指定且不是:latest，IfNotPresent被应用。 imagePullPolicy: Never：镜像被假设存在于本地。 没有尝试拉取镜像。</p><h1 id="7-3-第三步：使用Controllers管理Pod"><a href="#7-3-第三步：使用Controllers管理Pod" class="headerlink" title="7.3 第三步：使用Controllers管理Pod"></a>7.3 第三步：使用Controllers管理Pod</h1><p>在实际的生产环境中，我们其实很少单独创建Pod，而是通过控制器来进行Pod的管理，Kubernetes提供了很多的控制器，一个 Controllers 可以创建和管理很多个 Pod, 也提供复制、初始化，以及提供集群范围的自我恢复的功能。比如说： 如果一个节点宕机，Controller 将调度一个在其他节点上完全相同的 pod 来自动取代当前的 pod。</p><h1 id="8-1-Replication-Controller控制器"><a href="#8-1-Replication-Controller控制器" class="headerlink" title="8.1 Replication Controller控制器"></a>8.1 Replication Controller控制器</h1><h1 id="8-2-Replica-Sets控制器"><a href="#8-2-Replica-Sets控制器" class="headerlink" title="8.2 Replica Sets控制器"></a>8.2 Replica Sets控制器</h1><h1 id="8-3-Deployment控制器"><a href="#8-3-Deployment控制器" class="headerlink" title="8.3 Deployment控制器"></a>8.3 Deployment控制器</h1><h1 id="8-4-DaemonSet控制器"><a href="#8-4-DaemonSet控制器" class="headerlink" title="8.4 DaemonSet控制器"></a>8.4 DaemonSet控制器</h1><p>DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。 使用 DaemonSet 的一些典型用法：</p><ul><li>运行集群存储 daemon，例如在每个 Node 上运行 glusterd、ceph。</li><li>在每个 Node 上运行日志收集 daemon，例如filebeat、logstash。</li><li>在每个 Node 上运行监控 daemon，例如 Prometheus Node Exporter、collectd、Datadog 代理、Zabbix Agent。</li></ul><p><strong>创建DaemonSet</strong></p><p>DaemonSet的描述文件和Deployment非常相似，只需要修改Kind，并去掉副本数量的配置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 example]# vim nginx-daemonset.yaml</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-daemonset</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>查看Pod在Node上的分布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod -o wide</span><br><span class="line">NAME                    READY     STATUS    RESTARTS   AGE       IP           NODE</span><br><span class="line">nginx-daemonset-hk28q   1&#x2F;1       Running   0          1m        10.2.56.10   192.168.56.12</span><br><span class="line">nginx-daemonset-wtt68   1&#x2F;1       Running   0          1m        10.2.53.10   192.168.56.13</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get daemonset</span><br><span class="line">NAME              DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">nginx-daemonset   2         2         2         2            2           &lt;none&gt;          1m</span><br></pre></td></tr></table></figure><h1 id="7-4-第四步：使用Service管理Pod访问"><a href="#7-4-第四步：使用Service管理Pod访问" class="headerlink" title="7.4 第四步：使用Service管理Pod访问"></a>7.4 第四步：使用Service管理Pod访问</h1><p>在上面的小节，我们通过Deployment可以为一个应用创建多个Pod，而且可以动态的进行增加、或者删除多余的Pod，Kubernetes Pod 是有生命周期的，它们可以被创建，也可以被销毁，但是每次Pod的IP地址就会发生变化，外面如何访问到该Pod呢？总不能每次Pod重启就修改访问的IP地址吧。 每个 Pod 都会获取它自己的 IP 地址，但是每次即使这些 IP 地址不总是稳定可依赖的。 这会导致一个问题：在 Kubernetes 集群中，如果一组 Pod（称为 backend）为其它 Pod （称为 frontend）提供服务，那么那些 frontend 该如何发现，并连接到这组 Pod 中的哪些 backend 呢？</p><h1 id="9-1-Service介绍和管理"><a href="#9-1-Service介绍和管理" class="headerlink" title="9.1 Service介绍和管理"></a>9.1 Service介绍和管理</h1><h3 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h3><p>继续我们Nginx的案例，我们为之前的应用创建一个Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat nginx-service.yaml </span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br></pre></td></tr></table></figure><ul><li>第1行：定义资源类型为Service</li><li>第2行：定义当前Service API的版本</li><li>第3行：metadata设置</li><li>第4行：设置Service的名称为nginx-service</li><li>第5行：spec: 开始设置Service的内容</li><li>第6行：selector: 为该Service指定一个匹配的标签</li><li>第7行：app: nginx 所有带有标签app ：nginx的Pod将使用该Service</li><li>第8行：ports: 指定Service需要对外的端口</li><li>第9行：设置端口协议：支持TCP和UDP</li><li>第10行：设置Service的端口</li><li>第11行：设置Pod的端口，Kubernetes会将发送给Service端口的连接，转发到Pod的端口上。</li></ul><p>创建Nginx Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nginx-service.yaml </span><br><span class="line">service &quot;nginx-service&quot; created</span><br></pre></td></tr></table></figure><p>查看Nginx Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service</span><br><span class="line">NAME            TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes      ClusterIP   10.1.0.1      &lt;none&gt;        443&#x2F;TCP   7h</span><br><span class="line">nginx-service   ClusterIP   10.1.184.53   &lt;none&gt;        80&#x2F;TCP    25s</span><br></pre></td></tr></table></figure><p>访问Servce IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# curl --head 10.1.181.45</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.11.10</span><br><span class="line">Date: Tue, 21 Feb 2017 08:20:42 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 612</span><br><span class="line">Last-Modified: Tue, 14 Feb 2017 15:36:04 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: &quot;58a323e4-264&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><h1 id="9-2-Service和Endpoint"><a href="#9-2-Service和Endpoint" class="headerlink" title="9.2 Service和Endpoint"></a>9.2 Service和Endpoint</h1><p>Service作为Kubernetes中为Pod实现负载均衡的组件，几乎在所有的文章中为了方便初学者理解，基本上说的是Service会来监听Pod的变化，然后来更新Pod的IP地址。其实这个事情不是Service干的，而是有一个幕后英雄：Endpoint Endpoints表示了一个Service对应的所有Pod副本的访问地址，而Endpoints Controller负责生成和维护所有Endpoints对象的控制器。它负责监听Service和对应的Pod副本的变化。</p><ul><li>如果监测到Service被删除，则删除和该Service同名的Endpoints对象；</li><li>如果监测到新的Service被创建或修改，则根据该Service信息获得相关的Pod列表，然后创建或更新Service对应的Endpoints对象。</li><li>如果监测到Pod的事件，则更新它对应的Service的Endpoints对象。</li></ul><p>kube-proxy进程获取每个Service的Endpoints，实现Service的负载均衡功能。</p><h3 id="创建一个Headless-Service"><a href="#创建一个Headless-Service" class="headerlink" title="创建一个Headless Service"></a>创建一个Headless Service</h3><p>编写一个Service不使用clusterip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat mysql-service.yaml </span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">  clusterIP: None</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl create -f mysql-service.yaml </span><br><span class="line">service &quot;mysql-service&quot; created</span><br></pre></td></tr></table></figure><p>查看Service，可以放心CLUSTER-IP为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get service mysql-service</span><br><span class="line">NAME            TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">mysql-service   ClusterIP   None         &lt;none&gt;        3306&#x2F;TCP   17s</span><br></pre></td></tr></table></figure><p>2.创建一个Endpoint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim mysql-endpoint.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line"> name: mysql-service</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 192.168.56.13</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl create -f mysql-endpoint.yaml </span><br><span class="line">endpoints &quot;mysql-service&quot; created</span><br></pre></td></tr></table></figure><p>3.查看Service和Endpoint的关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get ep mysql-service</span><br><span class="line">NAME            ENDPOINTS            AGE</span><br><span class="line">mysql-service   192.168.56.13:3306   42s</span><br><span class="line">[root@linux-node1 ~]# kubectl describe svc mysql-service</span><br><span class="line">Name:              mysql-service</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          &lt;none&gt;</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                None</span><br><span class="line">Port:              &lt;unset&gt;  3306&#x2F;TCP</span><br><span class="line">TargetPort:        3306&#x2F;TCP</span><br><span class="line">Endpoints:         192.168.56.13:3306</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><h1 id="7-5-第五步：使用Ingress提供外部访问"><a href="#7-5-第五步：使用Ingress提供外部访问" class="headerlink" title="7.5 第五步：使用Ingress提供外部访问"></a>7.5 第五步：使用Ingress提供外部访问</h1><p>通过Service可以将Kubernetes集群中的服务以IP：Port的方式暴露出来，我们称之为4层的负载均衡，因为这个是OSI七层模型中传输层的功能。</p><p>那么如何实现七层的负载均衡呢，例如像Nginx那样，可以灵活的进行反向代理的设置，根据不同的URL进行转发等，难道我需要自己部署一个Nginx来做这个事情吗？首先，如果你有这个想法，并没有错，甚至你完全可以自己独立部署一个Nginx来完成，但是Kubernetes提供了更好的解决方案就是Ingress。 Ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转发到不同的service上。ingress相当于nginx反向代理服务器，它包括的规则定义就是URL的路由信息。</p><h2 id="10-1-Ingress-Controller"><a href="#10-1-Ingress-Controller" class="headerlink" title="10.1 Ingress Controller"></a>10.1 Ingress Controller</h2><p>在学习Service的时候，我们知道最终的负载均衡由kube-proxy和LVS来完成，那么Ingress靠什么来实现7层的路由机制呢？答案是Ingress Controller。</p><p>Ingress Controller 实质上可以理解为是个监视器，Ingress Controller 通过不断地跟 kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如新增和减少 pod，service 增加与减少等；当得到这些变化信息后，Ingress Controller 再结合下文的 Ingress 生成配置，然后更新反向代理负载均衡器，并刷新其配置，达到服务发现的作用。</p><p>Ingress Controller目前有两大开源项目，一个是Nginx Controller，一个是目前比较流行的Traefik，Traefik是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置。目前支持Docker, Swarm, Mesos/Marathon, Mesos, Kubernetes, Consul, Etcd, Zookeeper, BoltDB, Rest API等等后端模型。</p><h2 id="Ingress-Controller-Traefik"><a href="#Ingress-Controller-Traefik" class="headerlink" title="Ingress Controller Traefik"></a>Ingress Controller Traefik</h2><h3 id="部署Treafik"><a href="#部署Treafik" class="headerlink" title="部署Treafik"></a>部署Treafik</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl label nodes 192.168.56.12 edgenode&#x3D;true</span><br><span class="line">node &quot;192.168.56.12&quot; labeled</span><br><span class="line">[root@linux-node1 ~]# kubectl create -f &#x2F;srv&#x2F;addons&#x2F;ingress&#x2F;</span><br></pre></td></tr></table></figure><h1 id="11-第六步：使用PV和PVC管理数据存储"><a href="#11-第六步：使用PV和PVC管理数据存储" class="headerlink" title="11 第六步：使用PV和PVC管理数据存储"></a>11 第六步：使用PV和PVC管理数据存储</h1><p>截止目前我们所启动Pod的容器中的数据存储都是临时的，因此Pod重启或者被删除的时候，产生在容器中的数据会发生丢失。实际应用中，我们有些应用是无状态，有些应用则需要保持状态数据，确保Pod重启之后能够读取到之前的状态数据，有些应用则作为集群提供服务。这三种服务归纳为无状态服务、有状态服务以及有状态的集群服务，其中后面两个存在数据保存与共享的需求，因此就要采用容器外的存储方案。 Kubernetes中存储中有四个重要的概念：Volume、PersistentVolume（PV）、PersistentVolumeClaim （PVC）、StorageClass。掌握了这四个概念，就掌握了Kubernetes中存储系统的核心。</p><h1 id="11-1-Kubernetes-Volume"><a href="#11-1-Kubernetes-Volume" class="headerlink" title="11.1 Kubernetes Volume"></a>11.1 Kubernetes Volume</h1><h1 id="11-2-PersistentVolume（PV）"><a href="#11-2-PersistentVolume（PV）" class="headerlink" title="11.2 PersistentVolume（PV）"></a>11.2 PersistentVolume（PV）</h1><p>PersistentVolume（PV）是由管理员设置的存储，它是群集的一部分。就像节点是集群中的资源一样，PV 也是集群中的资源。 PV 是 Volume 之类的卷插件，但具有独立于使用 PV 的 Pod 的生命周期。此 API 对象包含存储实现的细节，即 NFS、iSCSI 或特定于云供应商的存储系统。</p><p><strong>1.安装并配置NFS</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# yum install -y nfs-utils rpcbind</span><br><span class="line">[root@linux-node1 ~]# mkdir -p &#x2F;data&#x2F;k8s-nfs</span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;exports</span><br><span class="line">&#x2F;data&#x2F;k8s-nfs *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>启动NFS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable rpcbind nfs</span><br><span class="line">[root@linux-node1 ~]# systemctl start rpcbind nfs</span><br></pre></td></tr></table></figure><p><strong>2.创建并查看PV</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nfs-pv.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-demo</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">storage: 1Gi</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">  storageClassName: nfs</span><br><span class="line">  nfs:</span><br><span class="line">    path: &#x2F;data&#x2F;k8s-nfs&#x2F;pv-demo</span><br><span class="line">    server: 192.168.56.11</span><br><span class="line">[root@linux-node1 ~]# kubectl create -f nfs-pv.yaml </span><br><span class="line">persistentvolume &quot;pv-demo&quot; created</span><br></pre></td></tr></table></figure><p>查看创建的PV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pv</span><br><span class="line">NAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM     STORAGECLASS   REASON    AGE</span><br><span class="line">pv-demo   1Gi        RWO            Recycle          Available             nfs                      15s</span><br></pre></td></tr></table></figure><h1 id="11-3-PersistentVolumeClaim（PVC）"><a href="#11-3-PersistentVolumeClaim（PVC）" class="headerlink" title="11.3 PersistentVolumeClaim（PVC）"></a>11.3 PersistentVolumeClaim（PVC）</h1><p>PersistentVolumeClaim（PVC）是用户存储的请求。它与 Pod 相似。Pod 消耗节点资源，PVC 消耗 PV 资源。Pod 可以请求特定级别的资源（CPU 和内存）。声明可以请求特定的大小和访问模式（例如，可以以读/写一次或 只读多次模式挂载）。</p><p>1.创建PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nfs-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc-demo</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi</span><br><span class="line">  storageClassName: nfs</span><br></pre></td></tr></table></figure><p>创建并查看PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl create -f nfs-pvc.yaml </span><br><span class="line">persistentvolumeclaim &quot;pvc-demo&quot; created</span><br><span class="line">[root@linux-node1 ~]# kubectl get pvc</span><br><span class="line">NAME       STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pvc-demo   Bound     pv-demo   1Gi        RWO            nfs            6s</span><br></pre></td></tr></table></figure><p>2.使用PVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim nginx-deployment-pvc.yaml</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &quot;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&quot;</span><br><span class="line">          name: pvc-demo</span><br><span class="line">      volumes:</span><br><span class="line">      - name: pvc-demo</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: pvc-demo</span><br></pre></td></tr></table></figure><h1 id="11-4-StorageClass"><a href="#11-4-StorageClass" class="headerlink" title="11.4 StorageClass"></a>11.4 StorageClass</h1><h1 id="7-第七步：使用Rancher管理Kubernetes集群"><a href="#7-第七步：使用Rancher管理Kubernetes集群" class="headerlink" title="7 第七步：使用Rancher管理Kubernetes集群"></a>7 第七步：使用Rancher管理Kubernetes集群</h1><p>现在我们已经具备把应用迁移到Kubernetes中来的能力，那么现在，迁移后，日常的运维工作就发生的变化，截止目前，在生产环境中，我们很少使用官方自带的Dashbaord来完成日常的运维工作，而是使用第三方的运维工具Rancher。</p><h2 id="7-1-Rancher快速入门"><a href="#7-1-Rancher快速入门" class="headerlink" title="7.1 Rancher快速入门"></a>7.1 Rancher快速入门</h2><p>快速部署单机版Rancher</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# mkdir &#x2F;opt&#x2F;rancher</span><br><span class="line">[root@linux-node1 ~]# docker run -d --restart&#x3D;unless-stopped -v &#x2F;opt&#x2F;rancher:&#x2F;var&#x2F;lib&#x2F;rancher&#x2F; -p 80:80 -p 443:443 rancher&#x2F;rancher</span><br></pre></td></tr></table></figure><h2 id="7-2-使用Rancher进行日常管理"><a href="#7-2-使用Rancher进行日常管理" class="headerlink" title="7.2 使用Rancher进行日常管理"></a>7.2 使用Rancher进行日常管理</h2><h2 id="7-3-Rancher生产集群部署"><a href="#7-3-Rancher生产集群部署" class="headerlink" title="7.3 Rancher生产集群部署"></a>7.3 Rancher生产集群部署</h2><h1 id="第六部分-管理Kubernetes中的应用"><a href="#第六部分-管理Kubernetes中的应用" class="headerlink" title="第六部分 管理Kubernetes中的应用"></a>第六部分 管理Kubernetes中的应用</h1><h1 id="13-应用的资源限制和健康检查"><a href="#13-应用的资源限制和健康检查" class="headerlink" title="13 应用的资源限制和健康检查"></a>13 应用的资源限制和健康检查</h1><h1 id="13-1-应用的资源限制"><a href="#13-1-应用的资源限制" class="headerlink" title="13.1 应用的资源限制"></a>13.1 应用的资源限制</h1><h1 id="13-2-应用的健康检查"><a href="#13-2-应用的健康检查" class="headerlink" title="13.2 应用的健康检查"></a>13.2 应用的健康检查</h1><h3 id="Liveness探测"><a href="#Liveness探测" class="headerlink" title="Liveness探测"></a>Liveness探测</h3><p>Kubernetes有两种探测机制，Liveness和Readiness，配置都是相似的，只是实现的功能不同。 Liveness探测是针对Pod健康状态的探测，类似于集群中的健康检查，用户可以自定义这个健康检查的条件，如果探测失败，Kubernetes将会重启容器。 如果您希望容器在探测失败时被杀死并重新启动，那么请指定一个Liveness配置，并指定restartPolicy 为 Always 或 OnFailure。 配置案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">livenessProbe:</span><br><span class="line">exec:</span><br><span class="line">    command:</span><br><span class="line">    - ps aux | grep nginx</span><br><span class="line">initialDelaySeconds: 10</span><br><span class="line">periodSeconds: 5</span><br><span class="line">timeoutSeconds: 3</span><br></pre></td></tr></table></figure><h3 id="Readiness探测"><a href="#Readiness探测" class="headerlink" title="Readiness探测"></a>Readiness探测</h3><p>Readiness探测是探测Pod是否准备好对外提供访问，例如我们在Pod里面运行一个Tomcat的容器，里面运行了一个Jenkins的应用，那么等Jenkins完全启动能提供服务可能需要1分钟，所以在在1分钟之前是不能提供给用户访问的，也就是不能加入Service的负载均衡中，这个就靠Readiness探测来控制。 Readiness用来控制告诉Kubernetes什么时间可以将容器加入到Service的负载均衡中，配置方法和Liveness一样，只需要修改livennessProbe替换为readinessProbe即可。</p><h2 id="健康检查的方法"><a href="#健康检查的方法" class="headerlink" title="健康检查的方法"></a>健康检查的方法</h2><p>Kubernetes的健康检查是由运行在各个Node上的kubelet来完成的，kubelet目前支持以下三种健康检查的方法：</p><ul><li>ExecAction：在容器中执行指定的命令。如果命令退出时状态码为0，则认为诊断成功。</li><li>TCPSocketAction:对指定端口上容器的IP地址执行TCP检查。如果端口是打开的，则认为诊断是成功的。</li><li>HTTPGetAction:对指定端口和路径上容器的IP地址执行HTTP Get请求。如果响应的状态码大于或等于200，小于400，则认为诊断是成功的。</li></ul><p>以上三种健康检查的方法会有三种返回结果：</p><ul><li><p>Success：成功，容器通过诊断。</p></li><li><p>Failure：失败，容器诊断失败。</p></li><li><p>Unknown：探测失败，无法执行探测，所以不应该采取任何行动。</p><p>针对于探针有以下配置参数，需要注意不管是Liveness还是Readiness探测，探针的使用都是相同的，唯一的不同是探测完毕后，执行操作的不同。</p></li><li><p>initialDelaySeconds: 探测的延迟时间，单位是秒。也就是说在容器启动多少秒之后开始进行第一次探测，例如你启动一个Java的应用需要50秒，那么这个值就需要大于50s。所以这个值是需要根据应用的具体情况来设置。</p></li><li><p>periodSeconds：探测执行的周期时间，单位是秒。是指每隔多长时间执行一次探测，频率越高，发现故障的时间也就越短，并不是越短越好。如果应用服务不够稳定，太高的频率反而会导致很多你认为的“误报”。默认是10秒，最小值是1秒。</p></li><li><p>timeoutSeconds: 探测超时时间，单位是秒，执行探测如果超过这个时间没有返回结果，变意味着探测的结果是失败。默认为1秒。最小值是1秒。</p></li><li><p>failureThreshold：探测成功后，最少连续探测失败多少次才被认定为失败。这个是Kubernetes将在放弃之前尝试失败阈值时间。放弃生命探测意味着重新启动Pod。一旦准备就绪，Pod将被标记为未准备就绪。默认为3。最小值是1。</p></li><li><p>successThreshold: 在探测失败后，最少连续探测成功多少次才被认定为成功。默认为1，也就是必须探测成功1次，才能认为状态恢复，最小值是1。</p><h1 id="管理应用的DNS访问"><a href="#管理应用的DNS访问" class="headerlink" title="管理应用的DNS访问"></a>管理应用的DNS访问</h1></li></ul><h1 id="14-1-Kubernetes中的DNS"><a href="#14-1-Kubernetes中的DNS" class="headerlink" title="14.1 Kubernetes中的DNS"></a><a href="http://k8s.unixhot.com/">14.1 Kubernetes中的DNS</a></h1><h1 id="应用的DNS管理"><a href="#应用的DNS管理" class="headerlink" title="应用的DNS管理"></a>应用的DNS管理</h1><h3 id="Pod的域名解析策略"><a href="#Pod的域名解析策略" class="headerlink" title="Pod的域名解析策略"></a>Pod的域名解析策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl run dns-test --generator&#x3D;run-pod&#x2F;v1 --image&#x3D;alpine --replicas&#x3D;1 sleep 360000</span><br><span class="line">pod&#x2F;dns-test created</span><br></pre></td></tr></table></figure><p>查看Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod dns-test</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">dns-test   1&#x2F;1     Running   0          79s</span><br></pre></td></tr></table></figure><p>Pod默认的DNS配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl exec -it dns-test &#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F; # cat &#x2F;etc&#x2F;resolv.conf </span><br><span class="line">nameserver 10.1.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br></pre></td></tr></table></figure><p>如何访问Service名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F; # ping -c 3 wordpress-service.default.svc.cluster.local</span><br><span class="line">PING wordpress-service.default.svc.cluster.local (10.1.92.244): 56 data bytes</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.074 ms</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.141 ms</span><br><span class="line">64 bytes from 10.1.92.244: seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.187 ms</span><br><span class="line"></span><br><span class="line">--- wordpress-service.default.svc.cluster.local ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min&#x2F;avg&#x2F;max &#x3D; 0.074&#x2F;0.134&#x2F;0.187 ms</span><br></pre></td></tr></table></figure><p>DNS查询策略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod dns-test -o yaml | grep dnsPolicy</span><br><span class="line">  dnsPolicy: ClusterFirst</span><br></pre></td></tr></table></figure><ul><li>Default: Pod从其运行的节点中继承名称解析配置。</li><li>ClusterFirst:（默认策略）与配置的群集域名后缀不匹配的任何DNS查询都将转发到从节点继承的上游名称服务器。</li><li>ClusterFirstWithHostNet: 如果Pod使用了hostNetwork（例如Ingress Controller Treafik就是使用了hostNetwok），应显式设置其DNS策略为“ClusterFirstWithHostNet”。</li><li>None: 它允许Pod忽略Kubernetes环境中的DNS设置，这时候会使用Pod Spec中的dnsConfig字段提供的DNS设置。</li></ul><h2 id="应用的DNS管理-1"><a href="#应用的DNS管理-1" class="headerlink" title="应用的DNS管理"></a>应用的DNS管理</h2><h2 id="15-1-使用ConfigMap管理应用配置"><a href="#15-1-使用ConfigMap管理应用配置" class="headerlink" title="15.1 使用ConfigMap管理应用配置"></a>15.1 使用ConfigMap管理应用配置</h2><h3 id="通过kubectl命令创建ConfigMap"><a href="#通过kubectl命令创建ConfigMap" class="headerlink" title="通过kubectl命令创建ConfigMap"></a>通过kubectl命令创建ConfigMap</h3><p><strong>创建一个名称为cmd-config的ConfigMap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap cmd-config --from-literal&#x3D;host&#x3D;www.unixhot.com</span><br><span class="line">configmap&#x2F;cmd-config created</span><br></pre></td></tr></table></figure><p><strong>查看ConfigMap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap</span><br><span class="line">NAME         DATA   AGE</span><br><span class="line">cmd-config   1      63s</span><br></pre></td></tr></table></figure><p><strong>查看ConfigMap内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe configmap cmd-config</span><br><span class="line">Name:         cmd-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">host:</span><br><span class="line">----</span><br><span class="line">www.unixhot.com</span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>ConfigMap中包含多个键值对</strong> 可以多次使用–from-literal为一个ConfigMap创建多个键值对，中间用空格分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap mcmd-config --from-literal&#x3D;host&#x3D;www.unixhot.com --from-literal&#x3D;port&#x3D;443 --from-literal&#x3D;ssl&#x3D;on</span><br><span class="line">configmap&#x2F;mcmd-config created</span><br></pre></td></tr></table></figure><h3 id="通过YAML文件创建ConfigMap"><a href="#通过YAML文件创建ConfigMap" class="headerlink" title="通过YAML文件创建ConfigMap"></a>通过YAML文件创建ConfigMap</h3><p>查看已创建的ConfigMap生成的YAML文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap mcmd-config -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  host: www.unixhot.com</span><br><span class="line">  port: &quot;443&quot;</span><br><span class="line">  ssl: &quot;on&quot;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2019-11-05T01:45:13Z&quot;</span><br><span class="line">  name: mcmd-config</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: &quot;5394993&quot;</span><br><span class="line">  selfLink: &#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;default&#x2F;configmaps&#x2F;mcmd-config</span><br><span class="line">  uid: 02012d69-e324-4e9d-ba04-7132e9f6ecd8</span><br></pre></td></tr></table></figure><p>只需要将metadata中无需指定的字段去掉即可生成一个YAML文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get configmap mcmd-config -o yaml &gt; mcmd-config-v2.yaml</span><br><span class="line">[root@k8s-master1 ~]# vim mcmd-config-v2.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  host: www.unixhot.com</span><br><span class="line">  port: &quot;443&quot;</span><br><span class="line">  ssl: &quot;on&quot;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: mcmd-config-v2</span><br><span class="line">  namespace: default</span><br></pre></td></tr></table></figure><p>注意需要修改metadata.name,修改完毕后直接创建即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create -f mcmd-config-v2.yaml </span><br><span class="line">configmap&#x2F;mcmd-config-v2 created</span><br><span class="line">[root@k8s-master1 ~]# kubectl get configmap</span><br><span class="line">NAME             DATA   AGE</span><br><span class="line">cmd-config       1      24m</span><br><span class="line">mcmd-config      3      16m</span><br><span class="line">mcmd-config-v2   3      9s</span><br></pre></td></tr></table></figure><h3 id="通过文件创建ConfigMap"><a href="#通过文件创建ConfigMap" class="headerlink" title="通过文件创建ConfigMap"></a>通过文件创建ConfigMap</h3><p>ConfigMap除了可以存储单个或者多个键值对之外，可以存储完整的配置文件，将单个配置文件直接转换为ConfigMap在生产中十分常用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap file-config --from-file&#x3D;&#x2F;etc&#x2F;hosts</span><br><span class="line">configmap&#x2F;file-config created</span><br></pre></td></tr></table></figure><p>可以看到ConfigMap直接存储了文件的内容，Key名称为文件名hosts，也可以手动指定Key的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe configmap file-config</span><br><span class="line">Name:         file-config</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">hosts:</span><br><span class="line">----</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.99.27 k8s-master1 k8s-master1.dianjoy.com </span><br><span class="line">192.168.99.28 k8s-master2 k8s-master2.dianjoy.com</span><br><span class="line">192.168.99.29 k8s-master3 k8s-master3.dianjoy.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><p>将Key手动指定为host-hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap file-config-v2 --from-file&#x3D;host-hosts&#x3D;&#x2F;etc&#x2F;hosts</span><br><span class="line">configmap&#x2F;file-config-v2 created</span><br><span class="line">[root@k8s-master1 ~]# kubectl describe configmap file-config-v2</span><br><span class="line">Name:         file-config-v2</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">host-hosts:</span><br><span class="line">----</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.99.27 k8s-master1 k8s-master1.dianjoy.com </span><br><span class="line">192.168.99.28 k8s-master2 k8s-master2.dianjoy.com</span><br><span class="line">192.168.99.29 k8s-master3 k8s-master3.dianjoy.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="从目录创建ConfigMap"><a href="#从目录创建ConfigMap" class="headerlink" title="从目录创建ConfigMap"></a>从目录创建ConfigMap</h3><p>ConfigMap还支持通过目录创建，kubectl会为目录中的每个文件单独创建条目，需要注意的是如果目录下面包含子目录，会忽略这些子目录和子目录里面的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap dir-config --from-file&#x3D;&#x2F;etc&#x2F;kubernetes</span><br><span class="line">configmap&#x2F;dir-config created</span><br></pre></td></tr></table></figure><h3 id="混合选项创建ConfigMap"><a href="#混合选项创建ConfigMap" class="headerlink" title="混合选项创建ConfigMap"></a>混合选项创建ConfigMap</h3><p>同时使用命令行、文件、目录创建ConfigMap也是支持的，只需要使用不同的选项即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl create configmap mycp --from-literal&#x3D;env&#x3D;test \</span><br><span class="line"> --from-file&#x3D;&#x2F;etc&#x2F;hosts \</span><br><span class="line"> --from-file&#x3D;myhosts&#x3D;&#x2F;etc&#x2F;hosts \</span><br><span class="line"> --from-file&#x3D;&#x2F;etc&#x2F;kubernetes</span><br><span class="line">configmap&#x2F;mycp created</span><br></pre></td></tr></table></figure><p>ConfigMap的内容可以通过环境变量的形成传递给容器，也可通过和Volume的形式挂载到容器中。</p><h3 id="通过环境变量给容器传递ConfigMap"><a href="#通过环境变量给容器传递ConfigMap" class="headerlink" title="通过环境变量给容器传递ConfigMap"></a>通过环境变量给容器传递ConfigMap</h3><p>可以将ConfigMap中的键值对数据通过环境变量的形式传递到容器中，这样在配置容器的时候有一些数据可以使用环境变量，然后使用ConfigMap进行填充，这样就可以实现配置和Pod的分离。</p><h2 id="15-2-使用Secret管理敏感数据"><a href="#15-2-使用Secret管理敏感数据" class="headerlink" title="15.2 使用Secret管理敏感数据"></a>15.2 使用Secret管理敏感数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在应用启动过程中经常会有一些敏感信息需要存储，例如用户名和密码等，如果直接明文的方式保存会有安全风险。在Kubernetes中Secret这个资源对象类型用来保存敏感信息，例如密码、密钥、访问令牌、SSH Key等你认为需要保密的敏感信息。相对于将这些内容保存到容器镜像或者Pod的定义文件中，更加的灵活和安全。</span><br></pre></td></tr></table></figure><h3 id="配置Pod使用Harbor镜像"><a href="#配置Pod使用Harbor镜像" class="headerlink" title="配置Pod使用Harbor镜像"></a>配置Pod使用Harbor镜像</h3><p>1．docker login得到 docker密码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# docker login 192.168.56.11</span><br></pre></td></tr></table></figure><p>2.对密码文件进行加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cat &#x2F;root&#x2F;.docker&#x2F;config.json |base64</span><br></pre></td></tr></table></figure><p>3.创建harbor使用的Secret YAML文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim harbor-secret.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: harbor-secret</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: &#39;ewoJImF1dGhzIjogewoJCSJyZWcuZ3JlYXRvcHMubmV0IjogewoJCQkiYXV0aCI6ICJZV1J0YVc0Nk1YRmhlbmh6ZHpJPSIKCQl9Cgl9Cn0&#x3D;&#39;</span><br><span class="line">type: kubernetes.io&#x2F;dockerconfigjson</span><br></pre></td></tr></table></figure><p>4.创建Secret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins k8s-deploy]# kubectl create -f reg-harbor.yaml </span><br><span class="line">secret &quot;reg-harbor&quot; created</span><br></pre></td></tr></table></figure><p>5.创建pod并挂载资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: sectest</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: sectest</span><br><span class="line">    image: 123.207.154.16&#x2F;base&#x2F;redis:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 6379</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: harbor-secret</span><br></pre></td></tr></table></figure><h1 id="使用Helm管理Kubernetes应用"><a href="#使用Helm管理Kubernetes应用" class="headerlink" title="使用Helm管理Kubernetes应用"></a>使用Helm管理Kubernetes应用</h1><p>通过前面的学习，掌握了将应用迁移至Kubernetes的步骤和技巧，过程比较艰辛。例如我们创建一个应用，涉及到Deployment、Service、Ingress、PV、PVC，如何有效的管理这些资源呢，Kubernetes给出了一个最佳实践就是Helm。 Helm是一个kubernetes应用的包管理工具，用来管理charts——预先配置好的安装包资源，有点类似于Ubuntu的APT和CentOS中的yum。 Helm chart是用来封装kubernetes原生应用程序的yaml文件，可以在你部署应用的时候自定义应用程序的一些metadata，便与应用程序的分发。</p><p>Helm和charts的主要作用：</p><ul><li>应用程序封装</li><li>版本管理</li><li>依赖检查</li><li>便于应用程序分发</li></ul><h2 id="Helm部署"><a href="#Helm部署" class="headerlink" title="Helm部署"></a>Helm部署</h2><h3 id="安装Helm"><a href="#安装Helm" class="headerlink" title="安装Helm"></a>安装Helm</h3><p>1.部署Helm客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">[root@linux-node1 src]# wget https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v3.0.2-linux-amd64.tar.gz</span><br><span class="line">[root@linux-node1 src]# tar zxf helm-v3.0.2-linux-amd64.tar.gz</span><br><span class="line">[root@linux-node1 src]# mv linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>2.验证安装是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm version</span><br><span class="line">version.BuildInfo&#123;Version:&quot;v3.0.2&quot;, GitCommit:&quot;19e47ee3283ae98139d98460de796c1be1e3975f&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.13.5&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Helm部署第一个应用"><a href="#使用Helm部署第一个应用" class="headerlink" title="使用Helm部署第一个应用"></a>使用Helm部署第一个应用</h3><p>4.搜索Helm应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm search jenkins</span><br><span class="line">NAME              CHART VERSION    APP VERSION    DESCRIPTION                                       </span><br><span class="line">stable&#x2F;jenkins    0.13.5           2.73           Open source continuous integration server. It s...</span><br></pre></td></tr></table></figure><p>5.查看仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm repo list</span><br><span class="line">NAME      URL                                                   </span><br><span class="line">stable    https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts</span><br><span class="line">local     http:&#x2F;&#x2F;127.0.0.1:8879&#x2F;charts</span><br></pre></td></tr></table></figure><p>6.安装第一个应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm install stable&#x2F;jenkins</span><br><span class="line">NAME:   viable-seal</span><br><span class="line">LAST DEPLOYED: Thu Jul 26 19:21:07 2018</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;ConfigMap</span><br><span class="line">NAME                       DATA  AGE</span><br><span class="line">viable-seal-jenkins        3     1s</span><br><span class="line">viable-seal-jenkins-tests  1     1s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;PersistentVolumeClaim</span><br><span class="line">NAME                 STATUS   VOLUME  CAPACITY  ACCESS MODES  STORAGECLASS  AGE</span><br><span class="line">viable-seal-jenkins  Pending  1s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Service</span><br><span class="line">NAME                       TYPE          CLUSTER-IP   EXTERNAL-IP  PORT(S)         AGE</span><br><span class="line">viable-seal-jenkins-agent  ClusterIP     10.1.154.54  &lt;none&gt;       50000&#x2F;TCP       1s</span><br><span class="line">viable-seal-jenkins        LoadBalancer  10.1.63.24   &lt;pending&gt;    8080:20031&#x2F;TCP  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1beta1&#x2F;Deployment</span><br><span class="line">NAME                 DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">viable-seal-jenkins  1        1        1           0          0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Pod(related)</span><br><span class="line">NAME                                  READY  STATUS   RESTARTS  AGE</span><br><span class="line">viable-seal-jenkins-7f5c7bd8d4-gc5hv  0&#x2F;1    Pending  0         0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Secret</span><br><span class="line">NAME                 TYPE    DATA  AGE</span><br><span class="line">viable-seal-jenkins  Opaque  2     1s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">1. Get your &#39;admin&#39; user password by running:</span><br><span class="line">  printf $(kubectl get secret --namespace default viable-seal-jenkins -o jsonpath&#x3D;&quot;&#123;.data.jenkins-admin-password&#125;&quot; | base64 --decode);echo</span><br><span class="line">2. Get the Jenkins URL to visit by running these commands in the same shell:</span><br><span class="line">  NOTE: It may take a few minutes for the LoadBalancer IP to be available.</span><br><span class="line">        You can watch the status of by running &#39;kubectl get svc --namespace default -w viable-seal-jenkins&#39;</span><br><span class="line">  export SERVICE_IP&#x3D;$(kubectl get svc --namespace default viable-seal-jenkins --template &quot;&#123;&#123; range (index .status.loadBalancer.ingress 0) &#125;&#125;&#123;&#123; . &#125;&#125;&#123;&#123; end &#125;&#125;&quot;)</span><br><span class="line">  echo http:&#x2F;&#x2F;$SERVICE_IP:8080&#x2F;login</span><br><span class="line"></span><br><span class="line">3. Login with the password from step 1 and the username: admin</span><br><span class="line"></span><br><span class="line">For more information on running Jenkins on Kubernetes, visit:</span><br><span class="line">https:&#x2F;&#x2F;cloud.google.com&#x2F;solutions&#x2F;jenkins-on-container-engine</span><br></pre></td></tr></table></figure><h1 id="15-2-深入理解Helm"><a href="#15-2-深入理解Helm" class="headerlink" title="15.2 深入理解Helm"></a>15.2 深入理解Helm</h1><h3 id="Helm组件"><a href="#Helm组件" class="headerlink" title="Helm组件"></a>Helm组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# tree ~&#x2F;.helm&#x2F;</span><br><span class="line">&#x2F;root&#x2F;.helm&#x2F;</span><br><span class="line">├── cache</span><br><span class="line">│   └── archive</span><br><span class="line">│       └── jenkins-0.13.5.tgz</span><br><span class="line">├── plugins</span><br><span class="line">├── repository</span><br><span class="line">│   ├── cache</span><br><span class="line">│   │   ├── local-index.yaml -&gt; &#x2F;root&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;index.yaml</span><br><span class="line">│   │   └── stable-index.yaml</span><br><span class="line">│   ├── local</span><br><span class="line">│   │   └── index.yaml</span><br><span class="line">│   └── repositories.yaml</span><br><span class="line">└── starters</span><br><span class="line"></span><br><span class="line">7 directories, 5 files</span><br></pre></td></tr></table></figure><p>默认缓存的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd .helm&#x2F;cache&#x2F;archive&#x2F;</span><br><span class="line">[root@linux-node1 archive]# ls -l</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root 12650 Jul 26 19:21 jenkins-0.13.5.tgz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 archive]# tar zxf jenkins-0.13.5.tgz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@linux-node1 archive]# mv jenkins ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# cd ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">[root@linux-node1 jenkins]# tree</span><br><span class="line">.</span><br><span class="line">├── Chart.yaml</span><br><span class="line">├── OWNERS</span><br><span class="line">├── README.md</span><br><span class="line">├── templates</span><br><span class="line">│   ├── config.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── home-pvc.yaml</span><br><span class="line">│   ├── jenkins-agent-svc.yaml</span><br><span class="line">│   ├── jenkins-master-deployment.yaml</span><br><span class="line">│   ├── jenkins-master-ingress.yaml</span><br><span class="line">│   ├── jenkins-master-networkpolicy.yaml</span><br><span class="line">│   ├── jenkins-master-svc.yaml</span><br><span class="line">│   ├── jenkins-test.yaml</span><br><span class="line">│   ├── jobs.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   ├── rbac.yaml</span><br><span class="line">│   ├── secret.yaml</span><br><span class="line">│   ├── service-account.yaml</span><br><span class="line">│   └── test-config.yaml</span><br><span class="line">└── values.yaml</span><br><span class="line"></span><br><span class="line">1 directory, 19 files</span><br></pre></td></tr></table></figure><h3 id="自定义Jenkins的Chart"><a href="#自定义Jenkins的Chart" class="headerlink" title="自定义Jenkins的Chart"></a>自定义Jenkins的Chart</h3><p>修改为NodePort</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 jenkins]# vim values.yaml</span><br><span class="line">ServiceType: NodePort</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm lint ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">&#x3D;&#x3D;&gt; Linting &#x2F;root&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F;</span><br><span class="line">Lint OK</span><br><span class="line"></span><br><span class="line">1 chart(s) linted, no failures</span><br></pre></td></tr></table></figure><p>查看有哪些应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm list</span><br><span class="line">NAME           REVISION    UPDATED                     STATUS      CHART          NAMESPACE</span><br><span class="line">viable-seal    1           Thu Jul 26 19:21:07 2018    DEPLOYED    jenkins-0.13.5 default</span><br><span class="line">[root@linux-node1 ~]# helm delete --purge viable-seal</span><br><span class="line">release &quot;viable-seal&quot; deleted</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# helm install ~&#x2F;.helm&#x2F;repository&#x2F;local&#x2F;jenkins&#x2F; --name devops-jenkins </span><br><span class="line">NAME:   devops-jenkins</span><br><span class="line">LAST DEPLOYED: Thu Jul 26 19:36:10 2018</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Secret</span><br><span class="line">NAME            TYPE    DATA  AGE</span><br><span class="line">devops-jenkins  Opaque  2     0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;ConfigMap</span><br><span class="line">NAME                  DATA  AGE</span><br><span class="line">devops-jenkins        3     0s</span><br><span class="line">devops-jenkins-tests  1     0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;PersistentVolumeClaim</span><br><span class="line">NAME            STATUS   VOLUME  CAPACITY  ACCESS MODES  STORAGECLASS  AGE</span><br><span class="line">devops-jenkins  Pending  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Service</span><br><span class="line">NAME                  TYPE       CLUSTER-IP   EXTERNAL-IP  PORT(S)         AGE</span><br><span class="line">devops-jenkins-agent  ClusterIP  10.1.74.175  &lt;none&gt;       50000&#x2F;TCP       0s</span><br><span class="line">devops-jenkins        NodePort   10.1.3.112   &lt;none&gt;       8080:23558&#x2F;TCP  0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1beta1&#x2F;Deployment</span><br><span class="line">NAME            DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">devops-jenkins  1        1        1           0          0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Pod(related)</span><br><span class="line">NAME                            READY  STATUS   RESTARTS  AGE</span><br><span class="line">devops-jenkins-64d54b79c-pwjfb  0&#x2F;1    Pending  0         0s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">1. Get your &#39;admin&#39; user password by running:</span><br><span class="line">  printf $(kubectl get secret --namespace default devops-jenkins -o jsonpath&#x3D;&quot;&#123;.data.jenkins-admin-password&#125;&quot; | base64 --decode);echo</span><br><span class="line">2. Get the Jenkins URL to visit by running these commands in the same shell:</span><br><span class="line">  export NODE_PORT&#x3D;$(kubectl get --namespace default -o jsonpath&#x3D;&quot;&#123;.spec.ports[0].nodePort&#125;&quot; services devops-jenkins)</span><br><span class="line">  export NODE_IP&#x3D;$(kubectl get nodes --namespace default -o jsonpath&#x3D;&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;)</span><br><span class="line">  echo http:&#x2F;&#x2F;$NODE_IP:$NODE_PORT&#x2F;login</span><br><span class="line"></span><br><span class="line">3. Login with the password from step 1 and the username: admin</span><br><span class="line"></span><br><span class="line">For more information on running Jenkins on Kubernetes, visit:</span><br><span class="line">https:&#x2F;&#x2F;cloud.google.com&#x2F;solutions&#x2F;jenkins-on-container-engine</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm status devops-jenkins</span><br></pre></td></tr></table></figure><h2 id="创建自己的Chart"><a href="#创建自己的Chart" class="headerlink" title="创建自己的Chart"></a>创建自己的Chart</h2><h3 id="创建自定义Nginx的Chart"><a href="#创建自定义Nginx的Chart" class="headerlink" title="创建自定义Nginx的Chart"></a>创建自定义Nginx的Chart</h3><p>1.创建自定义Chart Nginx的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm create helm-nginx</span><br><span class="line">Creating helm-nginx</span><br><span class="line"> [root@linux-node1 ~]# tree helm-nginx&#x2F;</span><br><span class="line">opencmdb&#x2F;</span><br><span class="line">├── charts       #依赖的chart</span><br><span class="line">├── Chart.yaml   #本chart的信息</span><br><span class="line">├── templates    #模板目录</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml   #模板赋值</span><br></pre></td></tr></table></figure><p>2.编辑Chart配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd helm-nginx&#x2F;</span><br><span class="line">[root@linux-node1 helm-nginx]# vim values.yaml</span><br></pre></td></tr></table></figure><p>3.验证Chart配置，最后面的点表示当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 helm-nginx]# helm install --dry-run --debug --name helm-nginx .</span><br></pre></td></tr></table></figure><p>4.安装自定义Chart，最后面的点表示当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 helm-nginx]# helm install --name helm-nginx .</span><br></pre></td></tr></table></figure><h3 id="查看Helm实例"><a href="#查看Helm实例" class="headerlink" title="查看Helm实例"></a>查看Helm实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# helm list</span><br><span class="line">NAME          REVISION    UPDATED                     STATUS      CHART                 NAMESPACE</span><br><span class="line">helm-nginx    1           Sun Sep 16 19:32:19 2018    DEPLOYED    helm-nginx-0.1.0      default  </span><br><span class="line">[root@linux-node1 ~]# kubectl get pod</span><br><span class="line">NAME                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">helm-nginx-6975f8dbcd-htvtd   1&#x2F;1       Running   0          51s</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl get ingress</span><br><span class="line">NAME         HOSTS                ADDRESS   PORTS     AGE</span><br><span class="line">helm-nginx   www.helm-nginx.com             80        1m</span><br></pre></td></tr></table></figure><h1 id="17-应用的日志采集与分析"><a href="#17-应用的日志采集与分析" class="headerlink" title="17 应用的日志采集与分析"></a>17 应用的日志采集与分析</h1><h2 id="Prometheus快速入门"><a href="#Prometheus快速入门" class="headerlink" title="Prometheus快速入门"></a>Prometheus快速入门</h2><h3 id="Prometheus架构介绍"><a href="#Prometheus架构介绍" class="headerlink" title="Prometheus架构介绍"></a>Prometheus架构介绍</h3><p>在学习Prometheus之前我们需要清晰的掌握其架构，Prometheus是由多个组件组成的的监控系统，主要有：Prometheus Server、Alertmanager、Pushgateway组成，这三个组件均为独立的应用服务，独立部署和运行，其中Prometheus Server中内置了Prometheus web UI。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/2ada1ece66fcc81d704c2ba46f9dd7d3.png" alt="architecture"></p><p><strong>Prometheus Server：</strong></p><p>Promethedus Server是核心组件，负责数据的获取、存储、查询。Prometheus通过Pull的方式定期的从Jobs/Exporters中获取数据，并保存在内置的TSDB中；内置的Prometheus web UI可以让用户通过PromQL的方式进行数据的检索。</p><p><strong>Exporters：</strong></p><p>Exporters也是一个独立的组件，有官方提供的Exporters也有社区贡献的Exportes，它将监控采集的数据通过HTTP的方式暴露给Prometheus Server，Server定期获取数据。例如有一个Exporters叫做Node Exporter，它安装在受采集的主机上，为Server提供数据，有点类似于Zabbix监控系统中的Zabbix Agent。</p><p><strong>Prometheus web UI：</strong></p><p>Prometheus web UI是Server启动后内置的一个Web界面，通过该Web界面我们可以进行数据查询工作，不包含设置的相关功能。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/cc11e0cf02ff729fb905ac3648af18f7.png" alt="img"></p><p><strong>PromQL：</strong></p><p>PromQL是Prometheus内置的自定义的查询语言，提供对Prometheus Server中的TSDB这个时间序列数据库进行数据查询，支持数据聚合和一些逻辑运算，是一个相对简单的查询语言，而且PromQL也提供了一些内置函数，帮助我们进行数据处理。</p><p><strong>Alertmanager：</strong></p><p>Alertmanager是Promethedus的告警管理组件，它支持基于PromQL来创建告警规则，类似于Zabbix中的告警表达式，对获取到的数据进行计算和比较，如果满足PromQL定义的规则条件，就会产生报警。</p><p><strong>Pushgateway：</strong></p><p>Pushgateway可以理解为数据的一个中转站，例如当Prometheus Server不能直接和Exporters进行通信的场景下。</p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><p>学习Prometheus的第一步就是先部署一个实验环境，官方提供了多种方式进行Prometheus安装：</p><ul><li>源码编译安装</li><li>下载预编译好的二进制文件</li><li>使用Docker部署</li><li>使用第三方工具：Ansible、SaltStack、Puppet、Chef。</li></ul><p>为了方便学习，首先我们使用二进制方式部署，可以在这里<a href="https://prometheus.io/download/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E3%80%82">https://prometheus.io/download/下载对应的预编译的二进制文件。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# wget</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;prometheus&#x2F;releases&#x2F;download&#x2F;v2.7.1&#x2F;prometheus-2.7.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# tar zxf prometheus-2.7.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# mv prometheus-2.7.1.linux-amd64 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# ln -s &#x2F;usr&#x2F;local&#x2F;prometheus-2.7.1.linux-amd64&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;prometheus</span><br></pre></td></tr></table></figure><p><strong>Prometheus配置</strong></p><p>Prometheus的配置文件在prometheus.yml中，直接启动也会到命令的当前目录下寻找该文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 prometheus]# vim prometheus.yml</span><br><span class="line"></span><br><span class="line"># my global config</span><br><span class="line"></span><br><span class="line">global:</span><br><span class="line">scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"># scrape_timeout is set to the global default (10s).</span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">alertmanagers:</span><br><span class="line">- static_configs:</span><br><span class="line">- targets:</span><br><span class="line"># - alertmanager:9093</span><br><span class="line"># Load rules once and periodically evaluate them according to the global</span><br><span class="line">&#39;evaluation_interval&#39;.</span><br><span class="line">rule_files:</span><br><span class="line"># - &quot;first_rules.yml&quot;</span><br><span class="line"># - &quot;second_rules.yml&quot;</span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#39;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"># The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries</span><br><span class="line">scraped from this config.</span><br><span class="line">- job_name: &#39;prometheus&#39;</span><br><span class="line"># metrics_path defaults to &#39;&#x2F;metrics&#39;</span><br><span class="line"># scheme defaults to &#39;http&#39;.</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;localhost:9090&#39;]</span><br></pre></td></tr></table></figure><p><strong>启动Prometheus</strong></p><p>默认情况下Prometheus会把数据写在启动目录的./data目录下，可以通过启动参数指定目录：–storage.tsdb.path=”data/“，更多参数可以通过—help查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 prometheus]# .&#x2F;prometheus –help</span><br><span class="line"></span><br><span class="line">[root@linux-node1 prometheus]# .&#x2F;prometheus</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.799169159Z caller&#x3D;main.go:620 msg&#x3D;&quot;Starting</span><br><span class="line">TSDB ...&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.835497463Z caller&#x3D;main.go:635 msg&#x3D;&quot;TSDB</span><br><span class="line">started&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.835598421Z caller&#x3D;main.go:695 msg&#x3D;&quot;Loading</span><br><span class="line">configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.83756508Z caller&#x3D;main.go:722 msg&#x3D;&quot;Completed</span><br><span class="line">loading of configuration file&quot; filename&#x3D;prometheus.yml</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.83760078Z caller&#x3D;main.go:589 msg&#x3D;&quot;Server is</span><br><span class="line">ready to receive web requests.&quot;</span><br><span class="line">level&#x3D;info ts&#x3D;2019-02-12T08:04:03.837641772Z caller&#x3D;web.go:416 component&#x3D;web</span><br><span class="line">msg&#x3D;&quot;Start listening for connections&quot; address&#x3D;0.0.0.0:9090</span><br></pre></td></tr></table></figure><p>默认会在前台启动，并监听9090端口，会自动创建data目录，并存放数据。注意如何服务器时间不正确会有警告提示，请保证服务器时间同步。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/266a101825cbabc2782820895e161f59.png" alt="img"></p><p><strong>放置在后台运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# groupadd prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# useradd -g prometheus -d &#x2F;var&#x2F;lib&#x2F;prometheus -s</span><br><span class="line">&#x2F;sbin&#x2F;nologin prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;prometheus.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description&#x3D;prometheus</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;prometheus</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus</span><br><span class="line">--config.file&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus.yml</span><br><span class="line">--storage.tsdb.path&#x3D;&#x2F;var&#x2F;lib&#x2F;prometheus</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable prometheus</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start prometheus</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep 9090</span><br><span class="line"></span><br><span class="line">tcp6 0 0 :::9090 :::* LISTEN 61333&#x2F;prometheus</span><br></pre></td></tr></table></figure><h3 id="使用Node-Exporter采集主机数据"><a href="#使用Node-Exporter采集主机数据" class="headerlink" title="使用Node Exporter采集主机数据"></a>使用Node Exporter采集主机数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# wget</span><br><span class="line">&lt;https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;node_exporter&#x2F;releases&#x2F;download&#x2F;v0.17.0&#x2F;node_exporter-0.17.0.linux-amd64.tar.gz&gt;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# tar zxf node_exporter-0.17.0.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# mv node_exporter-0.17.0.linux-amd64 &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">[root@linux-node1 src]# ln -s &#x2F;usr&#x2F;local&#x2F;node_exporter-0.17.0.linux-amd64&#x2F;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;node_exporter</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;node_exporter.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;node_exporter</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;prometheus</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;node_exporter&#x2F;node_exporter</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>启动Node Exporter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable node_exporter</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start node_exporter</span><br></pre></td></tr></table></figure><p>查看状态<br>[root@linux-node1 ~]# netstat -ntlp | grep 9100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp6 0 0 :::9100 :::* LISTEN 66239&#x2F;node_exporter</span><br></pre></td></tr></table></figure><p>默认情况下Node Exporter监听9100端口，通过/metrics暴露采集到的监控数据，Prometheus默认也从该地址获取数据。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/1004a69a33423c72a2989005be5a790e.png" alt="img"></p><p><strong>配置Prometheus读取Node Exporter数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;prometheus.yml</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line"># The job name is added as a label &#96;job&#x3D;&lt;job_name&gt;&#96; to any timeseries</span><br><span class="line">scraped from this config.</span><br><span class="line">- job_name: &#39;prometheus&#39;</span><br><span class="line"># metrics_path defaults to &#39;&#x2F;metrics&#39;</span><br><span class="line"># scheme defaults to &#39;http&#39;.</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;localhost:9090&#39;]</span><br><span class="line">- job_name: &#39;linux-node1&#39;</span><br><span class="line">static_configs:</span><br><span class="line">- targets: [&#39;192.168.56.11:9100&#39;]</span><br><span class="line">labels:</span><br><span class="line">instance: linux-node1</span><br></pre></td></tr></table></figure><p><strong>重启prometheus</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl restart prometheus</span><br></pre></td></tr></table></figure><p><strong>查看监控状态</strong></p><p>登录Prometheus的Web控制台，StatusTargets如果可以linux-node1并且状态是UP的状态即为配置成功。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/8c3da60dbf5558dc649de1fd6ce43bf0.png" alt="img"></p><h3 id="使用Prometheus-UI查看数据"><a href="#使用Prometheus-UI查看数据" class="headerlink" title="使用Prometheus UI查看数据"></a>使用Prometheus UI查看数据</h3><p>现在Prometheus会定期的从<a href="http://192.168.56.11:9100/metrics%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%AD%98%E5%82%A8%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8Prometheus">http://192.168.56.11:9100/metrics获取数据，并存储，我们可以使用Prometheus</a> UI来查看监控数据。</p><h3 id="使用Grafana进行数据可视化"><a href="#使用Grafana进行数据可视化" class="headerlink" title="使用Grafana进行数据可视化"></a>使用Grafana进行数据可视化</h3><p><strong>1.安装Grafana</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;grafana.repo</span><br><span class="line"></span><br><span class="line">[grafana]</span><br><span class="line">name&#x3D;grafana</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;packages.grafana.com&#x2F;oss&#x2F;rpm</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;packages.grafana.com&#x2F;gpg.key</span><br><span class="line">sslverify&#x3D;1</span><br><span class="line">sslcacert&#x3D;&#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# yum install -y grafana</span><br></pre></td></tr></table></figure><p><strong>2.配置Grafana</strong></p><p>Grafana的配置文件在/etc/grafana/grafana.ini，默认情况下Grafana监听3000端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim &#x2F;etc&#x2F;grafana&#x2F;grafana.ini</span><br></pre></td></tr></table></figure><p><strong>3.启动Grafana</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# systemctl enable grafana-server</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# systemctl start grafana-server</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# netstat -ntlp | grep 3000</span><br><span class="line"></span><br><span class="line">tcp6 0 0 :::3000 :::* LISTEN 81427&#x2F;grafana-serve</span><br></pre></td></tr></table></figure><p><strong>4.访问Grafana</strong></p><p>访问<a href="http://192.168.56.11:3000/">http://192.168.56.11:3000</a>，用户名和密码默认为admin/admin，第一次登陆会要求修改密码，请使用安全密码。</p><p><strong>5.增加Prometheus数据源</strong></p><p>点击</p><p><img src="http://k8s.unixhot.com/kubernetes/media/b681a9b528d2ff21ba66666ce2452e51.png" alt="img"></p><p>，然后选择</p><p><img src="http://k8s.unixhot.com/kubernetes/media/d3e83ac4f090a51c5b5e0c341b99dda5.png" alt="img"></p><p>。</p><p>配置URL为：<a href="http://192.168.56.11:9090/">http://192.168.56.11:9090</a>，并点击Save&amp;Test。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/e35d8aaebedd7e168ebd1b29b65b30bb.png" alt="img"></p><p><strong>6.设置Dashboard</strong></p><p>数据源设置完毕后，就可以设置Dashboard图形展示，可以手动添加，也可以直接下载别人配置好保持的Json文件直接导入即可。</p><p>下载地址：<a href="https://grafana.com/dashboards/405%EF%BC%8C%E5%9C%A8%E5%8F%B3%E4%BE%A7%E6%9C%89Download">https://grafana.com/dashboards/405，在右侧有Download</a> Json按钮，下载该Json文件。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/d9ab69b29a964a12df52512a7b128b5b.png" alt="img"></p><p>点击Home下的Import Dashboard</p><p><img src="http://k8s.unixhot.com/kubernetes/media/53ffc0e739ca7b9421f9568ae4cbf117.png" alt="img"></p><p>然后直接上传刚才下载的JSON文件。</p><p><img src="http://k8s.unixhot.com/kubernetes/media/500958891a82067b0c987d514239ffb0.png" alt="img"></p><p>导入完毕后，就可以在Grafana上查看对应节点的监控数据图表。你可以通过鼠标拖拽进行图表的自定义大小和位置的修改，效果如下：</p><p><img src="http://k8s.unixhot.com/kubernetes/media/698a6241faa0adc1af6c09cc369b259b.png" alt="img"></p><h1 id="第七部分-Kubernetes高级进阶"><a href="#第七部分-Kubernetes高级进阶" class="headerlink" title="第七部分 Kubernetes高级进阶"></a>第七部分 Kubernetes高级进阶</h1><h1 id="Kubernetes的权限控制RBAC"><a href="#Kubernetes的权限控制RBAC" class="headerlink" title="Kubernetes的权限控制RBAC"></a>Kubernetes的权限控制RBAC</h1><p><strong>角色</strong></p><ul><li><p>Role: 角色，命名空间范围内的一个权限集合。</p></li><li><p>ClusterRole：集群角色，集群范围内的一个权限的集合，</p><p>Role和ClusterROle在Kubernetes中都被定义为集群内部的 API 资源，和我们前面学习过的 Pod、ConfigMap 这些类似，都是我们集群的资源对象，所以同样的可以使用我们前面的kubectl相关的命令来进行操作 Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：</p></li></ul><p>User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用 KeyStone或者 Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的 API 来进行管理 Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和 namespace 进行关联的，适用于集群内部运行的应用程序，需要通过 API 来完成权限认证，所以在集群内部进行权限操作，我们都需要使用到 ServiceAccount，这也是我们这节课的重点 RoleBinding 和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。</p><p><strong>创建用户凭证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# openssl genrsa -out jenkins.key 2048</span><br><span class="line">[root@linux-node1 ~]# openssl req -new -key jenkins.key -out jenkins.csr -subj &quot;&#x2F;CN&#x3D;jenkins&#x2F;O&#x3D;vmware&quot;</span><br><span class="line">[root@linux-node1 ~]# openssl x509 -req -in jenkins.csr -CA &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt -CAkey &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.key -CAcreateserial -out jenkins.crt -days 365</span><br><span class="line">[root@linux-node1 ~]# kubectl config set-credentials jenkins --client-certificate&#x3D;jenkins.crt  --client-key&#x3D;jenkins.key</span><br><span class="line">[root@linux-node1 ~]# kubectl config set-context jenkins-context --cluster&#x3D;kubernetes --namespace&#x3D;jenkins --user&#x3D;jenkins  </span><br><span class="line">[root@linux-node1 ~]# kubectl get pods --context&#x3D;jenkins-context</span><br></pre></td></tr></table></figure><p><strong>创建角色</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim jenkins-role.yml</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-role</span><br><span class="line">  namespace: jenkins</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;, &quot;extensions&quot;, &quot;apps&quot;]</span><br><span class="line">  resources: [&quot;deployments&quot;, &quot;replicasets&quot;, &quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br></pre></td></tr></table></figure><p><strong>创建角色绑定</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# vim jenkins-role-binding.yml</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-rolebinding</span><br><span class="line">  namespace: jenkins</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: jenkins</span><br><span class="line">  apiGroup: &quot;&quot;</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: jenkins-role</span><br><span class="line">  apiGroup: &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="22-深入理解Pod调度"><a href="#22-深入理解Pod调度" class="headerlink" title="22 深入理解Pod调度"></a>22 深入理解Pod调度</h1><h1 id="深入理解Pod调度"><a href="#深入理解Pod调度" class="headerlink" title="深入理解Pod调度"></a>深入理解Pod调度</h1><p>在前面的章节我们已经知道在Kubernetes中使用kube-scheduler进行Pod调度，它的目标是将Pod绑定到对应的Node上，经过一系列的条件和算法尽可能的让每个Pod都满意。kube-scheduler是Kubernetes默认的调度器。</p><p>kube-scheduler的代码位于<a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/scheduler">GitHub</a></p><p>可以将代码克隆到本地方便查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes.git</span><br></pre></td></tr></table></figure><p>在algorithm下有调度算法，调度算法分为两个阶段：Predicates和priorities，首先对Node进行过滤看哪些Node符合调度要求，然后在符合调度要求的Node上进行优先级计算，判断调度到哪个Node最合适。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 algorithm]# pwd</span><br><span class="line">&#x2F;root&#x2F;kubernetes&#x2F;pkg&#x2F;scheduler&#x2F;algorithm</span><br><span class="line">[root@linux-node1 algorithm]# ls -l</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root 1256 Dec 17 22:52 BUILD</span><br><span class="line">-rw-r--r-- 1 root root  735 Dec 17 22:52 doc.go</span><br><span class="line">drwxr-xr-x 2 root root  276 Dec 17 22:52 predicates</span><br><span class="line">drwxr-xr-x 3 root root 4096 Dec 17 22:52 priorities</span><br><span class="line">-rw-r--r-- 1 root root 3278 Dec 17 22:52 scheduler_interface.go</span><br><span class="line">-rw-r--r-- 1 root root 3383 Dec 17 22:52 types.go</span><br></pre></td></tr></table></figure><p>官方文档详细的介绍了所有的步骤：<a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/</a></p><p><strong>设置调度器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get pod kube-proxy-5wbtf -n kube-system -o yaml | grep schedulerName</span><br><span class="line">  schedulerName: default-scheduler</span><br></pre></td></tr></table></figure><h2 id="Taints（污点）"><a href="#Taints（污点）" class="headerlink" title="Taints（污点）"></a>Taints（污点）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl describe node linux-node1.unixhot.com | grep Taints</span><br><span class="line">Taints:             node-role.kubernetes.io&#x2F;master:NoSchedule</span><br></pre></td></tr></table></figure><p>Taints的表现形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;&#x3D;&lt;value&gt;:&lt;effect&gt;</span><br></pre></td></tr></table></figure><p>effect的三种类型：</p><ul><li>NoSchedule: 如果Pod没有容忍该污点，不调度到该节点上。</li><li>PreferNoSchedule：尽量阻止Pod被调度到这个节点上，但是如果没有其它节点能够调度，可以调度到该节点。</li><li>NoExecute： NoScheduler和PreferNoSchedule只是在调度阶段起作用，但是NoExecute会影响正常运行的Pod，如果一个节点被打了NoExecute的污点，而运行在该节点的Pod没有容忍会直接被这个节点移除。</li></ul><p>查看Flannel为何能调度到Master节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl get po -n kube-system | grep flannel</span><br><span class="line">kube-flannel-ds-amd64-f2jrk                       1&#x2F;1     Running   2          22h</span><br><span class="line">kube-flannel-ds-amd64-mh75v                       1&#x2F;1     Running   2          22h</span><br><span class="line">kube-flannel-ds-amd64-n52zm                       1&#x2F;1     Running   4          22h</span><br><span class="line"></span><br><span class="line">[root@linux-node1 ~]# kubectl describe pod kube-flannel-ds-amd64-f2jrk -n kube-system</span><br><span class="line">...</span><br><span class="line">Tolerations:     :NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;disk-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;memory-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;network-unavailable:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;not-ready:NoExecute</span><br><span class="line">                 node.kubernetes.io&#x2F;pid-pressure:NoSchedule</span><br><span class="line">                 node.kubernetes.io&#x2F;unreachable:NoExecute</span><br><span class="line">                 node.kubernetes.io&#x2F;unschedulable:NoSchedule</span><br></pre></td></tr></table></figure><h3 id="自定义污点"><a href="#自定义污点" class="headerlink" title="自定义污点"></a>自定义污点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@linux-node1 ~]# kubectl taint node linux-node2.example.com node-ytpe&#x3D;gpu:NoSchedule       </span><br><span class="line">node&#x2F;linux-node2.example.com tainted</span><br><span class="line">[root@linux-node1 example]# cat nginx-deployment-taint.yaml    </span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.12</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-type</span><br><span class="line">        operator: Equal</span><br><span class="line">        value: gpu</span><br><span class="line">        effect: Noschedule</span><br><span class="line">[root@linux-node1 example]# kubectl get po -o wide</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE     IP          NODE                      NOMINATED NODE   READINESS GATES</span><br><span class="line">dns-test                            1&#x2F;1     Running   1          6h15m   10.2.2.23   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-2jkw9   1&#x2F;1     Running   0          13s     10.2.2.26   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-4hrbf   1&#x2F;1     Running   0          13s     10.2.2.24   linux-node3.example.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-77564d4546-s2r4h   1&#x2F;1     Running   0          13s     10.2.2.25   linux-node3.example</span><br></pre></td></tr></table></figure><h2 id="亲缘性调度"><a href="#亲缘性调度" class="headerlink" title="亲缘性调度"></a>亲缘性调度</h2><h1 id="23-Kubernetes-API介绍"><a href="#23-Kubernetes-API介绍" class="headerlink" title="23 Kubernetes API介绍"></a>23 Kubernetes API介绍</h1><p>查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;192.168.56.11:6443</span><br><span class="line">KubeDNS is running at https:&#x2F;&#x2F;192.168.56.11:6443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.</span><br></pre></td></tr></table></figure><p>直接访问Kubernetes API需要验证，无法直接访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# curl -k https:&#x2F;&#x2F;192.168.56.11:6443</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;forbidden: User \&quot;system:anonymous\&quot; cannot get path \&quot;&#x2F;\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过Proxy访问Kubernetes API</strong></p><p>使用kubectl proxy可以在Master本地启动一个代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure><p>可以通过127.0.0.1:8001与API Server进行交互</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# curl http:&#x2F;&#x2F;127.0.0.1:8001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;paths&quot;: [</span><br><span class="line">    &quot;&#x2F;api&quot;,</span><br><span class="line">    &quot;&#x2F;api&#x2F;v1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;admissionregistration.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;admissionregistration.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiextensions.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiextensions.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&#x2F;v1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apiregistration.k8s.io&#x2F;v1beta1&quot;,</span><br><span class="line">    &quot;&#x2F;apis&#x2F;apps&quot;,</span><br><span class="line">...（省略其它输出）</span><br></pre></td></tr></table></figure><p>可以通过修改监听地址，并关闭过滤，实现在其它地方登录和查看，这样就可以在本地浏览器访问API。切记不要再生产环境将代理地址暴露在外网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl proxy --address&#x3D;0.0.0.0 --disable-filter&#x3D;true</span><br><span class="line">W1105 16:18:45.669591   16730 proxy.go:142] Request filter disabled, your proxy is vulnerable to XSRF attacks, please be cautious</span><br><span class="line">Starting to serve on [::]:8001</span><br></pre></td></tr></table></figure><h3 id="使用Swagger-UI进行API交互"><a href="#使用Swagger-UI进行API交互" class="headerlink" title="使用Swagger UI进行API交互"></a>使用Swagger UI进行API交互</h3><p>Kubernetes支持Swagger UI访问API，需要在API Server开启，如果已经根据本书使用kubeadm部署的集群，可以通过修改Pod的YAML文件，重建Pod来开启</p><p><strong>修改API Server的Pod定义文件</strong></p><p>在- kube-apiserver下面一行增加–enable-swagger-ui=true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: kube-apiserver</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: kube-apiserver</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-apiserver</span><br><span class="line">    - --enable-swagger-ui&#x3D;true</span><br><span class="line">    - --advertise-address&#x3D;192.168.56.11</span><br><span class="line">    - --allow-privileged&#x3D;true</span><br></pre></td></tr></table></figure><p>删除Pod，kubelet会通过该YAML重建Pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl get pod -n kube-system | grep api</span><br><span class="line">kube-apiserver-linux-node1.unixhot.com            1&#x2F;1     Running   0          55m</span><br><span class="line">[root@k8s-master1 ~]# kubectl delete pod kube-apiserver-linux-node1.unixhot.com -n kube-system</span><br></pre></td></tr></table></figure><p>可以看到配置已经生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl describe pod kube-apiserver-linux-node1.unixhot.com -n kube-system </span><br><span class="line">...</span><br><span class="line">    Command:</span><br><span class="line">      kube-apiserver</span><br><span class="line">      --enable-swagger-ui&#x3D;true</span><br><span class="line">      --advertise-address&#x3D;192.168.99.27</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>部署一个Swagger UI服务查看API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master1 ~]# kubectl run swagger-ui --image&#x3D;swaggerapi&#x2F;swagger-ui:latest</span><br><span class="line">[root@k8s-master1 ~]# kubectl expose deployment swagger-ui --port&#x3D;8080 --type&#x3D;NodePort</span><br><span class="line">[root@k8s-master1 ~]# kubectl get service</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1      &lt;none&gt;          443&#x2F;TCP          43d</span><br><span class="line">swagger-ui   NodePort    10.1.205.94   &lt;none&gt;   8080:30410&#x2F;TCP   34s</span><br></pre></td></tr></table></figure><p>因为我们部署的Swagger UI和API Server不在一个域名下，所以会有跨域的问题，Chrome浏览器需要提前安装Allow CROS插件解决</p><hr><hr><p>摘录自赵班长——–</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境初始化</title>
      <link href="/posts/50612/"/>
      <url>/posts/50612/</url>
      
        <content type="html"><![CDATA[<h1 id="第0章-学习方法的变化"><a href="#第0章-学习方法的变化" class="headerlink" title="第0章 学习方法的变化"></a>第0章 学习方法的变化</h1><h2 id="1-第一阶段学习方法"><a href="#1-第一阶段学习方法" class="headerlink" title="1.第一阶段学习方法"></a>1.第一阶段学习方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.记命令 80-150</span><br><span class="line">2.记参数 常用 3-5个</span><br><span class="line">3.练习 考试题手写</span><br><span class="line">4.回顾 总结</span><br></pre></td></tr></table></figure><h2 id="2-第二阶段学习方法"><a href="#2-第二阶段学习方法" class="headerlink" title="2.第二阶段学习方法"></a>2.第二阶段学习方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.理解 思考 提问</span><br><span class="line">2.应用场景 干嘛用的 怎么用</span><br><span class="line">3.安装部署 配置文件 启动 测试 关闭 </span><br><span class="line">4.各种报错 看日志 看日志 看日志 收集 整理</span><br><span class="line">5.英文单词量积累 不然看不懂报错</span><br></pre></td></tr></table></figure><h1 id="第1章-综合架构开场介绍"><a href="#第1章-综合架构开场介绍" class="headerlink" title="第1章 综合架构开场介绍"></a>第1章 综合架构开场介绍</h1><h2 id="01-中小规模网站架构组成"><a href="#01-中小规模网站架构组成" class="headerlink" title="01. 中小规模网站架构组成"></a>01. 中小规模网站架构组成</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1) 顾客<span class="selector-tag">--</span>用户</span><br><span class="line">   访问网站的人员</span><br><span class="line">2) 保安<span class="selector-tag">--</span>防火墙 (<span class="selector-tag">firewalld</span>)</span><br><span class="line">   进行访问策略控制</span><br><span class="line">3) 迎宾<span class="selector-tag">--</span>负载均衡服务器  (<span class="selector-tag">nginx</span>)</span><br><span class="line">   对用户的访问请求进行调度处理</span><br><span class="line">4) 服务员<span class="selector-tag">---web</span>服务器    (<span class="selector-tag">nginx</span>)</span><br><span class="line">   处理用户的请求</span><br><span class="line">5) 厨师<span class="selector-tag">---</span>数据库服务器   (<span class="selector-tag">mysql</span>)</span><br><span class="line">   存储的字符数据  (耳机  500   索尼  黑色  北京地址  订单时间2019<span class="selector-tag">-05-05</span> 13<span class="selector-pseudo">:00)</span></span><br><span class="line">6) 厨师<span class="selector-tag">---</span>存储服务器     (<span class="selector-tag">nfs</span>)</span><br><span class="line">   存储图片 音频 视频 附件等数据信息</span><br><span class="line">7) 厨师<span class="selector-tag">---</span>备份服务器     (<span class="selector-tag">rsync</span>+<span class="selector-tag">crond-</span>定时备份 <span class="selector-tag">rsync</span>+<span class="selector-tag">sersync--</span>实时备份)</span><br><span class="line">   存储网站所有服务器的重要数据</span><br><span class="line">8) 厨师<span class="selector-tag">---</span>缓存服务器     (<span class="selector-tag">redis</span> <span class="selector-tag">mongodb</span>) </span><br><span class="line">   <span class="selector-tag">a</span> 将数据信息存储到内存中 </span><br><span class="line">   <span class="selector-tag">b</span> 减缓服务器的压力      </span><br><span class="line">9) 经理<span class="selector-tag">---</span>批量管理服务器 (<span class="selector-tag">ansible</span>)</span><br><span class="line">   批量管理多台服务器主机</span><br></pre></td></tr></table></figure><h2 id="02-部署网站架构"><a href="#02-部署网站架构" class="headerlink" title="02 部署网站架构:"></a>02 部署网站架构:</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 需要解决网站架构单点问题</span><br><span class="line">   迎宾:   高可用服务---keepalived</span><br><span class="line">   数据库:   高可用服务---mha</span><br><span class="line">   存储服务: 高可用服务---keepalived实现</span><br><span class="line">              高可用服务---分布式存储</span><br><span class="line">   备份服务:  </span><br><span class="line">   面试题: 公司的数据是如何备份</span><br><span class="line">   <span class="number">1</span>) 利用开源软件实现数据备份  rsync(免费)</span><br><span class="line">   <span class="number">2</span>) 利用企业网盘进行数据备份  七牛云存储</span><br><span class="line">   <span class="number">3</span>) 利用自建备份存储架构      两地三中心  </span><br><span class="line">   缓存服务: 高可用服务--- 缓存服务集群/哨兵模式</span><br><span class="line"><span class="number">2</span>) 内部员工如何远程访问架构</span><br><span class="line">   部署搭建VPN服务器 openvpn</span><br><span class="line">   <span class="symbol">https:</span>/<span class="regexp">/blog.oldboyedu.com/pptp</span>-l2tp/</span><br><span class="line"><span class="number">3</span>) 内部员工操作管理架构服务器要进行审计</span><br><span class="line">   跳板机服务器  jumpserver</span><br><span class="line">   <span class="symbol">https:</span>/<span class="regexp">/jumpserver.readthedocs.io/zh</span><span class="regexp">/docs/setup</span>_by_centos.html</span><br><span class="line"><span class="number">4</span>) 架构中服务器出现问题需要进行提前报警告知</span><br><span class="line">   部署监控服务器 zabbix</span><br></pre></td></tr></table></figure><h2 id="03-综合架构规划"><a href="#03-综合架构规划" class="headerlink" title="03. 综合架构规划"></a>03. 综合架构规划</h2><p>主机名称和IP地址规划</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 01. 防火墙服务器      <span class="selector-tag">firewalld</span>    10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.81</span>(外网地址)    172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.81</span>(内外地址)   软件: <span class="selector-tag">firewalld</span></span><br><span class="line"> 02. 负载均衡服务器 <span class="selector-tag">lb01</span>           10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.5</span>                     172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.5</span>                  软件: <span class="selector-tag">nginx</span> <span class="selector-tag">keepalived</span></span><br><span class="line"> 03. 负载均衡服务器 <span class="selector-tag">lb02</span>           10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.6</span>                     172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.6</span>                  软件: <span class="selector-tag">nginx</span> <span class="selector-tag">keepalived</span></span><br><span class="line"> 04. <span class="selector-tag">web</span>服务器      <span class="selector-tag">web01</span>        10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span>               172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span>                  软件: <span class="selector-tag">nginx</span></span><br><span class="line"> 05. <span class="selector-tag">web</span>服务器      <span class="selector-tag">web02</span>        10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span>                       172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.8</span>                  软件: <span class="selector-tag">nginx</span></span><br><span class="line"> 06. <span class="selector-tag">web</span>服务器      <span class="selector-tag">web03</span>        10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.9</span>(存储)           172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.9</span>                  软件: <span class="selector-tag">nginx</span></span><br><span class="line"> 07. 数据库服务器      <span class="selector-tag">db01</span>          10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.51</span>                 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.51</span>                     软件: <span class="selector-tag">mysql</span>(慢)  <span class="selector-tag">mariaDB</span></span><br><span class="line"> 08. 存储服务器       <span class="selector-tag">nfs01</span>          10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.31</span>                    172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span>                     软件: <span class="selector-tag">nfs</span> </span><br><span class="line"> 09. 备份服务器       <span class="selector-tag">backup</span>       10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.41</span>                      172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.41</span>                     软件: <span class="selector-tag">rsync</span></span><br><span class="line"> 10. 批量管理服务器 <span class="selector-tag">m01</span>           10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.61</span>                     172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.61</span>                     软件: <span class="selector-tag">ansible</span></span><br><span class="line"> 11. 跳板机服务器      <span class="selector-tag">jumpserver</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.71</span>(61)            172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.71</span>                     软件: <span class="selector-tag">jumpserver</span></span><br><span class="line"> 12. 监控服务器       <span class="selector-tag">zabbix</span>        10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.72</span>(61)             172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.72</span>                     软件: <span class="selector-tag">zabbix</span></span><br><span class="line"> 先把路走通,再进行变通</span><br><span class="line">*10. 缓存服务器     忽略</span><br></pre></td></tr></table></figure><h1 id="第2章-综合架构环境准备"><a href="#第2章-综合架构环境准备" class="headerlink" title="第2章 综合架构环境准备"></a>第2章 综合架构环境准备</h1><h2 id="2-1-创建一台全新虚拟机作为模版"><a href="#2-1-创建一台全新虚拟机作为模版" class="headerlink" title="2.1 创建一台全新虚拟机作为模版"></a>2.1 创建一台全新虚拟机作为模版</h2><p>系统 CentOS7<br>内存 建议2G<br>网卡 eth0: NAT模式 模拟外网 10.0.0.x<br>eth1: LAN区段 模拟内网 172.16.1.x<br>硬盘 不小于20G或40G</p><h2 id="2-2-Centos7安装步骤"><a href="#2-2-Centos7安装步骤" class="headerlink" title="2.2 Centos7安装步骤"></a>2.2 Centos7安装步骤</h2><p>修改网卡名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ifnames&#x3D;0 biosdevname&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="2-3-优化模版机内容"><a href="#2-3-优化模版机内容" class="headerlink" title="2.3 优化模版机内容"></a>2.3 优化模版机内容</h2><h3 id="2-3-1-精简网卡信息"><a href="#2-3-1-精简网卡信息" class="headerlink" title="2.3.1 精简网卡信息"></a>2.3.1 精简网卡信息</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># cat  /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">NAME=eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=<span class="number">10.0</span><span class="number">.0</span><span class="number">.201</span></span><br><span class="line">PREFIX=<span class="number">24</span></span><br><span class="line">GATEWAY=<span class="number">10.0</span><span class="number">.0</span><span class="number">.254</span></span><br><span class="line">DNS1=<span class="number">10.0</span><span class="number">.0</span><span class="number">.254</span></span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># cat  /etc/sysconfig/network-scripts/ifcfg-eth1</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">IPADDR=<span class="number">172.16</span><span class="number">.1</span><span class="number">.201</span></span><br><span class="line">PREFIX=<span class="number">24</span></span><br><span class="line">NAME=eth1</span><br><span class="line">DEVICE=eth1</span><br><span class="line">ONBOOT=yes</span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># systemctl restart network</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-删除网络相关配置文件"><a href="#2-3-2-删除网络相关配置文件" class="headerlink" title="2.3.2 删除网络相关配置文件"></a>2.3.2 删除网络相关配置文件</h3><p>如果不删除，重新克隆虚拟机会导致上不了网<br>删除网卡里面包含UUID 的行（centos7），删除UUID和HWADDR（CentOS5和6）<br>清空/etc/udev/rules.d/70-persistent-net.rules(centos 5 和6)</p><h3 id="2-3-3-关闭防火墙和selinux"><a href="#2-3-3-关闭防火墙和selinux" class="headerlink" title="2.3.3 关闭防火墙和selinux"></a>2.3.3 关闭防火墙和selinux</h3><h1 id="关闭firewalld-和NetworkManager"><a href="#关闭firewalld-和NetworkManager" class="headerlink" title="关闭firewalld 和NetworkManager"></a>关闭firewalld 和NetworkManager</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># systemctl  stop  firewalld   NetworkManager  </span></span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># systemctl  disable  firewalld   NetworkManager </span></span><br><span class="line"><span class="meta">#检查是否正在运行 </span></span><br><span class="line">systemctl <span class="keyword">is</span>-active  firewalld   NetworkManager  </span><br><span class="line"><span class="meta">#检查是否开机自启动</span></span><br><span class="line">systemctl <span class="keyword">is</span>-enabled  firewalld   NetworkManager  </span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># systemctl is-active  firewalld  NetworkManager  crond </span></span><br><span class="line">unknown</span><br><span class="line">inactive</span><br><span class="line">active</span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># systemctl is-enabled   firewalld  NetworkManager  crond </span></span><br><span class="line">disabled</span><br><span class="line">disabled</span><br><span class="line">enabled</span><br><span class="line">关闭selinux   </span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># grep =disable /etc/selinux/config </span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># setenforce 0</span></span><br><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># getenforce </span></span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure><h3 id="2-3-4-优化SSH连接速度慢"><a href="#2-3-4-优化SSH连接速度慢" class="headerlink" title="2.3.4 优化SSH连接速度慢"></a>2.3.4 优化SSH连接速度慢</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboyedu ~]<span class="comment"># egrep -n &#x27;^(GSSAPIA|UseDNS)&#x27; /etc/ssh/sshd_config </span></span><br><span class="line"><span class="number">79</span><span class="symbol">:GSSAPIAuthentication</span> no</span><br><span class="line"><span class="number">115</span><span class="symbol">:UseDNS</span> no</span><br><span class="line">[root@oldboyedu ~]<span class="comment"># systemctl restart sshd.service</span></span><br></pre></td></tr></table></figure><h3 id="2-3-5-优化命令行显示"><a href="#2-3-5-优化命令行显示" class="headerlink" title="2.3.5 优化命令行显示"></a>2.3.5 优化命令行显示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ &quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-6-配置yum源"><a href="#2-3-6-配置yum源" class="headerlink" title="2.3.6 配置yum源"></a>2.3.6 配置yum源</h3><p>查看yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p>CentOS 7系统默认的源更新</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></span><br></pre></td></tr></table></figure><p>增加epel源</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure><h3 id="2-3-7-安装常用软件"><a href="#2-3-7-安装常用软件" class="headerlink" title="2.3.7 安装常用软件"></a>2.3.7 安装常用软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tree vim wget bash-completion   bash-completion-extras  lrzsz net-tools sysstat iotop iftop htop unzip  telnet  ntpdate</span><br></pre></td></tr></table></figure><h3 id="2-3-8-配置普通用户sudo权限"><a href="#2-3-8-配置普通用户sudo权限" class="headerlink" title="2.3.8 配置普通用户sudo权限"></a>2.3.8 配置普通用户sudo权限</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@oldboyedu ~</span>]<span class="meta"># grep oldboy  /etc/sudoers</span></span><br><span class="line">oldboy  ALL=(ALL)     NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h3 id="2-3-9-配置hosts解析"><a href="#2-3-9-配置hosts解析" class="headerlink" title="2.3.9 配置hosts解析"></a>2.3.9 配置hosts解析</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.5</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.5</span> <span class="selector-tag">lb01</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.6</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.6</span> <span class="selector-tag">lb02</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.7</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span> <span class="selector-tag">web01</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.8</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.8</span> <span class="selector-tag">web02</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.9</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.9</span> <span class="selector-tag">web03</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.31</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span> <span class="selector-tag">nfs</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.41</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.41</span> <span class="selector-tag">backup</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.51</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.51</span> <span class="selector-tag">db01</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.61</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.61</span> <span class="selector-tag">m01</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.71</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.71</span> <span class="selector-tag">zabbix</span></span><br></pre></td></tr></table></figure><h3 id="2-4-0-时间同步"><a href="#2-4-0-时间同步" class="headerlink" title="2.4.0 时间同步"></a>2.4.0 时间同步</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ntpdate</span> <span class="selector-tag">time1</span><span class="selector-class">.aliyun</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>网卡图解</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-d45985ae69efd118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="Linux命令补全包"><a href="#Linux命令补全包" class="headerlink" title="Linux命令补全包"></a>Linux命令补全包</h2><pre><code>yum -y install bash-completion</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境准备 </tag>
            
            <tag> Centos优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用命令</title>
      <link href="/posts/51404/"/>
      <url>/posts/51404/</url>
      
        <content type="html"><![CDATA[<h1 id="Docket-使用命令"><a href="#Docket-使用命令" class="headerlink" title="Docket 使用命令"></a><strong>Docket 使用命令</strong></h1><hr><h2 id="查"><a href="#查" class="headerlink" title="查"></a><strong>查</strong></h2><p><strong># 查询当前可以下载的镜像</strong></p><ul><li><strong>docker search httpd</strong> </li><li>　　　　<strong>|_ NAME:镜像仓库源的名称</strong></li><li>　　　　<strong>|_ DESCRIPTION:镜像的描述</strong></li><li>　　　　<strong>|_ OFFICIAL:是否docker官方发布</strong></li></ul><hr><p><strong># 镜像查看</strong></p><ul><li><strong>docker images</strong></li><li>　　　　<strong>|_ REPOSITORY：表示镜像的仓库源</strong></li><li>　　　　<strong>|_ TAG：镜像的标签</strong></li><li>　　　　<strong>|_ IMAGE ID：镜像ID</strong></li><li>　　　　<strong>|_ CREATED：镜像创建时间</strong></li><li>　　　　<strong>|_ SIZE：镜像大小</strong></li></ul><hr><ul><li><strong># 深入帮助</strong></li><li><strong>docker command –help</strong></li></ul><hr><ul><li><strong># 概要信息</strong></li><li><strong>docker info</strong></li></ul><hr><ul><li><strong># 列出本机的所有 image 文件。</strong></li><li><strong>docker image ls</strong></li></ul><hr><ul><li><strong># 列出本机正在运行的容器</strong></li><li><strong>docker container ls</strong></li><li><strong>docker container ps</strong></li></ul><hr><ul><li><strong># 列出本机所有容器，包括终止运行的容器</strong></li><li><strong>docker container ls –all</strong></li></ul><hr><ul><li><strong># 容器查看，即进程查看</strong></li><li><strong>docker ps -a</strong></li></ul><hr><ul><li><strong># 查看容器输出内容</strong></li><li><strong>docker logs ID/NAMES</strong></li></ul><hr><ul><li><strong># 查看服务日志 类似tail -f</strong></li><li><strong>docker logs -f ID/NAMES</strong></li></ul><hr><ul><li><strong># 查看指定容器端口</strong></li><li><strong>docker port ID/NAMES</strong></li></ul><hr><ul><li><strong># 查询最后一次创建的容器</strong></li><li><strong>docker ps -l</strong></li></ul><hr><ul><li><strong># 查看容器内启用的线程</strong></li><li><strong>docker top ID/NAMES</strong></li></ul><hr><ul><li><strong># 查看容器配置参数</strong></li><li><strong>docker inspect ID/NAMES</strong></li></ul><hr><ul><li><strong># 查看已创建网络环境</strong></li><li><strong>docker network ls</strong></li></ul><hr><ul><li><strong># 查看网络属性信息</strong></li><li><strong>docker network inspect ID/KEY</strong></li></ul><hr><ul><li><strong># 查看持久化数据名称</strong></li><li><strong>docker volume ls</strong></li><li><strong># 查看卷标详细信息</strong></li><li><strong>docker volume inspect 名称</strong></li></ul><hr><h2 id="改"><a href="#改" class="headerlink" title="改"></a><strong>改</strong></h2><ul><li><strong># 设置镜像标签,接着，为本地的 image 标注用户名和版本。</strong></li><li><strong>docker image tag [imageName] [username]/[repository]:[tag]</strong></li><li><strong>docker tag 860c279d2fec runoob/centos:dev</strong></li><li><strong>docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</strong></li></ul><hr><h2 id="删"><a href="#删" class="headerlink" title="删"></a><strong>删</strong></h2><ul><li><strong># 删除容器</strong></li><li><strong>docker rm ID/NAMES</strong></li></ul><hr><ul><li><strong># 删除 image 文件</strong></li><li><strong>docker image rm [imageName]</strong></li></ul><hr><ul><li><strong># 删除容器文件</strong></li><li><strong>docker container rm [containerID]</strong></li></ul><hr><ul><li><strong># 删除已创建网络</strong></li><li><strong>docker network rm [containerID]</strong></li></ul><hr><ul><li><strong># 删除所有未使用的网络</strong></li><li><strong>docker network prune -f</strong></li></ul><hr><ul><li><strong># docker container run命令的–rm参数，在容器终止运行后自动删除容器文件。</strong></li><li><strong>docker container run –rm -p 8000:3000 -it koa-demo /bin/bash</strong></li></ul><hr><ul><li><strong># 删除所有容器</strong></li><li><strong>docker rm -f $(docker ps -qa)</strong></li></ul><hr><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a><strong>执行方式</strong></h2><ul><li><strong># 执行一个镜像run 加参数 名称:镜像标签(自定义:latest)。</strong></li><li><strong>docker run -t -i ubuntu:15.10 /bin/bash</strong></li><li>　　　　<strong>|_ -i:–interactive=false:打开STDIN，用于控制台交互。</strong></li><li>　　　　<strong>|_ -t:–tty=false:分配tty设备，该可以支持终端登录，默认为false。</strong></li><li>　　　　<strong>|_ -d:让容器在后台运行。</strong></li><li>　　　　<strong>|_ -p:将容器内部使用的网络端口映射到我们使用的主机上。</strong></li><li>　　　　<strong>|_ 注：如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。</strong></li></ul><hr><ul><li><strong># 执行nginx应用。</strong></li><li><strong>docker run -d -p 8080:80 nginx</strong></li></ul><hr><ul><li><strong># 关闭web服务端口</strong></li><li><strong>docker stop ID/NAMES</strong></li></ul><hr><ul><li><strong># 开启web服务端口</strong></li><li><strong>docker start ID/NAMES</strong></li></ul><hr><ul><li><strong># 根据容器ID 进入到指定容器。要有-i参数。</strong></li><li><strong>docker attach ID/NAMES</strong></li></ul><hr><ul><li><strong># 通过此命令进入未加入-it参数的已存在容器中添加-i-t参数进入</strong></li><li><strong>docker container exec -it [containerID] /bin/bash</strong></li></ul><hr><ul><li><strong># 停止容器运行， SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号</strong></li><li><strong>bash container stop [containerID]</strong></li></ul><hr><ul><li><strong># SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</strong></li><li><strong>docker container kill</strong></li></ul><hr><ul><li><strong># 终止容器</strong></li><li><strong>docker container kill [containID]</strong></li></ul><hr><ul><li><strong># 启动已经生成或者已经停止的容器</strong></li><li><strong>docker container start [containerID]</strong></li></ul><hr><ul><li><strong># 容器内使用命令,退出容器</strong></li><li><strong>exit</strong></li></ul><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><ul><li><strong># 下载，安装nginx测试服务</strong></li><li><strong>docker pull nginx</strong></li></ul><hr><ul><li><strong># 通过此条命令将，容器内的文件 copy到原服务器内的当前目录下。</strong></li><li><strong>docker container cp [containID]:[/path/to/file] .</strong></li></ul><hr><ul><li><strong># 去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。</strong></li><li><strong>docker login</strong></li></ul><hr><ul><li><strong># 最后，发布 image 文件。</strong></li><li><strong>docker push [username]/[repository]:[tag]</strong></li></ul><hr><ul><li><strong># 构建容器镜像 -t 指定image名称，当前目录需要有Dockerfile文件。</strong></li><li><strong>docker build -t [自定义名称]:[版本] .</strong></li></ul><hr><ul><li><strong># 生成容器</strong></li><li><strong>docker container run -p 8000:3000 -it koa-demo /bin/bash</strong></li><li>​         <strong>|_ -p参数：容器的 3000 端口映射到本机的 8000 端口。</strong></li><li>​         <strong>|_ -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</strong></li><li>​         <strong>|_ koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</strong></li><li>​         <strong>|_ /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</strong></li></ul><hr><ul><li><strong># 打包镜像</strong></li><li><strong>docker save eb40dcf64078&gt; /root/mydjango-save-1016.tar</strong></li><li><strong># 导入镜像</strong></li><li><strong>docker load -i /root/mydjango-save-1016.tar</strong></li><li><strong>docker load &lt; /root/mydjango-save-1016.tar</strong></li><li><strong># 打 tag</strong></li><li><strong>docker tag \</strong>eb40dcf64078** runoob/centos:dev**</li></ul><hr><h2 id="增"><a href="#增" class="headerlink" title="增"></a><strong>增</strong></h2><ul><li><p><strong># 创建NFS数据卷</strong> </p></li><li><p><strong>docker volume create</strong></p><p><strong>创建命令</strong></p><p>  docker volume create –driver local \</p><blockquote><p>–opt type=nfs <br>–opt o=addr=服务端IP,vers=4,soft,timeo=180,bg,tcp,rw <br>–opt device=服务端IP:/data</p></blockquote></li></ul><p>自定义名称</p><hr><ul><li><strong># 创建config配置文件</strong></li><li><strong>docker config create 创建配置文件名称 本地配置文件路径名称</strong> </li></ul><h1 id="Docker-run命令参数"><a href="#Docker-run命令参数" class="headerlink" title="Docker run命令参数"></a>Docker run命令参数</h1><pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]     -d, --detach=false         指定容器运行于前台还是后台，默认为false      -i, --interactive=false    打开STDIN，用于控制台交互     -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false     -u, --user=&quot;&quot;              指定容器的用户     -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）   -w, --workdir=&quot;&quot;           指定容器的工作目录    -c, --cpu-shares=0         设置容器CPU权重，在CPU共享场景使用     -e, --env=[]               指定环境变量，容器中可以使用该环境变量     -m, --memory=&quot;&quot;            指定容器的内存上限     -P, --publish-all=false    指定容器暴露的端口     -p, --publish=[]           指定容器暴露的端口    -h, --hostname=&quot;&quot;          指定容器的主机名     -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录     --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录   --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities     --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities     --cidfile=&quot;&quot;               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法     --cpuset=&quot;&quot;                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU     --device=[]                添加主机设备给容器，相当于设备直通     --dns=[]                   指定容器的dns服务器     --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件     --entrypoint=&quot;&quot;            覆盖image的入口点     --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量     --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口     --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息     --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用     --name=&quot;&quot;                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字     --net=&quot;bridge&quot;             容器网络设置:                                 bridge 使用docker daemon指定的网桥                                      host    //容器使用主机的网络                                   container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源                                   none 容器使用自己的网络（类似--net=bridge），但是不进行配置    --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities     --restart=&quot;no&quot;             指定容器停止后的重启策略:                                 no：容器退出时不重启                                   on-failure：容器故障退出（返回值非零）时重启                                  always：容器退出时总是重启     --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)     --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理 </code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jumpserver安装使用</title>
      <link href="/posts/11838/"/>
      <url>/posts/11838/</url>
      
        <content type="html"><![CDATA[<h1 id="xo-1-Jumpserver堡垒机概述-部署Jumpserver运行环境"><a href="#xo-1-Jumpserver堡垒机概述-部署Jumpserver运行环境" class="headerlink" title="xo.1 Jumpserver堡垒机概述-部署Jumpserver运行环境"></a>xo.1 Jumpserver堡垒机概述-部署Jumpserver运行环境</h1><h2 id="xo-1-1-跳板机概述："><a href="#xo-1-1-跳板机概述：" class="headerlink" title="xo.1.1 跳板机概述："></a>xo.1.1 跳板机概述：</h2><p><strong>跳板机就是一台服务器，开发或运维人员在维护过程中首先要统一登录到这台服务器，然后再登录到目标设备进行维护和操作；</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2075287634.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)**"></p><p><strong>跳板机缺点：没有实现对运维人员操作行为的控制和审计，使用跳板机的过程中还是会出现误操作、违规操作导致的事故，一旦出现操作事故很难快速定位到原因和责任人；</strong></p><p><strong>堡垒机概述：</strong></p><p><strong>堡垒机，即在一个特定的网络环境下，为了保障网络和数据不受来自外部和内部用户的入侵和破坏，而运用各种技术手段实时收集和监控网络环境中每一个组成部分的系统状态、安全事件、网络活动，以便集中报警、及时处理及审计定责。</strong></p><p><strong>总结：堡垒机比跳板机多了实时收集、监控网络环境、集中报警等功能。</strong></p><p><strong>Jumpserver**</strong>概述：**</p><p><strong>Jumpserver**</strong>是一款使用Python, Django开发的开源跳板机系统, 为互联网企业提供了认证，授权，审计，自动化运维等功能。**</p><p><strong>官方网址**</strong>： <a href="http://www.jumpserver.org/">http://www.jumpserver.org</a>**</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/60833568.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)"></p><p><strong>jumpserver**</strong>堡垒机组件说明：**</p><p><strong>1**</strong>、Jumpserver：**</p><p><strong>现指 Jumpserver 管理后台，是核心组件（Core）, 使用 Django Class Based View 风格开发，支持 Restful API。</strong></p><p><strong>2**</strong>、Coco：**</p><p><strong>实现了 SSH Server 和 Web Terminal Server 的组件，提供 SSH 和 WebSocket 接口, 使用 Paramiko 和 Flask 开发。</strong></p><p><strong>3**</strong>、Luna：**</p><p><strong>现在是 Web Terminal 前端，计划前端页面都由该项目提供，Jumpserver 只提供 API，不再负责后台渲染html等。</strong></p><h1 id="实验所需软件包-file-href-”http-cloud-xoxoyun-cn-index-php-share-folder-amp-user-1-amp-sid-tYZErASh-quot-Jumpserver所需包-file"><a href="#实验所需软件包-file-href-”http-cloud-xoxoyun-cn-index-php-share-folder-amp-user-1-amp-sid-tYZErASh-quot-Jumpserver所需包-file" class="headerlink" title="实验所需软件包[file href=”http://cloud.xoxoyun.cn/index.php?share/folder&amp;user=1&amp;sid=tYZErASh&quot;]Jumpserver所需包[/file]"></a>实验所需软件包[file href=”<a href="http://cloud.xoxoyun.cn/index.php?share/folder&amp;user=1&amp;sid=tYZErASh&quot;%5DJumpserver%E6%89%80%E9%9C%80%E5%8C%85%5B/file%5D">http://cloud.xoxoyun.cn/index.php?share/folder&amp;user=1&amp;sid=tYZErASh&quot;]Jumpserver所需包[/file]</a></h1><h2 id="xo-1-2-部署Jumpserver运行环境"><a href="#xo-1-2-部署Jumpserver运行环境" class="headerlink" title="xo.1.2 部署Jumpserver运行环境"></a>xo.1.2 部署Jumpserver运行环境</h2><p><strong>实验环境：</strong></p><p><strong>Andu66.cn IP : 192.168.10.66 jumpserver**</strong>服务端**</p><p><strong>Andu101.cn IP**</strong>：192.168.10.101 资源，被管理的服务器**</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/887254899.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)**"></p><p><strong>上传依赖的软件到到Linux系统上（因为在线安装下载太慢了）：</strong></p><p><strong>关闭 selinux 和防火墙</strong></p><p><strong>[root@Andu66 ~]# setenforce 0 #</strong> <strong>可以设置配置文件永久关闭</strong></p><p><strong>[root@Andu66 ~]# systemctl stop firewalld.service ; systemctl disable firewalld.service</strong></p><p><strong>#</strong> <strong>修改字符集，否则可能报 input/output error的问题，因为日志里打印了中文</strong></p><p><strong>[root@Andu66 ~]# localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8</strong></p><p><strong>[root@Andu66 ~]# export LC_ALL=zh_CN.UTF-8</strong></p><p><strong>[root@Andu66 ~]# echo ‘LANG=zh_CN.UTF-8’ &gt; /etc/locale.conf</strong></p><p><strong>[root@Andu66 ~]# exit</strong></p><p><strong>再重新连接， 这样语言环境就改变了。</strong></p><h2 id="xo-1-3-准备-Python3-和-Python-虚拟环境"><a href="#xo-1-3-准备-Python3-和-Python-虚拟环境" class="headerlink" title="xo.1.3  准备 Python3 和 Python 虚拟环境"></a>xo.1.3  准备 Python3 和 Python 虚拟环境</h2><p><strong>1**</strong>、安装依赖包**</p><p><strong>注：安装前，可以开启yum缓存功能，把软件包下载下来，方便后期使用。</strong></p><p><strong>[root@Andu66 ~]# vim /etc/yum.conf</strong></p><p><strong>改：keepcache=0</strong></p><p><strong>为：keepcache=1</strong></p><p><strong>[root@Andu66 ~]# yum -y install wget sqlite-devel xz gcc automake zlib-devel openssl-devel epel-release git</strong></p><p><strong>2**</strong>、编译安装python3.6.1**</p><p><strong>[root@Andu66 ~]# cd /opt</strong> </p><p><strong>[root@Andu66 ~]# tar xvf Python-3.6.1.tar.xz &amp;&amp; cd Python-3.6.1</strong></p><p><strong>[root@Andu66 ~]# ./configure  &amp;&amp; make -j 4 &amp;&amp; make install</strong> </p><p><strong>#</strong> <strong>这里必须执行编译安装，否则在安装 Python 库依赖时会有麻烦…</strong></p><p><strong>注：在线下载 wget <a href="https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz">https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</a></strong></p><p><strong>互动： python2.7和python3.5冲突了怎么办？ 老程序需要使用2.7，新程序需要3.6？</strong></p><p><strong>3**</strong>、建立 Python 虚拟环境**</p><p><strong>因为 CentOS 6/7 自带的是 Python2，而 Yum 等工具依赖原来的 Python，为了不扰乱原来的环境我们来使用 Python 虚拟环境</strong></p><p><strong>[root@Andu66 ~]# cd /opt</strong></p><p><strong>[root@Andu66 ~]# python3 -m venv py3</strong></p><p><strong>[root@Andu66 ~]# source /opt/py3/bin/activate</strong></p><p><strong>(py3) [root@Andu66 ~]#    #**</strong>切换成功的，前面有一个py3 标识**</p><p><strong>#</strong> <strong>看到下面的提示符代表成功，以后运行 Jumpserver 都要先运行以上 source 命令，以下所有命令均在该虚拟环境中运行</strong></p><p><strong>这一招学到手:1</strong></p><h2 id="xo-1-4-安装-Jumpserver-1-0-0"><a href="#xo-1-4-安装-Jumpserver-1-0-0" class="headerlink" title="xo.1.4 安装 Jumpserver 1.0.0"></a>xo.1.4 安装 Jumpserver 1.0.0</h2><p><strong>1**</strong>、下载或 Clone 项目**</p><p><strong>项目提交较多 git clone 时较大，你可以选择去 Github 项目页面直接下载zip包。</strong></p><p><strong>(py3) [root@Andu66 ~]#  cd /opt/jumpserver/  #**</strong>我们已经提前下载**</p><p><strong>注：在线下载方法：</strong></p><p><strong>git clone –depth=1 <a href="https://github.com/jumpserver/jumpserver.git">https://github.com/jumpserver/jumpserver.git</a> &amp;&amp; cd jumpserver &amp;&amp; git checkout master</strong></p><p><strong>注：depth用于指定克隆深度，为1即表示只克隆最近一次commit</strong></p><p><strong>2**</strong>、 安装依赖 RPM 包**</p><p><strong>[root@Andu66 ~]# cd /opt/jumpserver/requirements</strong></p><p><strong>[root@Andu66 ~]# yum -y install $(cat rpm_requirements.txt)</strong> </p><p><strong>3**</strong>、 安装 Python 库依赖**</p><p><strong>[root@Andu66 ~]# cd /opt/jumpserver/requirements</strong></p><p><strong>[root@Andu66 ~]# source /opt/py3/bin/activate</strong></p><p><strong>(py3) [root@Andu66 ~]# pip -V</strong></p><p><strong>pip 9.0.1 from /opt/py3/lib/python3.6/site-packages (python 3.6)</strong> </p><p><strong>方法1：离线安装：</strong></p><p><strong>(py3) [root@Andu66 python-package]# cd /opt/python-package</strong> </p><p><strong>(py3) [root@Andu66 ~]# pip install  ./*</strong> </p><p><strong>方法2：在线安装：(py3) [root@Andu66 ~]#  pip install -r requirements.txt</strong> </p><p><strong>pip</strong> <strong>是一个安装和管理 Python 包的工具，相当于yum命令</strong></p><p><strong>4**</strong>、安装 Redis, Jumpserver 使用 Redis 做 cache 和 celery broke**</p><p><strong>[root@Andu66 ~]# yum  -y install redis</strong> </p><p><strong>[root@Andu66 ~]# systemctl enable redis ; systemctl start redis</strong></p><p><strong>5**</strong>、安装 MySQL**</p><p><strong>本教程使用 Mysql 作为数据库，如果不使用 Mysql 可以跳过相关 Mysql 安装和配置</strong></p><p><strong>[root@Andu66 ~]# yum  install mariadb mariadb-devel mariadb-server  -y</strong></p><p><strong>[root@Andu66 ~]# systemctl enable mariadb ; systemctl start mariadb</strong></p><p><strong>6**</strong>、建数据库 Jumpserver 并授权**</p><p><strong>[root@Andu66 ~]# mysql</strong></p><p><strong>MariaDB [(none)]&gt; create database jumpserver default charset ‘utf8’;</strong></p><p><strong>MariaDB [(none)]&gt; grant all on jumpserver.* to ‘jumpserver’@’127.0.0.1’ identified by ‘12xo56’;</strong></p><p><strong>MariaDB [(none)]&gt; exit;</strong></p><p><strong>7**</strong>、改 Jumpserver 配置文件**</p><p><strong>[root@Andu66 ~]# cd /opt/jumpserver</strong></p><p><strong>[root@Andu66 ~]# cp config_example.py config.py</strong></p><p><strong>[root@Andu66 ~]# vim config.py</strong></p><p><strong>#</strong> <strong>我们计划修改 DevelopmentConfig 中的配置，因为默认 Jumpserver 使用该配置，它继承自 Config</strong></p><p><strong>注意: 配置文件是 Python 格式，不要用 TAB，而要用空格</strong></p><p><strong>class DevelopmentConfig(Config):</strong></p><p>  <strong>DEBUG = True</strong></p><p>  <strong>DB_ENGINE = ‘mysql’</strong></p><p>  <strong>DB_HOST = ‘127.0.0.1’</strong></p><p>  <strong>DB_PORT = 3306</strong></p><p>  <strong>DB_USER = ‘jumpserver’</strong></p><p>  <strong>DB_PASSWORD = ‘12xo56’</strong></p><p>  <strong>DB_NAME = ‘jumpserver’</strong></p><p><strong>如下：一定要注意前面空格的对齐。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2466249223.png" alt="4.png"></p><p><strong>8**</strong>、成数据库表结构和初始化数据**</p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt/jumpserver/utils</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# bash make_migrations.sh #**</strong>注，在执行这一条命令之前，必续保障之前的pip install ./* 命令已经执行完了，不然后导入不了Django等软件包。**</p><p><strong>9**</strong>、行 Jumpserver**</p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt/jumpserver</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# chmod +x jms</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# ./jms start all -d #</strong> <strong>后台运行使用 -d 参数</strong></p><p><strong>注： ./jms start all #前台运行</strong></p><p><strong>如果运行失败了，重新启动一下。</strong></p><p><strong>#**</strong>启动服务的脚本，使用方式./jms start|stop|status|restart all 后台运行请添加 -d 参数**</p><p><strong>测试：</strong></p><p><strong>访问 <a href="http://192.168.10.66:8080/">http://192.168.10.66:8080/</a>  用户 ： admin 密码： admin</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/950863279.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)"></p><p><strong>这里需要使用8080端口来访问页面。后期搭建 nginx 代理，就可以直接使用80端口正常访问了</strong></p><p><strong>附上重启的方法</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# ./jms restart -d</strong> </p><h1 id="xo-2-安装-Coco组件"><a href="#xo-2-安装-Coco组件" class="headerlink" title="xo.2 安装 Coco组件"></a>xo.2 安装 Coco组件</h1><h2 id="xo-2-1-安装coco组件"><a href="#xo-2-1-安装coco组件" class="headerlink" title="xo.2.1  安装coco组件"></a>xo.2.1  安装coco组件</h2><p><strong>1**</strong>、默认点击web终端，弹出：**</p><p>下载coco配置包，git地址： git clone <a href="https://github.com/jumpserver/coco.git">https://github.com/jumpserver/coco.git</a></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/987735106.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)**"></p><p><strong>所以接下来，我们安装luna和coco：</strong></p><p><strong>coco**</strong>概述：coco实现了 SSH Server 和 Web Terminal Server 的组件，提供 SSH 和 WebSocket 接口, 使用 Paramiko 和 Flask 开发。**</p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt/coco #**</strong>直接使用离线代码**</p><p><strong>(py3) [root@Andu66 jumpserver]# source /opt/py3/bin/activate</strong> </p><p><strong>附：在线下载代码：# git clone <a href="https://github.com/jumpserver/coco.git">https://github.com/jumpserver/coco.git</a> &amp;&amp; cd coco &amp;&amp; git checkout master</strong></p><p><strong>2**</strong>、 安装coco的依赖包，主要有rpm和python包**</p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt/coco/requirements</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# yum -y install $(cat rpm_requirements.txt)</strong> </p><p><strong>(py3) [root@Andu66 jumpserver]# pip install -r requirements.txt  #**</strong>前面已经离线安装过python的包，这里就很快安装成功了，或提示已经安装成功。**</p><p><strong>注：扩展： pip download -r requirements.txt #使用download可以下载python包到本地</strong></p><p><strong>3**</strong>、查看配置文件并运行**</p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt/coco</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# cp conf_example.py conf.py #</strong> <strong>如果 coco 与 jumpserver 分开部署，请手动修改 conf.py</strong></p><p><strong>(py3) [root@Andu66 coco]# chmod +x cocod</strong> </p><p><strong>(py3) [root@Andu66 jumpserver]# ./cocod start -d  #**</strong>后台运行使用 -d 参数**</p><p><strong>#</strong> <strong>新版本更新了运行脚本，使用方式./cocod start|stop|status|restart 后台运行请添加 -d 参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="xo-3-安装Web-Terminal前端-Luna组件-配置Nginx整合各组件"><a href="#xo-3-安装Web-Terminal前端-Luna组件-配置Nginx整合各组件" class="headerlink" title="xo.3 安装Web-Terminal前端-Luna组件-配置Nginx整合各组件"></a>xo.3 安装Web-Terminal前端-Luna组件-配置Nginx整合各组件</h1><h2 id="xo-3-1-安装luna组件"><a href="#xo-3-1-安装luna组件" class="headerlink" title="xo.3.1 安装luna组件"></a>xo.3.1 安装luna组件</h2><p><strong>Luna**</strong>概述：Luna现在是 Web Terminal 前端，计划前端页面都由该项目提供，Jumpserver 只提供 API，不再负责后台渲染html等。**</p><p><strong>访问（<a href="https://github.com/jumpserver/luna/releases%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84">https://github.com/jumpserver/luna/releases）下载对应版本的</a> release 包，直接解压，不需要编译</strong></p><p> <strong>解压 Luna</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# cd /opt</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# tar xvf luna.tar.gz</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# ls /opt/luna</strong></p><p><strong>注：在线下载</strong></p><p><strong>#wget <a href="https://github.com/jumpserver/luna/releases/download/v1.0.0/luna.tar.gz">https://github.com/jumpserver/luna/releases/download/v1.0.0/luna.tar.gz</a></strong></p><h2 id="xo-3-2-配置-Nginx-整合各组件"><a href="#xo-3-2-配置-Nginx-整合各组件" class="headerlink" title="xo.3.2 配置 Nginx 整合各组件"></a>xo.3.2 配置 Nginx 整合各组件</h2><p><strong>安装 Nginx 根据喜好选择安装方式和版本</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# yum -y install nginx</strong></p><p><strong>5.2</strong> <strong>准备配置文件 修改 /etc/nginx/conf.d/jumpserver.conf</strong></p><p><strong>内容如下：</strong></p><p><strong>(py3) [root@Andu66 opt]# vim /etc/nginx/nginx.conf</strong></p><p><strong>删除第38行到 57行中server {。。。}相关的内容，在vim命令模式，输入38gg，快速跳到38行，然后输入20dd，就可以删除。</strong></p><p><strong>删除后，在38行插入以一下内容:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"> </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"> </span><br><span class="line">    location &#x2F;luna&#x2F; &#123;</span><br><span class="line">        try_files $uri &#x2F; &#x2F;index.html;</span><br><span class="line">        alias &#x2F;opt&#x2F;luna&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location &#x2F;media&#x2F; &#123;</span><br><span class="line">        add_header Content-Encoding gzip;</span><br><span class="line">        root &#x2F;opt&#x2F;jumpserver&#x2F;data&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location &#x2F;static&#x2F; &#123;</span><br><span class="line">        root &#x2F;opt&#x2F;jumpserver&#x2F;data&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location &#x2F;socket.io&#x2F; &#123;</span><br><span class="line">        proxy_pass       http:&#x2F;&#x2F;localhost:5000&#x2F;socket.io&#x2F;;  # 如果coco安装在别的服务器，请填写它的ip</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:8080;  # 如果jumpserver安装在别的服务器，请填写它的ip</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xo-3-3-运行-Nginx"><a href="#xo-3-3-运行-Nginx" class="headerlink" title="xo.3.3 运行 Nginx"></a>xo.3.3 运行 Nginx</h2><p><strong>(py3) [root@Andu66 opt]# nginx -t  #</strong> <strong>检测配置文件</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# systemctl start nginx ; systemctl enable nginx</strong></p><h2 id="xo-3-4-接受coco注册"><a href="#xo-3-4-接受coco注册" class="headerlink" title="xo.3.4 接受coco注册"></a>xo.3.4 接受coco注册</h2><p><strong>到会话管理-终端管理 接受 Coco的注册。点接受。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2219189626.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3820716859.png" alt="8.png"></p><p><strong>再刷新页面：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1909261169.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)"></p><p><strong><em>\</em></strong> <strong>测试连接**</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# ssh -p2222 <a href="mailto:&#97;&#100;&#109;&#105;&#x6e;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#49;&#48;&#46;&#x36;&#54;">&#97;&#100;&#109;&#105;&#x6e;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#49;&#48;&#46;&#x36;&#54;</a>  #**</strong>密码: admin**</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3248456103.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)"></p><p><strong>到此安装成功。</strong></p><h1 id="xo-4-jumpserver平台系统初始化"><a href="#xo-4-jumpserver平台系统初始化" class="headerlink" title="xo.4 jumpserver平台系统初始化"></a>xo.4 jumpserver平台系统初始化</h1><h2 id="xo-4-1-系统基本设置"><a href="#xo-4-1-系统基本设置" class="headerlink" title="xo.4.1 系统基本设置"></a>xo.4.1 系统基本设置</h2><p><strong>这里要写成自己真实的URL地址，不然后期用户访问不了。<a href="http://192.168.10.66/">http://192.168.10.66</a></strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/757874155.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)![img]"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3773867249.png" alt="12.png"></p><h2 id="xo-4-2-配置邮件发送服务器"><a href="#xo-4-2-配置邮件发送服务器" class="headerlink" title="xo.4.2 配置邮件发送服务器"></a>xo.4.2 配置邮件发送服务器</h2><p><strong>点击页面上边的”邮件设置” TAB ，进入邮件设置页面：</strong> </p><p><strong>SMTP**</strong>服务器：smtp.163.com**</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1787807832.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)"></p><p><strong>注：自己邮箱要开启smtp和pop3服务。</strong></p><p>开启POP3/SMTP/IMAP服务方法：</p><p><strong>请登录<a href="http://email.163.com/">163邮箱</a>，点击页面右上角的“设置”—在“高级”下，点“POP3/SMTP/IMAP”，勾选图中两个选项，点击确定。即可开启成功。开通后即可用<a href="http://help.163.com/09/1218/14/5QQS7HIA00753VB8.html">闪电邮</a>、<a href="http://help.163.com/09/1222/17/5R5GPV6C00753VB8.html">Outlook</a>等软件收发邮件了。</strong></p><p><strong>![什么是POP3、SMTP及IMAP？　]<img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3526646633.png" alt="(file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image031.gif)"></strong></p><p>服务器地址<strong>：POP3服务器：pop.163.com  |</strong> <strong>SMTP**</strong>服务器：smtp.163.com  | IMAP服务器：imap.163.com**</p><p><strong>注：配置完后，需要重启一下服务。不然后期创建用户，收不到邮件。</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# /opt/jumpserver/jms stop all -d</strong></p><p><strong>(py3) [root@Andu66 jumpserver]# /opt/jumpserver/jms start all -d</strong></p><p><strong>配置邮件服务后，点击页面的”测试连接”按钮，如果配置正确，Jumpserver 会发送一条测试邮件到您的 SMTP 账号邮箱里面：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/4035821686.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image033.jpg)"></p><p><strong>查看邮箱：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/468941603.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image035.jpg)"></p><p><strong>收到邮件后，点提交：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/976514992.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image037.jpg)"></p><p><strong>注意： 在使用jumpserver过程中，有一步是系统用户推送，要推送成功，client（后端服务器）要满足以下条件：<br> 1）后端服务器需要有python、sudo环境才能使用推送用户，批量命令等功能<br> 2）后端服务器如果开启了selinux，请安装libselinux-python。一般情况服务器上都关闭了selinux</strong></p><h1 id="xo-5-使用jumpserver-管理王者荣耀数万台游戏服务器"><a href="#xo-5-使用jumpserver-管理王者荣耀数万台游戏服务器" class="headerlink" title="xo.5 使用jumpserver 管理王者荣耀数万台游戏服务器"></a>xo.5 使用jumpserver 管理王者荣耀数万台游戏服务器</h1><h2 id="xo-5-1-用户管理"><a href="#xo-5-1-用户管理" class="headerlink" title="xo.5.1 用户管理"></a>xo.5.1 用户管理</h2><p><strong>1**</strong>、添加用户组。**</p><p><strong>用户名即 Jumpserver 登录账号。用户组是用于资产授权，当某个资产对一个用户组授权后，这个用户组下面的所有用户就都可以使用这个资产了。角色用于区分一个用户是管理员还是普通用户。</strong></p><p><strong>点击用户管理 —&gt; 查看用户组 —&gt; 添加用户组</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/525957325.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image039.jpg)**"></p><p><strong>添加新的小组 —&gt; 王者荣耀-华北区运维部门</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3232072531.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image041.jpg)**"></p><p><strong>查看刚才添加的组</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/4175844189.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image043.jpg)**"></p><p><strong>2**</strong>、添加用户**</p><p><strong>点击用户管理 —&gt; 用户列表 —&gt; 创建用户</strong></p><p><strong>其中，名称是真实姓名，用户名即 Jumpserver 登录账号。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3694903309.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image045.jpg)**"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2914417934.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image047.jpg)"></p><p><strong>然后点提交。</strong></p><p><strong>查看添加的用户</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3476289403.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image049.jpg)**"></p><p><strong>成功提交用户信息后，Jumpserver 会发送一条设置”用户密码”的邮件到您填写的用户邮箱。</strong></p><p><strong>点击链接，开始修改密码：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1237722763.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image053.jpg)**"></p><p><strong>用户首次登录 Jumpserver，会被要求完善用户信息。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/819598847.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image055.jpg)"></p><p><strong>这个需要用户自己生成SSH 密钥，方便后期登录：我在自己的另一台linux上，使用mk用户生成自己的ssh密钥。</strong></p><p><strong>(py3) [root@Andu66 luna]# useradd xoxo123</strong></p><p><strong>(py3) [root@Andu66 luna]# echo 12xo56 | passwd –stdin xoxo123</strong> </p><p><strong>[root@Andu66 opt]# su - xoxo123</strong></p><p><strong>[mk@Andu66 ~]$ ssh-keygen  #**</strong>一路回车**</p><p><strong>[mk@Andu66 ~]$ cat ~/.ssh/id_rsa.pub</strong> </p><p><strong>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDW+wUBeICXOoguax/sO+uhg/EkaCNVQXgCldmiRSReXrwFYNRDbTdLwOTUWs8y6mo79XvdnF8Wkk0Yy1p4xH6FOU7+TY+WX/hz7IH+/y73vJHur2UP54j3QxDTH+bv36dERcJGu8PZ2ck8uS/emxGttIacg8lM5KtUthdKD9cEXVUBzSiSkpqwkCffKcg8ZJ4rYIsucJOgNLUGwZJ71uPETg1mQHvJryPQhfkrFvUn0jkXrhjBlcko+mJPimuct8PdEWSzcUrKTRCPWAWsLWUA8mWR7Bga8WE5iUICj/KfHq2enxRClj8ZRajxt2Kei50T8BAN0EreG/oZyI4cYrr xoxo123@Andu</strong></p><p><strong>把上面生成的公钥粘到这里：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2126088747.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image057.jpg)"></p><h2 id="xo-5-2-编辑资产树添加节点"><a href="#xo-5-2-编辑资产树添加节点" class="headerlink" title="xo.5.2 编辑资产树添加节点"></a>xo.5.2 编辑资产树添加节点</h2><p><strong>节点不能重名，右击节点可以添加、删除和重命名节点，以及进行资产相关的操作。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1251946814.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image059.jpg)**"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/746729145.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image061.jpg)**"></p><p><strong>改成节点名字为：王者荣耀-华北区-服务器</strong></p><h2 id="xo-5-3-创建管理用户"><a href="#xo-5-3-创建管理用户" class="headerlink" title="xo.5.3  创建管理用户"></a>xo.5.3  创建管理用户</h2><p><strong>Jumpserver**</strong>里各个用户的说明：<br> ![简单使用jumpserver]<img src="https://www.xoxoyun.cn/usr/uploads/2020/02/171879106.png" alt="(file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image063.gif)">**</p><p><strong>管理用户是服务器的 root，或拥有 NOPASSWD: ALL sudo 权限的用户，Jumpserver 使用该用户来推送系统用户、获取资产硬件信息等。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3441084798.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image065.jpg)**"></p><p><strong>王者荣耀-华北区-服务器管理用户-root   密码是： 12xo56</strong> </p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/313563219.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image067.jpg)**"></p><p><strong>前提，你的王者荣耀-华北区-服务器节点中所有的服务器root用户密码都是：123456</strong></p><p><strong>这样就可以使用此root用户管理服务器。</strong></p><h2 id="xo-5-4-创建系统用户"><a href="#xo-5-4-创建系统用户" class="headerlink" title="xo.5.4  创建系统用户"></a>xo.5.4  创建系统用户</h2><p><strong>系统用户是 Jumpserver 跳转登录资产时使用的用户，可以理解为登录资产用户， Jumpserver使用系统用户登录资产。</strong></p><p><strong>系统用户的 Sudo 栏填写允许当前系统用户免sudo密码执行的程序路径，如默认的/sbin/ifconfig，意思是当前系统用户可以直接执行 ifconfig 命令或 sudo ifconfig 而不需要输入当前系统用户的密码，执行其他的命令任然需要密码，以此来达到权限控制的目的。</strong></p><p><strong>#</strong> <strong>此处的权限应该根据使用用户的需求汇总后定制，原则上给予最小权限即可。</strong></p><p><strong>系统用户创建时，如果选择了自动推送 Jumpserver 会使用 Ansible 自动推送系统用户到资产中，如果资产(交换机、Windows )不支持 Ansible, 请手动填写账号密码。</strong></p><p><strong>Linux</strong> <strong>系统协议项务必选择 ssh 。如果用户在系统中已存在，请去掉自动生成密钥、自动推送勾选。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/632738152.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image069.jpg)**"></p><p><strong>增加一个：检查服务器运行状态的用户： user 权限： /sbin/ifconfig,/usr/bin/top,/usr/bin/free</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1422730946.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image071.jpg)**"></p><p><strong>再加一个： 系统管理员用户：manager</strong> </p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3511509906.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image073.jpg)**"></p><h2 id="xo-5-5-创建资产"><a href="#xo-5-5-创建资产" class="headerlink" title="xo.5.5  创建资产"></a>xo.5.5  创建资产</h2><p><strong>点击页面左侧的“资产管理”菜单下的“资产列表”按钮，查看当前所有的资产列表。</strong></p><p><strong>点击页面左上角的“创建资产”按钮，进入资产创建页面，填写资产信息。</strong></p><p><strong>IP</strong> <strong>地址和管理用户要确保正确，确保所选的管理用户的用户名和密码能”牢靠”地登录指定的 IP 主机上。资产的系统平台也务必正确填写。公网 IP 信息只用于展示，可不填，Jumpserver 连接资产使用的是 IP 信息。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1861558840.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image075.jpg)**"></p><p><strong>开启虚拟机Andu101.cn。 一会把这台机器当成资源添加平台中。</strong></p><p><strong>game64.xuegod.cn-**</strong>王者荣耀-华北区 192.168.10.101**</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/35627710.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image077.jpg)"></p><p><strong>资产创建信息填写好保存之后，可以看到已经可以连接资产，说明正常：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1998648710.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image079.jpg)"></p><p><strong>如果资产不能正常连接，请检查管理用户的用户名和密钥是否正确以及该管理用户是否能使用 SSH 从 Jumpserver 主机正确登录到资产主机上。</strong></p><h2 id="xo-5-6-网域列表"><a href="#xo-5-6-网域列表" class="headerlink" title="xo.5.6  网域列表"></a>xo.5.6  网域列表</h2><p><strong>网域功能是为了解决部分环境无法直接连接而新增的功能，原理是通过网关服务器进行跳转登录。</strong></p><p><strong>这个功能，一般情况不用到。</strong></p><h2 id="xo-5-7-创建授权规则"><a href="#xo-5-7-创建授权规则" class="headerlink" title="xo.5.7 创建授权规则"></a>xo.5.7 创建授权规则</h2><p><strong>节点，对应的是资产，代表该节点下的所有资产。</strong></p><p><strong>用户组，对应的是用户，代表该用户组下所有的用户。</strong></p><p><strong>系统用户，及所选的用户组下的用户能通过该系统用户使用所选节点下的资产。</strong></p><p><strong>节点，用户组，系统用户是一对一的关系，所以当拥有 Linux、Windows 不同类型资产时，应该分别给 Linux 资产和 Windows 资产创建授权规则。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1790809110.png" alt="**![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image081.jpg)**"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/267442749.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image083.jpg)"></p><p><strong>授权成功后，你自己手动到Andu101上查看：</strong></p><p><strong>[root@Andu101 ~]# tail /etc/passwd -n 5</strong></p><p><strong>postfix:x:89:89::/var/spool/postfix:/sbin/nologin</strong></p><p><strong>ntp:x:38:38::/etc/ntp:/sbin/nologin</strong></p><p><strong>tcpdump:x:72:72::/:/sbin/nologin</strong></p><p><strong>mk:x:1000:1000:mk:/home/mk:/bin/bash</strong></p><p><strong>manager:x:1001:1001::/home/manager:/bin/bash #**</strong>自动推送一个帐号，自动在资产服务器上创建系统用户**</p><p><strong>[root@Andu101 ~]# visudo #sudo**</strong>相关的规则也会被自动推送过来**</p><p><strong>manager ALL=(ALL) NOPASSWD: /sbin/,/bin/</strong></p><h2 id="xo-5-8-用户使用资产"><a href="#xo-5-8-用户使用资产" class="headerlink" title="xo.5.8 用户使用资产"></a>xo.5.8 用户使用资产</h2><p><strong>登录 Jumpserver</strong></p><p><strong>创建授权规则的时候，选择了用户组，所以这里需要登录所选用户组下面的用户才能看见相应的资产。</strong></p><p><strong>使用无痕浏览器，再打开一个窗口，进行登录：</strong></p><p><strong>用户正确登录后的页面：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1938123452.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image085.jpg)"></p><p><strong>连接资产，点击页面左边的 Web 终端：</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3363908533.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image087.jpg)"></p><p><strong>打开资产所在的节点：</strong></p><p><strong>双击资产名字，就连上资产了：</strong></p><p><strong>如果显示连接超时，请检查为资产分配的系统用户用户名和密钥是否正确，是否正确选择 Linux 操作系统，协议 ssh，端口22，以及资产的防火墙策略是否正确配置等信息。</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3366625010.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image089.jpg)"></p><p><strong>接下来，就可以对资产进行操作了。</strong></p><h2 id="xo-5-9-在xshell字符终端下连接jumpserver管理服务器"><a href="#xo-5-9-在xshell字符终端下连接jumpserver管理服务器" class="headerlink" title="xo.5.9 在xshell字符终端下连接jumpserver管理服务器"></a>xo.5.9 在xshell字符终端下连接jumpserver管理服务器</h2><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3940823113.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image091.jpg)"></p><p><strong>输入jumpserver用户xoxo123 和密码12xo56</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2929532066.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image093.jpg)"></p><p><strong>点击确定开始连接</strong></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/855979927.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image095.jpg)"></p><p><strong>Opt&gt; 64  #**</strong>输入一个101，就可以直接登录：192.168.10.101**</p><p><strong>Connecting to manager@Game-**</strong>王者荣耀-华北区 0.3**</p><p><strong>Last login: Fri Feb 21 23:02:58 2020 from 192.168.10.66</strong></p><p><strong>[manager@Andu101 ~]$</strong> </p><p><strong>[manager@Andu101 ~]$ whoami  #**</strong>发现登录使用的是系统用户manager**</p><p><strong>manager</strong></p><p><strong>[manager@Andu101 ~]$ exit</strong></p><p><strong>登出</strong></p><p><strong>Opt&gt; p #**</strong>显示你有权限的主机**</p><p> <strong>ID  Hostname             IP       LoginAs    Comment</strong>                </p><p> <strong>1  game64.xuegod.cn-**</strong>王者荣耀-华北区 192.168.10.101  [系统管理员用户]** </p><p><strong>Opt&gt; g #**</strong>显示你有权限的主机组**</p><p> <strong>ID Name      Assets   Comment</strong>                         </p><p> <strong>1</strong>  <strong>王者荣耀-华北区-服务器             1</strong>                   </p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1499231695.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image097.jpg)"></p><h2 id="xo-5-10-查看历史命令记录"><a href="#xo-5-10-查看历史命令记录" class="headerlink" title="xo.5.10 查看历史命令记录"></a>xo.5.10 查看历史命令记录</h2><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1119876398.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image099.jpg)"></p><h2 id="xo-5-10-查看历史会话并回放视频"><a href="#xo-5-10-查看历史会话并回放视频" class="headerlink" title="xo.5.10 查看历史会话并回放视频"></a>xo.5.10 查看历史会话并回放视频</h2><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2496026948.png" alt="![img](file:///C:/Users/dell/AppData/Local/Temp/msohtmlclip1/01/clip_image101.jpg)"></p><p><strong>更多内容，可以参数官方手册：<a href="http://docs.jumpserver.org/zh/docs/step_by_step.html">http://docs.jumpserver.org/zh/docs/step_by_step.html</a></strong></p><a id="more"></a><hr><p>原创不易，转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jumpserver </tag>
            
            <tag> 跳板机 </tag>
            
            <tag> 堡垒机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux压力测试工具</title>
      <link href="/posts/47461/"/>
      <url>/posts/47461/</url>
      
        <content type="html"><![CDATA[<h2 id="ab网站压力测试工具"><a href="#ab网站压力测试工具" class="headerlink" title="ab网站压力测试工具"></a>ab网站压力测试工具</h2><p>水一篇<del>~</del><br><strong>参数：</strong></p><p><strong>语法： ab -n 数字 -c 数字 http://链接</strong></p><p><code>-n requests Number of requests to perform**</code></p><p>在测试会话中所执行的请求总个数。默认时，仅执行一个请求<br> <code>-c concurrency Number of multiple requests to make</code><br> 一次产生的请求个数。默认是一次一个。</p><p> 同时处理1000个请求。 一次要执行1000个并发请求。**</p><p> <code>ab -n 1000 -c 1000 http://192.168.1.63/index.html**</code></p><p>ab命令在一般系统上面做测试时候，一般并发不能超过1024个，其实是因为因为系统限制每个进程打开的最大文件数为1024，可以用ulimit -a来查看</p><p><code>ab -n 1000 -c 1000 http://192.168.1.63/index.html</code></p><p><code>Server Software:    Apache/2.2.15  #****被测试的httpd服务器版本：//平台apache 版本2.0.54**</code></p><p><code>**Server Hostname:    192.168.1.63 //****服务器主机名**</code></p><p><code>**Server Port:      80 //****服务器端口**</code></p><p><code>**Document Path:     /index.html  //****测试的页面文档**</code></p><p><code>**Document Length:    13 bytes //****文档大小**</code></p><p><code>**Concurrency****（并发） Level:   1000** **//****并发数**</code></p><p><code>**Time taken for tests:  2.166 seconds #****整个测试花费的时间**</code></p><p><code>**Complete requests:   1000** **//****完成的请求数量**</code></p><p><code>**Failed requests:    0** **//****失败的请求数量**</code></p><p><code>**Write errors:      0**</code></p><p><code>**Total transferred:   281120 bytes**  **#****整个测试过程中总传输字节数**</code></p><p><code>**HTML transferred:    13052 bytes #****//****整个场景中的HTML内容传输量**</code></p><p><code>**Requests per second:  461.77 [#/sec] (mean)  #****每秒处理请求数。//大家最关心的指标之一，相当于服务器中的每秒事务数 ，后面括号中的 mean 表示这是一个平均值**</code></p><p><code>**Time per request:    2165.597 [ms] (mean) #** **//****大家最关心的指标之二，平均请求响应时间 ，后面括号中的 mean 表示这是一个平均值**</code></p><p><code>**Time per request:    2.166 [ms] (mean, across all concurrent requests)** **#****每个请求的时间：2.166[毫秒]（意思是说，在所有的并发请求） //每个请求实际运行时间的平均值。**</code></p><p><strong>由于对于并发请求，cpu实际上并不是同时处理的，而是按照每个请求获得的时间片逐个轮转处理的，所以基本上第一个Time per request时间约等于第二个Time per request时间乘以并发请求数</strong></p><p><code>**Transfer rate:     126.77 [Kbytes/sec] received #****传输速率：****//****平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题**</code></p><p><code>**Connection Times (ms) #****连接时间（毫秒）**</code></p><p> <code>**min mean[+/-sd] median  max  # median****（中间）**</code></p><h2 id="网站压力测试工具-Webbench"><a href="#网站压力测试工具-Webbench" class="headerlink" title="网站压力测试工具-Webbench"></a><strong>网站压力测试工具-Webbench</strong></h2><p>webbench简介：<br> Webbench是有名的网站压力测试工具，它是由 Lionbridge公司（<a href="http://www.lionbridge.com)开发的网站压力测试工具,它能测试处在相同硬件上,不同服务的性能以及不同硬件上同一个服务的运行状况.webbench不但能具有便准静态页面的测试能力,还能对动态页面(asp,php,java,cgi)进行测试的能力./">http://www.lionbridge.com）开发的网站压力测试工具，它能测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。webbench不但能具有便准静态页面的测试能力，还能对动态页面（ASP,PHP,JAVA,CGI）进行测试的能力。</a>**</p><p><strong>官网：<a href="http://www.lionbridge.com/">http://www.lionbridge.com</a></strong></p><p>下载并安装webbench：** </p><p><code>wget http://www.ha97.com/code/webbench-1.5.tar.gz</code><br><code>tar zxvf webbench-1.5.tar.gz** **</code><br><code>cd webbench-1.5</code><br><code>make**</code> </p><p> <code>mkdir -p /usr/local/man/man1 #****不创建这个执行make install报错：**</code></p><p><code>**install: cannot create regular file /usr/local/man/man1&#39;: No such file or directory</code></p><p><code>**make: \**\* [install] Error 1**</code></p><p><code>make install**</code></p><p><code>**install -s webbench /usr/local/bin**</code>   </p><p><code>**install -m 644 webbench.1 /usr/local/man/man1**</code>  </p><p><code>**install -d /usr/local/share/doc/webbench**</code></p><p><code>**install -m 644 debian/copyright /usr/local/share/doc/webbench**</code></p><p><code>**install -m 644 debian/changelog /usr/local/share/doc/webbench</code>**</p><p>进行测试<br> <code>webbench -h**</code></p><p><strong>测试参数解释：<br>  -c为客户端数，-t为时间(秒)</strong></p><p><strong>实战：当为1个客户端时，持续访问1秒。</strong><br><code>**webbench -c 1 -t 1 http://192.168.1.63/index.html**</code></p><p><code>**Webbench - Simple Web Benchmark 1.5**</code></p><p><code>**Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.**</code></p><p><code>**Benchmarking: GET http://192.168.1.63/index.html**</code></p><p><code>**1 client, running 1 sec.**</code></p><p><code>**Speed=****38219 pages/min****,** **178080** **bytes/sec.**</code></p><p><strong>#**</strong>当只有一个客户端时，一分钟可以响应**<strong>38219**</strong>个页面，1秒可以传输**<strong>178080**</strong>字节**</p><p><code>**Requests:** **637** **susceed,** **0** **failed.**</code></p><p><strong>#1**</strong>个客户端，1秒产生了**<strong>637**</strong>个请求，0个失败。**</p><p>**实战：使用20个客户端并发访问并持续访问10秒</p><p><code>webbench -c 20 -t 10 http://192.168.1.63/index.html</code></p><p><code>Webbench - Simple Web Benchmark 1.5</code></p><p><code>Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.</code></p><p><code>Benchmarking: GET http://192.168.1.63/index.html</code></p><p><code>**20 clients, running 10 sec.**</code></p><p>`` </p><p><code>**Speed=****397356** **pages/min, 1854384 bytes/sec.</code></p><p><code>**Requests:** **66226** **susceed, 0 failed.</code></p><p>测试注意事项：<br> 1.压力测试工作应该放到产品上线之前，而不是上线以后；<br> 2.webbench 做压力测试时，该软件自身也会消耗CPU和内存资源，为了测试准确，请将 webbench 安装在别的服务器上；<br> 3.测试时尽量跨公网进行，而不是内网； 如果带宽不够时，可以内网测试。<br> 4.测试时并发应当由小逐渐加大，观察一下网站负载及打开是否流畅，直到网站打开缓慢甚至网站完全打不开； 可以一边在linux测试，一个在浏览上打开，查看是否流畅。<br> 5.应尽量进行单元测试，如B2C网站可以着重测试购物车、推广页面等，因为这些页面占整个网站访问量比重较大。**</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ab </tag>
            
            <tag> Webbench </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PXE+Kickstart批量装机</title>
      <link href="/posts/14131/"/>
      <url>/posts/14131/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>PXE（预启动执行环境）是由intel公司开发的技术，可以让计算机通过网络来启动操作系统（前提是网卡支持pxe技术），主要用于在无人值守安装系统中引导客户端主机安装linux操作系统，kickstart是一种无人值守的安装方式，工作原理是预先把原本需要运维人员手工填写的参数保存成一个ks.cfg文件，当安装过程中需要填写参数时则自动匹配，kickstart生成的文件，所有只要kickstart文件包含了安装过程中需要人工填写的所有参数，从理论上来讲完全不需要人工干预</p></blockquote><h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><pre><code>1. PXE Client 从自己的PXE网卡启动，向本网络中的DHCP服务器索取IP2.DHCP 服务器返回分配给客户机的IP * 以及PXE文件的放置位置(该文件一般是放在TFTP服务器上)3.PXE Client 向本网络中的TFTP服务器索取pxelinux.0 文件4.PXE Client 取得pxelinux.0 文件后之执行该文件5. 根据pxelinux.0 的执行结果，通过TFTP服务器加载内核和文件系统 6.进入安装画面, 此时可以通过选择HTTP、FTP、NFS 方式之一进行安装</code></pre><p><img src="https://www.kococ.cn/usr/uploads/2020/02/2309972010.jpg" alt="1.jpg"></p><h2 id="Kickstart安装要求"><a href="#Kickstart安装要求" class="headerlink" title="Kickstart安装要求"></a>Kickstart安装要求</h2><pre><code>1.网卡必须支持PXE引导2.客户端需要有与Kickstart 通信的IP地址，这里一般都是通过DHCP自动分配IP地址来实现3.提供引导所需的文件，内核文件，内核镜像文件等，此时一般通过tftp-server等实现4.kickstart文件，它主要实现自动化安装的过程，比如配置主机名、添加用户、安装系统后相关操作5.提供安装源，一般就是NFS/ftp/httpd等</code></pre><p>工具：dhcp + tftp + syslinux + kickstart + vsftpd</p><p>可以结合httpd进行部署，这里不详细说明</p><h2 id="PXE服务器配置详解"><a href="#PXE服务器配置详解" class="headerlink" title="PXE服务器配置详解"></a>PXE服务器配置详解</h2><p><strong>环境</strong></p><pre><code>服务器系统：centos7.3网卡地址：192.168.3.0/24光盘镜像：centos-server-7.3-x86_64-dvd.iso安装工具：dhcp + tftp + syslinux + kickstart + vsftpd</code></pre><p><strong>部署</strong></p><ol><li><p>挂载系统光盘到/media/cdrom并搭建本地yum源或网络源</p><pre><code>省略</code></pre></li><li><p>使用yum安装需要的服务dhcp、tftpserver、syslinux、kickstart</p><p>[root@cenos2 ]# yum install -y dhcp vsftpd tftp tftp-server syslinux system-config-kickstart</p><pre><code>                  ##使用yum安装需要的软件包</code></pre></li><li><p>配置dhcp服务器并启动dhcpd服务</p><p> [root@cenos2 ]# vim /etc/dhcp/dhcpd.conf         ##编辑dhcp主配置文件<br> :r /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example        ##读入dhcp配置模板文件<br> —————————修改或添加以下参数—————————–<br> subnet 192.168.3.0 netmask 255.255.255.0 {<br>   range 192.168.3.200 192.168.3.220;<br>   next-server             192.168.3.1;                #ip不加引号，设置tftp地址<br>   filename                “pxelinux.0”;                ##设置pxe引导文件名称<br> }<br> [root@cenos2]# systemctl restart dhcpd            ##启动dhcpd服务</p></li><li><p>编辑tftp配置文件开启tftp并重启服务</p><p> vim /etc/xinetd.d/tftp                     ##编辑tftp配置文件<br> ———————–将下列参数改为no———————<br> {</p><pre><code>     disable                 = no #将yes改为no</code></pre><p> }<br> [root@cenos2]# systemctl restart tftp            ##启动tftp服务程序</p></li></ol><p>5.准备内核、初始化镜像、pxe引导、启动菜单文件复制到tftp目录，tftp的默认根目录为/var/lib/tftpboot/<br>内核和初始化文件：vmlinuz和initrd.img，文件光盘目录的Images/pxeboot目录下<br>Pxe引导文件：pxelinux.0由syslinux软件提供，目录在/usr/shar/syslinux/目录下<br>启动菜单文件：在光盘ioslinux/isolinux.cfg文件，复制后更名default</p><pre><code>[root@cenos2 network-scripts]# cd /var/lib/tftpboot/    #切换到tftp目录[root@cenos2 tftpboot]# mkdir pxelinux.cfg    #在tftp根目录创建启动菜单存放目录[root@cenos2 tftpboot]# cp /media/cdrom/images/pxeboot/initrd.img .                    #将初始化文件复制到tftp根目录[root@cenos2 tftpboot]# cp /media/cdrom/images/pxeboot/vmlinuz .                    #将内核文件复制到tftp根目录[root@cenos2 tftpboot]# cp /usr/share/syslinux/pxelinux.0 .                    #将pxe引导文件复制到tftp根目录[root@cenos2 tftpboot]# cp /media/cdrom/isolinux/isolinux.cfg ./pxelinux.cfg/default        #将启动菜单复制到tftp根目录的pxelinux.cfg目录下，更名为default[root@cenos2 tftpboot]# vim ./pxelinux.cfg/default        #编辑启动菜单文件</code></pre><p>—————————-修改以下行的内容——————————</p><pre><code>  原1行 default vesamenu.c32  改1行 default linux  原64行 append initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 quiet  改64行 append initrd=initrd.img inst.stage2=ftp://192.168.3.1 ks=ftp://192.168.3.1/ks.cfg quiet</code></pre><p>6.复制所有系统镜像文件到vsftp根目录下，vsftp默认根目录为/var/ftp/</p><pre><code>[root@cenos2 tftpboot]# cp -rf /media/cdrom/* /var/ftp/    ##复制镜像到vsftp根目录</code></pre><p>7.安装kickstart工具生成自动应答文件或者编辑一个自动应答文件，将其保存到vsftp根目录<br>这里用编辑的方式新建自动应答文件</p><pre><code>[root@cenos2 tftpboot]# vim /var/ftp/ks.cfg        //编辑自动应答文件----------------------------添加以下内容-----------------------------------#platform=x86, AMD64, 或 Intel EM64T#version=DEVEL# Install OS instead of upgradeinstallkeyboard &#39;us&#39;               #设置键盘语言rootpw --plaintext putianhui                #设置管理员密码url --url=&quot;ftp://192.168.3.1/&quot;              #设置安装源的路径这里用的ftplang zh_CN                                      #设置安装语言为中文auth  --useshadow  --passalgo=md5graphicalfirstboot --disableselinux --disabled                              #设置selinux为关闭firewall --disabled                             #设置防火墙为关闭network  --bootproto=dhcp --device=eth0 #网卡的ip获取类型和网卡的名称reboot                                          #设置安装成功之后自动重启timezone Asia/Shanghai                      #设置时区为亚洲shagnhaibootloader --location=mbrzerombrclearpart --all --initlabelpart / --fstype=&quot;xfs&quot; --size=15000          #设置磁盘挂载位置和分配磁盘大小15G%packages                #到end结束是复制anaconda中的安装脚本@desktop-debugging@development@gnome-desktop@remote-desktop-clientsvinagre%end</code></pre><p>8.重启dhcpd、vsftpd、tftp服务，然后关闭防火墙和selinux</p><pre><code>[root@cenos2 tftpboot]# systemctl restart dhcpd        ##重启dhcpd服务[root@cenos2 tftpboot]# systemctl restart vsftpd        ##重启vsftpd服务[root@cenos2 tftpboot]# systemctl restart tftp        ##重启tftp服务[root@cenos2 tftpboot]# systemctl stop firewalld        ##关闭防火墙[root@cenos2 tftpboot]# setenforce 0            ##关闭selinux</code></pre><p>9.新建虚拟机将网络和服务器改为同一模式，开机验证</p><h2 id="PXE常见故障："><a href="#PXE常见故障：" class="headerlink" title="PXE常见故障："></a>PXE常见故障：</h2><p>故障一：如果客户机开机可以获取到ip，但是提示pxe-e11:arp-timeout<br>解决办法：查看next-server的ip地址是否正确<br>故障二：如果使用system-config-kickstart工具选择软件包提示由于下载软件包失败<br>解决办法：将本地yum源的第一项 [***] 改为 [development]<br>故障三：虚拟机内存不足<br>解决方法：你懂的</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PXE </tag>
            
            <tag> Kickstart </tag>
            
            <tag> 批量装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP动态分配IP地址（Linux）</title>
      <link href="/posts/52995/"/>
      <url>/posts/52995/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>动态主机配置协议（DHCP，Dynamic Host Configuration Protocol），该协议用于自动管理局域网内主机的IP地址、子网掩码、网关地址及DNS地址等参数，可以有效地提升IP地址的利用率，提高配置效率，并降低管理与维护成本。<br>动态主机配置协议（DHCP）是一种基于UDP协议且仅限于在局域网内部使用的网络协议，主要用于大型的局域网环境或者存在较多移动办公设备的局域网环境中，其主要用途是为局域网内部的设备或网络供应商自动分配IP地址等参数</p></blockquote><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h2><p>作用域：一个完整的IP地址段，DHCP协议根据作用域来管理网络的分布、分配IP地址及其他配置参数。<br>超级作用域：用于管理处于同一个物理网络中的多个逻辑子网段。超级作用域中包含了可以统一管理的作用域列表。<br>排除范围：把作用域中的某些IP地址排除，确保这些IP地址不会分配给DHCP客户端。<br>地址池：在定义了DHCP的作用域并应用了排除范围后，剩余的用来动态分配给DHCP客户端的IP地址范围。<br>租约：DHCP客户端能够使用动态分配的IP地址的时间。<br>预约：保证网络中的特定设备总是获取到相同的IP地址。</p><h2 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h2><p>参数  |    作用</p><pre><code>ddns-update-style none;    设置DNS服务不自动进行动态更新ignore client-updates;    忽略客户端更新DNS记录subnet 192.168.10.0 netmask 255.255.255.0 &#123;    作用域为192.168.10.0/24网段range 192.168.10.50 192.168.10.150;    IP地址池为192.168.10.50-150（约100个IP地址）option subnet-mask 255.255.255.0;    定义客户端默认的子网掩码option routers 192.168.10.1;    定义客户端的网关地址option domain-name &quot;linuxprobe.com&quot;;    定义默认的搜索域option domain-name-servers 192.168.10.1;    定义客户端的DNS地址default-lease-time 21600;    定义默认租约时间（单位：秒）max-lease-time 43200;    定义最大预约时间（单位：秒）&#125;    结束符</code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Dhcp服务名称：dhcpd<br>主配置文件： /etc/dhcp/dhcpd.conf<br>配置文件模板：/usr/share/doc/dhcp-4.2.5/dhcpd.conf.example</p><ol><li><p>搭建本地yum源。（或使用网络YUM源）</p></li><li><p>使用yum方式安装dhcpd服务</p><p>  yum install dhcp* -y            //使用yum方式安装dhcp软件</p></li><li><p>查看dhcp主配置文件内容</p><p>  cat /etc/dhcp/dhcpd.conf        //查看dhcp的主配置文件内容</p></li><li><p>过滤配置文件模板到主配置文件</p><p>  cat /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example | grep -v ‘^#’ | grep -v ‘^$’ &gt; /etc/dhcp/dhcpd.conf</p></li><li><p>编辑主配置文件</p></li></ol><pre><code> option domain-name &quot;example.org&quot;;            //定义DNS域名    option domain-name-servers ns1.example.org;    //定义DNS服务器地址    default-lease-time 600;                //默认超时时间    max-lease-time 7200;                    //最大超时时间    log-facility local7;                    //    subnet 10.5.5.0 netmask 255.255.255.224 &#123;        //定义网段和子网掩码    range 10.5.5.26 10.5.5.30;                //定义地址池的范围    option domain-name-servers ns1.internal.example.org;    //定义DNS服务器地址    option domain-name &quot;internal.example.org&quot;;    //定义DNS域名    option routers 10.5.5.1;                //定义网关地址    option broadcast-address 10.5.5.31;            //定义广播地址    default-lease-time 600;                //默认超时时间    max-lease-time 7200;                    //最大超时时间    &#125; </code></pre><h2 id="客户端IP地址保留"><a href="#客户端IP地址保留" class="headerlink" title="客户端IP地址保留"></a>客户端IP地址保留</h2><pre><code>host 主机名称 &#123;                       Hardware     ethernet          该主机的mac地址;                       Fixed-address              欲指定的ip地址；&#125;</code></pre><ol><li><p>获取客户端mac地址，先让客户端自动获取一次，然后去日志文件获取mac地址，并追加到dhcpd主配置文件里面</p><p>tail -7 /var/log/messages &gt;&gt; /etc/dhcp/dhcpd.conf</p></li><li><p>更改主配置文件，设置保留mac地址和保留的ip地址</p><p>host boss {<br>hardware ethernet 00:50:56:3F:EC:80;<br>fixed-address 192.168.1.209;<br>}    </p></li><li><p>重启dhcpd的服务程序</p><p>systemctl restart dhcpd.service </p></li><li><p>客户端重新获取ip地址</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
            <tag> 自动分配IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（十二）</title>
      <link href="/posts/17150/"/>
      <url>/posts/17150/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson12-优化"><a href="#MySQL-lesson12-优化" class="headerlink" title="MySQL-lesson12-优化"></a>MySQL-lesson12-优化</h1><h1 id="1-优化哲学"><a href="#1-优化哲学" class="headerlink" title="1.优化哲学"></a>1.优化哲学</h1><h2 id="1-1-为什么优化？"><a href="#1-1-为什么优化？" class="headerlink" title="1.1 为什么优化？"></a>1.1 为什么优化？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了获得成就感?</span><br><span class="line">为了证实比系统设计者更懂数据库?</span><br><span class="line">为了从优化成果来证实优化者更有价值?</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-07ec8ccb021ce95b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/208/format/webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">但通常事实证实的结果往往会和您期待相反！</span><br><span class="line">优化有风险，涉足需谨慎！</span><br></pre></td></tr></table></figure><h2 id="1-2-优化风险"><a href="#1-2-优化风险" class="headerlink" title="1.2 优化风险"></a>1.2 优化风险</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">优化不总是对一个单纯的环境进行！还很可能是一个复杂的已投产的系统。</span><br><span class="line">优化手段本来就有很大的风险，只不过你没能力意识到和预见到！</span><br><span class="line">任何的技术可以解决一个问题，但必然存在带来一个问题的风险！</span><br><span class="line">对于优化来说解决问题而带来的问题控制在可接受的范围内才是有成果。</span><br><span class="line">保持现状或出现更差的情况都是失败！</span><br><span class="line"></span><br><span class="line">稳定性和业务可持续性通常比性能更重要！</span><br><span class="line">优化不可避免涉及到变更，变更就有风险！</span><br><span class="line">优化使性能变好，维持和变差是等概率事件！</span><br><span class="line">优化不能只是数据库管理员担当风险，但会所有的人分享优化成果！</span><br><span class="line">所以优化工作是由业务需要驱使的！！！</span><br></pre></td></tr></table></figure><h2 id="1-3-谁参与优化"><a href="#1-3-谁参与优化" class="headerlink" title="1.3 谁参与优化"></a>1.3 谁参与优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据库管理员</span><br><span class="line">业务部门代表</span><br><span class="line">应用程序架构师</span><br><span class="line">应用程序设计人员</span><br><span class="line">应用程序开发人员</span><br><span class="line">硬件及系统管理员</span><br><span class="line">存储管理员</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-76d310bb00d62d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361/format/webp" alt="img"></p><p>image.png</p><h2 id="1-4-优化方向"><a href="#1-4-优化方向" class="headerlink" title="1.4 优化方向"></a>1.4 优化方向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安全优化（业务持续性）</span><br><span class="line">性能优化（业务高效性）</span><br></pre></td></tr></table></figure><h2 id="1-5-优化的范围及思路"><a href="#1-5-优化的范围及思路" class="headerlink" title="1.5 优化的范围及思路"></a>1.5 优化的范围及思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">优化范围：</span><br><span class="line">存储、主机和操作系统:</span><br><span class="line">    主机架构稳定性</span><br><span class="line">    I&#x2F;O规划及配置</span><br><span class="line">    Swap</span><br><span class="line">    OS内核参数</span><br><span class="line">        网络问题</span><br><span class="line">应用程序:（Index，lock，session）</span><br><span class="line">        应用程序稳定性和性能</span><br><span class="line">        SQL语句性能</span><br><span class="line">    串行访问资源</span><br><span class="line">    性能欠佳会话管理</span><br><span class="line">数据库优化:（内存、数据库设计、参数）</span><br><span class="line">    内存</span><br><span class="line">    数据库结构(物理&amp;逻辑)</span><br><span class="line">    实例配置</span><br></pre></td></tr></table></figure><h2 id="优化效果和成本的评估："><a href="#优化效果和成本的评估：" class="headerlink" title="优化效果和成本的评估："></a>优化效果和成本的评估：</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-678232e9db29674c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/816/format/webp" alt="img"></p><p>image.png</p><h1 id="2-优化工具的使用"><a href="#2-优化工具的使用" class="headerlink" title="2. 优化工具的使用"></a>2. 优化工具的使用</h1><h2 id="2-1-系统层面的"><a href="#2-1-系统层面的" class="headerlink" title="2.1 系统层面的"></a>2.1 系统层面的</h2><h3 id="2-1-1-CPU"><a href="#2-1-1-CPU" class="headerlink" title="2.1.1 CPU"></a>2.1.1 CPU</h3><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><h3 id="cpu使用情况的平均值："><a href="#cpu使用情况的平均值：" class="headerlink" title="cpu使用情况的平均值："></a>cpu使用情况的平均值：</h3><p><img src="http://upload-images.jianshu.io/upload_images/16956686-5a9ab6361f5bd39b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/882/format/webp" alt="img"></p><p>image.png</p><h3 id="CPU每个核心的分别使用的情况（按1）："><a href="#CPU每个核心的分别使用的情况（按1）：" class="headerlink" title="CPU每个核心的分别使用的情况（按1）："></a>CPU每个核心的分别使用的情况（按1）：</h3><p><img src="http://upload-images.jianshu.io/upload_images/16956686-79cd367c7f5cc972.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/880/format/webp" alt="img"></p><p>image.png</p><h3 id="程序是如何使用CPU的？"><a href="#程序是如何使用CPU的？" class="headerlink" title="程序是如何使用CPU的？"></a>程序是如何使用CPU的？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统给每个程序分配CPU的时候，以时间来划分表的。</span><br></pre></td></tr></table></figure><h3 id="CPU有效工作时间"><a href="#CPU有效工作时间" class="headerlink" title="CPU有效工作时间?"></a>CPU有效工作时间?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算: 程序运行,数据处理</span><br><span class="line">控制: 少量的关于申请资源和释放资源等</span><br></pre></td></tr></table></figure><h3 id="CPU无效工作时间"><a href="#CPU无效工作时间" class="headerlink" title="CPU无效工作时间"></a>CPU无效工作时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">等待 IO</span><br></pre></td></tr></table></figure><h3 id="CPU各项指标说明"><a href="#CPU各项指标说明" class="headerlink" title="CPU各项指标说明"></a>CPU各项指标说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0.0 us</span><br><span class="line">用户程序，在运行过程中，使用的CPU时间的占比。</span><br><span class="line">我们希望的是越高越好，尽量控制在90%</span><br><span class="line">0.0 sy</span><br><span class="line">控制: 资源管理，内核的工作(系统调用)</span><br><span class="line">sys高的原因: </span><br><span class="line">      1.  bug ,中病毒了</span><br><span class="line">      2.  锁的问题</span><br><span class="line">99.9 id </span><br><span class="line">CPU空间的时间占比      </span><br><span class="line"></span><br><span class="line">0.0 wa</span><br><span class="line">CPU花在等待上的时间</span><br><span class="line">wa高的原因：</span><br><span class="line">          1. 锁</span><br><span class="line">          2. IO （raid，过度条带化）</span><br><span class="line">          3. 索引</span><br><span class="line">多cpu使用情况监控：</span><br><span class="line">主要判断我们cpu多核心有没有被充分利用。</span><br><span class="line">现象：单颗很忙，其他很闲，对于MySQL来讲，有可能是并发参数设定不合理导致的。</span><br></pre></td></tr></table></figure><h2 id="2-1-2-MEM"><a href="#2-1-2-MEM" class="headerlink" title="2.1.2 MEM"></a>2.1.2 MEM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KiB Mem :  4028432 total,  3774464 free,   116240 used,   137728 buff&#x2F;cache</span><br><span class="line">### 1.2.1 名称介绍</span><br><span class="line">total :总内存大小</span><br><span class="line">free  ：空闲的</span><br><span class="line">used  ：在使用的</span><br><span class="line">buff&#x2F;cache ：缓冲区 和 缓存</span><br></pre></td></tr></table></figure><h3 id="2-1-3-内存管理子系统："><a href="#2-1-3-内存管理子系统：" class="headerlink" title="2.1.3 内存管理子系统："></a>2.1.3 内存管理子系统：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">slab Allocator</span><br><span class="line">buddy system </span><br><span class="line">程序&#x3D;指令+数据</span><br><span class="line">对于page cache来讲(OS buffer)</span><br><span class="line">1. 内存的可用空间的计算   free +buffer cache </span><br><span class="line">2. 内存回收(buffer)的方式:</span><br><span class="line">        (1) 写入磁盘</span><br><span class="line">        (2) swap  </span><br><span class="line">对于数据库来讲：需要将swap屏蔽掉</span><br></pre></td></tr></table></figure><h2 id="2-1-4-swap"><a href="#2-1-4-swap" class="headerlink" title="2.1.4 swap"></a>2.1.4 swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  3701464 avail Mem </span><br><span class="line">Linux 6操作系统，默认回收策略（buffer cache），不立即回收策略</span><br><span class="line">内存使用达到100%-60%时候，40% 会使用swap</span><br><span class="line">Linux 7操作系统</span><br><span class="line">内存使用达到100%-30%（70%）时候，才会时候swap</span><br><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness </span><br><span class="line">30  </span><br><span class="line">echo 0 &gt;&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness    的内容改成0（临时）</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">添加:</span><br><span class="line">vm.swappiness&#x3D;0</span><br><span class="line">sysctl -p </span><br></pre></td></tr></table></figure><h3 id="2-2-iostat-命令"><a href="#2-2-iostat-命令" class="headerlink" title="2.2. iostat 命令"></a>2.2. iostat 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;tmp&#x2F;bigfile bs&#x3D;1M count&#x3D;4096</span><br><span class="line">iostat -dm 1</span><br><span class="line">现象说明</span><br><span class="line">1. IO 高 cpu us 也高,属于正常现象</span><br><span class="line">2. CPU  us高  IO很低   ,MySQL 不在做增删改查,有可能是存储过程,函数,排序,分组,多表连接</span><br><span class="line">3. Wait,SYS 高  , IO低:IO出问题了,锁等待过多的几率比较大. </span><br><span class="line">IOPS：每秒磁盘最多能够发生的IO次数，这是个定值 </span><br><span class="line">频繁小事务,IOPS很高,达到阈值,可能IO吞吐量没超过IO最大吞吐量.无法新的IO了</span><br><span class="line">存储规划有问题.</span><br></pre></td></tr></table></figure><h2 id="2-3-数据库优化工具"><a href="#2-3-数据库优化工具" class="headerlink" title="2.3 数据库优化工具"></a>2.3 数据库优化工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">show status  </span><br><span class="line">show variables </span><br><span class="line">show index  </span><br><span class="line">show processlist </span><br><span class="line">show slave status</span><br><span class="line">show engine innodb status </span><br><span class="line">desc &#x2F;explain </span><br><span class="line">    slowlog</span><br><span class="line">扩展类深度优化:</span><br><span class="line">pt系列</span><br><span class="line">mysqlslap </span><br><span class="line">sysbench </span><br><span class="line">information_schema </span><br><span class="line">performance_schema</span><br><span class="line">sys</span><br></pre></td></tr></table></figure><h1 id="3-优化思路分解"><a href="#3-优化思路分解" class="headerlink" title="3. 优化思路分解"></a>3. 优化思路分解</h1><h2 id="3-1-硬件优化"><a href="#3-1-硬件优化" class="headerlink" title="3.1 硬件优化"></a>3.1 硬件优化</h2><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">真实的硬件（PC Server）: DELL  R系列 ，华为，浪潮，HP，联想</span><br><span class="line">云产品：ECS、数据库RDS、DRDS</span><br><span class="line">IBM 小型机 P6  570  595   P7 720  750 780     P8 </span><br></pre></td></tr></table></figure><h2 id="CPU根据数据库类型"><a href="#CPU根据数据库类型" class="headerlink" title="CPU根据数据库类型"></a>CPU根据数据库类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OLTP </span><br><span class="line">OLAP  </span><br><span class="line">IO密集型：线上系统，OLTP主要是IO密集型的业务，高并发</span><br><span class="line">CPU密集型：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）</span><br><span class="line">CPU密集型： I 系列的，主频很高，核心少 </span><br><span class="line">IO密集型：  E系列（至强），主频相对低，核心数量多</span><br></pre></td></tr></table></figure><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建议2-3倍cpu核心数量 （ECC）</span><br></pre></td></tr></table></figure><h2 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SATA-III   SAS    Fc    SSD（sata） pci-e  ssd  Flash</span><br><span class="line">主机 RAID卡的BBU(Battery Backup Unit)关闭</span><br></pre></td></tr></table></figure><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根据存储数据种类的不同，选择不同的存储设备</span><br><span class="line">配置合理的RAID级别(raid5、raid10、热备盘)   </span><br><span class="line">r0 :条带化 ,性能高</span><br><span class="line">r1 :镜像，安全</span><br><span class="line">r5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）</span><br><span class="line">r10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、硬件买好的（单卡单口）</span><br><span class="line">2、网卡绑定（bonding），交换机堆叠</span><br><span class="line">以上问题，提前规避掉。</span><br></pre></td></tr></table></figure><h2 id="3-2-操作系统优化"><a href="#3-2-操作系统优化" class="headerlink" title="3.2 操作系统优化"></a>3.2 操作系统优化</h2><h2 id="Swap调整"><a href="#Swap调整" class="headerlink" title="Swap调整"></a>Swap调整</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt;&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness的内容改成0（临时），</span><br><span class="line">&#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">上添加vm.swappiness&#x3D;0（永久）</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">这个参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。</span><br><span class="line">当然，这个参数只能减少使用swap的概率，并不能避免Linux使用swap。</span><br><span class="line"></span><br><span class="line">修改MySQL的配置参数innodb_flush_method，开启O_DIRECT模式</span><br><span class="line">这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多</span><br></pre></td></tr></table></figure><h2 id="IO调度策略"><a href="#IO调度策略" class="headerlink" title="IO调度策略"></a>IO调度策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">centos 7 默认是deadline</span><br><span class="line">cat   &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler</span><br><span class="line"></span><br><span class="line">#临时修改为deadline(centos6)</span><br><span class="line">echo deadline &gt;&#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler </span><br><span class="line">vi &#x2F;boot&#x2F;grub&#x2F;grub.conf</span><br><span class="line">更改到如下内容:</span><br><span class="line">kernel &#x2F;boot&#x2F;vmlinuz-2.6.18-8.el5 ro root&#x3D;LABEL&#x3D;&#x2F; elevator&#x3D;deadline rhgb quiet</span><br><span class="line"></span><br><span class="line">IO ：</span><br><span class="line">    raid</span><br><span class="line">    no lvm</span><br><span class="line">    ext4或xfs</span><br><span class="line">    ssd</span><br><span class="line">    IO调度策略</span><br><span class="line">提前规划好以上所有问题，减轻MySQL优化的难度。</span><br></pre></td></tr></table></figure><h2 id="3-3-应用端"><a href="#3-3-应用端" class="headerlink" title="3.3 应用端"></a>3.3 应用端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 开发过程规范,标准</span><br><span class="line">2. 减少烂SQL:不走索引,复杂逻辑,切割大事务.</span><br><span class="line">3. 避免业务逻辑错误,避免锁争用.</span><br><span class="line">这个阶段,需要我们DBA深入业务,或者要和开发人员\业务人员配合实现</span><br><span class="line"></span><br><span class="line">优化,最根本的是&quot;优化&quot;人.</span><br><span class="line">                    ----oldguo      </span><br></pre></td></tr></table></figure><h1 id="4-MySQL参数优化测试"><a href="#4-MySQL参数优化测试" class="headerlink" title="4. MySQL参数优化测试"></a>4. MySQL参数优化测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">虚拟机vm12.5，OS centos 6.9（系统已优化），cpu*4（I5 4440 3.1GHZ）,MEM*4GB ,HardDisk:SSD</span><br><span class="line"></span><br><span class="line">模拟数据库数据</span><br><span class="line">drop database if exists oldboy;</span><br><span class="line">create database oldboy charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">use oldboy;</span><br><span class="line">create table t_100w (id int,num int,k1 char(2),k2 char(4),dt timestamp);</span><br><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create  procedure rand_data(in num int)</span><br><span class="line">begin</span><br><span class="line">declare str char(62) default &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;</span><br><span class="line">declare str2 char(2);</span><br><span class="line">declare str4 char(4);</span><br><span class="line">declare i int default 0;</span><br><span class="line">while i&lt;num do</span><br><span class="line">set str2&#x3D;concat(substring(str,1+floor(rand()*61),1),substring(str,1+floor(rand()*61),1));</span><br><span class="line">set str4&#x3D;concat(substring(str,1+floor(rand()*61),2),substring(str,1+floor(rand()*61),2));</span><br><span class="line">set i&#x3D;i+1;</span><br><span class="line">insert into t_100w values (i,floor(rand()*num),str2,str4,now());</span><br><span class="line">end while;</span><br><span class="line">end;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line">插入100w条数据：</span><br><span class="line">call rand_data(10000000);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf \</span><br><span class="line">--concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;oldboy&#39; \</span><br><span class="line">--query&#x3D;&quot;select * from oldboy.t1000w where k2&#x3D;&#39;FGCD&#39;&quot; engine&#x3D;innodb \</span><br><span class="line">--number-of-queries&#x3D;200 -uroot -p123 -verbose</span><br></pre></td></tr></table></figure><h1 id="5-优化细节："><a href="#5-优化细节：" class="headerlink" title="5. 优化细节："></a>5. 优化细节：</h1><h2 id="5-1-参数优化"><a href="#5-1-参数优化" class="headerlink" title="5.1 参数优化"></a>5.1 参数优化</h2><h2 id="Max-connections"><a href="#Max-connections" class="headerlink" title="Max_connections *"></a>Max_connections <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">Mysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值。</span><br><span class="line">（2）判断依据</span><br><span class="line">show variables like &#39;max_connections&#39;;</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">    | Variable_name   | Value |</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">    | max_connections | 151   |</span><br><span class="line">    +-----------------+-------+</span><br><span class="line">show status like &#39;Max_used_connections&#39;;</span><br><span class="line">    +----------------------+-------+</span><br><span class="line">    | Variable_name        | Value |</span><br><span class="line">    +----------------------+-------+</span><br><span class="line">    | Max_used_connections | 101   |</span><br><span class="line">    +----------------------+-------+</span><br><span class="line"></span><br><span class="line">（3）修改方式举例</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf </span><br><span class="line">Max_connections&#x3D;1024</span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">    1.开启数据库时,我们可以临时设置一个比较大的测试值</span><br><span class="line">    2.观察show status like &#39;Max_used_connections&#39;;变化</span><br><span class="line">    3.如果max_used_connections跟max_connections相同,</span><br><span class="line">    那么就是max_connections设置过低或者超过服务器的负载上限了，</span><br><span class="line">    低于10%则设置过大. </span><br></pre></td></tr></table></figure><h2 id="back-log"><a href="#back-log" class="headerlink" title="back_log ***"></a>back_log ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">mysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。</span><br><span class="line">back_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它</span><br><span class="line">（2）判断依据</span><br><span class="line">show full processlist</span><br><span class="line">发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值</span><br><span class="line">（3）修改方式举例</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf </span><br><span class="line">back_log&#x3D;1024</span><br></pre></td></tr></table></figure><h2 id="wait-timeout和interactive-timeout"><a href="#wait-timeout和interactive-timeout" class="headerlink" title="wait_timeout和interactive_timeout ****"></a>wait_timeout和interactive_timeout ****</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">wait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数</span><br><span class="line">interactive_timeout：指的是mysql在关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200。</span><br><span class="line">wait_timeout:如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用</span><br><span class="line">（2）设置建议</span><br><span class="line">如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低</span><br><span class="line">（3）修改方式举例</span><br><span class="line">wait_timeout&#x3D;60</span><br><span class="line">interactive_timeout&#x3D;1200</span><br><span class="line">长连接的应用，为了不去反复的回收和分配资源，降低额外的开销。</span><br><span class="line">一般我们会将wait_timeout设定比较小，interactive_timeout要和应用开发人员沟通长链接的应用是否很多。如果他需要长链接，那么这个值可以不需要调整。</span><br><span class="line">另外还可以使用类外的参数弥补。</span><br></pre></td></tr></table></figure><h2 id="5-4-key-buffer-size"><a href="#5-4-key-buffer-size" class="headerlink" title="5.4 key_buffer_size *"></a>5.4 key_buffer_size <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">key_buffer_size指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度</span><br><span class="line">《1》此参数与myisam表的索引有关</span><br><span class="line">《2》临时表的创建有关（多表链接、子查询中、union）</span><br><span class="line">     在有以上查询语句出现的时候，需要创建临时表，用完之后会被丢弃</span><br><span class="line">     临时表有两种创建方式：</span><br><span class="line">                        内存中-------&gt;key_buffer_size</span><br><span class="line">                        磁盘上-------&gt;ibdata1(5.6)</span><br><span class="line">                                      ibtmp1 (5.7）</span><br><span class="line">（2）设置依据</span><br><span class="line">通过key_read_requests和key_reads可以直到key_baffer_size设置是否合理。</span><br><span class="line">mysql&gt; show variables like &quot;key_buffer_size%&quot;;</span><br><span class="line">+-----------------+---------+</span><br><span class="line">| Variable_name   | Value   |</span><br><span class="line">+-----------------+---------+</span><br><span class="line">| key_buffer_size | 8388608 |</span><br><span class="line">+-----------------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; show status like &quot;key_read%&quot;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Key_read_requests | 10    |</span><br><span class="line">| Key_reads         | 2     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">一共有10个索引读取请求，有2个请求在内存中没有找到直接从硬盘中读取索引</span><br><span class="line">控制在 5%以内 。</span><br><span class="line">注：key_buffer_size只对myisam表起作用，即使不使用myisam表，但是内部的临时磁盘表是myisam表，也要使用该值。</span><br><span class="line">可以使用检查状态值created_tmp_disk_tables得知：</span><br><span class="line"></span><br><span class="line">mysql&gt; show status like &quot;created_tmp%&quot;;</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Variable_name           | Value |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">| Created_tmp_disk_tables | 0     |</span><br><span class="line">| Created_tmp_files       | 6     |</span><br><span class="line">| Created_tmp_tables      | 1     |</span><br><span class="line">+-------------------------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">mysql&gt; </span><br><span class="line">通常地，我们习惯以 Created_tmp_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line">Created_tmp_disk_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line"></span><br><span class="line">或者已各自的一个时段内的差额计算，来判断基于内存的临时表利用率。所以，我们会比较关注 Created_tmp_disk_tables 是否过多，从而认定当前服务器运行状况的优劣。</span><br><span class="line">Created_tmp_disk_tables&#x2F;(Created_tmp_disk_tables + Created_tmp_tables) </span><br><span class="line">控制在5%-10%以内</span><br><span class="line">看以下例子：</span><br><span class="line">在调用mysqldump备份数据时，大概执行步骤如下：</span><br><span class="line">180322 17:39:33       7 Connect     root@localhost on</span><br><span class="line">7 Query       &#x2F;*!40100 SET @@SQL_MODE&#x3D;&#39;&#39; *&#x2F;</span><br><span class="line">7 Init DB     guo</span><br><span class="line">7 Query       SHOW TABLES LIKE &#39;guo&#39;</span><br><span class="line">7 Query       LOCK TABLES &#96;guo&#96; READ &#x2F;*!32311 LOCAL *&#x2F;</span><br><span class="line">7 Query       SET OPTION SQL_QUOTE_SHOW_CREATE&#x3D;1</span><br><span class="line">7 Query       show create table &#96;guo&#96;</span><br><span class="line">7 Query       show fields from &#96;guo&#96;</span><br><span class="line">7 Query       show table status like &#39;guo&#39;</span><br><span class="line">7 Query       SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; * FROM &#96;guo&#96;</span><br><span class="line">7 Query       UNLOCK TABLES</span><br><span class="line">7 Quit</span><br><span class="line"></span><br><span class="line">其中，有一步是：show fields from &#96;guo&#96;。从slow query记录的执行计划中，可以知道它也产生了 Tmp_table_on_disk。</span><br><span class="line"></span><br><span class="line">所以说，以上公式并不能真正反映到mysql里临时表的利用率，有些情况下产生的 Tmp_table_on_disk 我们完全不用担心，因此没必要过分关注 Created_tmp_disk_tables，但如果它的值大的离谱的话，那就好好查一下，你的服务器到底都在执行什么查询了。 </span><br><span class="line">（3）配置方法</span><br><span class="line">key_buffer_size&#x3D;64M</span><br></pre></td></tr></table></figure><h2 id="query-cache-size"><a href="#query-cache-size" class="headerlink" title="query_cache_size ***"></a>query_cache_size ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">（1）简介：</span><br><span class="line">查询缓存简称QC，使用查询缓冲，mysql将查询结果存放在缓冲区中，今后对于同样的select语句（区分大小写）,将直接从缓冲区中读取结果。</span><br><span class="line"></span><br><span class="line">SQL层：</span><br><span class="line">select * from t1 where name&#x3D;:NAME;</span><br><span class="line">select * from t1 where name&#x3D;:NAME;</span><br><span class="line"></span><br><span class="line">1、查询完结果之后，会对SQL语句进行hash运算，得出hash值,我们把他称之为SQL_ID</span><br><span class="line">2、会将存储引擎返回的结果+SQL_ID存储到缓存中。</span><br><span class="line"></span><br><span class="line">存储方式：</span><br><span class="line">例子：select * from t1  where id&#x3D;10;      100次</span><br><span class="line"></span><br><span class="line">1、将select * from t1  where id&#x3D;10; 进行hash运算计算出一串hash值，我们把它称之为“SQL_ID&quot;</span><br><span class="line">2、将存储引擎返回上来的表的内容+SQLID存储到查询缓存中</span><br><span class="line"></span><br><span class="line">使用方式：</span><br><span class="line">1、一条SQL执行时，进行hash运算，得出SQLID，去找query cache</span><br><span class="line">2、如果cache中有，则直接返回数据行，如果没有，就走原有的SQL执行流程</span><br><span class="line"></span><br><span class="line">一个sql查询如果以select开头，那么mysql服务器将尝试对其使用查询缓存。</span><br><span class="line">注：两个sql语句，只要想差哪怕是一个字符（列如大小写不一样；多一个空格等）,那么这两个sql将使用不同的一个cache。</span><br><span class="line"></span><br><span class="line">（2）判断依据</span><br><span class="line">mysql&gt; show status like &quot;%Qcache%&quot;;</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">| Variable_name           | Value   |</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">| Qcache_free_blocks      | 1       |</span><br><span class="line">| Qcache_free_memory      | 1031360 |</span><br><span class="line">| Qcache_hits             | 0       |</span><br><span class="line">| Qcache_inserts          | 0       |</span><br><span class="line">| Qcache_lowmem_prunes    | 0       |</span><br><span class="line">| Qcache_not_cached       | 2002    |</span><br><span class="line">| Qcache_queries_in_cache | 0       |</span><br><span class="line">| Qcache_total_blocks     | 1       |</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">---------------------状态说明--------------------</span><br><span class="line">Qcache_free_blocks：缓存中相邻内存块的个数。</span><br><span class="line">如果该值显示较大，则说明Query Cache 中的内存碎片较多了，FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。</span><br><span class="line">注：当一个表被更新之后，和它相关的cache </span><br><span class="line">blocks将被free。但是这个block依然可能存在队列中，除非是在队列的尾部。可以用FLUSH QUERY CACHE语句来清空free blocks</span><br><span class="line"></span><br><span class="line">Qcache_free_memory：Query Cache 中目前剩余的内存大小。通过这个参数我们可以较为准确的观察出当前系统中的Query Cache 内存大小是否足够，是需要增加还是过多了。</span><br><span class="line"></span><br><span class="line">Qcache_hits：表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</span><br><span class="line"></span><br><span class="line">Qcache_inserts：表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</span><br><span class="line"></span><br><span class="line">Qcache_lowmem_prunes：</span><br><span class="line">多少条Query因为内存不足而被清除出QueryCache。通过“Qcache_lowmem_prunes”和“Qcache_free_memory”相互结合，能够更清楚的了解到我们系统中Query Cache 的内存大小是否真的足够，是否非常频繁的出现因为内存不足而有Query 被换出。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。（上面的free_blocks和free_memory可以告诉您属于哪种情况）</span><br><span class="line"></span><br><span class="line">Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。</span><br><span class="line"></span><br><span class="line">Qcache_queries_in_cache：当前Query Cache 中cache 的Query 数量；</span><br><span class="line">Qcache_total_blocks：当前Query Cache 中的block 数量；。</span><br><span class="line">Qcache_hits &#x2F; (Qcache_inserts+Qcache_not_cached+Qcache_hits) </span><br><span class="line">    90&#x2F;         10000             0             90</span><br><span class="line"></span><br><span class="line">如果出现hits比例过低，其实就可以关闭查询缓存了。使用redis专门缓存数据库</span><br><span class="line"></span><br><span class="line">Qcache_free_blocks    来判断碎片</span><br><span class="line">Qcache_free_memory   +   Qcache_lowmem_prunes  来判断内存够不够</span><br><span class="line">Qcache_hits 多少次命中  Qcache_hits &#x2F; (Qcache_inserts+Qcache_not_cached+Qcache_hits)  </span><br><span class="line"></span><br><span class="line">（3）配置示例</span><br><span class="line">mysql&gt; show variables like &#39;%query_cache%&#39; ;</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| have_query_cache             | YES     |</span><br><span class="line">| query_cache_limit            | 1048576 |</span><br><span class="line">| query_cache_min_res_unit     | 4096    |</span><br><span class="line">| query_cache_size             | 1048576 |</span><br><span class="line">| query_cache_type             | OFF     |</span><br><span class="line">| query_cache_wlock_invalidate | OFF     |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">-------------------配置说明-------------------------------</span><br><span class="line">以上信息可以看出query_cache_type为off表示不缓存任何查询</span><br><span class="line"></span><br><span class="line">各字段的解释：</span><br><span class="line">query_cache_limit：超过此大小的查询将不缓存</span><br><span class="line">query_cache_min_res_unit：缓存块的最小大小，query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。</span><br><span class="line">query_cache_size：查询缓存大小 (注：QC存储的最小单位是1024byte，所以如果你设定了一个不是1024的倍数的值，这个值会被四舍五入到最接近当前值的等于1024的倍数的值。)</span><br><span class="line"></span><br><span class="line">query_cache_type：缓存类型，决定缓存什么样的查询，注意这个值不能随便设置，必须设置为数字，可选项目以及说明如下：</span><br><span class="line">如果设置为0，那么可以说，你的缓存根本就没有用，相当于禁用了。</span><br><span class="line">如果设置为1，将会缓存所有的结果，除非你的select语句使用SQL_NO_CACHE禁用了查询缓存。</span><br><span class="line">如果设置为2，则只缓存在select语句中通过SQL_CACHE指定需要缓存的查询。</span><br><span class="line"></span><br><span class="line">修改&#x2F;etc&#x2F;my.cnf,配置完后的部分文件如下：</span><br><span class="line">query_cache_size&#x3D;128M</span><br><span class="line">query_cache_type&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="max-connect-errors"><a href="#max-connect-errors" class="headerlink" title="max_connect_errors ***"></a>max_connect_errors ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max_connect_errors是一个mysql中与安全有关的计数器值，它负责阻止过多尝试失败的客户端以防止暴力破解密码等情况，当超过指定次数，mysql服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息 max_connect_errors的值与性能并无太大关系。</span><br><span class="line">修改&#x2F;etc&#x2F;my.cnf文件，在[mysqld]下面添加如下内容</span><br><span class="line">max_connect_errors&#x3D;2000</span><br></pre></td></tr></table></figure><h2 id="sort-buffer-size"><a href="#sort-buffer-size" class="headerlink" title="sort_buffer_size ***"></a>sort_buffer_size ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">（1）简介：</span><br><span class="line">每个需要进行排序的线程分配该大小的一个缓冲区。增加这值加速</span><br><span class="line">ORDER BY </span><br><span class="line">GROUP BY</span><br><span class="line">distinct</span><br><span class="line">union </span><br><span class="line"></span><br><span class="line">（2）配置依据</span><br><span class="line">Sort_Buffer_Size并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。</span><br><span class="line">列如：500个连接将会消耗500*sort_buffer_size（2M）&#x3D;1G内存</span><br><span class="line">（3）配置方法</span><br><span class="line"> 修改&#x2F;etc&#x2F;my.cnf文件，在[mysqld]下面添加如下：</span><br><span class="line">sort_buffer_size&#x3D;1M</span><br></pre></td></tr></table></figure><h2 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="max_allowed_packet *"></a>max_allowed_packet <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）简介：</span><br><span class="line">mysql根据配置文件会限制，server接受的数据包大小。</span><br><span class="line">（2）配置依据：</span><br><span class="line">有时候大的插入和更新会受max_allowed_packet参数限制，导致写入或者更新失败，更大值是1GB，必须设置1024的倍数</span><br><span class="line">（3）配置方法：</span><br><span class="line">max_allowed_packet&#x3D;32M</span><br></pre></td></tr></table></figure><h2 id="join-buffer-size"><a href="#join-buffer-size" class="headerlink" title="join_buffer_size ***"></a>join_buffer_size ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select a.name,b.name from a join b on a.id&#x3D;b.id where xxxx</span><br><span class="line">用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</span><br><span class="line">尽量在SQL与方面进行优化，效果较为明显。</span><br><span class="line">优化的方法：在on条件列加索引，至少应当是有MUL索引</span><br></pre></td></tr></table></figure><h2 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size *"></a>thread_cache_size <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(1)简介</span><br><span class="line">服务器线程缓存，这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时,那么客户端的线程将被放到缓存中以响应下一个客户而不是销毁(前提是缓存数未达上限),如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.</span><br><span class="line">（2）配置依据</span><br><span class="line">通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。</span><br><span class="line">设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。</span><br><span class="line">服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)</span><br><span class="line"></span><br><span class="line">试图连接到MySQL(不管是否连接成功)的连接数</span><br><span class="line">mysql&gt;  show status like &#39;threads_%&#39;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 8     |</span><br><span class="line">| Threads_connected | 2     |</span><br><span class="line">| Threads_created   | 4783  |</span><br><span class="line">| Threads_running   | 1     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Threads_cached :代表当前此时此刻线程缓存中有多少空闲线程。</span><br><span class="line">Threads_connected:代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。</span><br><span class="line">Threads_created:代表从最近一次服务启动，已创建线程的数量，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗cpu SYS资源，可以适当增加配置文件中thread_cache_size值。</span><br><span class="line">Threads_running :代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态。</span><br><span class="line">(3)配置方法：</span><br><span class="line">thread_cache_size&#x3D;32</span><br><span class="line"></span><br><span class="line">整理：</span><br><span class="line">Threads_created  ：一般在架构设计阶段，会设置一个测试值，做压力测试。</span><br><span class="line">结合zabbix监控，看一段时间内此状态的变化。</span><br><span class="line">如果在一段时间内，Threads_created趋于平稳，说明对应参数设定是OK。</span><br><span class="line">如果一直陡峭的增长，或者出现大量峰值，那么继续增加此值的大小，在系统资源够用的情况下（内存）</span><br></pre></td></tr></table></figure><h2 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size *"></a>innodb_buffer_pool_size <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">对于InnoDB表来说，innodb_buffer_pool_size的作用就相当于key_buffer_size对于MyISAM表的作用一样。</span><br><span class="line">（2）配置依据：</span><br><span class="line">InnoDB使用该参数指定大小的内存来缓冲数据和索引。</span><br><span class="line">对于单独的MySQL数据库服务器，最大可以把该值设置成物理内存的80%,一般我们建议不要超过物理内存的70%。</span><br><span class="line">（3）配置方法</span><br><span class="line">innodb_buffer_pool_size&#x3D;2048M</span><br></pre></td></tr></table></figure><h2 id="innodb-flush-log-at-trx-commit"><a href="#innodb-flush-log-at-trx-commit" class="headerlink" title="innodb_flush_log_at_trx_commit"></a>innodb_flush_log_at_trx_commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。</span><br><span class="line">0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入日志文件并flush磁盘一次；</span><br><span class="line">1，</span><br><span class="line">每次事务的提交都会引起redo日志文件写入、flush磁盘的操作，确保了事务的ACID；</span><br><span class="line">2，每次事务提交引起写入日志文件的动作,但每秒钟完成一次flush磁盘操作。</span><br><span class="line"></span><br><span class="line">（2）配置依据</span><br><span class="line">实际测试发现，该值对插入数据的速度影响非常大，设置为2时插入10000条记录只需要2秒，设置为0时只需要1秒，而设置为1时则需要229秒。因此，MySQL手册也建议尽量将插入操作合并成一个事务，这样可以大幅提高速度。</span><br><span class="line">根据MySQL官方文档，在允许丢失最近部分事务的危险的前提下，可以把该值设为0或2。</span><br><span class="line">（3）配置方法</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">双1标准中的一个1</span><br></pre></td></tr></table></figure><h2 id="innodb-thread-concurrency"><a href="#innodb-thread-concurrency" class="headerlink" title="innodb_thread_concurrency ***"></a>innodb_thread_concurrency ***</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">（1）简介</span><br><span class="line">此参数用来设置innodb线程的并发数量，默认值为0表示不限制。</span><br><span class="line">（2）配置依据</span><br><span class="line">在官方doc上，对于innodb_thread_concurrency的使用，也给出了一些建议，如下：</span><br><span class="line">如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency&#x3D;0；</span><br><span class="line">如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency&#x3D;128，</span><br><span class="line">并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，</span><br><span class="line">例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，</span><br><span class="line">性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，</span><br><span class="line">建议设置innodb_thread_concurrency参数为80，以避免影响性能。</span><br><span class="line">如果你不希望InnoDB使用的虚拟CPU数量比用户线程使用的虚拟CPU更多（比如20个虚拟CPU），</span><br><span class="line">建议通过设置innodb_thread_concurrency 参数为这个值（也可能更低，这取决于性能体现），</span><br><span class="line">如果你的目标是将MySQL与其他应用隔离，你可以l考虑绑定mysqld进程到专有的虚拟CPU。</span><br><span class="line">但是需 要注意的是，这种绑定，在myslqd进程一直不是很忙的情况下，可能会导致非最优的硬件使用率。在这种情况下，</span><br><span class="line">你可能会设置mysqld进程绑定的虚拟 CPU，允许其他应用程序使用虚拟CPU的一部分或全部。</span><br><span class="line">在某些情况下，最佳的innodb_thread_concurrency参数设置可以比虚拟CPU的数量小。</span><br><span class="line">定期检测和分析系统，负载量、用户数或者工作环境的改变可能都需要对innodb_thread_concurrency参数的设置进行调整。</span><br><span class="line"></span><br><span class="line">128   -----&gt; top  cpu  </span><br><span class="line">设置标准：</span><br><span class="line">1、当前系统cpu使用情况，均不均匀</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">2、当前的连接数，有没有达到顶峰</span><br><span class="line">show status like &#39;threads_%&#39;;</span><br><span class="line">show processlist;</span><br><span class="line">（3）配置方法：</span><br><span class="line">innodb_thread_concurrency&#x3D;8</span><br><span class="line">方法:</span><br><span class="line">    1. 看top ,观察每个cpu的各自的负载情况</span><br><span class="line">    2. 发现不平均,先设置参数为cpu个数,然后不断增加(一倍)这个数值</span><br><span class="line">    3. 一直观察top状态,直到达到比较均匀时,说明已经到位了.</span><br></pre></td></tr></table></figure><h2 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a>innodb_log_buffer_size</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，对于较大的事务，可以增大缓存大小。</span><br><span class="line">innodb_log_buffer_size&#x3D;128M</span><br><span class="line"></span><br><span class="line">设定依据：</span><br><span class="line">1、大事务： 存储过程调用 CALL</span><br><span class="line">2、多事务</span><br></pre></td></tr></table></figure><h2 id="innodb-log-file-size-100M"><a href="#innodb-log-file-size-100M" class="headerlink" title="innodb_log_file_size = 100M *"></a>innodb_log_file_size = 100M <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置 ib_logfile0  ib_logfile1 </span><br><span class="line">此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能.</span><br><span class="line">innodb_log_file_size &#x3D; 100M</span><br></pre></td></tr></table></figure><h2 id="innodb-log-files-in-group-3"><a href="#innodb-log-files-in-group-3" class="headerlink" title="innodb_log_files_in_group = 3 *"></a>innodb_log_files_in_group = 3 <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br></pre></td></tr></table></figure><h2 id="read-buffer-size-1M"><a href="#read-buffer-size-1M" class="headerlink" title="read_buffer_size = 1M **"></a>read_buffer_size = 1M **</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和 sort_buffer_size一样，该参数对应的分配内存也是每个连接独享</span><br></pre></td></tr></table></figure><h2 id="read-rnd-buffer-size-1M"><a href="#read-rnd-buffer-size-1M" class="headerlink" title="read_rnd_buffer_size = 1M **"></a>read_rnd_buffer_size = 1M **</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</span><br><span class="line">注：顺序读是指根据索引的叶节点数据就能顺序地读取所需要的行数据。随机读是指一般需要根据辅助索引叶节点中的主键寻找实际行数据，而辅助索引和主键所在的数据段不同，因此访问方式是随机的。</span><br></pre></td></tr></table></figure><h2 id="bulk-insert-buffer-size-8M"><a href="#bulk-insert-buffer-size-8M" class="headerlink" title="bulk_insert_buffer_size = 8M **"></a>bulk_insert_buffer_size = 8M **</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">批量插入数据缓存大小，可以有效提高插入效率，默认为8M</span><br><span class="line">tokuDB    percona</span><br><span class="line">myrocks   </span><br><span class="line">RocksDB</span><br><span class="line">TiDB</span><br><span class="line">MongoDB</span><br></pre></td></tr></table></figure><h2 id="binary-log"><a href="#binary-log" class="headerlink" title="binary log *"></a>binary log <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log-bin&#x3D;&#x2F;data&#x2F;mysql-bin</span><br><span class="line">binlog_cache_size &#x3D; 2M &#x2F;&#x2F;为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存, 提高记录bin-log的效率。没有什么大事务，dml也不是很频繁的情况下可以设置小一点，如果事务大而且多，dml操作也频繁，则可以适当的调大一点。前者建议是--1M，后者建议是：即 2--4M</span><br><span class="line">max_binlog_cache_size &#x3D; 8M &#x2F;&#x2F;表示的是binlog 能够使用的最大cache 内存大小</span><br><span class="line">max_binlog_size&#x3D; 512M &#x2F;&#x2F;指定binlog日志文件的大小，如果当前的日志大小达到max_binlog_size，还会自动创建新的二进制日志。你不能将该变量设置为大于1GB或小于4096字节。默认值是1GB。在导入大容量的sql文件时，建议关闭sql_log_bin，否则硬盘扛不住，而且建议定期做删除。</span><br><span class="line">expire_logs_days &#x3D; 7 &#x2F;&#x2F;定义了mysql清除过期日志的时间。</span><br><span class="line">二进制日志自动删除的天数。默认值为0,表示“没有自动删除”。</span><br><span class="line">log-bin&#x3D;&#x2F;data&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row </span><br><span class="line">sync_binlog&#x3D;1</span><br><span class="line">双1标准(基于安全的控制)：</span><br><span class="line">sync_binlog&#x3D;1   什么时候刷新binlog到磁盘，每次事务commit</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">show status like &#39;com_%&#39;;</span><br></pre></td></tr></table></figure><h2 id="安全参数"><a href="#安全参数" class="headerlink" title="安全参数 *"></a>安全参数 <strong>*</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Innodb_flush_method&#x3D;(O_DIRECT, fsync) </span><br><span class="line">1、fsync    ：</span><br><span class="line">（1）在数据页需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">但，如果innodb_flush_log_at_trx_commit&#x3D;1的话，日志还是直接每次commit直接写入磁盘</span><br><span class="line">2、 Innodb_flush_method&#x3D;O_DIRECT</span><br><span class="line">（1）在数据页需要持久化时，直接写入磁盘</span><br><span class="line">（2）在redo buffuer需要持久化时，首先将数据写入OS buffer中，然后由os决定什么时候写入磁盘</span><br><span class="line">但，如果innodb_flush_log_at_trx_commit&#x3D;1的话，日志还是直接每次commit直接写入磁盘</span><br><span class="line"></span><br><span class="line">最安全模式：</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">innodb_flush_method&#x3D;O_DIRECT</span><br><span class="line">最高性能模式：</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;0</span><br><span class="line">innodb_flush_method&#x3D;fsync</span><br><span class="line"></span><br><span class="line">一般情况下，我们更偏向于安全。 </span><br><span class="line">“双一标准”</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1        ***************</span><br><span class="line">sync_binlog&#x3D;1                                   ***************</span><br><span class="line">innodb_flush_method&#x3D;O_DIRECT</span><br></pre></td></tr></table></figure><h1 id="6-参数优化结果"><a href="#6-参数优化结果" class="headerlink" title="6. 参数优化结果"></a>6. 参数优化结果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql.log</span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">skip-name-resolve</span><br><span class="line">server-id&#x3D;52</span><br><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line">relay_log_purge&#x3D;0</span><br><span class="line">max_connections&#x3D;1024</span><br><span class="line">back_log&#x3D;128</span><br><span class="line">wait_timeout&#x3D;60</span><br><span class="line">interactive_timeout&#x3D;7200</span><br><span class="line">key_buffer_size&#x3D;16M</span><br><span class="line">query_cache_size&#x3D;64M</span><br><span class="line">query_cache_type&#x3D;1</span><br><span class="line">query_cache_limit&#x3D;50M</span><br><span class="line">max_connect_errors&#x3D;20</span><br><span class="line">sort_buffer_size&#x3D;2M</span><br><span class="line">max_allowed_packet&#x3D;32M</span><br><span class="line">join_buffer_size&#x3D;2M</span><br><span class="line">thread_cache_size&#x3D;200</span><br><span class="line">innodb_buffer_pool_size&#x3D;1024M</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">innodb_log_buffer_size&#x3D;32M</span><br><span class="line">innodb_log_file_size&#x3D;128M</span><br><span class="line">innodb_log_files_in_group&#x3D;3</span><br><span class="line">binlog_cache_size&#x3D;2M</span><br><span class="line">max_binlog_cache_size&#x3D;8M</span><br><span class="line">max_binlog_size&#x3D;512M</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">read_buffer_size&#x3D;2M</span><br><span class="line">read_rnd_buffer_size&#x3D;2M</span><br><span class="line">bulk_insert_buffer_size&#x3D;8M</span><br></pre></td></tr></table></figure><p>[client]</p><p>socket=/tmp/mysql.sock 再次压力测试 ： mysqlslap –defaults-file=/etc/my.cnf –concurrency=100 –iterations=1 –create-schema=’oldboy’ –query=”select * from oldboy.t_100w where k2=’FGCD’” engine=innodb –number-of-queries=200000 -uroot -p123 -verbose</p><h1 id="7-锁的监控及处理"><a href="#7-锁的监控及处理" class="headerlink" title="7. 锁的监控及处理"></a>7. 锁的监控及处理</h1><h2 id="7-1-锁等待模拟"><a href="#7-1-锁等待模拟" class="headerlink" title="7.1 锁等待模拟"></a>7.1 锁等待模拟</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">Record Lock </span><br><span class="line">Next Lock </span><br><span class="line">GAP Lock</span><br><span class="line">X </span><br><span class="line">IX</span><br><span class="line">S </span><br><span class="line">IS</span><br></pre></td></tr></table></figure><h2 id="tx1"><a href="#tx1" class="headerlink" title="tx1:"></a>tx1:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE oldboy</span><br><span class="line">UPDATE t_100w SET k1&#x3D;&#39;av&#39; WHERE id&#x3D;10;</span><br><span class="line">## tx2:</span><br><span class="line">USE oldboy </span><br><span class="line">UPDATE  t_100w SET k1&#x3D;&#39;az&#39; WHERE id&#x3D;10;</span><br></pre></td></tr></table></figure><h2 id="监控锁状态"><a href="#监控锁状态" class="headerlink" title="监控锁状态"></a>监控锁状态</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-9e1bcd370862c1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 1. 看有没有锁等待</span><br><span class="line">SHOW  STATUS LIKE &#39;innodb_row_lock%&#39;;</span><br><span class="line"></span><br><span class="line">## 2. 查看哪个事务在等待(被阻塞了)</span><br><span class="line">USE information_schema</span><br><span class="line">SELECT * FROM information_schema.INNODB_TRX WHERE trx_state&#x3D;&#39;LOCK WAIT&#39;;</span><br><span class="line">trx_id : 事务ID号</span><br><span class="line">trx_state : 当前事务的状态</span><br><span class="line">trx_mysql_thread_id:连接层的,连接线程ID(SHOW PROCESSLIST &#x3D;&#x3D;&#x3D;&gt;Id或trx_id )</span><br><span class="line">trx_query : 当前被阻塞的操作(一般是要丢给开发的)</span><br></pre></td></tr></table></figure><h2 id="7-3-查看锁源-谁锁的我"><a href="#7-3-查看锁源-谁锁的我" class="headerlink" title="7.3.查看锁源,谁锁的我!"></a>7.3.查看锁源,谁锁的我!</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sys.innodb_lock_waits;     ## &#x3D;&#x3D;&#x3D;&#x3D;&gt;被锁的和锁定它的之间关系</span><br><span class="line"></span><br><span class="line">locked_table : 哪张表出现的等待 </span><br><span class="line">waiting_trx_id: 等待的事务(与上个视图trx_id 对应)</span><br><span class="line">waiting_pid   : 等待的线程号(与上个视图trx_mysql_thread_id)</span><br><span class="line">blocking_trx_id : 锁源的事务ID </span><br><span class="line">blocking_pid    : 锁源的线程号</span><br></pre></td></tr></table></figure><h2 id="7-4-找到锁源的thread-id"><a href="#7-4-找到锁源的thread-id" class="headerlink" title="7.4. 找到锁源的thread_id"></a>7.4. 找到锁源的thread_id</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM performance_schema.threads WHERE processlist_id&#x3D;15;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&gt; 41</span><br></pre></td></tr></table></figure><h2 id="7-5-找到锁源的SQL语句"><a href="#7-5-找到锁源的SQL语句" class="headerlink" title="7.5. 找到锁源的SQL语句"></a>7.5. 找到锁源的SQL语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 当前在执行的语句</span><br><span class="line">SELECT * FROM performance_schema.&#96;events_statements_current&#96; WHERE thread_id&#x3D;41;</span><br><span class="line">-- 执行语句的历史</span><br><span class="line">SELECT * FROM performance_schema.&#96;events_statements_history&#96; WHERE thread_id&#x3D;41;</span><br><span class="line"></span><br><span class="line">得出结果,丢给开发</span><br><span class="line">表信息 </span><br><span class="line">被阻塞的</span><br><span class="line">锁源SQL</span><br><span class="line"></span><br><span class="line">练习:</span><br><span class="line">一键获得以上信息,请写出具体的SQL语句</span><br></pre></td></tr></table></figure><h2 id="7-6-优化项目-锁的监控及处理"><a href="#7-6-优化项目-锁的监控及处理" class="headerlink" title="7.6 优化项目:锁的监控及处理"></a>7.6 优化项目:锁的监控及处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1. 背景: </span><br><span class="line">硬件环境: DELL R720,E系列16核,48G MEM,SAS*900G*6,RAID10</span><br><span class="line">在例行巡检时,发现9-11点时间段的CPU压力非常高(80-90%)</span><br><span class="line"></span><br><span class="line">2. 项目的职责</span><br><span class="line">    2.1 通过top详细排查,发现mysqld进程占比达到了700-800%</span><br><span class="line">    2.2 其中有量的CPU是被用作的SYS和WAIT,us处于正常</span><br><span class="line">    2.3 怀疑是MySQL 锁 或者SQL语句出了问题</span><br><span class="line">    2.4 经过排查slowlog及锁等待情况,发现有大量锁等待及少量慢语句    </span><br><span class="line">    (1) pt-query-diagest 查看慢日志  </span><br><span class="line">    (2) 锁等待有没有?</span><br><span class="line">    db03 [(none)]&gt;show status like &#39;innodb_row_lock%&#39;;</span><br><span class="line">    +-------------------------------+-------+</span><br><span class="line">    | Variable_name                 | Value |</span><br><span class="line">    +-------------------------------+-------+</span><br><span class="line">    | Innodb_row_lock_current_waits | 0     |</span><br><span class="line">    | Innodb_row_lock_time          | 0     |</span><br><span class="line">    | Innodb_row_lock_time_avg      | 0     |</span><br><span class="line">    | Innodb_row_lock_time_max      | 0     |</span><br><span class="line">    | Innodb_row_lock_waits         | 0     |</span><br><span class="line">    +-------------------------------+-------+</span><br><span class="line">    情况一:</span><br><span class="line">            有100多个current_waits,说明当前很多锁等待情况</span><br><span class="line">    情况二:</span><br><span class="line">            1000多个lock_waits,说明历史上发生过的锁等待很多</span><br><span class="line">    2.5 查看那个事务在等待(被阻塞了)</span><br><span class="line">    2.6 查看锁源事务信息(谁锁的我)</span><br><span class="line">    2.7 找到锁源的thread_id </span><br><span class="line">    2.8 找到锁源的SQL语句</span><br><span class="line">3. 找到语句之后,和应用开发人员进行协商   </span><br><span class="line">    (1)</span><br><span class="line">    开发人员描述,此语句是事务挂起导致</span><br><span class="line">    我们提出建议是临时kill 会话,最终解决问题</span><br><span class="line">    (2) </span><br><span class="line">    开发人员查看后,发现是业务逻辑问题导致的死锁,产生了大量锁等待</span><br><span class="line">    临时解决方案,将阻塞事务的会话kill掉.</span><br><span class="line">    最终解决方案,修改代码中的业务逻辑</span><br><span class="line">项目结果:</span><br><span class="line">    经过排查处理,锁等待的个数减少80%.解决了CPU持续峰值的问题.</span><br><span class="line"></span><br><span class="line">锁监控设计到的命令:</span><br><span class="line">show status like &#39;innodb_rows_lock%&#39;</span><br><span class="line">select * from information_schema.innodb_trx;</span><br><span class="line">select * from sys.innodb_lock_waits;</span><br><span class="line">select * from performance_schema.threads;</span><br><span class="line">select * from performance_schema.events_statements_current;</span><br><span class="line">select * from performance_schema.events_statements_history;</span><br></pre></td></tr></table></figure><h2 id="7-7-死锁监控"><a href="#7-7-死锁监控" class="headerlink" title="7.7 死锁监控"></a>7.7 死锁监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status\G</span><br><span class="line">show variables like &#39;%deadlock%&#39;;</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf </span><br><span class="line">innodb_print_all_deadlocks &#x3D; 1  </span><br></pre></td></tr></table></figure><h1 id="8-主从优化："><a href="#8-主从优化：" class="headerlink" title="8. 主从优化："></a>8. 主从优化：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">## 5.7 从库多线程MTS</span><br><span class="line">基本要求:</span><br><span class="line">5.7以上的版本(忘记小版本)</span><br><span class="line">必须开启GTID </span><br><span class="line">binlog必须是row模式  </span><br><span class="line"></span><br><span class="line">gtid_mode&#x3D;ON</span><br><span class="line">enforce_gtid_consistency&#x3D;ON</span><br><span class="line">log_slave_updates&#x3D;ON</span><br><span class="line">slave-parallel-type&#x3D;LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers&#x3D;16</span><br><span class="line">master_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_info_repository&#x3D;TABLE</span><br><span class="line">relay_log_recovery&#x3D;ON</span><br><span class="line"></span><br><span class="line">5.7 :</span><br><span class="line">slave-parallel-type&#x3D;LOGICAL_CLOCK</span><br><span class="line">slave-parallel-workers&#x3D;8</span><br><span class="line">cpu核心数作为标准</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST&#x3D;&#39;10.0.0.128&#39;,</span><br><span class="line">  MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">  MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">  MASTER_PORT&#x3D;3307,</span><br><span class="line">  MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（十一）</title>
      <link href="/posts/53892/"/>
      <url>/posts/53892/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson11–读写分离架构-Atlas"><a href="#MySQL-lesson11–读写分离架构-Atlas" class="headerlink" title="MySQL-lesson11–读写分离架构-Atlas"></a>MySQL-lesson11–读写分离架构-Atlas</h1><h1 id="1-Atlas介绍"><a href="#1-Atlas介绍" class="headerlink" title="1. Atlas介绍"></a>1. Atlas介绍</h1><p><img src="http://upload-images.jianshu.io/upload_images/16956686-24b9752549843352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/567/format/webp" alt="img"></p><p>image.png</p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-dce5742c72a16dac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/546/format/webp" alt="img"></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Atlas是由 Qihoo 360, Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。</span><br><span class="line">它是在mysql-proxy 0.8.2版本的基础上，对其进行了优化，增加了一些新的功能特性。</span><br><span class="line">360内部使用Atlas运行的mysql业务，每天承载的读写请求数达几十亿条。</span><br><span class="line">下载地址</span><br><span class="line">http:&#x2F;&#x2F;github.com&#x2F;Qihoo360&#x2F;Atlas&#x2F;releases</span><br><span class="line">注意：</span><br><span class="line">1、Atlas只能安装运行在64位的系统上</span><br><span class="line">2、Centos 5.X安装 Atlas-XX.el5.x86_64.rpm，Centos 6.X安装Atlas-XX.el6.x86_64.rpm。</span><br><span class="line">3、后端mysql版本应大于5.1，建议使用Mysql 5.6以上</span><br></pre></td></tr></table></figure><h1 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2.安装配置"></a>2.安装配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y Atlas*</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;conf</span><br><span class="line">mv test.cnf test.cnf.bak</span><br><span class="line"> vi test.cnf</span><br></pre></td></tr></table></figure><p>[mysql-proxy]</p><p>admin-username = user admin-password = pwd proxy-backend-addresses = 10.0.0.55:3306 proxy-read-only-backend-addresses = 10.0.0.51:3306,10.0.0.53:3306 pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098= daemon = true keepalive = true event-threads = 8 log-level = message log-path = /usr/local/mysql-proxy/log sql-log=ON proxy-address = 0.0.0.0:33060 admin-address = 0.0.0.0:2345 charset=utf8 启动atlas /usr/local/mysql-proxy/bin/mysql-proxyd test start ps -ef |grep proxy</p><h1 id="3-Atlas功能测试"><a href="#3-Atlas功能测试" class="headerlink" title="3. Atlas功能测试"></a>3. Atlas功能测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试读操作：</span><br><span class="line">mysql -umha -pmha  -h 10.0.0.53 -P 33060 </span><br><span class="line">db03 [(none)]&gt;select @@server_id;</span><br><span class="line">测试写操作：</span><br><span class="line">mysql&gt; begin;select @@server_id;commit;</span><br></pre></td></tr></table></figure><h1 id="4-生产用户要求"><a href="#4-生产用户要求" class="headerlink" title="4. 生产用户要求"></a>4. 生产用户要求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">开发人员申请一个应用用户 app(  select  update  insert)  密码123456,要通过10网段登录</span><br><span class="line">1. 在主库中,创建用户</span><br><span class="line">grant select ,update,insert on *.* to app@&#39;10.0.0.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">2. 在atlas中添加生产用户</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;encrypt  123456      ----&gt;制作加密密码</span><br><span class="line">vim test.cnf</span><br><span class="line">pwds &#x3D; repl:3yb5jEku5h4&#x3D;,mha:O2jBXONX098&#x3D;,app:&#x2F;iZxz+0GRoA&#x3D;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;mysql-proxyd test restart</span><br><span class="line">[root@db03 conf]# mysql -uapp -p123456  -h 10.0.0.53 -P 33060</span><br></pre></td></tr></table></figure><h1 id="5-Atlas基本管理"><a href="#5-Atlas基本管理" class="headerlink" title="5. Atlas基本管理"></a>5. Atlas基本管理</h1><h1 id="连接管理接口"><a href="#连接管理接口" class="headerlink" title="连接管理接口"></a>连接管理接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uuser -ppwd -h127.0.0.1 -P2345</span><br></pre></td></tr></table></figure><h1 id="打印帮助："><a href="#打印帮助：" class="headerlink" title="打印帮助："></a>打印帮助：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from help;</span><br></pre></td></tr></table></figure><h1 id="查询后端所有节点信息："><a href="#查询后端所有节点信息：" class="headerlink" title="查询后端所有节点信息："></a>查询后端所有节点信息：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  SELECT * FROM backends    ;</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">| backend_ndx | address        | state | type |</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">|           1 | 10.0.0.55:3306 | up    | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | up    | ro   |</span><br><span class="line">|           3 | 10.0.0.53:3306 | up    | ro   |</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="动态添加删除节点"><a href="#动态添加删除节点" class="headerlink" title="动态添加删除节点"></a>动态添加删除节点</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REMOVE BACKEND 3;</span><br></pre></td></tr></table></figure><h1 id="动态添加节点"><a href="#动态添加节点" class="headerlink" title="动态添加节点"></a>动态添加节点</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD SLAVE 10.0.0.53:3306;</span><br></pre></td></tr></table></figure><h1 id="保存配置到配置文件"><a href="#保存配置到配置文件" class="headerlink" title="保存配置到配置文件"></a>保存配置到配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE CONFIG;</span><br></pre></td></tr></table></figure><h1 id="6-自动分表"><a href="#6-自动分表" class="headerlink" title="6. 自动分表"></a>6. 自动分表</h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用Atlas的分表功能时，首先需要在配置文件test.cnf设置tables参数。</span><br><span class="line">tables参数设置格式：数据库名.表名.分表字段.子表数量，</span><br><span class="line">比如：</span><br><span class="line">你的数据库名叫school，表名叫stu，分表字段叫id，总共分为2张表，那么就写为school.stu.id.2，如果还有其他的分表，以逗号分隔即可。</span><br></pre></td></tr></table></figure><h1 id="7-关于读写分离建议"><a href="#7-关于读写分离建议" class="headerlink" title="7. 关于读写分离建议"></a>7. 关于读写分离建议</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Router    ---&gt; MySQL官方</span><br><span class="line">ProxySQL         ---&gt;Percona</span><br><span class="line">Maxscale         ---&gt; MariaDB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（十）</title>
      <link href="/posts/35357/"/>
      <url>/posts/35357/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson10-MHA高可用技术"><a href="#MySQL-lesson10-MHA高可用技术" class="headerlink" title="MySQL-lesson10-MHA高可用技术"></a>MySQL-lesson10-MHA高可用技术</h1><h1 id="1-主从复制架构演变介绍"><a href="#1-主从复制架构演变介绍" class="headerlink" title="1. 主从复制架构演变介绍"></a>1. 主从复制架构演变介绍</h1><h2 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1 基本结构"></a>1.1 基本结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）一主一从</span><br><span class="line">（2）一主多从</span><br><span class="line">（3）多级主从</span><br><span class="line">（4）双主</span><br><span class="line">（5）循环复制</span><br></pre></td></tr></table></figure><h2 id="1-2-高级应用架构演变"><a href="#1-2-高级应用架构演变" class="headerlink" title="1.2 高级应用架构演变"></a>1.2 高级应用架构演变</h2><h3 id="1-2-1-高性能架构"><a href="#1-2-1-高性能架构" class="headerlink" title="1.2.1 高性能架构"></a>1.2.1 高性能架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">读写分离架构(读性能较高)</span><br><span class="line">代码级别</span><br><span class="line">MySQL proxy (Atlas,mysql router,proxySQL(percona),maxscale)、</span><br><span class="line">amoeba(taobao)</span><br><span class="line">xx-dbproxy等。</span><br><span class="line">分布式架构(读写性能都提高):</span><br><span class="line">分库分表——cobar---&gt;TDDL(头都大了),DRDS</span><br><span class="line">Mycat---&gt;DBLE自主研发等。</span><br><span class="line">NewSQL--&gt;TiDB</span><br></pre></td></tr></table></figure><h3 id="1-2-2-高可用架构"><a href="#1-2-2-高可用架构" class="headerlink" title="1.2.2 高可用架构"></a>1.2.2 高可用架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（3）单活:MMM架构——mysql-mmm（google）</span><br><span class="line">（4）单活:MHA架构——mysql-master-ha（日本DeNa）,T-MHA</span><br><span class="line">（5）多活:MGR ——5.7 新特性 MySQL Group replication(5.7.17) ---&gt;Innodb Cluster  </span><br><span class="line">（6）多活:MariaDB Galera Cluster架构,(PXC)Percona XtraDB Cluster、MySQL Cluster(Oracle rac)架构</span><br></pre></td></tr></table></figure><h1 id="2-高可用MHA"><a href="#2-高可用MHA" class="headerlink" title="2. 高可用MHA *"></a>2. 高可用MHA <strong>*</strong></h1><h2 id="2-1-架构工作原理"><a href="#2-1-架构工作原理" class="headerlink" title="2.1 架构工作原理"></a>2.1 架构工作原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">主库宕机处理过程</span><br><span class="line">1. 监控节点 (通过配置文件获取所有节点信息)</span><br><span class="line">   系统,网络,SSH连接性</span><br><span class="line">   主从状态,重点是主库</span><br><span class="line"></span><br><span class="line">2. 选主</span><br><span class="line">(1) 如果判断从库(position或者GTID),数据有差异,最接近于Master的slave,成为备选主</span><br><span class="line">(2) 如果判断从库(position或者GTID),数据一致,按照配置文件顺序,选主.</span><br><span class="line">(3) 如果设定有权重(candidate_master&#x3D;1),按照权重强制指定备选主.</span><br><span class="line">    1. 默认情况下如果一个slave落后master 100M的relay logs的话，即使有权重,也会失效.</span><br><span class="line">    2. 如果check_repl_delay&#x3D;0的化,即使落后很多日志,也强制选择其为备选主</span><br><span class="line">3. 数据补偿</span><br><span class="line">(1) 当SSH能连接,从库对比主库GTID 或者position号,立即将二进制日志保存至各个从节点并且应用(save_binary_logs )</span><br><span class="line">(2) 当SSH不能连接, 对比从库之间的relaylog的差异(apply_diff_relay_logs) </span><br><span class="line">4. Failover</span><br><span class="line">将备选主进行身份切换,对外提供服务</span><br><span class="line">其余从库和新主库确认新的主从关系</span><br><span class="line">5. 应用透明(VIP)</span><br><span class="line">6. 故障切换通知(send_reprt)</span><br><span class="line">7. 二次数据补偿(binlog_server)</span><br><span class="line">8. 自愈自治(待开发...)</span><br></pre></td></tr></table></figure><h3 id="2-2-架构介绍"><a href="#2-2-架构介绍" class="headerlink" title="2.2 架构介绍:"></a>2.2 架构介绍:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1主2从，master：db01   slave：db02   db03 ）：</span><br><span class="line">MHA 高可用方案软件构成</span><br><span class="line">Manager软件：选择一个从节点安装</span><br><span class="line">Node软件：所有节点都要安装</span><br></pre></td></tr></table></figure><h2 id="2-3-MHA软件构成"><a href="#2-3-MHA软件构成" class="headerlink" title="2.3 MHA软件构成"></a>2.3 MHA软件构成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Manager工具包主要包括以下几个工具：</span><br><span class="line">masterha_manger             启动MHA </span><br><span class="line">masterha_check_ssh      检查MHA的SSH配置状况 </span><br><span class="line">masterha_check_repl         检查MySQL复制状况 </span><br><span class="line">masterha_master_monitor     检测master是否宕机 </span><br><span class="line">masterha_check_status       检测当前MHA运行状态 </span><br><span class="line">masterha_master_switch  控制故障转移（自动或者手动）</span><br><span class="line">masterha_conf_host      添加或删除配置的server信息</span><br><span class="line"></span><br><span class="line">Node工具包主要包括以下几个工具：</span><br><span class="line">这些工具通常由MHA Manager的脚本触发，无需人为操作</span><br><span class="line">save_binary_logs            保存和复制master的二进制日志 </span><br><span class="line">apply_diff_relay_logs       识别差异的中继日志事件并将其差异的事件应用于其他的</span><br><span class="line">purge_relay_logs            清除中继日志（不会阻塞SQL线程）</span><br></pre></td></tr></table></figure><h2 id="2-4-MHA环境搭建"><a href="#2-4-MHA环境搭建" class="headerlink" title="2.4 MHA环境搭建"></a>2.4 MHA环境搭建</h2><h3 id="2-4-1-规划"><a href="#2-4-1-规划" class="headerlink" title="2.4.1 规划:"></a>2.4.1 规划:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主库: 51    node </span><br><span class="line">从库: </span><br><span class="line">52      node</span><br><span class="line">53      node    manager</span><br></pre></td></tr></table></figure><h3 id="2-4-2-准备环境（略。1主2从GTID）"><a href="#2-4-2-准备环境（略。1主2从GTID）" class="headerlink" title="2.4.2 准备环境（略。1主2从GTID）"></a>2.4.2 准备环境（略。1主2从GTID）</h3><h3 id="2-4-3-配置关键程序软连接"><a href="#2-4-3-配置关键程序软连接" class="headerlink" title="2.4.3 配置关键程序软连接"></a>2.4.3 配置关键程序软连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;bin&#x2F;mysqlbinlog    &#x2F;usr&#x2F;bin&#x2F;mysqlbinlog</span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;bin&#x2F;mysql          &#x2F;usr&#x2F;bin&#x2F;mysql</span><br></pre></td></tr></table></figure><h3 id="2-4-4-配置各节点互信"><a href="#2-4-4-配置各节点互信" class="headerlink" title="2.4.4 配置各节点互信"></a>2.4.4 配置各节点互信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">db01：</span><br><span class="line">rm -rf &#x2F;root&#x2F;.ssh </span><br><span class="line">ssh-keygen</span><br><span class="line">cd &#x2F;root&#x2F;.ssh </span><br><span class="line">mv id_rsa.pub authorized_keys</span><br><span class="line">scp  -r  &#x2F;root&#x2F;.ssh  10.0.0.52:&#x2F;root </span><br><span class="line">scp  -r  &#x2F;root&#x2F;.ssh  10.0.0.53:&#x2F;root </span><br><span class="line">各节点验证</span><br><span class="line">db01:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br><span class="line">db02:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br><span class="line">db03:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br></pre></td></tr></table></figure><h3 id="2-4-5-安装软件"><a href="#2-4-5-安装软件" class="headerlink" title="2.4.5 安装软件"></a>2.4.5 安装软件</h3><h3 id="下载mha软件"><a href="#下载mha软件" class="headerlink" title="下载mha软件"></a>下载mha软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mha官网：https:&#x2F;&#x2F;code.google.com&#x2F;archive&#x2F;p&#x2F;mysql-master-ha&#x2F;</span><br><span class="line">github下载地址：https:&#x2F;&#x2F;github.com&#x2F;yoshinorim&#x2F;mha4mysql-manager&#x2F;wiki&#x2F;Downloads</span><br></pre></td></tr></table></figure><h3 id="所有节点安装Node软件依赖包"><a href="#所有节点安装Node软件依赖包" class="headerlink" title="所有节点安装Node软件依赖包"></a>所有节点安装Node软件依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-DBD-MySQL -y</span><br><span class="line">rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="在db01主库中创建mha需要的用户"><a href="#在db01主库中创建mha需要的用户" class="headerlink" title="在db01主库中创建mha需要的用户"></a>在db01主库中创建mha需要的用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to mha@&#39;10.0.0.%&#39; identified by &#39;mha&#39;;</span><br></pre></td></tr></table></figure><h3 id="Manager软件安装（db03）"><a href="#Manager软件安装（db03）" class="headerlink" title="Manager软件安装（db03）"></a>Manager软件安装（db03）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br><span class="line">rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="2-4-6-配置文件准备-db03"><a href="#2-4-6-配置文件准备-db03" class="headerlink" title="2.4.6 配置文件准备(db03)"></a>2.4.6 配置文件准备(db03)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建配置文件目录</span><br><span class="line"> mkdir -p &#x2F;etc&#x2F;mha</span><br><span class="line">创建日志目录</span><br><span class="line"> mkdir -p &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1</span><br><span class="line">编辑mha配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br></pre></td></tr></table></figure><p>[server default]</p><p>manager_log=/var/log/mha/app1/manager manager_workdir=/var/log/mha/app1 master_binlog_dir=/data/binlog user=mha password=mha ping_interval=2 repl_password=123 repl_user=repl ssh_user=root</p><p>[server1]</p><p>hostname=10.0.0.51 port=3306</p><p>[server2]</p><p>hostname=10.0.0.52 port=3306</p><p>[server3]</p><p>hostname=10.0.0.53 port=3306</p><h3 id="2-4-7-状态检查"><a href="#2-4-7-状态检查" class="headerlink" title="2.4.7 状态检查"></a>2.4.7 状态检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">### 互信检查</span><br><span class="line">masterha_check_ssh  --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [warning] Global configuration file &#x2F;etc&#x2F;masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading application default configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading server configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Starting SSH connection tests..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [info] All SSH connection tests passed successfully.</span><br></pre></td></tr></table></figure><h3 id="主从状态检查"><a href="#主从状态检查" class="headerlink" title="主从状态检查"></a>主从状态检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]# masterha_check_ssh  --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [warning] Global configuration file &#x2F;etc&#x2F;masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading application default configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading server configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Starting SSH connection tests..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [info] All SSH connection tests passed successfully.</span><br><span class="line">[root@db03 ~]# masterha_check_repl  --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf </span><br><span class="line">Fri Apr 19 16:40:50 2019 - [warning] Global configuration file &#x2F;etc&#x2F;masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] Reading application default configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] Reading server configuration from &#x2F;etc&#x2F;mha&#x2F;app1.cnf..</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] GTID failover mode &#x3D; 1</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Dead Servers:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Alive Servers:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.52(10.0.0.52:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.53(10.0.0.53:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Alive Slaves:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.52(10.0.0.52:3306)  Version&#x3D;5.7.20-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     GTID ON</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     Replicating from 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.53(10.0.0.53:3306)  Version&#x3D;5.7.20-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     GTID ON</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     Replicating from 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Current Alive Master: 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking slave configurations..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  read_only&#x3D;1 is not set on slave 10.0.0.52(10.0.0.52:3306).</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  read_only&#x3D;1 is not set on slave 10.0.0.53(10.0.0.53:3306).</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication filtering settings..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  binlog_do_db&#x3D; , binlog_ignore_db&#x3D; </span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  Replication filtering check ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] HealthCheck: SSH to 10.0.0.51 is reachable.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] </span><br><span class="line">10.0.0.51(10.0.0.51:3306) (current master)</span><br><span class="line"> +--10.0.0.52(10.0.0.52:3306)</span><br><span class="line"> +--10.0.0.53(10.0.0.53:3306)</span><br><span class="line"></span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication health on 10.0.0.52..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication health on 10.0.0.53..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [warning] master_ip_failover_script is not defined.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [warning] shutdown_script is not defined.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Got exit code 0 (Not master dead).</span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure><h3 id="2-4-8-开启MHA-db03-："><a href="#2-4-8-开启MHA-db03-：" class="headerlink" title="2.4.8 开启MHA(db03)："></a>2.4.8 开启MHA(db03)：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; &#x2F;dev&#x2F;null&gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="2-4-9-查看MHA状态"><a href="#2-4-9-查看MHA状态" class="headerlink" title="2.4.9 查看MHA状态"></a>2.4.9 查看MHA状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]# masterha_check_status --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">app1 (pid:4719) is running(0:PING_OK), master:10.0.0.51</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.51 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 51    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.52 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 52    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.53 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 53    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><h3 id="2-4-10-故障模拟及处理"><a href="#2-4-10-故障模拟及处理" class="headerlink" title="2.4.10 故障模拟及处理"></a>2.4.10 故障模拟及处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### 停主库db01:    </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld stop</span><br><span class="line"></span><br><span class="line">观察manager  日志 tail -f &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager</span><br><span class="line">末尾必须显示successfully，才算正常切换成功。                            </span><br></pre></td></tr></table></figure><h3 id="修复主库"><a href="#修复主库" class="headerlink" title="修复主库"></a>修复主库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# &#x2F;etc&#x2F;init.d&#x2F;mysqld start</span><br></pre></td></tr></table></figure><h3 id="恢复主从结构"><a href="#恢复主从结构" class="headerlink" title="恢复主从结构"></a>恢复主从结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO </span><br><span class="line">MASTER_HOST&#x3D;&#39;10.0.0.52&#39;,</span><br><span class="line">MASTER_PORT&#x3D;3306, </span><br><span class="line">MASTER_AUTO_POSITION&#x3D;1, </span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;, </span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;123&#39;;</span><br><span class="line">start slave ;</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[server1]</span><br><span class="line">hostname&#x3D;10.0.0.51</span><br><span class="line">port&#x3D;3306</span><br></pre></td></tr></table></figure><h3 id="启动MHA"><a href="#启动MHA" class="headerlink" title="启动MHA"></a>启动MHA</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; &#x2F;dev&#x2F;null&gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="2-4-11-Manager额外参数介绍"><a href="#2-4-11-Manager额外参数介绍" class="headerlink" title="2.4.11 Manager额外参数介绍"></a>2.4.11 Manager额外参数介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">主库宕机谁来接管？</span><br><span class="line">1. 所有从节点日志都是一致的，默认会以配置文件的顺序去选择一个新主。</span><br><span class="line">2. 从节点日志不一致，自动选择最接近于主库的从库</span><br><span class="line">3. 如果对于某节点设定了权重（candidate_master&#x3D;1），权重节点会优先选择。</span><br><span class="line">但是此节点日志量落后主库100M日志的话，也不会被选择。可以配合check_repl_delay&#x3D;0，关闭日志量的检查，强制选择候选节点。</span><br><span class="line"></span><br><span class="line">(1)  ping_interval&#x3D;1</span><br><span class="line">#设置监控主库，发送ping包的时间间隔，尝试三次没有回应的时候自动进行failover</span><br><span class="line">(2) candidate_master&#x3D;1</span><br><span class="line">#设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave</span><br><span class="line">(3)check_repl_delay&#x3D;0</span><br><span class="line">#默认情况下如果一个slave落后master 100M的relay logs的话，</span><br><span class="line">MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay&#x3D;0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master&#x3D;1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span><br></pre></td></tr></table></figure><h3 id="2-4-12-MHA-的vip功能"><a href="#2-4-12-MHA-的vip功能" class="headerlink" title="2.4.12 MHA 的vip功能"></a>2.4.12 MHA 的vip功能</h3><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master_ip_failover_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover</span><br><span class="line">注意：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover，必须事先准备好</span><br></pre></td></tr></table></figure><h3 id="修改脚本内容"><a href="#修改脚本内容" class="headerlink" title="修改脚本内容"></a>修改脚本内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover</span><br><span class="line">my $vip &#x3D; &#39;10.0.0.55&#x2F;24&#39;;</span><br><span class="line">my $key &#x3D; &#39;1&#39;;</span><br><span class="line">my $ssh_start_vip &#x3D; &quot;&#x2F;sbin&#x2F;ifconfig eth0:$key $vip&quot;;</span><br><span class="line">my $ssh_stop_vip &#x3D; &quot;&#x2F;sbin&#x2F;ifconfig eth0:$key down&quot;;</span><br></pre></td></tr></table></figure><h3 id="更改manager配置文件："><a href="#更改manager配置文件：" class="headerlink" title="更改manager配置文件："></a>更改manager配置文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">添加：</span><br><span class="line">master_ip_failover_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover</span><br><span class="line">注意：</span><br><span class="line">[root@db03 ~]# dos2unix &#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover </span><br><span class="line">dos2unix: converting file &#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover to Unix format ...</span><br><span class="line">[root@db03 ~]# chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;master_ip_failover </span><br></pre></td></tr></table></figure><h3 id="主库上，手工生成第一个vip地址"><a href="#主库上，手工生成第一个vip地址" class="headerlink" title="主库上，手工生成第一个vip地址"></a>主库上，手工生成第一个vip地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">手工在主库上绑定vip，注意一定要和配置文件中的ethN一致，我的是eth0:1(1是key指定的值)</span><br><span class="line">ifconfig eth0:1 10.0.0.55&#x2F;24</span><br></pre></td></tr></table></figure><h3 id="重启mha"><a href="#重启mha" class="headerlink" title="重启mha"></a>重启mha</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="2-4-13-邮件提醒"><a href="#2-4-13-邮件提醒" class="headerlink" title="2.4.13 邮件提醒"></a>2.4.13 邮件提醒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. 参数：</span><br><span class="line">report_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;send</span><br><span class="line">2. 准备邮件脚本</span><br><span class="line">send_report</span><br><span class="line">(1)准备发邮件的脚本(上传 email_2019-最新.zip中的脚本，到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;中)</span><br><span class="line">(2)将准备好的脚本添加到mha配置文件中,让其调用</span><br><span class="line"></span><br><span class="line">3. 修改manager配置文件，调用邮件脚本</span><br><span class="line">vi &#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">report_script&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;send</span><br><span class="line"></span><br><span class="line">（3）停止MHA</span><br><span class="line">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">（4）开启MHA    </span><br><span class="line">nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">(5) 关闭主库,看警告邮件  </span><br><span class="line">故障修复：</span><br><span class="line">1. 恢复故障节点</span><br><span class="line">（1）实例宕掉</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld start </span><br><span class="line">（2）主机损坏，有可能数据也损坏了</span><br><span class="line">备份并恢复故障节点。</span><br><span class="line">2.恢复主从环境</span><br><span class="line">看日志文件：</span><br><span class="line">CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3306, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;</span><br><span class="line">start slave ;</span><br><span class="line">3.恢复manager</span><br><span class="line">3.1 修好的故障节点配置信息，加入到配置文件</span><br></pre></td></tr></table></figure><p>[server1]</p><p>hostname=10.0.0.51 port=3306 3.2 启动manager nohup masterha_manager –conf=/etc/mha/app1.cnf –remove_dead_master_conf –ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</p><h3 id="2-4-14-binlog-server（db03）"><a href="#2-4-14-binlog-server（db03）" class="headerlink" title="2.4.14 binlog server（db03）"></a>2.4.14 binlog server（db03）</h3><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binlogserver配置：</span><br><span class="line">找一台额外的机器，必须要有5.6以上的版本，支持gtid并开启，我们直接用的第二个slave（db03）</span><br><span class="line">vim &#x2F;etc&#x2F;mha&#x2F;app1.cnf </span><br></pre></td></tr></table></figure><p>[binlog1]</p><p>no_master=1 hostname=10.0.0.53 master_binlog_dir=/data/mysql/binlog</p><h3 id="创建必要目录"><a href="#创建必要目录" class="headerlink" title="创建必要目录"></a>创建必要目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;mysql&#x2F;binlog</span><br><span class="line">chown -R mysql.mysql &#x2F;data&#x2F;*</span><br><span class="line">修改完成后，将主库binlog拉过来（从000001开始拉，之后的binlog会自动按顺序过来）</span><br></pre></td></tr></table></figure><h3 id="拉取主库binlog日志"><a href="#拉取主库binlog日志" class="headerlink" title="拉取主库binlog日志"></a>拉取主库binlog日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;mysql&#x2F;binlog     -----》必须进入到自己创建好的目录</span><br><span class="line">mysqlbinlog  -R --host&#x3D;10.0.0.52 --user&#x3D;mha --password&#x3D;mha --raw  --stop-never mysql-bin.000001 &amp;</span><br><span class="line">注意：</span><br><span class="line">拉取日志的起点,需要按照目前从库的已经获取到的二进制日志点为起点</span><br></pre></td></tr></table></figure><h3 id="重启MHA"><a href="#重启MHA" class="headerlink" title="重启MHA"></a>重启MHA</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">nohup masterha_manager --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主库宕机，binlogserver 自动停掉，manager 也会自动停止。</span><br><span class="line">处理思路：</span><br><span class="line">1、重新获取新主库的binlog到binlogserver中</span><br><span class="line">2、重新配置文件binlog server信息</span><br><span class="line">3、最后再启动MHA</span><br></pre></td></tr></table></figure><h1 id="3-管理员在高可用架构维护的职责"><a href="#3-管理员在高可用架构维护的职责" class="headerlink" title="3.管理员在高可用架构维护的职责"></a>3.管理员在高可用架构维护的职责</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 搭建：MHA+VIP+SendReport+BinlogServer</span><br><span class="line">2. 监控及故障处理</span><br><span class="line">3.  高可用架构的优化</span><br><span class="line"> 核心是：尽可能降低主从的延时，让MHA花在数据补偿上的时间尽量减少。</span><br><span class="line">5.7 版本，开启GTID模式，开启从库SQL并发复制。 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（九）</title>
      <link href="/posts/4010/"/>
      <url>/posts/4010/</url>
      
        <content type="html"><![CDATA[<p>http延时从</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据库故障?</span><br><span class="line">物理损坏</span><br><span class="line">主从复制非常擅长解决物理损坏.</span><br><span class="line">逻辑损坏</span><br><span class="line">普通主从复制没办法解决逻辑损坏</span><br></pre></td></tr></table></figure><h2 id="1-3-配置延时从库"><a href="#1-3-配置延时从库" class="headerlink" title="1.3 配置延时从库"></a>1.3 配置延时从库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SQL线程延时:数据已经写入relaylog中了,SQL线程&quot;慢点&quot;运行</span><br><span class="line">一般企业建议3-6小时,具体看公司运维人员对于故障的反应时间</span><br><span class="line"></span><br><span class="line">mysql&gt;stop slave;</span><br><span class="line">mysql&gt;CHANGE MASTER TO MASTER_DELAY &#x3D; 300;</span><br><span class="line">mysql&gt;start slave;</span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">SQL_Delay: 300</span><br><span class="line">SQL_Remaining_Delay: NULL</span><br></pre></td></tr></table></figure><h2 id="1-4-延时从库应用"><a href="#1-4-延时从库应用" class="headerlink" title="1.4 延时从库应用"></a>1.4 延时从库应用</h2><h3 id="1-4-1-故障恢复思路"><a href="#1-4-1-故障恢复思路" class="headerlink" title="1.4.1 故障恢复思路"></a>1.4.1 故障恢复思路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1主1从,从库延时5分钟,主库误删除1个库</span><br><span class="line">1. 5分钟之内 侦测到误删除操作</span><br><span class="line">2. 停从库SQL线程</span><br><span class="line">3. 截取relaylog</span><br><span class="line">起点 :停止SQL线程时,relay最后应用位置</span><br><span class="line">终点:误删除之前的position(GTID)</span><br><span class="line">4. 恢复截取的日志到从库</span><br><span class="line">5. 从库身份解除,替代主库工作</span><br></pre></td></tr></table></figure><h3 id="1-4-2-故障模拟及恢复"><a href="#1-4-2-故障模拟及恢复" class="headerlink" title="1.4.2 故障模拟及恢复"></a>1.4.2 故障模拟及恢复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.主库数据操作</span><br><span class="line">db01 [(none)]&gt;create database relay charset utf8;</span><br><span class="line">db01 [(none)]&gt;use relay</span><br><span class="line">db01 [relay]&gt;create table t1 (id int);</span><br><span class="line">db01 [relay]&gt;insert into t1 values(1);</span><br><span class="line">db01 [relay]&gt;drop database relay;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2. 停止从库SQL线程</span><br><span class="line">stop slave sql_thread;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3. 找relaylog的截取起点和终点</span><br><span class="line">起点:</span><br><span class="line">Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">Relay_Log_Pos: 482</span><br><span class="line">终点:</span><br><span class="line">show relaylog events in &#39;db01-relay-bin.000002&#39;</span><br><span class="line">| db01-relay-bin.000002 | 1046 | Xid            |         7 |        2489 | COMMIT &#x2F;* xid&#x3D;144 *&#x2F;                  |</span><br><span class="line">| db01-relay-bin.000002 | 1077 | Anonymous_Gtid |         7 |        2554 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;  |</span><br><span class="line">mysqlbinlog --start-position&#x3D;482 --stop-position&#x3D;1077  &#x2F;data&#x2F;3308&#x2F;data&#x2F;db01-relay-bin.000002&gt;&#x2F;tmp&#x2F;relay.sql</span><br></pre></td></tr></table></figure><ol><li>从库恢复relaylog</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;tmp&#x2F;relay.sql</span><br></pre></td></tr></table></figure><p>5.从库身份解除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [relay]&gt;stop slave;</span><br><span class="line">db01 [relay]&gt;reset slave all</span><br></pre></td></tr></table></figure><h1 id="2-半同步"><a href="#2-半同步" class="headerlink" title="2. 半同步 ***"></a>2. 半同步 ***</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决主从数据一致性问题</span><br></pre></td></tr></table></figure><h2 id="2-1-半同步复制工作原理的变化"><a href="#2-1-半同步复制工作原理的变化" class="headerlink" title="2.1 半同步复制工作原理的变化"></a>2.1 半同步复制工作原理的变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 主库执行新的事务,commit时,更新 show master  status\G ,触发一个信号给</span><br><span class="line">2. binlog dump 接收到主库的 show master status\G信息,通知从库日志更新了</span><br><span class="line">3. 从库IO线程请求新的二进制日志事件</span><br><span class="line">4. 主库会通过dump线程传送新的日志事件,给从库IO线程</span><br><span class="line">5. 从库IO线程接收到binlog日志,当日志写入到磁盘上的relaylog文件时,给主库ACK_receiver线程</span><br><span class="line">6. ACK_receiver线程触发一个事件,告诉主库commit可以成功了</span><br><span class="line">7. 如果ACK达到了我们预设值的超时时间,半同步复制会切换为原始的异步复制.</span><br></pre></td></tr></table></figure><h2 id="2-2-配置半同步复制"><a href="#2-2-配置半同步复制" class="headerlink" title="2.2 配置半同步复制"></a>2.2 配置半同步复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">加载插件</span><br><span class="line">主:</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME &#39;semisync_master.so&#39;;</span><br><span class="line">从:</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME &#39;semisync_slave.so&#39;;</span><br><span class="line">查看是否加载成功:</span><br><span class="line">show plugins;</span><br><span class="line">启动:</span><br><span class="line">主:</span><br><span class="line">SET GLOBAL rpl_semi_sync_master_enabled &#x3D; 1;</span><br><span class="line">从:</span><br><span class="line">SET GLOBAL rpl_semi_sync_slave_enabled &#x3D; 1;</span><br><span class="line">重启从库上的IO线程</span><br><span class="line">STOP SLAVE IO_THREAD;</span><br><span class="line">START SLAVE IO_THREAD;</span><br><span class="line">查看是否在运行</span><br><span class="line">主:</span><br><span class="line">show status like &#39;Rpl_semi_sync_master_status&#39;;</span><br><span class="line">从:</span><br><span class="line">show status like &#39;Rpl_semi_sync_slave_status&#39;;</span><br></pre></td></tr></table></figure><h1 id="3-过滤复制"><a href="#3-过滤复制" class="headerlink" title="3 . 过滤复制"></a>3 . 过滤复制</h1><h2 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h2><p>主库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br><span class="line">Binlog_Do_DB</span><br><span class="line">Binlog_Ignore_DB </span><br></pre></td></tr></table></figure><p>从库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br><span class="line">Replicate_Do_DB: </span><br><span class="line">Replicate_Ignore_DB: </span><br></pre></td></tr></table></figure><p>3.2 实现过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -A --master-data&#x3D;2 --single-transaction  -R --triggers &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line">vim  &#x2F;backup&#x2F;full.sql</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;, MASTER_LOG_POS&#x3D;154;</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock </span><br><span class="line">source &#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">MASTER_PORT&#x3D;3307,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;154,</span><br><span class="line">MASTER_CONNECT_RETRY&#x3D;10;</span><br><span class="line">start  slave;</span><br><span class="line">[root@db01 ~]# vim &#x2F;data&#x2F;3309&#x2F;my.cnf </span><br><span class="line">replicate_do_db&#x3D;ppt</span><br><span class="line">replicate_do_db&#x3D;word</span><br><span class="line">[root@db01 ~]# systemctl restart mysqld3309</span><br><span class="line"></span><br><span class="line">主库：</span><br><span class="line">Master [(none)]&gt;create database word;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Master [(none)]&gt;create database ppt;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Master [(none)]&gt;create database excel;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h1 id="4-GTID复制"><a href="#4-GTID复制" class="headerlink" title="4. GTID复制"></a>4. GTID复制</h1><h2 id="4-1-GTID引入"><a href="#4-1-GTID引入" class="headerlink" title="4.1 GTID引入"></a>4.1 GTID引入</h2><h2 id="4-2-GTID介绍"><a href="#4-2-GTID介绍" class="headerlink" title="4.2 GTID介绍"></a>4.2 GTID介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GTID(Global Transaction ID)是对于一个已提交事务的唯一编号，并且是一个全局(主从复制)唯一的编号。</span><br><span class="line">它的官方定义如下：</span><br><span class="line">GTID &#x3D; source_id ：transaction_id</span><br><span class="line">7E11FA47-31CA-19E1-9E56-C43AA21293967:29</span><br><span class="line">什么是sever_uuid，和Server-id 区别？</span><br><span class="line">核心特性: 全局唯一,具备幂等性</span><br></pre></td></tr></table></figure><h1 id="4-3-GTID核心参数"><a href="#4-3-GTID核心参数" class="headerlink" title="4.3 GTID核心参数"></a>4.3 GTID核心参数</h1><p>重要参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line"></span><br><span class="line">gtid-mode&#x3D;on                        --启用gtid类型，否则就是普通的复制架构</span><br><span class="line">enforce-gtid-consistency&#x3D;true               --强制GTID的一致性</span><br><span class="line">log-slave-updates&#x3D;1                 --slave更新是否记入日志</span><br></pre></td></tr></table></figure><h2 id="4-4-GTID复制配置过程："><a href="#4-4-GTID复制配置过程：" class="headerlink" title="4.4 GTID复制配置过程："></a>4.4 GTID复制配置过程：</h2><h3 id="4-4-1-清理环境"><a href="#4-4-1-清理环境" class="headerlink" title="4.4.1 清理环境"></a>4.4.1 清理环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkill mysqld</span><br><span class="line"> \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*</span><br><span class="line"> \rm -rf &#x2F;data&#x2F;binlog&#x2F;*</span><br></pre></td></tr></table></figure><h3 id="4-4-2-准备配置文件"><a href="#4-4-2-准备配置文件" class="headerlink" title="4.4.2 准备配置文件"></a>4.4.2 准备配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主库db01：</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF</span><br></pre></td></tr></table></figure><p>[mysqld]</p><p>basedir=/data/mysql/ datadir=/data/mysql/data socket=/tmp/mysql.sock server_id=51 port=3306 secure-file-priv=/tmp autocommit=0 log_bin=/data/binlog/mysql-bin binlog_format=row gtid-mode=on enforce-gtid-consistency=true log-slave-updates=1</p><p>[mysql]</p><p>prompt=db01 [\\d]&gt; EOF slave1(db02)： cat &gt; /etc/my.cnf &lt;&lt;EOF</p><p>[mysqld]</p><p>basedir=/data/mysql datadir=/data/mysql/data socket=/tmp/mysql.sock server_id=52 port=3306 secure-file-priv=/tmp autocommit=0 log_bin=/data/binlog/mysql-bin binlog_format=row gtid-mode=on enforce-gtid-consistency=true log-slave-updates=1</p><p>[mysql]</p><p>prompt=db02 [\\d]&gt; EOF slave2(db03)： cat &gt; /etc/my.cnf &lt;&lt;EOF</p><p>[mysqld]</p><p>basedir=/data/mysql datadir=/data/mysql/data socket=/tmp/mysql.sock server_id=53 port=3306 secure-file-priv=/tmp autocommit=0 log_bin=/data/binlog/mysql-bin binlog_format=row gtid-mode=on enforce-gtid-consistency=true log-slave-updates=1</p><p>[mysql]</p><p>prompt=db03 [\\d]&gt; EOF</p><h3 id="4-4-3-初始化数据"><a href="#4-4-3-初始化数据" class="headerlink" title="4.4.3 初始化数据"></a>4.4.3 初始化数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;data&#x2F;mysql  --datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data </span><br></pre></td></tr></table></figure><h3 id="4-4-4-启动数据库"><a href="#4-4-4-启动数据库" class="headerlink" title="4.4.4 启动数据库"></a>4.4.4 启动数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld start</span><br></pre></td></tr></table></figure><h3 id="4-4-5-构建主从："><a href="#4-4-5-构建主从：" class="headerlink" title="4.4.5 构建主从："></a>4.4.5 构建主从：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">master:51</span><br><span class="line">slave:52,53</span><br><span class="line"></span><br><span class="line">51:</span><br><span class="line">grant replication slave  on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line"></span><br><span class="line">52\53:</span><br><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">master_password&#x3D;&#39;123&#39; ,</span><br><span class="line">MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h2 id="4-5-GTID-从库误写入操作处理"><a href="#4-5-GTID-从库误写入操作处理" class="headerlink" title="4.5 GTID 从库误写入操作处理"></a>4.5 GTID 从库误写入操作处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看监控信息:</span><br><span class="line">Last_SQL_Error: Error &#39;Can&#39;t create database &#39;oldboy&#39;; database exists&#39; on query. Default database: &#39;oldboy&#39;. Query: &#39;create database oldboy&#39;</span><br><span class="line"></span><br><span class="line">Retrieved_Gtid_Set: 71bfa52e-4aae-11e9-ab8c-000c293b577e:1-3</span><br><span class="line">Executed_Gtid_Set:  71bfa52e-4aae-11e9-ab8c-000c293b577e:1-2,</span><br><span class="line">7ca4a2b7-4aae-11e9-859d-000c298720f6:1</span><br><span class="line"></span><br><span class="line">注入空事物的方法：</span><br><span class="line"></span><br><span class="line">stop slave;</span><br><span class="line">set gtid_next&#x3D;&#39;99279e1e-61b7-11e9-a9fc-000c2928f5dd:3&#39;;</span><br><span class="line">begin;commit;</span><br><span class="line">set gtid_next&#x3D;&#39;AUTOMATIC&#39;;</span><br><span class="line"></span><br><span class="line">这里的xxxxx:N 也就是你的slave sql thread报错的GTID，或者说是你想要跳过的GTID。</span><br><span class="line">最好的解决方案：重新构建主从环境</span><br></pre></td></tr></table></figure><h2 id="4-6-GTID-复制和普通复制的区别"><a href="#4-6-GTID-复制和普通复制的区别" class="headerlink" title="4.6 GTID 复制和普通复制的区别"></a>4.6 GTID 复制和普通复制的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">MASTER_PORT&#x3D;3307,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;444,</span><br><span class="line">MASTER_CONNECT_RETRY&#x3D;10;</span><br><span class="line"></span><br><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">master_password&#x3D;&#39;123&#39; ,</span><br><span class="line">MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">（0）在主从复制环境中，主库发生过的事务，在全局都是由唯一GTID记录的，更方便Failover</span><br><span class="line">（1）额外功能参数（3个）</span><br><span class="line">（2）change master to 的时候不再需要binlog 文件名和position号,MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line">（3）在复制过程中，从库不再依赖master.info文件，而是直接读取最后一个relaylog的 GTID号</span><br><span class="line">（4） mysqldump备份时，默认会将备份中包含的事务操作，以以下方式</span><br><span class="line">    SET @@GLOBAL.GTID_PURGED&#x3D;&#39;8c49d7ec-7e78-11e8-9638-000c29ca725d:1&#39;;</span><br><span class="line">    告诉从库，我的备份中已经有以上事务，你就不用运行了，直接从下一个GTID开始请求binlog就行。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（八）</title>
      <link href="/posts/21492/"/>
      <url>/posts/21492/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson08-主从复制基础"><a href="#MySQL-lesson08-主从复制基础" class="headerlink" title="MySQL-lesson08-主从复制基础"></a>MySQL-lesson08-主从复制基础</h1><h1 id="0-企业高可用性标准"><a href="#0-企业高可用性标准" class="headerlink" title="0.企业高可用性标准 ***"></a>0.企业高可用性标准 ***</h1><h2 id="0-1-全年无故障率-非计划内故障停机"><a href="#0-1-全年无故障率-非计划内故障停机" class="headerlink" title="0.1 全年无故障率(非计划内故障停机)"></a>0.1 全年无故障率(非计划内故障停机)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">99.9%                 ----&gt; 0.001*365*24*60&#x3D;525.6  min</span><br><span class="line">99.99%                ----&gt; 0.0001*365*24*60&#x3D;52.56 min</span><br><span class="line">99.999%               ----&gt; 0.0001*365*24*60&#x3D;5.256 min</span><br></pre></td></tr></table></figure><h2 id="0-2-高可用架构方案"><a href="#0-2-高可用架构方案" class="headerlink" title="0.2 高可用架构方案"></a>0.2 高可用架构方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">负载均衡:有一定的高可用性 </span><br><span class="line">LVS  Nginx</span><br><span class="line">主备系统:有高可用性,但是需要切换,是单活的架构</span><br><span class="line">KA ,   MHA, MMM</span><br><span class="line">真正高可用(多活系统): </span><br><span class="line">NDB Cluster  Oracle RAC  Sysbase cluster   , InnoDB Cluster（MGR）,PXC , MGC</span><br></pre></td></tr></table></figure><h1 id="1-主从复制简介"><a href="#1-主从复制简介" class="headerlink" title="1. 主从复制简介 **"></a>1. 主从复制简介 **</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.1. 基于二进制日志复制的</span><br><span class="line">1.2. 主库的修改操作会记录二进制日志</span><br><span class="line">1.3. 从库会请求新的二进制日志并回放,最终达到主从数据同步</span><br><span class="line">1.4. 主从复制核心功能:</span><br><span class="line">辅助备份,处理物理损坏                   </span><br><span class="line">扩展新型的架构:高可用,高性能,分布式架构等</span><br></pre></td></tr></table></figure><h1 id="2-主从复制前提-搭建主从的过程"><a href="#2-主从复制前提-搭建主从的过程" class="headerlink" title="2. 主从复制前提(搭建主从的过程) ***"></a>2. 主从复制前提(搭建主从的过程) ***</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 2.1 两台以上mysql实例 ,server_id,server_uuid不同</span><br><span class="line">## 2.2 主库开启二进制日志</span><br><span class="line">## 2.3 专用的复制用户</span><br><span class="line">## 2.4 保证主从开启之前的某个时间点,从库数据是和主库一致(补课)</span><br><span class="line">## 2.5 告知从库,复制user,passwd,IP port,以及复制起点(change master to)</span><br><span class="line">## 2.6 线程(三个):Dump thread  IO thread  SQL thread 开启(start slave)</span><br></pre></td></tr></table></figure><h1 id="3-主从复制搭建-Classic-replication"><a href="#3-主从复制搭建-Classic-replication" class="headerlink" title="3. 主从复制搭建(Classic replication) ***"></a>3. 主从复制搭建(Classic replication) ***</h1><h2 id="3-1-清理主库数据"><a href="#3-1-清理主库数据" class="headerlink" title="3.1 清理主库数据"></a>3.1 清理主库数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F;data&#x2F;3307&#x2F;data&#x2F;*</span><br></pre></td></tr></table></figure><h2 id="3-2-重新初始化3307"><a href="#3-2-重新初始化3307" class="headerlink" title="3.2 重新初始化3307"></a>3.2 重新初始化3307</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;app&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;3307&#x2F;data</span><br></pre></td></tr></table></figure><h2 id="3-3-修改my-cnf-开启二进制日志功能"><a href="#3-3-修改my-cnf-开启二进制日志功能" class="headerlink" title="3.3 修改my.cnf ,开启二进制日志功能"></a>3.3 修改my.cnf ,开启二进制日志功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]# vim &#x2F;data&#x2F;3307&#x2F;my.cnf </span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;3307&#x2F;data&#x2F;mysql-bin</span><br></pre></td></tr></table></figure><h2 id="3-4-启动所有节点"><a href="#3-4-启动所有节点" class="headerlink" title="3.4 启动所有节点"></a>3.4 启动所有节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]# systemctl start mysqld3307</span><br><span class="line">[root@db01 3307]# systemctl start mysqld3308</span><br><span class="line">[root@db01 3307]# systemctl start mysqld3309</span><br><span class="line">[root@db01 3307]# ps -ef |grep mysqld</span><br><span class="line">mysql      3684      1  4 09:59 ?        00:00:00 &#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3307&#x2F;my.cnf</span><br><span class="line">mysql      3719      1  7 09:59 ?        00:00:00 &#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3308&#x2F;my.cnf</span><br><span class="line">mysql      3754      1  8 09:59 ?        00:00:00 &#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3309&#x2F;my.cnf</span><br><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;select @@server_id&quot;</span><br><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;select @@server_id&quot;</span><br><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;select @@server_id&quot;</span><br></pre></td></tr></table></figure><h2 id="3-5-主库中创建复制用户"><a href="#3-5-主库中创建复制用户" class="headerlink" title="3.5 主库中创建复制用户"></a>3.5 主库中创建复制用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock </span><br><span class="line">db01 [(none)]&gt;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line">db01 [(none)]&gt;select user,host from mysql.user;</span><br></pre></td></tr></table></figure><h2 id="3-6-备份主库并恢复到从库"><a href="#3-6-备份主库并恢复到从库" class="headerlink" title="3.6 备份主库并恢复到从库"></a>3.6 备份主库并恢复到从库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]# mysqldump -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -A --master-data&#x3D;2 --single-transaction  -R --triggers &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;, MASTER_LOG_POS&#x3D;653;</span><br><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock</span><br><span class="line">db01 [(none)]&gt;source &#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h2 id="3-7-告知从库关键复制信息"><a href="#3-7-告知从库关键复制信息" class="headerlink" title="3.7 告知从库关键复制信息"></a>3.7 告知从库关键复制信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ip port user  password  binlog position </span><br><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock</span><br><span class="line">db01 [mysql]&gt;help change master to</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">  MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">  MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">  MASTER_PORT&#x3D;3307,</span><br><span class="line">  MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">  MASTER_LOG_POS&#x3D;653,</span><br><span class="line">  MASTER_CONNECT_RETRY&#x3D;10;</span><br></pre></td></tr></table></figure><h2 id="3-8-开启主从专用线程"><a href="#3-8-开启主从专用线程" class="headerlink" title="3.8 开启主从专用线程"></a>3.8 开启主从专用线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave ;</span><br></pre></td></tr></table></figure><h2 id="3-9-检查复制状态"><a href="#3-9-检查复制状态" class="headerlink" title="3.9 检查复制状态"></a>3.9 检查复制状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db01 [mysql]&gt;show slave  status \G</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h1 id="4-主从复制的原理-Classic-Replication"><a href="#4-主从复制的原理-Classic-Replication" class="headerlink" title="4. 主从复制的原理 (Classic Replication)*"></a>4. 主从复制的原理 (Classic Replication)<strong>*</strong></h1><h2 id="4-1-主从中设置到的文件和线程"><a href="#4-1-主从中设置到的文件和线程" class="headerlink" title="4.1 主从中设置到的文件和线程"></a>4.1 主从中设置到的文件和线程</h2><h3 id="4-1-1-线程"><a href="#4-1-1-线程" class="headerlink" title="4.1.1 线程"></a>4.1.1 线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主:</span><br><span class="line">DUMP THREAD</span><br><span class="line">从:</span><br><span class="line">IO  THREAD</span><br><span class="line">SQL THREAD</span><br></pre></td></tr></table></figure><h3 id="4-1-2-文件"><a href="#4-1-2-文件" class="headerlink" title="4.1.2 文件"></a>4.1.2 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主:</span><br><span class="line">mysql-bin.000001</span><br><span class="line">从: </span><br><span class="line">db01-relay.000001     &#x3D;&#x3D;&#x3D;&gt;中继日志</span><br><span class="line">master.info                 &#x3D;&#x3D;&#x3D;》主库信息记录日志</span><br><span class="line">relay-log.info              &#x3D;&#x3D;&#x3D;&gt; 记录中继应用情况信息</span><br></pre></td></tr></table></figure><h1 id="4-2-主从复制原理"><a href="#4-2-主从复制原理" class="headerlink" title="4.2 主从复制原理"></a>4.2 主从复制原理</h1><p><img src="http://upload-images.jianshu.io/upload_images/16956686-72dd1f45d206d507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/693/format/webp" alt="img"></p><p>image.png</p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-a4273ecc8aa1c370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/724/format/webp" alt="img"></p><p>image.png</p><p>主从复制原理描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.change master to 时，ip pot user password binlog position写入到master.info进行记录</span><br><span class="line">2. start slave 时，从库会启动IO线程和SQL线程</span><br><span class="line">3.IO_T，读取master.info信息，获取主库信息连接主库</span><br><span class="line">4. 主库会生成一个准备binlog DUMP线程，来响应从库</span><br><span class="line">5. IO_T根据master.info记录的binlog文件名和position号，请求主库DUMP最新日志</span><br><span class="line">6. DUMP线程检查主库的binlog日志，如果有新的，TP(传送)给从从库的IO_T</span><br><span class="line">7. IO_T将收到的日志存储到了TCP&#x2F;IP 缓存，立即返回ACK给主库 ，主库工作完成</span><br><span class="line">8.IO_T将缓存中的数据，存储到relay-log日志文件,更新master.info文件binlog 文件名和postion，IO_T工作完成</span><br><span class="line">9.SQL_T读取relay-log.info文件，获取到上次执行到的relay-log的位置，作为起点，回放relay-log</span><br><span class="line">10.SQL_T回放完成之后，会更新relay-log.info文件。</span><br><span class="line">11. relay-log会有自动清理的功能。</span><br><span class="line">细节：</span><br><span class="line">1.主库一旦有新的日志生成，会发送“信号”给binlog dump ，IO线程再请求</span><br></pre></td></tr></table></figure><h1 id="5-主从故障监控-分析-处理"><a href="#5-主从故障监控-分析-处理" class="headerlink" title="5. 主从故障监控\分析\处理 *"></a>5. 主从故障监控\分析\处理 <strong>*</strong></h1><h2 id="5-1-线程相关监控"><a href="#5-1-线程相关监控" class="headerlink" title="5.1 线程相关监控"></a>5.1 线程相关监控</h2><h2 id="主库"><a href="#主库" class="headerlink" title="主库:"></a>主库:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show full processlist;</span><br><span class="line">每个从库都会有一行dump相关的信息</span><br><span class="line">HOSTS: </span><br><span class="line">db01:47176</span><br><span class="line">State:</span><br><span class="line">Master has sent all binlog to slave; waiting for more updates</span><br><span class="line">如果现实非以上信息,说明主从之间的关系出现了问题    </span><br></pre></td></tr></table></figure><h2 id="从库"><a href="#从库" class="headerlink" title="从库:"></a>从库:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;show slave status \G</span><br><span class="line">*************************** 1. row ***************************</span><br></pre></td></tr></table></figure><h2 id="主库相关信息监控"><a href="#主库相关信息监控" class="headerlink" title="主库相关信息监控"></a>主库相关信息监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Master_Host: 10.0.0.51</span><br><span class="line">Master_User: repl</span><br><span class="line">Master_Port: 3307</span><br><span class="line">Master_Log_File: mysql-bin.000005</span><br><span class="line">Read_Master_Log_Pos: 444</span><br></pre></td></tr></table></figure><h2 id="从库中继日志的应用状态"><a href="#从库中继日志的应用状态" class="headerlink" title="从库中继日志的应用状态"></a>从库中继日志的应用状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">Relay_Log_Pos: 485</span><br></pre></td></tr></table></figure><h2 id="从库复制线程有关的状态"><a href="#从库复制线程有关的状态" class="headerlink" title="从库复制线程有关的状态"></a>从库复制线程有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line">Last_IO_Errno: 0</span><br><span class="line">Last_IO_Error: </span><br><span class="line">Last_SQL_Errno: 0</span><br><span class="line">Last_SQL_Error: </span><br></pre></td></tr></table></figure><h2 id="过滤复制有关的状态"><a href="#过滤复制有关的状态" class="headerlink" title="过滤复制有关的状态"></a>过滤复制有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Replicate_Do_DB: </span><br><span class="line">Replicate_Ignore_DB: </span><br><span class="line">Replicate_Do_Table: </span><br><span class="line">Replicate_Ignore_Table: </span><br><span class="line">Replicate_Wild_Do_Table: </span><br><span class="line">Replicate_Wild_Ignore_Table: </span><br></pre></td></tr></table></figure><h2 id="主从延时相关状态-非人为"><a href="#主从延时相关状态-非人为" class="headerlink" title="主从延时相关状态(非人为)"></a>主从延时相关状态(非人为)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Seconds_Behind_Master: 0</span><br></pre></td></tr></table></figure><h2 id="延时从库有关的状态-人为"><a href="#延时从库有关的状态-人为" class="headerlink" title="延时从库有关的状态(人为)"></a>延时从库有关的状态(人为)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL_Delay: 0</span><br><span class="line">SQL_Remaining_Delay: NULL</span><br></pre></td></tr></table></figure><h2 id="GTID-复制有关的状态"><a href="#GTID-复制有关的状态" class="headerlink" title="GTID 复制有关的状态"></a>GTID 复制有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Retrieved_Gtid_Set: </span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">Auto_Position: 0</span><br></pre></td></tr></table></figure><h2 id="5-2-主从复制故障分析"><a href="#5-2-主从复制故障分析" class="headerlink" title="5.2 主从复制故障分析"></a>5.2 主从复制故障分析</h2><h3 id="5-2-1-IO"><a href="#5-2-1-IO" class="headerlink" title="5.2.1 IO"></a>5.2.1 IO</h3><h4 id="5-2-1-1-连接主库"><a href="#5-2-1-1-连接主库" class="headerlink" title="5.2.1.1 连接主库"></a>5.2.1.1 连接主库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(1) 用户 密码  IP  port</span><br><span class="line">Last_IO_Error: error reconnecting to master &#39;repl@10.0.0.51:3307&#39; - retry-time: 10  retries: 7</span><br><span class="line">[root@db01 ~]# mysql -urepl  -p123333  -h 10.0.0.51 -P 3307</span><br><span class="line">ERROR 1045 (28000): Access denied for user &#39;repl&#39;@&#39;db01&#39; (using password: YES)</span><br><span class="line"></span><br><span class="line">原因:</span><br><span class="line">密码错误 </span><br><span class="line">用户错误 </span><br><span class="line">skip_name_resolve</span><br><span class="line">地址错误</span><br><span class="line">端口</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-2d45278fb16e4d69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/932/format/webp" alt="img"></p><p>image.png</p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-0ed17c75c871d787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/975/format/webp" alt="img"></p><p>image.png</p><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stop  slave  </span><br><span class="line">reset slave all </span><br><span class="line">change master to </span><br><span class="line">start slave</span><br></pre></td></tr></table></figure><h2 id="主库连接数上线-或者是主库太繁忙"><a href="#主库连接数上线-或者是主库太繁忙" class="headerlink" title="主库连接数上线,或者是主库太繁忙"></a>主库连接数上线,或者是主库太繁忙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show slave  staus \G </span><br><span class="line">Last_IO_Errno: 1040</span><br><span class="line">Last_IO_Error: error reconnecting to master &#39;repl@10.0.0.51:3307&#39; - retry-time: 10  retries: 7</span><br><span class="line">处理思路:</span><br><span class="line">拿复制用户,手工连接一下</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.51 -P 3307 </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 1040 (HY000): Too many connections</span><br><span class="line">处理方法:</span><br><span class="line">db01 [(none)]&gt;set global max_connections&#x3D;300;</span><br><span class="line"></span><br><span class="line">(3) 防火墙,网络不通</span><br></pre></td></tr></table></figure><h4 id="5-2-1-2-请求二进制日志"><a href="#5-2-1-2-请求二进制日志" class="headerlink" title="5.2.1.2 请求二进制日志"></a>5.2.1.2 请求二进制日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主库缺失日志</span><br><span class="line">从库方面,二进制日志位置点不对</span><br><span class="line">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;could not find next log; the first event &#39;mysql-bin.000001&#39; at 154, the last event read from &#39;&#x2F;data&#x2F;3307&#x2F;data&#x2F;mysql-bin.000002&#39; at 154, the last byte read from &#39;&#x2F;data&#x2F;3307&#x2F;data&#x2F;mysql-bin.000002&#39; at 154.&#39;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-78c7eaaacd175fc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意: 在主从复制环境中,严令禁止主库中reset master; 可以选择expire 进行定期清理主库二进制日志</span><br><span class="line">解决方案:</span><br><span class="line">重新构建主从</span><br></pre></td></tr></table></figure><h3 id="5-2-2-SQL-线程故障"><a href="#5-2-2-SQL-线程故障" class="headerlink" title="5.2.2 SQL 线程故障"></a>5.2.2 SQL 线程故障</h3><h2 id="SQL线程功能："><a href="#SQL线程功能：" class="headerlink" title="SQL线程功能："></a>SQL线程功能：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)读写relay-log.info </span><br><span class="line">(2)relay-log损坏,断节,找不到</span><br><span class="line">(3)接收到的SQL无法执行</span><br></pre></td></tr></table></figure><h2 id="导致SQL线程故障原因分析："><a href="#导致SQL线程故障原因分析：" class="headerlink" title="导致SQL线程故障原因分析："></a>导致SQL线程故障原因分析：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 版本差异，参数设定不同，比如：数据类型的差异，SQL_MODE影响</span><br><span class="line">2.要创建的数据库对象,已经存在</span><br><span class="line">3.要删除或修改的对象不存在  </span><br><span class="line">4.DML语句不符合表定义及约束时.  </span><br><span class="line">归根揭底的原因都是由于从库发生了写入操作.</span><br><span class="line">Last_SQL_Error: Error &#39;Can&#39;t create database &#39;db&#39;; database exists&#39; on query. Default database: &#39;db&#39;. Query: &#39;create database db&#39;</span><br></pre></td></tr></table></figure><h2 id="处理方法-以从库为核心的处理方案-："><a href="#处理方法-以从库为核心的处理方案-：" class="headerlink" title="处理方法(以从库为核心的处理方案)："></a>处理方法(以从库为核心的处理方案)：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">stop slave; </span><br><span class="line">set global sql_slave_skip_counter &#x3D; 1;</span><br><span class="line">#将同步指针向下移动一个，如果多次不同步，可以重复操作。</span><br><span class="line">start slave;</span><br><span class="line">方法二：</span><br><span class="line">&#x2F;etc&#x2F;my.cnf</span><br><span class="line">slave-skip-errors &#x3D; 1032,1062,1007</span><br><span class="line">常见错误代码:</span><br><span class="line">1007:对象已存在</span><br><span class="line">1032:无法执行DML</span><br><span class="line">1062:主键冲突,或约束冲突</span><br><span class="line"></span><br><span class="line">但是，以上操作有时是有风险的，最安全的做法就是重新构建主从。把握一个原则,一切以主库为主.</span><br></pre></td></tr></table></figure><h2 id="一劳永逸的方法"><a href="#一劳永逸的方法" class="headerlink" title="一劳永逸的方法:"></a>一劳永逸的方法:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1) 可以设置从库只读.</span><br><span class="line">db01 [(none)]&gt;show variables like &#39;%read_only%&#39;;</span><br><span class="line">注意：</span><br><span class="line">只会影响到普通用户，对管理员用户无效。</span><br><span class="line">(2)加中间件</span><br><span class="line">读写分离。</span><br></pre></td></tr></table></figure><h1 id="6-主从延时监控及原因"><a href="#6-主从延时监控及原因" class="headerlink" title="6. 主从延时监控及原因 *"></a>6. 主从延时监控及原因 <strong>*</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主库做了修改操作,从库比较长时间才能追上.</span><br></pre></td></tr></table></figure><h2 id="6-1-外在因素"><a href="#6-1-外在因素" class="headerlink" title="6.1 外在因素"></a>6.1 外在因素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网络 </span><br><span class="line">主从硬件差异较大</span><br><span class="line">版本差异</span><br><span class="line">参数因素</span><br></pre></td></tr></table></figure><h2 id="6-2-主库"><a href="#6-2-主库" class="headerlink" title="6.2 主库"></a>6.2 主库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(1) 二进制日志写入不及时</span><br><span class="line">[rep]&gt;select @@sync_binlog;</span><br><span class="line">(2) CR的主从复制中,binlog_dump线程,事件为单元,串行传送二进制日志(5.6 5.5)</span><br><span class="line"></span><br><span class="line">1. 主库并发事务量大,主库可以并行,传送时是串行</span><br><span class="line">2. 主库发生了大事务,由于是串行传送,会产生阻塞后续的事务.</span><br><span class="line"></span><br><span class="line">解决方案:</span><br><span class="line">1. 5.6 开始,开启GTID,实现了GC(group commit)机制,可以并行传输日志给从库IO</span><br><span class="line">2. 5.7 开始,不开启GTID,会自动维护匿名的GTID,也能实现GC,我们建议还是认为开启GTID</span><br><span class="line">3. 大事务拆成多个小事务,可以有效的减少主从延时.</span><br></pre></td></tr></table></figure><h2 id="6-3-从库"><a href="#6-3-从库" class="headerlink" title="6.3 从库"></a>6.3 从库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SQL线程导致的主从延时</span><br><span class="line">在CR复制情况下: 从库默认情况下只有一个SQL,只能串行回放事务SQL</span><br><span class="line">1. 主库如果并发事务量较大,从库只能串行回放</span><br><span class="line">2. 主库发生了大事务,会阻塞后续的所有的事务的运行</span><br><span class="line"></span><br><span class="line">解决方案:</span><br><span class="line">1. 5.6 版本开启GTID之后,加入了SQL多线程的特性,但是只能针对不同库(database)下的事务进行并发回放.</span><br><span class="line">2. 5.7 版本开始GTID之后,在SQL方面,提供了基于逻辑时钟(logical_clock),binlog加入了seq_no机制,</span><br><span class="line">真正实现了基于事务级别的并发回放,这种技术我们把它称之为MTS(enhanced multi-threaded slave).</span><br><span class="line">3. 大事务拆成多个小事务,可以有效的减少主从延时.</span><br><span class="line">[http:&#x2F;&#x2F;dev.mysql.com&#x2F;worklog&#x2F;task&#x2F;?id&#x3D;6314]</span><br></pre></td></tr></table></figure><h1 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 主从复制原理</span><br><span class="line">2. 主从复制故障</span><br><span class="line">3. 主从延时：group commit    MTS   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（七）</title>
      <link href="/posts/59281/"/>
      <url>/posts/59281/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson07-备份恢复"><a href="#MySQL-lesson07-备份恢复" class="headerlink" title="MySQL-lesson07-备份恢复"></a>MySQL-lesson07-备份恢复</h1><h1 id="1-运维在数据库备份恢复方面的职责"><a href="#1-运维在数据库备份恢复方面的职责" class="headerlink" title="1. 运维在数据库备份恢复方面的职责"></a>1. 运维在数据库备份恢复方面的职责</h1><h2 id="1-1-设计备份策略"><a href="#1-1-设计备份策略" class="headerlink" title="1.1 设计备份策略"></a>1.1 设计备份策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全备  、增量、时间、自动</span><br></pre></td></tr></table></figure><h2 id="1-2-日常备份检查"><a href="#1-2-日常备份检查" class="headerlink" title="1.2 日常备份检查"></a>1.2 日常备份检查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">备份存在性</span><br><span class="line">备份空间够用否</span><br></pre></td></tr></table></figure><h2 id="1-3-定期恢复演练-测试库"><a href="#1-3-定期恢复演练-测试库" class="headerlink" title="1.3 定期恢复演练(测试库)"></a>1.3 定期恢复演练(测试库)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一季度 或者 半年</span><br></pre></td></tr></table></figure><h2 id="1-4-故障恢复"><a href="#1-4-故障恢复" class="headerlink" title="1.4 故障恢复"></a>1.4 故障恢复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过现有备份,能够将数据库恢复到故障之前的时间点.       </span><br></pre></td></tr></table></figure><h2 id="1-5-迁移"><a href="#1-5-迁移" class="headerlink" title="1.5 迁移"></a>1.5 迁移</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 停机时间</span><br><span class="line">2. 回退方案</span><br></pre></td></tr></table></figure><h1 id="2-备份类型"><a href="#2-备份类型" class="headerlink" title="2. 备份类型"></a>2. 备份类型</h1><h2 id="2-1-热备"><a href="#2-1-热备" class="headerlink" title="2.1 热备"></a>2.1 热备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在数据库正常业务时,备份数据,并且能够一致性恢复（只能是innodb）</span><br><span class="line">对业务影响非常小</span><br></pre></td></tr></table></figure><h2 id="2-2-温备"><a href="#2-2-温备" class="headerlink" title="2.2 温备"></a>2.2 温备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">锁表备份,只能查询不能修改（myisam）</span><br><span class="line">影响到写入操作</span><br></pre></td></tr></table></figure><h2 id="2-3-冷备"><a href="#2-3-冷备" class="headerlink" title="2.3 冷备"></a>2.3 冷备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭数据库业务,数据库没有任何变更的情况下,进行备份数据.</span><br><span class="line">业务停止</span><br></pre></td></tr></table></figure><h1 id="3-备份方式及工具介绍"><a href="#3-备份方式及工具介绍" class="headerlink" title="3. 备份方式及工具介绍"></a>3. 备份方式及工具介绍</h1><h2 id="3-1-逻辑备份工具"><a href="#3-1-逻辑备份工具" class="headerlink" title="3.1 逻辑备份工具"></a>3.1 逻辑备份工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于SQL语句进行备份</span><br><span class="line">mysqldump       *****</span><br><span class="line">mysqlbinlog     *****</span><br></pre></td></tr></table></figure><h2 id="3-2-物理备份工具"><a href="#3-2-物理备份工具" class="headerlink" title="3.2 物理备份工具"></a>3.2 物理备份工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于磁盘数据文件备份</span><br><span class="line">xtrabackup(XBK) ：percona 第三方   *****</span><br><span class="line">MySQL Enterprise Backup（MEB）</span><br></pre></td></tr></table></figure><h1 id="4-逻辑备份和物理备份的比较"><a href="#4-逻辑备份和物理备份的比较" class="headerlink" title="4. 逻辑备份和物理备份的比较"></a>4. 逻辑备份和物理备份的比较</h1><h2 id="4-1-mysqldump-MDP"><a href="#4-1-mysqldump-MDP" class="headerlink" title="4.1 mysqldump (MDP)"></a>4.1 mysqldump (MDP)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1.不需要下载安装</span><br><span class="line">2.备份出来的是SQL，文本格式，可读性高,便于备份处理</span><br><span class="line">3.压缩比较高，节省备份的磁盘空间</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">4.依赖于数据库引擎，需要从磁盘把数据读出</span><br><span class="line">然后转换成SQL进行转储，比较耗费资源，数据量大的话效率较低</span><br><span class="line">建议：</span><br><span class="line">100G以内的数据量级，可以使用mysqldump</span><br><span class="line">超过TB以上，我们也可能选择的是mysqldump，配合分布式的系统</span><br><span class="line">1EB  &#x3D;1024 PB &#x3D;1000000 TB</span><br></pre></td></tr></table></figure><h2 id="4-2-xtrabackup-XBK"><a href="#4-2-xtrabackup-XBK" class="headerlink" title="4.2 xtrabackup(XBK)"></a>4.2 xtrabackup(XBK)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1.类似于直接cp数据文件，不需要管逻辑结构，相对来说性能较高</span><br><span class="line">缺点：</span><br><span class="line">2.可读性差</span><br><span class="line">3.压缩比低，需要更多磁盘空间</span><br><span class="line">建议：</span><br><span class="line">&gt;100G&lt;TB</span><br></pre></td></tr></table></figure><h1 id="5-备份策略"><a href="#5-备份策略" class="headerlink" title="5.备份策略"></a>5.备份策略</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">备份方式：</span><br><span class="line">全备:全库备份，备份所有数据</span><br><span class="line">增量:备份变化的数据</span><br><span class="line">逻辑备份&#x3D;mysqldump+mysqlbinlog</span><br><span class="line">物理备份&#x3D;xtrabackup_full+xtrabackup_incr+binlog或者xtrabackup_full+binlog</span><br><span class="line">备份周期:</span><br><span class="line">根据数据量设计备份周期</span><br><span class="line">比如：周日全备，周1-周6增量</span><br></pre></td></tr></table></figure><h1 id="6-备份工具使用-mysqldump"><a href="#6-备份工具使用-mysqldump" class="headerlink" title="6.备份工具使用-mysqldump"></a>6.备份工具使用-mysqldump</h1><h2 id="6-1-mysqldump-逻辑备份的客户端工具"><a href="#6-1-mysqldump-逻辑备份的客户端工具" class="headerlink" title="6.1 mysqldump (逻辑备份的客户端工具)"></a>6.1 mysqldump (逻辑备份的客户端工具)</h2><h3 id="6-1-1-客户端通用参数"><a href="#6-1-1-客户端通用参数" class="headerlink" title="6.1.1 客户端通用参数"></a>6.1.1 客户端通用参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-u  -p   -S   -h  -P    </span><br><span class="line">本地备份:</span><br><span class="line">mysqldump -uroot -p  -S &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">远程备份:</span><br><span class="line">mysqldump -uroot -p  -h 10.0.0.51 -P3306</span><br></pre></td></tr></table></figure><h3 id="6-1-2-备份专用基本参数"><a href="#6-1-2-备份专用基本参数" class="headerlink" title="6.1.2 备份专用基本参数"></a>6.1.2 备份专用基本参数</h3><h4 id="A-全备参数"><a href="#A-全备参数" class="headerlink" title="-A 全备参数"></a>-A 全备参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例子1:</span><br><span class="line">[root@db01 ~]# mkdir -p &#x2F;data&#x2F;backup</span><br><span class="line">mysqldump -uroot -p -A &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">Enter password: </span><br><span class="line"></span><br><span class="line">mysqldump: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions, even those that changed suppressed parts of the database. If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-databases --triggers --routines --events. </span><br><span class="line"></span><br><span class="line"># 补充:</span><br><span class="line"># 1.常规备份是要加 --set-gtid-purged&#x3D;OFF,解决备份时的警告</span><br><span class="line"># [root@db01 ~]# mysqldump -uroot -p123 -A  --set-gtid-purged&#x3D;OFF  &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line"># 2.构建主从时,做的备份,不需要加这个参数</span><br><span class="line"># [root@db01 ~]# mysqldump -uroot -p123 -A    --set-gtid-purged&#x3D;ON &gt;&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="B-db1-db2-db3-备份多个单库"><a href="#B-db1-db2-db3-备份多个单库" class="headerlink" title="-B db1 db2 db3 备份多个单库"></a>-B db1 db2 db3 备份多个单库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：生产中需要备份，生产相关的库和MySQL库</span><br><span class="line">例子2 :</span><br><span class="line">mysqldump -B mysql gtid --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;b.sql </span><br></pre></td></tr></table></figure><h4 id="备份单个或多个表"><a href="#备份单个或多个表" class="headerlink" title="备份单个或多个表"></a>备份单个或多个表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例子3 world数据库下的city,country表</span><br><span class="line">mysqldump -uroot -p world city country &gt;&#x2F;backup&#x2F;bak1.sql</span><br><span class="line">以上备份恢复时:必须库事先存在,并且ues才能source恢复</span><br></pre></td></tr></table></figure><h3 id="6-1-3-高级参数应用"><a href="#6-1-3-高级参数应用" class="headerlink" title="6.1.3 高级参数应用"></a>6.1.3 高级参数应用</h3><h4 id="特殊参数1使用（必须要加）"><a href="#特殊参数1使用（必须要加）" class="headerlink" title="特殊参数1使用（必须要加）"></a>特殊参数1使用（必须要加）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-R            备份存储过程及函数</span><br><span class="line">--triggers  备份触发器</span><br><span class="line">-E             备份事件</span><br><span class="line"></span><br><span class="line">例子4:</span><br><span class="line">[root@db01 backup]# mysqldump -uroot -p -A -R -E --triggers &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">(5) 特殊参数2使用</span><br></pre></td></tr></table></figure><h4 id="F-在备份开始时-刷新一个新binlog日志"><a href="#F-在备份开始时-刷新一个新binlog日志" class="headerlink" title="-F 在备份开始时,刷新一个新binlog日志"></a>-F 在备份开始时,刷新一个新binlog日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例子5:</span><br><span class="line">mysqldump -uroot -p  -A  -R --triggers -F &gt;&#x2F;bak&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="master-data-2"><a href="#master-data-2" class="headerlink" title="--master-data=2"></a>--master-data=2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以注释的形式,保存备份开始时间点的binlog的状态信息</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p  -A  -R --triggers --master-data&#x3D;2   &gt;&#x2F;back&#x2F;world.sql</span><br><span class="line">[root@db01 ~]# grep &#39;CHANGE&#39; &#x2F;backup&#x2F;world.sql </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000035&#39;, MASTER_LOG_POS&#x3D;194;</span><br><span class="line"></span><br><span class="line">功能：</span><br><span class="line">（1）在备份时，会自动记录，二进制日志文件名和位置号</span><br><span class="line">0 默认值</span><br><span class="line">1  以change master to命令形式，可以用作主从复制</span><br><span class="line">2  以注释的形式记录，备份时刻的文件名+postion号</span><br><span class="line">（2） 自动锁表</span><br><span class="line">（3）如果配合--single-transaction，只对非InnoDB表进行锁表备份，InnoDB表进行“热“”备，实际上是实现快照备份。</span><br></pre></td></tr></table></figure><h4 id="single-transaction"><a href="#single-transaction" class="headerlink" title="--single-transaction"></a>--single-transaction</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">innodb 存储引擎开启热备(快照备份)功能       </span><br><span class="line">master-data可以自动加锁</span><br><span class="line">（1）在不加--single-transaction ，启动所有表的温备份，所有表都锁定</span><br><span class="line">（1）加上--single-transaction ,对innodb进行快照备份,对非innodb表可以实现自动锁表功能</span><br><span class="line">例子6: 备份必加参数</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="set-gtid-purged-auto"><a href="#set-gtid-purged-auto" class="headerlink" title="--set-gtid-purged=auto"></a>--set-gtid-purged=auto</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto , on</span><br><span class="line">off </span><br><span class="line">使用场景:</span><br><span class="line">1. --set-gtid-purged&#x3D;OFF,可以使用在日常备份参数中.</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">2. auto , on:在构建主从复制环境时需要的参数配置</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;ON &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="max-allowed-packet"><a href="#max-allowed-packet" class="headerlink" title="--max-allowed-packet="></a>--max-allowed-packet=</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF --max-allowed-packet&#x3D;256M &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line"> --max-allowed-packet&#x3D;# </span><br><span class="line">The maximum packet length to send to or receive from server.</span><br></pre></td></tr></table></figure><h4 id="6-2-小练习："><a href="#6-2-小练习：" class="headerlink" title="6.2 小练习："></a>6.2 小练习：</h4><p>6.2.1. 实现所有表的单独备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line">information_schema.tables</span><br><span class="line">mysqldump -uroot -p123 world city &gt;&#x2F;backup&#x2F;world_city.sql</span><br><span class="line"></span><br><span class="line">select concat(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; --master-data&#x3D;2 --single-transaction --set-gtid-purged&#x3D;0  -R -E --triggers&gt;&#x2F;backup&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot;) from information_schema.tables where table_schema not in (&#39;sys&#39;,&#39;information_schema&#39;,&#39;performance_schema&#39;);</span><br></pre></td></tr></table></figure><h4 id="6-2-2-模拟故障案例并恢复"><a href="#6-2-2-模拟故障案例并恢复" class="headerlink" title="6.2.2.模拟故障案例并恢复"></a>6.2.2.模拟故障案例并恢复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">（1）每天全备</span><br><span class="line">（2）binlog日志是完整</span><br><span class="line">（3）模拟白天的数据变化</span><br><span class="line">（4）模拟下午两点误删除数据库</span><br><span class="line"></span><br><span class="line">需求： 利用全备+binlog回复数据库误删除之前。</span><br><span class="line">故障模拟及恢复：</span><br><span class="line">1. 模拟周一23:00的全备</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">2. 模拟白天的数据变化</span><br><span class="line">Master [(none)]&gt;create database day1 charset utf8;</span><br><span class="line">Master [(none)]&gt;use day1</span><br><span class="line">Master [day1]&gt;create table t1(id int);</span><br><span class="line">Master [day1]&gt;insert into t1 values(1),(2),(3);</span><br><span class="line">Master [day1]&gt;commit;</span><br><span class="line">Master [world]&gt;update city set countrycode&#x3D;&#39;CHN&#39;;</span><br><span class="line">Master [world]&gt;commit;</span><br><span class="line">模拟磁盘损坏：</span><br><span class="line">[root@db01 data]# \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*</span><br><span class="line">3. 恢复故障</span><br><span class="line">[root@db01 data]# pkill mysqld</span><br><span class="line">[root@db01 data]# \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*</span><br><span class="line">4. 恢复思路</span><br><span class="line">1.检查备份可用性</span><br><span class="line">2.从备份中获取二进制日志位置</span><br><span class="line">3.根据日志位置截取需要的二进制日志</span><br><span class="line">4.初始化数据库,并启动</span><br><span class="line">5.恢复全备</span><br><span class="line">6.恢复二进制日志</span><br></pre></td></tr></table></figure><h2 id="6-3-压缩备份并添加时间戳"><a href="#6-3-压缩备份并添加时间戳" class="headerlink" title="6.3. 压缩备份并添加时间戳"></a>6.3. 压缩备份并添加时间戳</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F-%T).sql.gz</span><br><span class="line"></span><br><span class="line">mysqldump备份的恢复方式（在生产中恢复要谨慎，恢复会删除重复的表）</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;backup&#x2F;full_2018-06-28.sql</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1、mysqldump在备份和恢复时都需要mysql实例启动为前提。</span><br><span class="line">2、一般数据量级100G以内，大约15-45分钟可以恢复，数据量级很大很大的时候（PB、EB）</span><br><span class="line">3、mysqldump是覆盖形式恢复的方法。</span><br><span class="line"></span><br><span class="line">一般我们认为，在同数据量级，物理备份要比逻辑备份速度快.</span><br><span class="line">逻辑备份的优势:</span><br><span class="line">1、可读性强</span><br><span class="line">2、压缩比很高</span><br></pre></td></tr></table></figure><h1 id="7、企业故障恢复案例"><a href="#7、企业故障恢复案例" class="headerlink" title="7、企业故障恢复案例"></a>7、企业故障恢复案例</h1><h2 id="7-1-背景环境："><a href="#7-1-背景环境：" class="headerlink" title="7.1 背景环境："></a>7.1 背景环境：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正在运行的网站系统，mysql-5.7.20 数据库，数据量50G，日业务增量1-5M。</span><br></pre></td></tr></table></figure><h2 id="7-2-备份策略："><a href="#7-2-备份策略：" class="headerlink" title="7.2 备份策略："></a>7.2 备份策略：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每天23:00点，计划任务调用mysqldump执行全备脚本</span><br></pre></td></tr></table></figure><h2 id="7-3-故障时间点："><a href="#7-3-故障时间点：" class="headerlink" title="7.3 故障时间点："></a>7.3 故障时间点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">年底故障演练:模拟周三上午10点误删除数据库，并进行恢复.</span><br></pre></td></tr></table></figure><h2 id="7-4-思路："><a href="#7-4-思路：" class="headerlink" title="7.4 思路："></a>7.4 思路：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、停业务，避免数据的二次伤害</span><br><span class="line">2、找一个临时库，恢复周三23：00全备</span><br><span class="line">3、截取周二23：00  --- 周三10点误删除之间的binlog，恢复到临时库</span><br><span class="line">4、测试可用性和完整性</span><br><span class="line">5、 </span><br><span class="line">    5.1 方法一：直接使用临时库顶替原生产库，前端应用割接到新库</span><br><span class="line">    5.2 方法二：将误删除的表导出，导入到原生产库</span><br><span class="line">6、开启业务</span><br><span class="line">处理结果：经过20分钟的处理，最终业务恢复正常</span><br></pre></td></tr></table></figure><h2 id="7-5-故障模拟演练"><a href="#7-5-故障模拟演练" class="headerlink" title="7.5 故障模拟演练"></a>7.5 故障模拟演练</h2><h3 id="7-5-1-准备数据"><a href="#7-5-1-准备数据" class="headerlink" title="7.5.1 准备数据"></a>7.5.1 准备数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database backup;</span><br><span class="line">use backup</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values(1),(2),(3);</span><br><span class="line">commit;</span><br><span class="line">rm -rf &#x2F;backup&#x2F;*</span><br></pre></td></tr></table></figure><h3 id="7-5-2-周二-23：00全备"><a href="#7-5-2-周二-23：00全备" class="headerlink" title="7.5.2 周二 23：00全备"></a>7.5.2 周二 23：00全备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --set-gtid-purged&#x3D;OFF --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br></pre></td></tr></table></figure><h3 id="7-5-3-模拟周二-23：00到周三-10点之间数据变化"><a href="#7-5-3-模拟周二-23：00到周三-10点之间数据变化" class="headerlink" title="7.5.3 模拟周二 23：00到周三 10点之间数据变化"></a>7.5.3 模拟周二 23：00到周三 10点之间数据变化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use backup</span><br><span class="line">insert into t1 values(11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line">create table t2 (id int);</span><br><span class="line">insert into t2 values(11),(22),(33);</span><br></pre></td></tr></table></figure><h3 id="7-5-4-模拟故障-删除表-只是模拟，不代表生产操作"><a href="#7-5-4-模拟故障-删除表-只是模拟，不代表生产操作" class="headerlink" title="7.5.4 模拟故障,删除表(只是模拟，不代表生产操作)"></a>7.5.4 模拟故障,删除表(只是模拟，不代表生产操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database backup;</span><br></pre></td></tr></table></figure><h2 id="7-6-恢复过程"><a href="#7-6-恢复过程" class="headerlink" title="7.6 恢复过程"></a>7.6 恢复过程</h2><h3 id="7-6-1-准备临时数据库（多实例3307）"><a href="#7-6-1-准备临时数据库（多实例3307）" class="headerlink" title="7.6.1 准备临时数据库（多实例3307）"></a>7.6.1 准备临时数据库（多实例3307）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld3307</span><br></pre></td></tr></table></figure><h3 id="7-6-2-准备备份"><a href="#7-6-2-准备备份" class="headerlink" title="7.6.2 准备备份"></a>7.6.2 准备备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）准备全备：</span><br><span class="line">cd &#x2F;backup</span><br><span class="line">gunzip full_2018-10-17.sql.gz </span><br><span class="line">（2）截取二进制日志</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000036&#39;, MASTER_LOG_POS&#x3D;793;</span><br><span class="line">mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:6-7&#39; &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000036 &gt;&#x2F;backup&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h3 id="7-6-3-恢复备份到临时库"><a href="#7-6-3-恢复备份到临时库" class="headerlink" title="7.6.3 恢复备份到临时库"></a>7.6.3 恢复备份到临时库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;backup&#x2F;full_2018-10-17.sql</span><br><span class="line">source &#x2F;backup&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h3 id="7-6-4-将故障表导出并恢复到生产"><a href="#7-6-4-将故障表导出并恢复到生产" class="headerlink" title="7.6.4 将故障表导出并恢复到生产"></a>7.6.4 将故障表导出并恢复到生产</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump   -S &#x2F;data&#x2F;3307&#x2F;mysql.sock backup t1 &gt;&#x2F;backup&#x2F;t1.sql</span><br><span class="line">mysql -uroot -p123 </span><br><span class="line">set sql_log_bin&#x3D;0</span><br><span class="line">use backup </span><br><span class="line">source &#x2F;backup&#x2F;t1.sql;</span><br></pre></td></tr></table></figure><h1 id="8-课下作业："><a href="#8-课下作业：" class="headerlink" title="8. 课下作业："></a>8. 课下作业：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">练习：</span><br><span class="line">1、创建一个数据库 oldboy</span><br><span class="line">2、在oldboy下创建一张表t1</span><br><span class="line">3、插入5行任意数据</span><br><span class="line">4、全备</span><br><span class="line">5、插入两行数据，任意修改3行数据，删除1行数据</span><br><span class="line">6、删除所有数据</span><br><span class="line">7、再t1中又插入5行新数据，修改3行数据</span><br><span class="line">需求，跳过第六步恢复表数据</span><br><span class="line">写备份脚本和策略</span><br></pre></td></tr></table></figure><h1 id="9-备份时优化参数"><a href="#9-备份时优化参数" class="headerlink" title="9. 备份时优化参数:"></a>9. 备份时优化参数:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) max_allowed_packet   最大的数据包大小</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --set-gtid-purged&#x3D;OFF --master-data&#x3D;2 max_allowed_packet&#x3D;128M  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br><span class="line"></span><br><span class="line">(2) 增加key_buffer_size    (临时表有关)</span><br><span class="line">(3) 分库分表并发备份       (作业)</span><br><span class="line">(4) 架构分离,分别备份      (架构拆分,分布式备份)</span><br></pre></td></tr></table></figure><h1 id="10-MySQL物理备份工具-xtrabackup-XBK、Xbackup"><a href="#10-MySQL物理备份工具-xtrabackup-XBK、Xbackup" class="headerlink" title="10. MySQL物理备份工具-xtrabackup(XBK、Xbackup)"></a>10. MySQL物理备份工具-xtrabackup(XBK、Xbackup)</h1><h2 id="10-1安装"><a href="#10-1安装" class="headerlink" title="10.1安装"></a>10.1安装</h2><h3 id="10-1-1-安装依赖包："><a href="#10-1-1-安装依赖包：" class="headerlink" title="10.1.1 安装依赖包："></a>10.1.1 安装依赖包：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev</span><br></pre></td></tr></table></figure><h3 id="10-1-2-下载软件并安装"><a href="#10-1-2-下载软件并安装" class="headerlink" title="10.1.2 下载软件并安装"></a>10.1.2 下载软件并安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;XtraBackup&#x2F;Percona-XtraBackup-2.4.12&#x2F;binary&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;XtraBackup&#x2F;Percona-XtraBackup-2.4.4&#x2F;binary&#x2F;redhat&#x2F;6&#x2F;x86_64&#x2F;percona-xtrabackup-24-2.4.4-1.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum -y install percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="10-2、备份命令介绍"><a href="#10-2、备份命令介绍" class="headerlink" title="10.2、备份命令介绍:"></a>10.2、备份命令介绍:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup</span><br><span class="line">innobackupex    ******</span><br></pre></td></tr></table></figure><h2 id="10-3-备份方式——物理备份"><a href="#10-3-备份方式——物理备份" class="headerlink" title="10.3 备份方式——物理备份"></a>10.3 备份方式——物理备份</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）对于非Innodb表（比如 myisam）是，锁表cp数据文件，属于一种温备份。</span><br><span class="line">（2）对于Innodb的表（支持事务的），不锁表，拷贝数据页，最终以数据文件的方式保存下来，把一部分redo和undo一并备走，属于热备方式。</span><br></pre></td></tr></table></figure><h2 id="面试题：-xbk-在innodb表备份恢复的流程"><a href="#面试题：-xbk-在innodb表备份恢复的流程" class="headerlink" title="面试题： xbk 在innodb表备份恢复的流程"></a>面试题： xbk 在innodb表备份恢复的流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0、xbk备份执行的瞬间,立即触发ckpt,已提交的数据脏页,从内存刷写到磁盘,并记录此时的LSN号</span><br><span class="line">1、备份时，拷贝磁盘数据页，并且记录备份过程中产生的redo和undo一起拷贝走,也就是checkpoint LSN之后的日志</span><br><span class="line">2、在恢复之前，模拟Innodb“自动故障恢复”的过程，将redo（前滚）与undo（回滚）进行应用</span><br><span class="line">3、恢复过程是cp 备份到原来数据目录下</span><br></pre></td></tr></table></figure><h2 id="10-4、innobackupex使用"><a href="#10-4、innobackupex使用" class="headerlink" title="10.4、innobackupex使用"></a>10.4、innobackupex使用</h2><h3 id="10-4-1-全备"><a href="#10-4-1-全备" class="headerlink" title="10.4.1 全备"></a>10.4.1 全备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]# innobackupex --user&#x3D;root --password&#x3D;123  &#x2F;data&#x2F;backup</span><br></pre></td></tr></table></figure><h3 id="自主定制备份路径名"><a href="#自主定制备份路径名" class="headerlink" title="自主定制备份路径名"></a>自主定制备份路径名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]# innobackupex --user&#x3D;root --password&#x3D;123 --no-timestamp &#x2F;data&#x2F;backup&#x2F;full</span><br></pre></td></tr></table></figure><h3 id="备份集中多出来的文件："><a href="#备份集中多出来的文件：" class="headerlink" title="备份集中多出来的文件："></a>备份集中多出来的文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-rw-r----- 1 root root       24 Jun 29 09:59 xtrabackup_binlog_info</span><br><span class="line">-rw-r----- 1 root root      119 Jun 29 09:59 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root      489 Jun 29 09:59 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root     2560 Jun 29 09:59 xtrabackup_logfile</span><br><span class="line"></span><br><span class="line">xtrabackup_binlog_info ：（备份时刻的binlog位置）</span><br><span class="line">[root@db01 full]# cat xtrabackup_binlog_info </span><br><span class="line">mysql-bin.000003    536749</span><br><span class="line">79de40d3-5ff3-11e9-804a-000c2928f5dd:1-7</span><br><span class="line">记录的是备份时刻，binlog的文件名字和当时的结束的position，可以用来作为截取binlog时的起点。</span><br><span class="line"></span><br><span class="line">xtrabackup_checkpoints ：</span><br><span class="line">backup_type &#x3D; full-backuped</span><br><span class="line">from_lsn &#x3D; 0            上次所到达的LSN号(对于全备就是从0开始,对于增量有别的显示方法)</span><br><span class="line">to_lsn &#x3D; 160683027      备份开始时间(ckpt)点数据页的LSN    </span><br><span class="line">last_lsn &#x3D; 160683036    备份结束后，redo日志最终的LSN</span><br><span class="line">compact &#x3D; 0</span><br><span class="line">recover_binlog_info &#x3D; 0</span><br><span class="line">（1）备份时刻，立即将已经commit过的，内存中的数据页刷新到磁盘(CKPT).开始备份数据，数据文件的LSN会停留在to_lsn位置。</span><br><span class="line">（2）备份时刻有可能会有其他的数据写入，已备走的数据文件就不会再发生变化了。</span><br><span class="line">（3）在备份过程中，备份软件会一直监控着redo的undo，如果一旦有变化会将日志也一并备走，并记录LSN到last_lsn。</span><br><span class="line">从to_lsn  ----》last_lsn 就是，备份过程中产生的数据变化.</span><br></pre></td></tr></table></figure><h3 id="10-4-2-全备的恢复"><a href="#10-4-2-全备的恢复" class="headerlink" title="10.4.2 全备的恢复"></a>10.4.2 全备的恢复</h3><h4 id="准备备份（Prepared）"><a href="#准备备份（Prepared）" class="headerlink" title="准备备份（Prepared）"></a>准备备份（Prepared）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将redo进行重做，已提交的写到数据文件，未提交的使用undo回滚掉。模拟了CSR的过程</span><br><span class="line">[root@db01 ~]# innobackupex --apply-log  &#x2F;backup&#x2F;full</span><br></pre></td></tr></table></figure><h4 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前提：</span><br><span class="line">1、被恢复的目录是空</span><br><span class="line">2、被恢复的数据库的实例是关闭</span><br><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p>创建新目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]# mkdir &#x2F;data&#x2F;mysql1</span><br></pre></td></tr></table></figure><h4 id="数据授权"><a href="#数据授权" class="headerlink" title="数据授权"></a>数据授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql &#x2F;data&#x2F;mysql1</span><br></pre></td></tr></table></figure><h4 id="恢复备份-1"><a href="#恢复备份-1" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 full]# cp -a &#x2F;backup&#x2F;full&#x2F;* &#x2F;data&#x2F;mysql1&#x2F;</span><br></pre></td></tr></table></figure><h4 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql1</span><br><span class="line">[root@db01 mysql1]# chown -R mysql.mysql &#x2F;data&#x2F;mysql1</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h2 id="10-4-3-innobackupex-增量备份-incremental"><a href="#10-4-3-innobackupex-增量备份-incremental" class="headerlink" title="10.4.3 innobackupex 增量备份(incremental)"></a>10.4.3 innobackupex 增量备份(incremental)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）增量备份的方式，是基于上一次备份进行增量。</span><br><span class="line">（2）增量备份无法单独恢复。必须基于全备进行恢复。</span><br><span class="line">（3）所有增量必须要按顺序合并到全备中。</span><br></pre></td></tr></table></figure><h4 id="增量备份命令"><a href="#增量备份命令" class="headerlink" title="增量备份命令"></a>增量备份命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（1）删掉原来备份</span><br><span class="line">略.</span><br><span class="line">（2）全备（周日）</span><br><span class="line">[root@db01 backup]# innobackupex --user&#x3D;root --password --no-timestamp &#x2F;backup&#x2F;full &gt;&amp;&#x2F;tmp&#x2F;xbk_full.log</span><br><span class="line">（3）模拟周一数据变化</span><br><span class="line">db01 [(none)]&gt;create database cs charset utf8;</span><br><span class="line">db01 [(none)]&gt;use cs</span><br><span class="line">db01 [cs]&gt;create table t1 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t1 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line"></span><br><span class="line">（4）第一次增量备份（周一）</span><br><span class="line">innobackupex --user&#x3D;root --password&#x3D;123 --no-timestamp --incremental --incremental-basedir&#x3D;&#x2F;backup&#x2F;full  &#x2F;backup&#x2F;inc1 &amp;&gt;&#x2F;tmp&#x2F;inc1.log</span><br><span class="line">（5）模拟周二数据</span><br><span class="line">db01 [cs]&gt;create table t2 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t2 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line">（6）周二增量</span><br><span class="line"> innobackupex --user&#x3D;root --password&#x3D;123 --no-timestamp --incremental --incremental-basedir&#x3D;&#x2F;backup&#x2F;inc1  &#x2F;backup&#x2F;inc2  &amp;&gt;&#x2F;tmp&#x2F;inc2.log</span><br><span class="line">（7）模拟周三数据变化</span><br><span class="line">db01 [cs]&gt;create table t3 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t3 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line">db01 [cs]&gt;drop database cs;</span><br></pre></td></tr></table></figure><h4 id="恢复到周三误drop之前的数据状态"><a href="#恢复到周三误drop之前的数据状态" class="headerlink" title="恢复到周三误drop之前的数据状态"></a>恢复到周三误drop之前的数据状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">恢复思路：</span><br><span class="line">1.  挂出维护页，停止当天的自动备份脚本</span><br><span class="line">2.  检查备份：周日full+周一inc1+周二inc2，周三的完整二进制日志</span><br><span class="line">3. 进行备份整理（细节），截取关键的二进制日志（从备份——误删除之前）</span><br><span class="line">4. 测试库进行备份恢复及日志恢复</span><br><span class="line">5. 应用进行测试无误，开启业务</span><br><span class="line">6. 此次工作的总结</span><br></pre></td></tr></table></figure><h4 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 检查备份</span><br><span class="line">1afe8136-601d-11e9-9022-000c2928f5dd:7-9</span><br><span class="line">2. 备份整理（apply-log）+合并备份（full+inc1+inc2）</span><br><span class="line">(1) 全备的整理</span><br><span class="line">[root@db01 one]# innobackupex --apply-log --redo-only &#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">(2) 合并inc1到full中</span><br><span class="line">[root@db01 one]# innobackupex --apply-log --redo-only --incremental-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc1 &#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">(3) 合并inc2到full中</span><br><span class="line">[root@db01 one]# innobackupex --apply-log  --incremental-dir&#x3D;&#x2F;data&#x2F;backup&#x2F;inc2 &#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">(4) 最后一次整理全备</span><br><span class="line">[root@db01 backup]#  innobackupex --apply-log  &#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">3. 截取周二 23:00 到drop 之前的 binlog </span><br><span class="line">[root@db01 inc2]# mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;1afe8136-601d-11e9-9022-000c2928f5dd:7-9&#39; &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000009 &gt;&#x2F;data&#x2F;backup&#x2F;binlog.sql</span><br><span class="line">4. 进行恢复</span><br><span class="line">[root@db01 backup]# mkdir &#x2F;data&#x2F;mysql&#x2F;data2 -p</span><br><span class="line">[root@db01 full]# cp -a * &#x2F;data&#x2F;mysql&#x2F;data2</span><br><span class="line">[root@db01 backup]# chown -R mysql.  &#x2F;data&#x2F;*</span><br><span class="line">[root@db01 backup]# systemctl stop mysqld</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data2</span><br><span class="line">systemctl start mysqld</span><br><span class="line">Master [(none)]&gt;set sql_log_bin&#x3D;0;</span><br><span class="line">Master [(none)]&gt;source &#x2F;data&#x2F;backup&#x2F;binlog.sql</span><br></pre></td></tr></table></figure><h3 id="作业1"><a href="#作业1" class="headerlink" title="作业1"></a>作业1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Xtrabackup企业级增量恢复实战</span><br><span class="line">背景：</span><br><span class="line">某大型网站，mysql数据库，数据量500G，每日更新量20M-30M</span><br><span class="line">备份策略：</span><br><span class="line">xtrabackup，每周日0:00进行全备，周一到周六00:00进行增量备份。</span><br><span class="line">故障场景：</span><br><span class="line">周三下午2点出现数据库意外删除表操作。</span><br><span class="line">如何恢复？</span><br></pre></td></tr></table></figure><h3 id="作业2"><a href="#作业2" class="headerlink" title="作业2"></a>作业2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">练习：mysqldump备份恢复例子</span><br><span class="line">1、创建一个数据库 oldboy</span><br><span class="line">2、在oldboy下创建一张表t1</span><br><span class="line">3、插入5行任意数据</span><br><span class="line">4、全备</span><br><span class="line">5、插入两行数据，任意修改3行数据，删除1行数据</span><br><span class="line">6、删除所有数据</span><br><span class="line">7、再t1中又插入5行新数据，修改3行数据</span><br><span class="line">需求，跳过第六步恢复表数据</span><br></pre></td></tr></table></figure><h3 id="作业3"><a href="#作业3" class="headerlink" title="作业3"></a>作业3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分别写备份脚本和策略</span><br></pre></td></tr></table></figure><h3 id="作业4：备份集中单独恢复表"><a href="#作业4：备份集中单独恢复表" class="headerlink" title="作业4：备份集中单独恢复表"></a>作业4：备份集中单独恢复表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">思考:在之前的项目案例中,如果误删除的表只有10M,而备份有500G,该如何快速恢复误删除表?</span><br><span class="line">提示：</span><br><span class="line">drop table city;</span><br><span class="line">create table city like city_bak;</span><br><span class="line">alter table city discard tablespace;</span><br><span class="line">cp &#x2F;backup&#x2F;full&#x2F;world&#x2F;city.ibd  &#x2F;application&#x2F;mysql&#x2F;data&#x2F;world&#x2F;</span><br><span class="line">chown -R mysql.mysql  &#x2F;application&#x2F;mysql&#x2F;data&#x2F;world&#x2F;city.ibd </span><br><span class="line">alter table city import  tablespace;</span><br></pre></td></tr></table></figure><h3 id="作业5：-从mysqldump-全备中获取库和表的备份"><a href="#作业5：-从mysqldump-全备中获取库和表的备份" class="headerlink" title="作业5： 从mysqldump 全备中获取库和表的备份"></a>作业5： 从mysqldump 全备中获取库和表的备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、获得表结构</span><br><span class="line"># sed -e&#39;&#x2F;.&#x2F;&#123;H;$!d;&#125;&#39; -e &#39;x;&#x2F;CREATE TABLE &#96;city&#96;&#x2F;!d;q&#39;  full.sql&gt;createtable.sql</span><br><span class="line"></span><br><span class="line">2、获得INSERT INTO 语句，用于数据的恢复</span><br><span class="line"></span><br><span class="line"># grep -i &#39;INSERT INTO &#96;city&#96;&#39;  full.sqll &gt;data.sql &amp;</span><br><span class="line"></span><br><span class="line">3.获取单库的备份</span><br><span class="line"></span><br><span class="line"># sed -n &#39;&#x2F;^-- Current Database: &#96;world&#96;&#x2F;,&#x2F;^-- Current Database: &#96;&#x2F;p&#39; all.sql &gt;world.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（六）</title>
      <link href="/posts/56308/"/>
      <url>/posts/56308/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson06-日志管理"><a href="#MySQL-lesson06-日志管理" class="headerlink" title="MySQL-lesson06-日志管理"></a>MySQL-lesson06-日志管理</h1><p><img src="http://upload-images.jianshu.io/upload_images/16956686-062f0a6b2bc97bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/605/format/webp" alt="img"></p><p>image.png</p><h1 id="1-错误日志-log-error"><a href="#1-错误日志-log-error" class="headerlink" title="1.错误日志(log_error)"></a>1.错误日志(log_error)</h1><h2 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1.1 作用"></a>1.1 作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记录启动\关闭\日常运行过程中,状态信息,警告,错误</span><br></pre></td></tr></table></figure><h2 id="1-2-错误日志配置"><a href="#1-2-错误日志配置" class="headerlink" title="1.2 错误日志配置"></a>1.2 错误日志配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">默认就是开启的:  &#x2F;数据路径下&#x2F;hostname.err</span><br><span class="line">手工设定:</span><br><span class="line">Master [(none)]&gt;select @@log_error;</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">log_error&#x3D;&#x2F;var&#x2F;log&#x2F;mysql.log</span><br><span class="line">log_timestamps&#x3D;system</span><br><span class="line">重启生效</span><br><span class="line">show variables like &#39;log_error&#39;;</span><br></pre></td></tr></table></figure><h2 id="1-3-日志内容查看"><a href="#1-3-日志内容查看" class="headerlink" title="1.3 日志内容查看"></a>1.3 日志内容查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要关注[ERROR],看上下文</span><br></pre></td></tr></table></figure><h1 id="2-binlog-binary-logs-二进制日志"><a href="#2-binlog-binary-logs-二进制日志" class="headerlink" title="2. binlog(binary logs):二进制日志 *"></a>2. binlog(binary logs):二进制日志 <strong>*</strong></h1><h2 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1)备份恢复必须依赖二进制日志</span><br><span class="line">(2)主从环境必须依赖二进制日志</span><br></pre></td></tr></table></figure><h2 id="2-2-binlog配置-5-7必须加server-id"><a href="#2-2-binlog配置-5-7必须加server-id" class="headerlink" title="2.2 binlog配置 (5.7必须加server_id)"></a>2.2 binlog配置 (5.7必须加server_id)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">注意：MySQL默认是没有开启二进制日志的。</span><br><span class="line">基础参数查看:</span><br><span class="line">开关:</span><br><span class="line">[(none)]&gt;select @@log_bin;</span><br><span class="line">日志路径及名字</span><br><span class="line">[(none)]&gt;select @@log_bin_basename;</span><br><span class="line">服务ID号:</span><br><span class="line">[(none)]&gt;select @@server_id;</span><br><span class="line">二进制日志格式:</span><br><span class="line">[(none)]&gt;select @@binlog_format;</span><br><span class="line">双一标准之二:</span><br><span class="line">[(none)]&gt;select @@sync_binlog;</span><br></pre></td></tr></table></figure><h3 id="2-2-1-创建日志目录"><a href="#2-2-1-创建日志目录" class="headerlink" title="2.2.1 创建日志目录"></a>2.2.1 创建日志目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;data&#x2F;binlog</span><br><span class="line">chown -R mysql.mysql &#x2F;data&#x2F;binlog</span><br></pre></td></tr></table></figure><h3 id="2-2-2-修改配置文件"><a href="#2-2-2-修改配置文件" class="headerlink" title="2.2.2 修改配置文件"></a>2.2.2 修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">server_id&#x3D;6                                    -----&gt;5.6中，单机可以不需要此参数              </span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row</span><br></pre></td></tr></table></figure><h3 id="2-2-3-重启数据库生效"><a href="#2-2-3-重启数据库生效" class="headerlink" title="2.2.3 重启数据库生效"></a>2.2.3 重启数据库生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 mysql]# &#x2F;etc&#x2F;init.d&#x2F;mysqld restart</span><br></pre></td></tr></table></figure><h3 id="2-2-4-参数说明"><a href="#2-2-4-参数说明" class="headerlink" title="2.2.4 参数说明"></a>2.2.4 参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server_id&#x3D;3306 </span><br><span class="line">主要是在主从复制过程中必须要加的,但是在5.7版本中,要用以下参数(log_bin),开启binlog日志,即使是单机也是必加的</span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">(1)开启二进制日志功能</span><br><span class="line">(2)设置二进制日志目录及名称前缀</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">binlog的记录格式??</span><br></pre></td></tr></table></figure><h2 id="2-3-binlog记录了什么"><a href="#2-3-binlog记录了什么" class="headerlink" title="2.3 binlog记录了什么?"></a>2.3 binlog记录了什么?</h2><h3 id="2-3-0-引入"><a href="#2-3-0-引入" class="headerlink" title="2.3.0 引入"></a>2.3.0 引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binlog是SQL层的功能。记录的是变更SQL语句，不记录查询语句。</span><br></pre></td></tr></table></figure><h3 id="2-3-1-记录SQL语句种类"><a href="#2-3-1-记录SQL语句种类" class="headerlink" title="2.3.1 记录SQL语句种类"></a>2.3.1 记录SQL语句种类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DDL ：原封不动的记录当前DDL(statement语句方式)。</span><br><span class="line">DCL ：原封不动的记录当前DCL(statement语句方式)。</span><br><span class="line">DML ：只记录已经提交的事务DML</span><br></pre></td></tr></table></figure><h3 id="2-3-2-DML三种记录方式"><a href="#2-3-2-DML三种记录方式" class="headerlink" title="2.3.2 DML三种记录方式"></a>2.3.2 DML三种记录方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">binlog_format（binlog的记录格式）参数影响</span><br><span class="line">（1）statement（5.6默认）SBR(statement based replication) ：语句模式原封不动的记录当前DML。</span><br><span class="line">（2）ROW(5.7 默认值) RBR(ROW based replication) ：记录数据行的变化(用户看不懂，需要工具分析)</span><br><span class="line">（3）mixed（混合）MBR(mixed based replication)模式  ：以上两种模式的混合</span><br></pre></td></tr></table></figure><h3 id="2-3-3-面试题"><a href="#2-3-3-面试题" class="headerlink" title="2.3.3 面试题"></a>2.3.3 面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SBR与RBR模式的对比</span><br><span class="line">STATEMENT：可读性较高，日志量少，但是不够严谨</span><br><span class="line">ROW      ：可读性很低，日志量大，足够严谨</span><br><span class="line">update t1 set xxx&#x3D;xxx where id&gt;1000   ? --&gt;一共500w行，row模式怎么记录的日志</span><br><span class="line">为什么row模式严谨？</span><br><span class="line">id  name    intime</span><br><span class="line">insert into t1 values(1,&#39;zs&#39;,now())</span><br><span class="line">我们建议使用：row记录模式</span><br></pre></td></tr></table></figure><h2 id="2-4-event（事件）是什么"><a href="#2-4-event（事件）是什么" class="headerlink" title="2.4 event（事件）是什么?"></a>2.4 event（事件）是什么?</h2><h3 id="2-4-1-事件的简介"><a href="#2-4-1-事件的简介" class="headerlink" title="2.4.1 事件的简介"></a>2.4.1 事件的简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二进制日志的最小记录单元</span><br><span class="line">对于DDL,DCL,一个语句就是一个event</span><br><span class="line">对于DML语句来讲:只记录已提交的事务。</span><br><span class="line">例如以下列子,就被分为了4个event</span><br><span class="line">begin;      120  - 340</span><br><span class="line">DML1        340  - 460</span><br><span class="line">DML2        460  - 550</span><br><span class="line">commit;     550  - 760</span><br></pre></td></tr></table></figure><h3 id="2-4-2-event的组成"><a href="#2-4-2-event的组成" class="headerlink" title="2.4.2 event的组成"></a>2.4.2 event的组成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">三部分构成:</span><br><span class="line">(1) 事件的开始标识</span><br><span class="line">(2) 事件内容</span><br><span class="line">(3) 事件的结束标识</span><br><span class="line">Position:</span><br><span class="line">开始标识: at 194</span><br><span class="line">结束标识: end_log_pos 254</span><br><span class="line">194? 254?</span><br><span class="line">某个事件在binlog中的相对位置号</span><br><span class="line">位置号的作用是什么？</span><br><span class="line">为了方便我们截取事件</span><br></pre></td></tr></table></figure><h2 id="2-5-日志文件查看"><a href="#2-5-日志文件查看" class="headerlink" title="2.5 日志文件查看"></a>2.5 日志文件查看</h2><h3 id="2-5-1-查看日志的开启情况"><a href="#2-5-1-查看日志的开启情况" class="headerlink" title="2.5.1 查看日志的开启情况"></a>2.5.1 查看日志的开启情况</h3><p>log_bin参数设置的路径,可以找到二进制日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show variables like &#39;%log_bin%&#39;;</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">| Variable_name                   | Value                        |</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">| log_bin                         | ON                           |</span><br><span class="line">| log_bin_basename                | &#x2F;data&#x2F;binlog&#x2F;mysql-bin       |</span><br><span class="line">| log_bin_index                   | &#x2F;data&#x2F;binlog&#x2F;mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                          |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                          |</span><br><span class="line">| sql_log_bin                     | ON                           |</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="2-5-2-查看一共多少个binlog"><a href="#2-5-2-查看一共多少个binlog" class="headerlink" title="2.5.2 查看一共多少个binlog"></a>2.5.2 查看一共多少个binlog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show binary logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;show binary logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       201 |</span><br><span class="line">| mysql-bin.000002 |       201 |</span><br><span class="line">| mysql-bin.000003 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-查看mysql正在使用的日志文件"><a href="#2-5-3-查看mysql正在使用的日志文件" class="headerlink" title="2.5.3 查看mysql正在使用的日志文件"></a>2.5.3 查看mysql正在使用的日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">Master [(none)]&gt;</span><br></pre></td></tr></table></figure><p>file：当前MySQL正在使用的文件名<br>Position：最后一个事件的结束位置号</p><h2 id="2-6-日志内容查看"><a href="#2-6-日志内容查看" class="headerlink" title="2.6 日志内容查看"></a>2.6 日志内容查看</h2><h3 id="2-6-1-event查看"><a href="#2-6-1-event查看" class="headerlink" title="2.6.1 event查看"></a>2.6.1 event查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Master [binlog]&gt;show binlog events in &#39;mysql-bin.000003&#39;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                   |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.20-log, Binlog ver: 4  |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                        |</span><br><span class="line">| mysql-bin.000003 | 154 | Anonymous_Gtid |         6 |         219 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;   |</span><br><span class="line">| mysql-bin.000003 | 219 | Query          |         6 |         319 | create database binlog                 |</span><br><span class="line">| mysql-bin.000003 | 319 | Anonymous_Gtid |         6 |         384 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;   |</span><br><span class="line">| mysql-bin.000003 | 384 | Query          |         6 |         486 | use &#96;binlog&#96;; create table t1 (id int) |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line"></span><br><span class="line">Log_name：binlog文件名</span><br><span class="line">Pos：开始的position    *****</span><br><span class="line">Event_type：事件类型</span><br><span class="line">Format_desc：格式描述，每一个日志文件的第一个事件，多用户没有意义，MySQL识别binlog必要信息</span><br><span class="line">Server_id：mysql服务号标识</span><br><span class="line">End_log_pos：事件的结束位置号 *****</span><br><span class="line">Info：事件内容*****</span><br><span class="line">补充:</span><br><span class="line">SHOW BINLOG EVENTS</span><br><span class="line">   [IN &#39;log_name&#39;]</span><br><span class="line">   [FROM pos]</span><br><span class="line">   [LIMIT [offset,] row_count]</span><br><span class="line">[root@db01 binlog]# mysql -e &quot;show binlog events in &#39;mysql-bin.000004&#39;&quot; |grep drop</span><br></pre></td></tr></table></figure><h3 id="2-6-2-binlog文件内容详细查看"><a href="#2-6-2-binlog文件内容详细查看" class="headerlink" title="2.6.2 binlog文件内容详细查看"></a>2.6.2 binlog文件内容详细查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006</span><br><span class="line">mysqlbinlog --base64-output&#x3D;decode-rows -vvv &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003</span><br><span class="line">mysqlbinlog  -d binlog &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003</span><br><span class="line">[root@db01 binlog]# mysqlbinlog --start-datetime&#x3D;&#39;2019-05-06 17:00:00&#39; --stop-datetime&#x3D;&#39;2019-05-06 17:01:00&#39;  &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 </span><br></pre></td></tr></table></figure><h2 id="2-7-基于Position号进行日志截取"><a href="#2-7-基于Position号进行日志截取" class="headerlink" title="2.7 基于Position号进行日志截取"></a>2.7 基于Position号进行日志截取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">核心就是找截取的起点和终点</span><br><span class="line">--start-position&#x3D;321</span><br><span class="line">--stop-position&#x3D;513</span><br><span class="line"> mysqlbinlog --start-position&#x3D;219 --stop-position&#x3D;1347 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003 &gt;&#x2F;tmp&#x2F;bin.sql</span><br><span class="line"></span><br><span class="line">案例: 使用binlog日志进行数据恢复</span><br><span class="line">模拟:</span><br><span class="line">1. </span><br><span class="line">[(none)]&gt;create database binlog charset utf8;</span><br><span class="line">2. </span><br><span class="line">[(none)]&gt;use binlog;</span><br><span class="line">[binlog]&gt;create table t1(id int);</span><br><span class="line">3. </span><br><span class="line">[binlog]&gt;insert into t1 values(1);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">[binlog]&gt;insert into t1 values(2);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">[binlog]&gt;insert into t1 values(3);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">4. </span><br><span class="line">[binlog]&gt;drop database binlog;</span><br><span class="line">恢复:</span><br><span class="line">[(none)]&gt;show master status ;</span><br><span class="line">[(none)]&gt;show binlog events in &#39;mysql-bin.000004&#39;;</span><br><span class="line">[root@db01 binlog]# mysqlbinlog --start-position&#x3D;1227 --stop-position&#x3D;2342 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &gt;&#x2F;tmp&#x2F;bin.sql</span><br><span class="line">[(none)]&gt;set sql_Log_bin&#x3D;0;</span><br><span class="line">[(none)]&gt;source &#x2F;tmp&#x2F;bin.sql</span><br><span class="line"></span><br><span class="line">面试案例:</span><br><span class="line">1. 备份策略每天全备,有全量的二进制日志</span><br><span class="line">2.业务中一共10个库,其中一个被误drop了</span><br><span class="line">3. 需要在其他9个库正常工作过程中进行数据恢复</span><br></pre></td></tr></table></figure><h2 id="2-8-binlog日志的GTID新特性"><a href="#2-8-binlog日志的GTID新特性" class="headerlink" title="2.8 binlog日志的GTID新特性"></a>2.8 binlog日志的GTID新特性</h2><h3 id="2-8-1-GTID-介绍"><a href="#2-8-1-GTID-介绍" class="headerlink" title="2.8.1 GTID 介绍"></a>2.8.1 GTID 介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5.6 版本新加的特性,5.7中做了加强</span><br><span class="line">5.6 中不开启,没有这个功能.</span><br><span class="line">5.7 中的GTID,即使不开也会有自动生成</span><br><span class="line">SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br></pre></td></tr></table></figure><h3 id="2-8-2-GTID-Global-Transaction-ID"><a href="#2-8-2-GTID-Global-Transaction-ID" class="headerlink" title="2.8.2. GTID(Global Transaction ID)"></a>2.8.2. GTID(Global Transaction ID)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">是对于一个已提交事务的编号，并且是一个全局唯一的编号。</span><br><span class="line">它的官方定义如下：</span><br><span class="line"></span><br><span class="line">GTID &#x3D; source_id ：transaction_id</span><br><span class="line">7E11FA47-31CA-19E1-9E56-C43AA21293967:29</span><br></pre></td></tr></table></figure><p>重要参数介绍：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;create database gtid charset utf8;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                      |</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      326 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1 |</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;use gtid</span><br><span class="line">Database changed</span><br><span class="line">Master [gtid]&gt;create table t1 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      489 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-2 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;create table t2 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;create table t3 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      815 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-4 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;insert into t1 values(1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |     1068 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-5 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;insert into t2 values(1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;commit;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |     1321 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-6 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="2-8-3-基于GTID进行查看binlog"><a href="#2-8-3-基于GTID进行查看binlog" class="headerlink" title="2.8.3. 基于GTID进行查看binlog"></a>2.8.3. 基于GTID进行查看binlog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">具备GTID后,截取查看某些事务日志:</span><br><span class="line">--include-gtids</span><br><span class="line">--exclude-gtids</span><br><span class="line">mysqlbinlog --include-gtids&#x3D;&#39;dff98809-55c3-11e9-a58b-000c2928f5dd:1-6&#39; --exclude-gtids&#x3D;&#39;dff98809-55c3-11e9-a58b-000c2928f5dd:4&#39;  &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004</span><br></pre></td></tr></table></figure><h3 id="2-8-4-GTID的幂等性"><a href="#2-8-4-GTID的幂等性" class="headerlink" title="2.8.4 GTID的幂等性"></a>2.8.4 GTID的幂等性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开启GTID后,MySQL恢复Binlog时,重复GTID的事务不会再执行了</span><br><span class="line">就想恢复?怎么办?</span><br><span class="line">--skip-gtids</span><br><span class="line">mysqlbinlog --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:4&#39; &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;binlog.sql</span><br><span class="line">set sql_log_bin&#x3D;1;</span><br></pre></td></tr></table></figure><h2 id="2-9-使用二进制日志恢复数据案例"><a href="#2-9-使用二进制日志恢复数据案例" class="headerlink" title="2.9 使用二进制日志恢复数据案例"></a>2.9 使用二进制日志恢复数据案例</h2><h3 id="2-9-1-故障环境介绍"><a href="#2-9-1-故障环境介绍" class="headerlink" title="2.9.1 故障环境介绍"></a>2.9.1 故障环境介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">创建了一个库  db, 导入了表t1 ,t1表中录入了很多数据</span><br><span class="line">一个开发人员,drop database db;</span><br><span class="line">没有备份,日志都在.怎么恢复?</span><br><span class="line">思路:找到建库语句到删库之前所有的日志,进行恢复.(开启了GTID模式)</span><br><span class="line">故障案例模拟:</span><br><span class="line">(0) drop database if exists db ;</span><br><span class="line">(1) create database db charset utf8;     </span><br><span class="line">(2) use db;</span><br><span class="line">(3) create table t1 (id int);</span><br><span class="line">(4) insert into t1 values(1),(2),(3);</span><br><span class="line">(5) insert into t1 values(4),(5),(6);</span><br><span class="line">(6) commit</span><br><span class="line">(7) update t1 set id&#x3D;30 where id&#x3D;3;</span><br><span class="line">(8) commit;</span><br><span class="line">(9) delete from t1 where id&#x3D;4;</span><br><span class="line">(10)commit;</span><br><span class="line">(11)insert into t1 values(7),(8),(9);</span><br><span class="line">(12)commit;</span><br><span class="line">(13)drop database db;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">drop database if exists db ;</span><br><span class="line">create database db charset utf8; </span><br><span class="line">use db;</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values(1),(2),(3);</span><br><span class="line">insert into t1 values(4),(5),(6);</span><br><span class="line">commit;</span><br><span class="line">update t1 set id&#x3D;30 where id&#x3D;3;</span><br><span class="line">commit;</span><br><span class="line">delete from t1 where id&#x3D;4;</span><br><span class="line">commit;</span><br><span class="line">insert into t1 values(7),(8),(9);</span><br><span class="line">commit;</span><br><span class="line">drop database db;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">运行以上语句，模拟故障场景</span><br><span class="line">需求：将数据库恢复到以下状态（提示第9步和第13步是误操作，其他都是正常操作）</span><br></pre></td></tr></table></figure><h3 id="2-9-2-恢复过程-无GTID时的恢复"><a href="#2-9-2-恢复过程-无GTID时的恢复" class="headerlink" title="2.9.2 恢复过程(无GTID时的恢复)"></a>2.9.2 恢复过程(无GTID时的恢复)</h3><ol><li>查看当前使用的 binlog文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">oldguo [db]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |    1873 |              |                  |                  |</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">2.查看事件：</span><br><span class="line"></span><br><span class="line">第一段：</span><br><span class="line">| mysql-bin.000006 |  813 | Query      |        1 |        907 | use &#96;db&#96;; create table t1 (id int)                  |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |  907 | Query      |        1 |        977 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |  977 | Table_map  |        1 |        1020 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1020 | Write_rows  |        1 |        1070 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1070 | Table_map  |        1 |        1113 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1113 | Write_rows  |        1 |        1163 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1163 | Xid        |        1 |        1194 | COMMIT &#x2F;* xid&#x3D;74 *&#x2F;                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1194 | Query      |        1 |        1264 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1264 | Table_map  |        1 |        1307 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1307 | Update_rows |        1 |        1353 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1353 | Xid        |        1 |        1384 | COMMIT &#x2F;* xid&#x3D;77 *&#x2F;   </span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position&#x3D;813 --stop-position&#x3D;1384 &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006 &gt;&#x2F;tmp&#x2F;bin1.sql </span><br></pre></td></tr></table></figure><p>第二段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| mysql-bin.000006 | 1568 | Query      |        1 |        1638 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1638 | Table_map  |        1 |        1681 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1681 | Write_rows  |        1 |        1731 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1731 | Xid        |        1 |        1762 | COMMIT &#x2F;* xid&#x3D;81 *&#x2F; </span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position&#x3D;1568 --stop-position&#x3D;1762 &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006 &gt;&#x2F;tmp&#x2F;bin2.sql</span><br></pre></td></tr></table></figure><p>3.恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;bin1.sql</span><br><span class="line">source &#x2F;tmp&#x2F;bin2.sql</span><br><span class="line">set sql_log_bin&#x3D;1;</span><br><span class="line">oldguo [db]&gt;select * from t1;</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| id  |</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">|    1 |</span><br><span class="line"></span><br><span class="line">|    2 |</span><br><span class="line"></span><br><span class="line">|  30 |</span><br><span class="line"></span><br><span class="line">|    4 |</span><br><span class="line"></span><br><span class="line">|    5 |</span><br><span class="line"></span><br><span class="line">|    6 |</span><br><span class="line"></span><br><span class="line">|    7 |</span><br><span class="line"></span><br><span class="line">|    8 |</span><br><span class="line"></span><br><span class="line">|    9 |</span><br></pre></td></tr></table></figure><h3 id="2-9-3-有GTID的恢复"><a href="#2-9-3-有GTID的恢复" class="headerlink" title="2.9.3 有GTID的恢复:"></a>2.9.3 有GTID的恢复:</h3><p>(1)截取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:7-12&#39; mysql-bin.000004&gt; &#x2F;tmp&#x2F;bin.sql</span><br></pre></td></tr></table></figure><p>(2)恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h2 id="2-10二进制日志其他操作"><a href="#2-10二进制日志其他操作" class="headerlink" title="2.10二进制日志其他操作"></a>2.10二进制日志其他操作</h2><h3 id="2-10-1-自动清理日志"><a href="#2-10-1-自动清理日志" class="headerlink" title="2.10.1 自动清理日志"></a>2.10.1 自动清理日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%expire%&#39;;</span><br><span class="line">expire_logs_days  0   </span><br><span class="line">自动清理时间,是要按照全备周期+1</span><br><span class="line">set global expire_logs_days&#x3D;8;</span><br><span class="line">永久生效:</span><br><span class="line">my.cnf</span><br><span class="line">expire_logs_days&#x3D;15;</span><br><span class="line">企业建议,至少保留两个全备周期+1的binlog</span><br></pre></td></tr></table></figure><h3 id="2-10-2-手工清理"><a href="#2-10-2-手工清理" class="headerlink" title="2.10.2 手工清理"></a>2.10.2 手工清理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</span><br><span class="line">PURGE BINARY LOGS TO &#39;mysql-bin.000010&#39;;</span><br><span class="line">注意:不要手工 rm binlog文件</span><br><span class="line">1. my.cnf binlog关闭掉,启动数据库</span><br><span class="line">2.把数据库关闭,开启binlog,启动数据库</span><br><span class="line">删除所有binlog,并从000001开始重新记录日志</span><br></pre></td></tr></table></figure><p><strong>*reset master; 主从关系中，主库执行此操作，主从环境必崩</strong></p><h3 id="2-10-3-日志是怎么滚动"><a href="#2-10-3-日志是怎么滚动" class="headerlink" title="2.10.3 日志是怎么滚动"></a>2.10.3 日志是怎么滚动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flush logs; </span><br><span class="line">重启mysql也会自动滚动一个新的</span><br><span class="line">日志文件达到1G大小(max_binlog_size)</span><br><span class="line">| max_binlog_size                          | 1073741824     </span><br><span class="line">备份时,加入参数也可以自动滚动</span><br></pre></td></tr></table></figure><h1 id="3-slow-log-慢日志"><a href="#3-slow-log-慢日志" class="headerlink" title="3.slow_log 慢日志"></a>3.slow_log 慢日志</h1><h2 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用:"></a>3.1 作用:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记录慢SQL语句的日志,定位低效SQL语句的工具日志</span><br></pre></td></tr></table></figure><h2 id="3-2-开启慢日志-默认没开启"><a href="#3-2-开启慢日志-默认没开启" class="headerlink" title="3.2 开启慢日志(默认没开启)"></a>3.2 开启慢日志(默认没开启)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">开关:</span><br><span class="line">slow_query_log&#x3D;1 </span><br><span class="line">文件位置及名字 </span><br><span class="line">slow_query_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;slow.log</span><br><span class="line">设定慢查询时间:</span><br><span class="line">long_query_time&#x3D;0.1</span><br><span class="line">没走索引的语句也记录:</span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">slow_query_log&#x3D;1 </span><br><span class="line">slow_query_log_file&#x3D;&#x2F;data&#x2F;mysql&#x2F;slow.log</span><br><span class="line">long_query_time&#x3D;0.1</span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h2 id="3-3-mysqldumpslow-分析慢日志"><a href="#3-3-mysqldumpslow-分析慢日志" class="headerlink" title="3.3 mysqldumpslow 分析慢日志"></a>3.3 mysqldumpslow 分析慢日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow -s c -t 10 &#x2F;data&#x2F;mysql&#x2F;slow.log</span><br><span class="line"></span><br><span class="line"># 第三方工具(自己扩展)</span><br><span class="line">http:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;percona-toolkit&#x2F;LATEST&#x2F;</span><br><span class="line">yum install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest-MD5</span><br><span class="line">toolkit工具包中的命令:</span><br><span class="line">.&#x2F;pt-query-diagest  &#x2F;data&#x2F;mysql&#x2F;slow.log</span><br><span class="line">Anemometer基于pt-query-digest将MySQL慢查询可视化</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（五）</title>
      <link href="/posts/37869/"/>
      <url>/posts/37869/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-lesson05-存储引擎"><a href="#MySQL-lesson05-存储引擎" class="headerlink" title="MySQL-lesson05-存储引擎"></a>MySQL-lesson05-存储引擎</h1><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相当于Linux文件系统，只不过比文件系统强大</span><br></pre></td></tr></table></figure><h1 id="2、功能了解"><a href="#2、功能了解" class="headerlink" title="2、功能了解"></a>2、功能了解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据读写</span><br><span class="line">数据安全和一致性</span><br><span class="line">提高性能</span><br><span class="line">热备份</span><br><span class="line">自动故障恢复</span><br><span class="line">高可用方面支持</span><br><span class="line">等.</span><br></pre></td></tr></table></figure><h1 id="3、存储引擎种类（笔试）"><a href="#3、存储引擎种类（笔试）" class="headerlink" title="3、存储引擎种类（笔试）"></a>3、存储引擎种类（笔试）</h1><h2 id="3-1-介绍-Oracle-MySQL"><a href="#3-1-介绍-Oracle-MySQL" class="headerlink" title="3.1 介绍(Oracle MySQL)"></a>3.1 介绍(Oracle MySQL)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InnoDB</span><br><span class="line">MyISAM</span><br><span class="line">MEMORY</span><br><span class="line">ARCHIVE</span><br><span class="line">FEDERATED</span><br><span class="line">EXAMPLE</span><br><span class="line">BLACKHOLE</span><br><span class="line">MERGE</span><br><span class="line">NDBCLUSTER</span><br><span class="line">CSV</span><br></pre></td></tr></table></figure><h2 id="3-2-引擎种类查看"><a href="#3-2-引擎种类查看" class="headerlink" title="3.2 引擎种类查看"></a>3.2 引擎种类查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">存储引擎是作用在表上的，也就意味着，不同的表可以有不同的存储引擎类型。</span><br><span class="line">PerconaDB:默认是XtraDB</span><br><span class="line">MariaDB:默认是InnoDB</span><br><span class="line">其他的存储引擎支持:</span><br><span class="line">TokuDB    </span><br><span class="line">RocksDB</span><br><span class="line">MyRocks</span><br><span class="line">以上三种存储引擎的共同点:压缩比较高,数据插入性能极高</span><br><span class="line">现在很多的NewSQL,使用比较多的功能特性.</span><br></pre></td></tr></table></figure><h2 id="3-3-简历案例—zabbix监控系统架构整改"><a href="#3-3-简历案例—zabbix监控系统架构整改" class="headerlink" title="3.3 简历案例—zabbix监控系统架构整改"></a>3.3 简历案例—zabbix监控系统架构整改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">环境: zabbix 3.2    mariaDB 5.5  centos 7.3</span><br><span class="line">现象 : zabbix卡的要死 ,  每隔3-4个月,都要重新搭建一遍zabbix,存储空间经常爆满.</span><br><span class="line">问题 :</span><br><span class="line">1. zabbix 版本 </span><br><span class="line">2. 数据库版本</span><br><span class="line">3. zabbix数据库500G,存在一个文件里</span><br><span class="line">优化建议:</span><br><span class="line">1.数据库版本升级到5.7版本,zabbix升级更高版本</span><br><span class="line">2.存储引擎改为tokudb</span><br><span class="line">3.监控数据按月份进行切割(二次开发:zabbix 数据保留机制功能重写,数据库分表)</span><br><span class="line">4.关闭binlog和双1</span><br><span class="line">5.参数调整....</span><br><span class="line">优化结果:</span><br><span class="line">监控状态良好</span><br><span class="line"></span><br><span class="line">为什么?</span><br><span class="line">1. 原生态支持TokuDB,另外经过测试环境,5.7要比5.5 版本性能 高  2-3倍</span><br><span class="line">2. TokuDB:insert数据比Innodb快的多，数据压缩比要Innodb高</span><br><span class="line">3.监控数据按月份进行切割,为了能够truncate每个分区表,立即释放空间</span><br><span class="line">4.关闭binlog -----&gt;减少无关日志的记录.</span><br><span class="line">5.参数调整...-----&gt;安全性参数关闭,提高性能.</span><br></pre></td></tr></table></figure><h2 id="3-4-InnoDB个MyISAM存储引擎的替换"><a href="#3-4-InnoDB个MyISAM存储引擎的替换" class="headerlink" title="3.4 InnoDB个MyISAM存储引擎的替换"></a>3.4 InnoDB个MyISAM存储引擎的替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">环境: centos 5.8 ,MySQL 5.0版本,MyISAM存储引擎,网站业务(LNMP),数据量50G左右</span><br><span class="line">现象问题: 业务压力大的时候,非常卡;经历过宕机,会有部分数据丢失.</span><br><span class="line">问题分析:</span><br><span class="line">1.MyISAM存储引擎表级锁,在高并发时,会有很高锁等待</span><br><span class="line">2.MyISAM存储引擎不支持事务,在断电时,会有可能丢失数据</span><br><span class="line">职责</span><br><span class="line">1.监控锁的情况:有很多的表锁等待</span><br><span class="line">2.存储引擎查看:所有表默认是MyISAM</span><br><span class="line">解决方案:</span><br><span class="line">1.升级MySQL 5.6.10版本</span><br><span class="line">2. 迁移所有表到新环境</span><br><span class="line">3. 开启双1安全参数</span><br></pre></td></tr></table></figure><h1 id="4、InnoDB存储引擎介绍"><a href="#4、InnoDB存储引擎介绍" class="headerlink" title="4、InnoDB存储引擎介绍"></a>4、InnoDB存储引擎介绍</h1><p><img src="http://upload-images.jianshu.io/upload_images/16956686-a2c9c97b5ccd84ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/919/format/webp" alt="img"></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在MySQL5.5版本之后，默认的存储引擎，提供高可靠性和高性能。</span><br></pre></td></tr></table></figure><h2 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、事务（Transaction）</span><br><span class="line">2、MVCC（Multi-Version Concurrency Control多版本并发控制）</span><br><span class="line">3、行级锁(Row-level Lock)</span><br><span class="line">4、ACSR（Auto Crash Safey Recovery）自动的故障安全恢复</span><br><span class="line">5、支持热备份(Hot Backup)</span><br><span class="line">6、Replication: Group Commit , GTID (Global Transaction ID) ,多线程(Multi-Threads-SQL ) </span><br></pre></td></tr></table></figure><h2 id="4-2-笔试题"><a href="#4-2-笔试题" class="headerlink" title="4.2 笔试题"></a>4.2 笔试题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请你列举MySQL InnoDB存储优点？</span><br><span class="line">请你列举 InooDB和MyIsam的区别？</span><br></pre></td></tr></table></figure><h1 id="5-存储引擎查看"><a href="#5-存储引擎查看" class="headerlink" title="5. 存储引擎查看"></a>5. 存储引擎查看</h1><h2 id="5-1-使用-SELECT-确认会话存储引擎"><a href="#5-1-使用-SELECT-确认会话存储引擎" class="headerlink" title="5.1 使用 SELECT 确认会话存储引擎"></a>5.1 使用 SELECT 确认会话存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@default_storage_engine;</span><br><span class="line">## 5.2 存储引擎(不代表生产操作)</span><br><span class="line">会话级别:</span><br><span class="line">set default_storage_engine&#x3D;myisam;</span><br><span class="line">全局级别(仅影响新会话):</span><br><span class="line">set global default_storage_engine&#x3D;myisam;</span><br><span class="line">重启之后,所有参数均失效.</span><br><span class="line">如果要永久生效:</span><br><span class="line">写入配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure><p>[mysqld]</p><p>default_storage_engine=myisam 存储引擎是表级别的,每个表创建时可以指定不同的存储引擎,但是我们建议统一为innodb.</p><h2 id="5-3-SHOW-确认每个表的存储引擎："><a href="#5-3-SHOW-确认每个表的存储引擎：" class="headerlink" title="5.3 SHOW 确认每个表的存储引擎："></a>5.3 SHOW 确认每个表的存储引擎：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE City\G;</span><br><span class="line">SHOW TABLE STATUS LIKE &#39;CountryLanguage&#39;\G</span><br></pre></td></tr></table></figure><h2 id="5-4-INFORMATION-SCHEMA-确认每个表的存储引擎"><a href="#5-4-INFORMATION-SCHEMA-确认每个表的存储引擎" class="headerlink" title="5.4 INFORMATION_SCHEMA 确认每个表的存储引擎"></a>5.4 INFORMATION_SCHEMA 确认每个表的存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[world]&gt;select table_schema,table_name ,engine from information_schema.tables where table_schema not in (&#39;sys&#39;,&#39;mysql&#39;,&#39;information_schema&#39;,&#39;performance_schema&#39;);</span><br><span class="line">Master [world]&gt;show table status;</span><br><span class="line">Master [world]&gt;show create table city;</span><br></pre></td></tr></table></figure><h2 id="5-5-修改一个表的存储引擎"><a href="#5-5-修改一个表的存储引擎" class="headerlink" title="5.5 修改一个表的存储引擎"></a>5.5 修改一个表的存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [oldboy]&gt;alter table t1 engine innodb;</span><br><span class="line">注意：此命令我们经常使用他，进行innodb表的碎片整理</span><br></pre></td></tr></table></figure><h2 id="5-6-平常处理过的MySQL问题–碎片处理"><a href="#5-6-平常处理过的MySQL问题–碎片处理" class="headerlink" title="5.6 平常处理过的MySQL问题–碎片处理"></a>5.6 平常处理过的MySQL问题–碎片处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">环境:centos7.4,MySQL 5.7.20,InnoDB存储引擎</span><br><span class="line">业务特点:数据量级较大,经常需要按月删除历史数据.</span><br><span class="line">问题:磁盘空间占用很大,不释放</span><br><span class="line">处理方法:</span><br><span class="line">以前:将数据逻辑导出,手工drop表,然后导入进去</span><br><span class="line">现在:</span><br><span class="line">对表进行按月进行分表(partition,中间件)</span><br><span class="line">业务替换为truncate方式</span><br></pre></td></tr></table></figure><h2 id="5-6-扩展-如何批量修改"><a href="#5-6-扩展-如何批量修改" class="headerlink" title="5.6 扩展:如何批量修改"></a>5.6 扩展:如何批量修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求:将zabbix库中的所有表,innodb替换为tokudb</span><br><span class="line">select concat(&quot;alter table zabbix.&quot;,table_name,&quot; engine tokudb;&quot;) from</span><br><span class="line">information_schema.tables where table_schema&#x3D;&#39;zabbix&#39; into outfile &#39;&#x2F;tmp&#x2F;tokudb.sql&#39;;</span><br></pre></td></tr></table></figure><h1 id="6、InnoDB存储引擎物理存储结构"><a href="#6、InnoDB存储引擎物理存储结构" class="headerlink" title="6、InnoDB存储引擎物理存储结构"></a>6、InnoDB存储引擎物理存储结构</h1><h2 id="6-0-最直观的存储方式-data-mysql-data"><a href="#6-0-最直观的存储方式-data-mysql-data" class="headerlink" title="6.0 最直观的存储方式(/data/mysql/data)"></a>6.0 最直观的存储方式(/data/mysql/data)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ibdata1：系统数据字典信息(统计信息)，UNDO表空间等数据</span><br><span class="line">ib_logfile0 ~ ib_logfile1: REDO日志文件，事务日志文件。</span><br><span class="line">ibtmp1： 临时表空间磁盘位置，存储临时表</span><br><span class="line">frm：存储表的列信息</span><br><span class="line">ibd：表的数据行和索引</span><br></pre></td></tr></table></figure><h2 id="6-1-表空间-Tablespace"><a href="#6-1-表空间-Tablespace" class="headerlink" title="6.1 表空间(Tablespace)"></a>6.1 表空间(Tablespace)</h2><h3 id="6-1-1、共享表空间"><a href="#6-1-1、共享表空间" class="headerlink" title="6.1.1、共享表空间"></a>6.1.1、共享表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要将所有数据存储到同一个表空间中 ，管理比较混乱</span><br><span class="line">5.5版本出现的管理模式，也是默认的管理模式。</span><br><span class="line">5.6版本以，共享表空间保留，只用来存储:数据字典信息,undo,临时表。</span><br><span class="line">5.7 版本,临时表被独立出来了</span><br><span class="line">8.0版本,undo也被独立出去了</span><br></pre></td></tr></table></figure><p>具体变化参考官方文档:<br><a href="http://links.jianshu.com/go?to=http://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html">http://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html</a><br><a href="http://links.jianshu.com/go?to=http://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html">http://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</a><br><a href="http://links.jianshu.com/go?to=http://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html">http://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html</a></p><h3 id="6-1-2-共享表空间设置"><a href="#6-1-2-共享表空间设置" class="headerlink" title="6.1.2 共享表空间设置"></a>6.1.2 共享表空间设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">共享表空间设置(在搭建MySQL时，初始化数据之前设置到参数文件中)</span><br><span class="line">[(none)]&gt;select @@innodb_data_file_path;</span><br><span class="line">[(none)]&gt;show variables like &#39;%extend%&#39;;</span><br><span class="line">innodb_data_file_path&#x3D;ibdata1:512M:ibdata2:512M:autoextend</span><br><span class="line">innodb_autoextend_increment&#x3D;64</span><br></pre></td></tr></table></figure><h3 id="6-1-3-独立表空间"><a href="#6-1-3-独立表空间" class="headerlink" title="6.1.3 独立表空间"></a>6.1.3 独立表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">从5.6，默认表空间不再使用共享表空间，替换为独立表空间。</span><br><span class="line">主要存储的是用户数据</span><br><span class="line">存储特点为：一个表一个ibd文件，存储数据行和索引信息</span><br><span class="line">基本表结构元数据存储：</span><br><span class="line">xxx.frm</span><br><span class="line">最终结论：</span><br><span class="line">      元数据            数据行+索引</span><br><span class="line">mysql表数据    &#x3D;（ibdataX+frm）+ibd(段、区、页)</span><br><span class="line">        DDL             DML+DQL</span><br><span class="line"></span><br><span class="line">MySQL的存储引擎日志：</span><br><span class="line">Redo Log: ib_logfile0  ib_logfile1，重做日志</span><br><span class="line">Undo Log: ibdata1 ibdata2(存储在共享表空间中)，回滚日志</span><br><span class="line">临时表:ibtmp1，在做join union操作产生临时数据，用完就自动</span><br></pre></td></tr></table></figure><h3 id="6-1-4-独立表空间设置问题"><a href="#6-1-4-独立表空间设置问题" class="headerlink" title="6.1.4 独立表空间设置问题"></a>6.1.4 独立表空间设置问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;select @@innodb_file_per_table;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@innodb_file_per_table |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                      1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">alter table city dicard tablespace;</span><br><span class="line">alter table city import tablespace;</span><br></pre></td></tr></table></figure><h3 id="6-1-5-真实的学生案例"><a href="#6-1-5-真实的学生案例" class="headerlink" title="6.1.5 真实的学生案例"></a>6.1.5 真实的学生案例</h3><p>案例背景:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">硬件及软件环境:</span><br><span class="line">联想服务器（IBM） </span><br><span class="line">磁盘500G 没有raid</span><br><span class="line">centos 6.8</span><br><span class="line">mysql 5.6.33  innodb引擎  独立表空间</span><br><span class="line">备份没有，日志也没开</span><br><span class="line"></span><br><span class="line">开发用户专用库:</span><br><span class="line">jira(bug追踪) 、 confluence(内部知识库)    ------&gt;LNMT</span><br></pre></td></tr></table></figure><p>故障描述:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">断电了，启动完成后“&#x2F;” 只读</span><br><span class="line">fsck  重启,系统成功启动,mysql启动不了。</span><br><span class="line">结果：confulence库在  ， jira库不见了</span><br></pre></td></tr></table></figure><p>学员求助内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">求助：</span><br><span class="line">这种情况怎么恢复？</span><br><span class="line">我问：</span><br><span class="line">有备份没</span><br><span class="line">求助：</span><br><span class="line">连二进制日志都没有，没有备份，没有主从</span><br><span class="line">我说：</span><br><span class="line">没招了，jira需要硬盘恢复了。</span><br><span class="line">求助：</span><br><span class="line">1、jira问题拉倒中关村了</span><br><span class="line">2、能不能暂时把confulence库先打开用着</span><br><span class="line">将生产库confulence，拷贝到1:1虚拟机上&#x2F;var&#x2F;lib&#x2F;mysql,直接访问时访问不了的</span><br><span class="line"></span><br><span class="line">问：有没有工具能直接读取ibd</span><br><span class="line">我说：我查查，最后发现没有</span><br></pre></td></tr></table></figure><p>我想出一个办法来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表空间迁移:</span><br><span class="line">create table xxx</span><br><span class="line">alter table  confulence.t1 discard tablespace;</span><br><span class="line">alter table confulence.t1 import tablespace;</span><br><span class="line">虚拟机测试可行。</span><br></pre></td></tr></table></figure><p>处理问题思路:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">confulence库中一共有107张表。</span><br><span class="line">1、创建107和和原来一模一样的表。</span><br><span class="line">他有2016年的历史库，我让他去他同时电脑上 mysqldump备份confulence库</span><br><span class="line">mysqldump -uroot -ppassw0rd -B  confulence --no-data &gt;test.sql</span><br><span class="line">拿到你的测试库，进行恢复</span><br><span class="line">到这步为止，表结构有了。</span><br><span class="line">2、表空间删除。</span><br><span class="line">select concat(&#39;alter table &#39;,table_schema,&#39;.&#39;table_name,&#39; discard tablespace;&#39;) from information_schema.tables where table_schema&#x3D;&#39;confluence&#39; into outfile &#39;&#x2F;tmp&#x2F;discad.sql&#39;;</span><br><span class="line">source &#x2F;tmp&#x2F;discard.sql</span><br><span class="line">执行过程中发现，有20-30个表无法成功。主外键关系</span><br><span class="line">很绝望，一个表一个表分析表结构，很痛苦。</span><br><span class="line">set foreign_key_checks&#x3D;0 跳过外键检查。</span><br><span class="line">把有问题的表表空间也删掉了。</span><br><span class="line">3、拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中</span><br><span class="line">select concat(&#39;alter table &#39;,table_schema,&#39;.&#39;table_name,&#39; import tablespace;&#39;) from information_schema.tables where table_schema&#x3D;&#39;confluence&#39; into outfile &#39;&#x2F;tmp&#x2F;discad.sql&#39;;</span><br><span class="line">4、验证数据</span><br><span class="line">表都可以访问了，数据挽回到了出现问题时刻的状态（2-8）</span><br></pre></td></tr></table></figure><h1 id="8、事务的ACID特性"><a href="#8、事务的ACID特性" class="headerlink" title="8、事务的ACID特性"></a>8、事务的ACID特性</h1><p><strong>Atomic（原子性）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有语句作为一个单元全部成功执行或全部取消。不能出现中间状态。</span><br></pre></td></tr></table></figure><p><strong>Consistent（一致性）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果数据库在事务开始时处于一致状态，则在执行该事务期间将保留一致状态。</span><br></pre></td></tr></table></figure><p><strong>Isolated（隔离性）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事务之间不相互影响。</span><br></pre></td></tr></table></figure><p><strong>Durable（持久性）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事务成功完成后，所做的所有更改都会准确地记录在数据库中。所做的更改不会丢失。</span><br></pre></td></tr></table></figure><h1 id="9、事务的生命周期（事务控制语句）"><a href="#9、事务的生命周期（事务控制语句）" class="headerlink" title="9、事务的生命周期（事务控制语句）"></a>9、事务的生命周期（事务控制语句）</h1><h2 id="9-1-事务的开始"><a href="#9-1-事务的开始" class="headerlink" title="9.1 事务的开始"></a>9.1 事务的开始</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">说明:在5.5 以上的版本，不需要手工begin，只要你执行的是一个DML，会自动在前面加一个begin命令。</span><br></pre></td></tr></table></figure><h2 id="9-2-事务的结束"><a href="#9-2-事务的结束" class="headerlink" title="9.2 事务的结束"></a>9.2 事务的结束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit：提交事务</span><br><span class="line">完成一个事务，一旦事务提交成功 ，就说明具备ACID特性了。</span><br><span class="line">rollback ：回滚事务</span><br><span class="line">将内存中，已执行过的操作，回滚回去</span><br></pre></td></tr></table></figure><h2 id="9-3-自动提交策略（autocommit）"><a href="#9-3-自动提交策略（autocommit）" class="headerlink" title="9.3 自动提交策略（autocommit）"></a>9.3 自动提交策略（autocommit）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;select @@autocommit;</span><br><span class="line">db01 [(none)]&gt;set autocommit&#x3D;0;</span><br><span class="line">db01 [(none)]&gt;set global autocommit&#x3D;0;</span><br><span class="line">注：</span><br><span class="line">自动提交是否打开，一般在有事务需求的MySQL中，将其关闭</span><br><span class="line">不管有没有事务需求，我们一般也都建议设置为0，可以很大程度上提高数据库性能</span><br><span class="line">(1)</span><br><span class="line">set autocommit&#x3D;0;   </span><br><span class="line">set global autocommit&#x3D;0;</span><br><span class="line">(2)</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">autocommit&#x3D;0     </span><br></pre></td></tr></table></figure><h2 id="9-4-隐式提交语句"><a href="#9-4-隐式提交语句" class="headerlink" title="9.4 隐式提交语句"></a>9.4 隐式提交语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">用于隐式提交的 SQL 语句：</span><br><span class="line">begin </span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">SET AUTOCOMMIT &#x3D; 1</span><br><span class="line"></span><br><span class="line">导致提交的非事务语句：</span><br><span class="line">DDL语句： （ALTER、CREATE 和 DROP）</span><br><span class="line">DCL语句： （GRANT、REVOKE 和 SET PASSWORD）</span><br><span class="line">锁定语句：（LOCK TABLES 和 UNLOCK TABLES）</span><br><span class="line">导致隐式提交的语句示例：</span><br><span class="line">TRUNCATE TABLE</span><br><span class="line">LOAD DATA INFILE</span><br><span class="line">SELECT FOR UPDATE</span><br></pre></td></tr></table></figure><h2 id="9-5-开始事务流程："><a href="#9-5-开始事务流程：" class="headerlink" title="9.5 开始事务流程："></a>9.5 开始事务流程：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查autocommit是否为关闭状态</span><br><span class="line">select @@autocommit;</span><br><span class="line">或者：</span><br><span class="line">show variables like &#39;autocommit&#39;;</span><br><span class="line">2、开启事务,并结束事务</span><br><span class="line">begin</span><br><span class="line">delete from student where name&#x3D;&#39;alexsb&#39;;</span><br><span class="line">update student set name&#x3D;&#39;alexsb&#39; where name&#x3D;&#39;alex&#39;;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">delete from student where name&#x3D;&#39;alexsb&#39;;</span><br><span class="line">update student set name&#x3D;&#39;alexsb&#39; where name&#x3D;&#39;alex&#39;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h1 id="10-InnoDB-事务的ACID如何保证"><a href="#10-InnoDB-事务的ACID如何保证" class="headerlink" title="10. InnoDB 事务的ACID如何保证?"></a>10. InnoDB 事务的ACID如何保证?</h1><h2 id="10-0-一些概念"><a href="#10-0-一些概念" class="headerlink" title="10.0 一些概念"></a>10.0 一些概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redo log ---&gt; 重做日志 ib_logfile0~1   50M   , 轮询使用</span><br><span class="line">redo log buffer ---&gt; redo内存区域</span><br><span class="line">ibd     ----&gt; 存储 数据行和索引 </span><br><span class="line">buffer pool ---&gt;缓冲区池,数据和索引的缓冲</span><br><span class="line">LSN : 日志序列号 </span><br><span class="line">磁盘数据页,redo文件,buffer pool,redo buffer</span><br><span class="line">MySQL 每次数据库启动,都会比较磁盘数据页和redolog的LSN,必须要求两者LSN一致数据库才能正常启动</span><br><span class="line">WAL : write ahead log 日志优先写的方式实现持久化</span><br><span class="line">脏页: 内存脏页,内存中发生了修改,没写入到磁盘之前,我们把内存页称之为脏页.</span><br><span class="line">CKPT:Checkpoint,检查点,就是将脏页刷写到磁盘的动作</span><br><span class="line">TXID: 事务号,InnoDB会为每一个事务生成一个事务号,伴随着整个事务.</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-babda887346b7427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp" alt="img"></p><p>image</p><h2 id="10-1-redo-log"><a href="#10-1-redo-log" class="headerlink" title="10.1 redo log"></a>10.1 redo log</h2><h3 id="10-1-1-Redo是什么？"><a href="#10-1-1-Redo是什么？" class="headerlink" title="10.1.1 Redo是什么？"></a>10.1.1 Redo是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redo,顾名思义“重做日志”，是事务日志的一种。</span><br></pre></td></tr></table></figure><h3 id="10-1-2-作用是什么？"><a href="#10-1-2-作用是什么？" class="headerlink" title="10.1.2 作用是什么？"></a>10.1.2 作用是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在事务ACID过程中，实现的是“D”持久化的作用。对于AC也有相应的作用</span><br></pre></td></tr></table></figure><h3 id="10-1-3-redo日志位置"><a href="#10-1-3-redo日志位置" class="headerlink" title="10.1.3 redo日志位置"></a>10.1.3 redo日志位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redo的日志文件：iblogfile0 iblogfile1</span><br></pre></td></tr></table></figure><h3 id="10-1-4-redo-buffer"><a href="#10-1-4-redo-buffer" class="headerlink" title="10.1.4 redo buffer"></a>10.1.4 redo buffer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redo的buffer:数据页的变化信息+数据页当时的LSN号</span><br><span class="line">LSN：日志序列号  磁盘数据页、内存数据页、redo buffer、redolog</span><br></pre></td></tr></table></figure><h3 id="10-1-5-redo的刷新策略"><a href="#10-1-5-redo的刷新策略" class="headerlink" title="10.1.5 redo的刷新策略"></a>10.1.5 redo的刷新策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br><span class="line">刷新当前事务的redo buffer到磁盘</span><br><span class="line">还会顺便将一部分redo buffer中没有提交的事务日志也刷新到磁盘</span><br></pre></td></tr></table></figure><h3 id="10-1-6-MySQL-CSR——前滚"><a href="#10-1-6-MySQL-CSR——前滚" class="headerlink" title="10.1.6 MySQL CSR——前滚"></a>10.1.6 MySQL CSR——前滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL : 在启动时,必须保证redo日志文件和数据文件LSN必须一致, 如果不一致就会触发CSR,最终保证一致</span><br><span class="line">情况一:</span><br><span class="line">我们做了一个事务,begin;update;commit.</span><br><span class="line">1.在begin ,会立即分配一个TXID&#x3D;tx_01.</span><br><span class="line">2.update时,会将需要修改的数据页(dp_01,LSN&#x3D;101),加载到data buffer中</span><br><span class="line">3.DBWR线程,会进行dp_01数据页修改更新,并更新LSN&#x3D;102</span><br><span class="line">4.LOGBWR日志写线程,会将dp_01数据页的变化+LSN+TXID存储到redobuffer</span><br><span class="line">5. 执行commit时,LGWR日志写线程会将redobuffer信息写入redolog日志文件中,基于WAL原则,</span><br><span class="line">在日志完全写入磁盘后,commit命令才执行成功,(会将此日志打上commit标记)</span><br><span class="line">6.假如此时宕机,内存脏页没有来得及写入磁盘,内存数据全部丢失</span><br><span class="line">7.MySQL再次重启时,必须要redolog和磁盘数据页的LSN是一致的.但是,此时dp_01,TXID&#x3D;tx_01磁盘是LSN&#x3D;101,dp_01,TXID&#x3D;tx_01,redolog中LSN&#x3D;102</span><br><span class="line">MySQL此时无法正常启动,MySQL触发CSR.在内存追平LSN号,触发ckpt,将内存数据页更新到磁盘,从而保证磁盘数据页和redolog LSN一值.这时MySQL正长启动</span><br><span class="line">以上的工作过程,我们把它称之为基于REDO的&quot;前滚操作&quot;</span><br></pre></td></tr></table></figure><h2 id="11-2-undo-回滚日志"><a href="#11-2-undo-回滚日志" class="headerlink" title="11.2 undo 回滚日志"></a>11.2 undo 回滚日志</h2><h3 id="11-2-1-undo是什么？"><a href="#11-2-1-undo是什么？" class="headerlink" title="11.2.1 undo是什么？"></a>11.2.1 undo是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undo,顾名思义“回滚日志”</span><br></pre></td></tr></table></figure><h3 id="11-2-2-作用是什么？"><a href="#11-2-2-作用是什么？" class="headerlink" title="11.2.2 作用是什么？"></a>11.2.2 作用是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在事务ACID过程中，实现的是“A” 原子性的作用</span><br><span class="line">另外CI也依赖于Undo</span><br><span class="line">在rolback时,将数据恢复到修改之前的状态</span><br><span class="line">在CSR实现的是,将redo当中记录的未提交的时候进行回滚.</span><br><span class="line">undo提供快照技术,保存事务修改之前的数据状态.保证了MVCC,隔离性,mysqldump的热备</span><br></pre></td></tr></table></figure><h2 id="11-3-概念性的东西"><a href="#11-3-概念性的东西" class="headerlink" title="11.3 概念性的东西:"></a>11.3 概念性的东西:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redo怎么应用的</span><br><span class="line">undo怎么应用的</span><br><span class="line">CSR(自动故障恢复)过程</span><br><span class="line">LSN :日志序列号</span><br><span class="line">TXID:事务ID</span><br><span class="line">CKPT(Checkpoint)</span><br></pre></td></tr></table></figure><h2 id="11-4-锁"><a href="#11-4-锁" class="headerlink" title="11.4 锁"></a>11.4 锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">“锁”顾名思义就是锁定的意思。</span><br><span class="line">“锁”的作用是什么？</span><br><span class="line">在事务ACID过程中，“锁”和“隔离级别”一起来实现“I”隔离性和&quot;C&quot; 一致性 (redo也有参与).</span><br><span class="line">悲观锁:行级锁定(行锁)</span><br><span class="line">谁先操作某个数据行,就会持有&lt;这行&gt;的(X)锁.</span><br><span class="line">乐观锁: 没有锁</span><br></pre></td></tr></table></figure><h2 id="11-5-隔离级别"><a href="#11-5-隔离级别" class="headerlink" title="11.5 隔离级别"></a>11.5 隔离级别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">影响到数据的读取,默认的级别是 RR模式.</span><br><span class="line">transaction_isolation   隔离级别(参数)</span><br><span class="line">负责的是,MVCC,读一致性问题</span><br><span class="line">RU  : 读未提交,可脏读,一般部议叙出现</span><br><span class="line">RC  : 读已提交,可能出现幻读,可以防止脏读.</span><br><span class="line">RR  : 可重复读,功能是防止&quot;幻读&quot;现象 ,利用的是undo的快照技术+GAP(间隙锁)+NextLock(下键锁)</span><br><span class="line">SR   : 可串行化,可以防止死锁,但是并发事务性能较差</span><br><span class="line">补充: 在RC级别下,可以减轻GAP+NextLock锁的问题,但是会出现幻读现象,一般在为了读一致性会在正常select后添加for update语句.但是,请记住执行完一定要commit 否则容易出现所等待比较严重.</span><br><span class="line">例如:</span><br><span class="line">[world]&gt;select * from city where id&#x3D;999 for update;</span><br><span class="line">[world]&gt;commit;</span><br></pre></td></tr></table></figure><h2 id="11-6-架构改造项目"><a href="#11-6-架构改造项目" class="headerlink" title="11.6 架构改造项目"></a>11.6 架构改造项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">项目背景:</span><br><span class="line">2台  IBM X3650   32G  ,原来主从关系,2年多没有主从了,&quot;小问题&quot;不断(锁,宕机后的安全)</span><br><span class="line">MySQL 5.1.77   默认存储引擎 MyISAM  </span><br><span class="line">数据量: 60G左右 ,每周全备,没有开二进制日志</span><br><span class="line">架构方案:</span><br><span class="line">    1. 升级数据库版本到5.7.20 </span><br><span class="line">    2. 更新所有业务表的存储引擎为InnoDB</span><br><span class="line">    3. 重新设计备份策略为热备份,每天全备,并备份日志</span><br><span class="line">    4. 重新构建主从</span><br><span class="line">结果:</span><br><span class="line">    1.性能</span><br><span class="line">    2.安全方面</span><br><span class="line">    3.快速故障处理</span><br></pre></td></tr></table></figure><h1 id="12-InnoDB存储引擎核心特性-参数补充"><a href="#12-InnoDB存储引擎核心特性-参数补充" class="headerlink" title="12 InnoDB存储引擎核心特性-参数补充"></a>12 InnoDB存储引擎核心特性-参数补充</h1><h2 id="12-1-存储引擎相关"><a href="#12-1-存储引擎相关" class="headerlink" title="12.1 存储引擎相关"></a>12.1 存储引擎相关</h2><h3 id="12-1-1-查看"><a href="#12-1-1-查看" class="headerlink" title="12.1.1 查看"></a>12.1.1 查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">show variables like &#39;default_storage_engine&#39;;</span><br><span class="line">select @@default_storage_engine;</span><br></pre></td></tr></table></figure><h3 id="12-1-2-如何指定和修改存储引擎"><a href="#12-1-2-如何指定和修改存储引擎" class="headerlink" title="12.1.2 如何指定和修改存储引擎"></a>12.1.2 如何指定和修改存储引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 通过参数设置默认引擎</span><br><span class="line">(2) 建表的时候进行设置</span><br><span class="line">(3) alter table t1 engine&#x3D;innodb;</span><br></pre></td></tr></table></figure><h2 id="12-2-表空间"><a href="#12-2-表空间" class="headerlink" title="12.2. 表空间"></a>12.2. 表空间</h2><h3 id="12-2-1-共享表空间"><a href="#12-2-1-共享表空间" class="headerlink" title="12.2.1 共享表空间"></a>12.2.1 共享表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path</span><br><span class="line">一般是在初始化数据之前就设置好</span><br><span class="line">例子:</span><br><span class="line">innodb_data_file_path&#x3D;ibdata1:512M:ibdata2:512M:autoextend</span><br></pre></td></tr></table></figure><h3 id="12-2-2-独立表空间"><a href="#12-2-2-独立表空间" class="headerlink" title="12.2.2 独立表空间"></a>12.2.2 独立表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;innodb_file_per_table&#39;;</span><br></pre></td></tr></table></figure><h2 id="12-3-缓冲区池"><a href="#12-3-缓冲区池" class="headerlink" title="12.3. 缓冲区池"></a>12.3. 缓冲区池</h2><h3 id="12-3-1-查询"><a href="#12-3-1-查询" class="headerlink" title="12.3.1 查询"></a>12.3.1 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select @@innodb_buffer_pool_size;</span><br><span class="line">show engine innodb status\G</span><br><span class="line">innodb_buffer_pool_size </span><br><span class="line">一般建议最多是物理内存的 75-80%</span><br></pre></td></tr></table></figure><h2 id="12-4-innodb-flush-log-at-trx-commit-双一标准之一"><a href="#12-4-innodb-flush-log-at-trx-commit-双一标准之一" class="headerlink" title="12.4. innodb_flush_log_at_trx_commit (双一标准之一)"></a>12.4. innodb_flush_log_at_trx_commit (双一标准之一)</h2><h3 id="12-4-1-作用"><a href="#12-4-1-作用" class="headerlink" title="12.4.1 作用"></a>12.4.1 作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。</span><br></pre></td></tr></table></figure><h3 id="12-4-2-查询"><a href="#12-4-2-查询" class="headerlink" title="12.4.2 查询"></a>12.4.2 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@innodb_flush_log_at_trx_commit;</span><br></pre></td></tr></table></figure><h3 id="12-4-3-参数说明"><a href="#12-4-3-参数说明" class="headerlink" title="12.4.3 参数说明:"></a>12.4.3 参数说明:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1，每次事物的提交都会引起日志文件写入、flush磁盘的操作，确保了事务的ACID；flush  到操作系统的文件系统缓存  fsync到物理磁盘.</span><br><span class="line">0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入文件系统缓存并且秒fsync磁盘一次；</span><br><span class="line">2，每次事务提交引起写入文件系统缓存,但每秒钟完成一次fsync磁盘操作。</span><br><span class="line">--------</span><br><span class="line">The default setting of 1 is required for full ACID compliance. Logs are written and flushed to disk at each transaction commit.</span><br><span class="line">With a setting of 0, logs are written and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.</span><br><span class="line">With a setting of 2, logs are written after each transaction commit and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><h2 id="12-5-Innodb-flush-method-O-DIRECT-fdatasync"><a href="#12-5-Innodb-flush-method-O-DIRECT-fdatasync" class="headerlink" title="12.5. Innodb_flush_method=(O_DIRECT, fdatasync)"></a>12.5. Innodb_flush_method=(O_DIRECT, fdatasync)</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-b557f16a20a5dad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/679/format/webp" alt="img"></p><p>image</p><p><a href="http://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar\_innodb\_flush\_method">http://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar\_innodb\_flush\_method</a></p><h3 id="12-5-1-作用"><a href="#12-5-1-作用" class="headerlink" title="12.5.1 作用"></a>12.5.1 作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制的是,log buffer 和data buffer,刷写磁盘的时候是否经过文件系统缓存</span><br></pre></td></tr></table></figure><h3 id="12-5-2-查看"><a href="#12-5-2-查看" class="headerlink" title="12.5.2 查看"></a>12.5.2 查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%innodb_flush%&#39;;</span><br></pre></td></tr></table></figure><h3 id="12-5-3-参数值说明"><a href="#12-5-3-参数值说明" class="headerlink" title="12.5.3 参数值说明"></a>12.5.3 参数值说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">O_DIRECT  :数据缓冲区写磁盘,不走OS buffer</span><br><span class="line">fsync :日志和数据缓冲区写磁盘,都走OS buffer</span><br><span class="line">O_DSYNC  :日志缓冲区写磁盘,不走 OS buffer</span><br></pre></td></tr></table></figure><h3 id="12-5-4-使用建议"><a href="#12-5-4-使用建议" class="headerlink" title="12.5.4 使用建议"></a>12.5.4 使用建议</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">最高安全模式</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">Innodb_flush_method&#x3D;O_DIRECT</span><br><span class="line">最高性能:</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;0</span><br><span class="line">Innodb_flush_method&#x3D;fsync</span><br></pre></td></tr></table></figure><h2 id="12-6-redo日志有关的参数"><a href="#12-6-redo日志有关的参数" class="headerlink" title="12.6. redo日志有关的参数"></a>12.6. redo日志有关的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innodb_log_buffer_size&#x3D;16777216</span><br><span class="line">innodb_log_file_size&#x3D;50331648</span><br><span class="line">innodb_log_files_in_group &#x3D; 3</span><br></pre></td></tr></table></figure><h1 id="13-扩展-自己扩展，建议是官方文档。"><a href="#13-扩展-自己扩展，建议是官方文档。" class="headerlink" title="13.扩展(自己扩展，建议是官方文档。)"></a>13.扩展(自己扩展，建议是官方文档。)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RR模式(对索引进行删除时):</span><br><span class="line">GAP:          间隙锁</span><br><span class="line">next-lock:    下一键锁定</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line">id（有索引）</span><br><span class="line">1 2 3 4 5 6 </span><br><span class="line">GAP：</span><br><span class="line">在对3这个值做变更时，会产生两种锁，一种是本行的行级锁，另一种会在2和4索引键上进行枷锁</span><br><span class="line">next-lock：</span><br><span class="line">对第六行变更时，一种是本行的行级锁，在索引末尾键进行加锁，6以后的值在这时是不能被插入的。</span><br><span class="line">总之：</span><br><span class="line">GAP、next lock都是为了保证RR模式下，不会出现幻读，降低隔离级别或取消索引，这两种锁都不会产生。</span><br><span class="line">IX IS X S是什么?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（四）</title>
      <link href="/posts/20819/"/>
      <url>/posts/20819/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-索引及执行计划"><a href="#MySQL-索引及执行计划" class="headerlink" title="MySQL-索引及执行计划"></a>MySQL-索引及执行计划</h1><h1 id="1-索引作用"><a href="#1-索引作用" class="headerlink" title="1. 索引作用"></a>1. 索引作用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提供了类似于书中目录的作用,目的是为了优化查询</span><br></pre></td></tr></table></figure><h1 id="2-索引的种类-算法"><a href="#2-索引的种类-算法" class="headerlink" title="2. 索引的种类(算法)"></a>2. 索引的种类(算法)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B树索引</span><br><span class="line">Hash索引</span><br><span class="line">R树</span><br><span class="line">Full text</span><br><span class="line">GIS </span><br></pre></td></tr></table></figure><h1 id="3-B树-基于不同的查找算法分类介绍"><a href="#3-B树-基于不同的查找算法分类介绍" class="headerlink" title="3. B树 基于不同的查找算法分类介绍"></a>3. B树 基于不同的查找算法分类介绍</h1><p><img src="http://upload-images.jianshu.io/upload_images/16956686-0408e2dc5dbd0a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B-tree</span><br><span class="line">B+Tree 在范围查询方面提供了更好的性能(&gt; &lt; &gt;&#x3D; &lt;&#x3D; like)</span><br><span class="line">B*Tree</span><br></pre></td></tr></table></figure><h1 id="4-在功能上的分类"><a href="#4-在功能上的分类" class="headerlink" title="4. 在功能上的分类"></a>4. 在功能上的分类</h1><h2 id="4-1-辅助索引-S-怎么构建B树结构的"><a href="#4-1-辅助索引-S-怎么构建B树结构的" class="headerlink" title="4.1 辅助索引(S)怎么构建B树结构的?"></a>4.1 辅助索引(S)怎么构建B树结构的?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1). 索引是基于表中,列(索引键)的值生成的B树结构</span><br><span class="line">(2). 首先提取此列所有的值,进行自动排序</span><br><span class="line">(3). 将排好序的值,均匀的分布到索引树的叶子节点中(16K)</span><br><span class="line">(4). 然后生成此索引键值所对应得后端数据页的指针</span><br><span class="line">(5). 生成枝节点和根节点,根据数据量级和索引键长度,生成合适的索引树高度</span><br><span class="line">id  name  age  gender</span><br><span class="line">select  *  from  t1 where id&#x3D;10;</span><br><span class="line">问题: 基于索引键做where查询,对于id列是顺序IO,但是对于其他列的查询,可能是随机IO.</span><br></pre></td></tr></table></figure><h2 id="4-2-聚集索引-C"><a href="#4-2-聚集索引-C" class="headerlink" title="4.2 聚集索引(C)"></a>4.2 聚集索引(C)</h2><h3 id="4-2-1-前提"><a href="#4-2-1-前提" class="headerlink" title="4.2.1 前提"></a>4.2.1 前提</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)表中设置了主键,主键列就会自动被作为聚集索引.</span><br><span class="line">(2)如果没有主键,会选择唯一键作为聚集索引.</span><br><span class="line">(3)聚集索引必须在建表时才有意义,一般是表的无关列(ID)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-辅助索引-S-怎么构建B树结构的"><a href="#4-2-2-辅助索引-S-怎么构建B树结构的" class="headerlink" title="4.2.2 辅助索引(S)怎么构建B树结构的?"></a>4.2.2 辅助索引(S)怎么构建B树结构的?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 在建表时,设置了主键列(ID)</span><br><span class="line">(2) 在将来录入数据时,就会按照ID列的顺序存储到磁盘上.(我们又称之为聚集索引组织表)</span><br><span class="line">(3) 将排好序的整行数据,生成叶子节点.可以理解为,磁盘的数据页就是叶子节点</span><br></pre></td></tr></table></figure><h3 id="4-2-3-聚集索引和辅助索引构成区别"><a href="#4-2-3-聚集索引和辅助索引构成区别" class="headerlink" title="4.2.3 聚集索引和辅助索引构成区别"></a>4.2.3 聚集索引和辅助索引构成区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">聚集索引只能有一个,非空唯一,一般时主键</span><br><span class="line">辅助索引,可以有多个,时配合聚集索引使用的</span><br><span class="line">聚集索引叶子节点,就是磁盘的数据行存储的数据页</span><br><span class="line">MySQL是根据聚集索引,组织存储数据,数据存储时就是按照聚集索引的顺序进行存储数据</span><br><span class="line">辅助索引,只会提取索引键值,进行自动排序生成B树结构</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/16956686-e9678b5133528566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1085/format/webp" alt="img"></p><h1 id="5-辅助索引细分"><a href="#5-辅助索引细分" class="headerlink" title="5.辅助索引细分"></a>5.辅助索引细分</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.普通的单列辅助索引</span><br><span class="line">2.联合索引</span><br><span class="line">多个列作为索引条件,生成索引树,理论上设计的好的,可以减少大量的回表</span><br><span class="line">查询</span><br><span class="line">3.唯一索引</span><br><span class="line">索引列的值都是唯一的.</span><br></pre></td></tr></table></figure><h1 id="6-关于索引树的高度受什么影响"><a href="#6-关于索引树的高度受什么影响" class="headerlink" title="6. 关于索引树的高度受什么影响"></a>6. 关于索引树的高度受什么影响</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 数据量级, 解决方法:分表,分库,分布式</span><br><span class="line">2. 索引列值过长 , 解决方法:前缀索引</span><br><span class="line">3. 数据类型:</span><br><span class="line">变长长度字符串,使用了char,解决方案:变长字符串使用varchar</span><br><span class="line">enum类型的使用enum (&#39;山东&#39;,&#39;河北&#39;,&#39;黑龙江&#39;,&#39;吉林&#39;,&#39;辽宁&#39;,&#39;陕西&#39;......)</span><br><span class="line">                                         1      2      3</span><br></pre></td></tr></table></figure><h1 id="7-索引的基本管理"><a href="#7-索引的基本管理" class="headerlink" title="7. 索引的基本管理"></a>7. 索引的基本管理</h1><h2 id="7-1-索引建立前"><a href="#7-1-索引建立前" class="headerlink" title="7.1 索引建立前"></a>7.1 索引建立前</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;desc city;</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| ID          | int(11)  | NO  | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO  |    |        |                |</span><br><span class="line">| CountryCode | char(3)  | NO  | MUL |        |                |</span><br><span class="line">| District    | char(20) | NO  |    |        |                |</span><br><span class="line">| Population  | int(11)  | NO  |    | 0      |                |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Field :列名字</span><br><span class="line">key  :有没有索引,索引类型</span><br><span class="line">PRI: 主键索引</span><br><span class="line">UNI: 唯一索引</span><br><span class="line">MUL: 辅助索引(单列,联和,前缀)</span><br></pre></td></tr></table></figure><h2 id="7-1-单列普通辅助索引"><a href="#7-1-单列普通辅助索引" class="headerlink" title="7.1 单列普通辅助索引"></a>7.1 单列普通辅助索引</h2><h3 id="7-1-1-创建索引"><a href="#7-1-1-创建索引" class="headerlink" title="7.1.1 创建索引"></a>7.1.1 创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;alter table city add index idx_name(name);</span><br><span class="line">                                       表                    索引名（列名）</span><br><span class="line">db01 [world]&gt;create index idx_name1 on city(name);</span><br><span class="line">db01 [world]&gt;show index from city;</span><br><span class="line">![image](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;16956686-8c8421524dca6291.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">注意:</span><br><span class="line">以上操作不代表生产操作,我们不建议在一个列上建多个索引</span><br><span class="line">同一个表中，索引名不能同名。</span><br><span class="line">### 7.1.2 删除索引:</span><br><span class="line">db01 [world]&gt;alter table city drop index idx_name1;</span><br><span class="line">                                        表名                 索引名</span><br></pre></td></tr></table></figure><h3 id="7-2-覆盖索引-联合索引"><a href="#7-2-覆盖索引-联合索引" class="headerlink" title="7.2 覆盖索引(联合索引)"></a>7.2 覆盖索引(联合索引)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Master [world]&gt;alter table city add index idx_co_po(countrycode,population);</span><br></pre></td></tr></table></figure><h3 id="7-3-前缀索引"><a href="#7-3-前缀索引" class="headerlink" title="7.3 前缀索引"></a>7.3 前缀索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;alter table city add index idx_di(district(5));</span><br><span class="line">注意：数字列不能用作前缀索引。</span><br></pre></td></tr></table></figure><h3 id="7-4-唯一索引"><a href="#7-4-唯一索引" class="headerlink" title="7.4 唯一索引"></a>7.4 唯一索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;alter table city add unique index idx_uni1(name);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;San Jose&#39; for key &#39;idx_uni1&#39;</span><br></pre></td></tr></table></figure><p>统计city表中，以省的名字为分组，统计组的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select district,count(id) from city group by district;</span><br><span class="line">需求: 找到world下,city表中 name列有重复值的行,最后删掉重复的行</span><br><span class="line">db01 [world]&gt;select name,count(id) as cid from city group by name  having cid&gt;1 order by cid desc;</span><br><span class="line">db01 [world]&gt;select * from city where name&#x3D;&#39;suzhou&#39;;</span><br></pre></td></tr></table></figure><p>===============================================</p><h1 id="8-执行计划获取及分析"><a href="#8-执行计划获取及分析" class="headerlink" title="8. 执行计划获取及分析"></a>8. 执行计划获取及分析</h1><h2 id="8-0-介绍"><a href="#8-0-介绍" class="headerlink" title="8.0 介绍"></a>8.0 介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1)</span><br><span class="line">获取到的是优化器选择完成的,他认为代价最小的执行计划.</span><br><span class="line">作用: 语句执行前,先看执行计划信息,可以有效的防止性能较差的语句带来的性能问题.</span><br><span class="line">如果业务中出现了慢语句，我们也需要借助此命令进行语句的评估，分析优化方案。</span><br><span class="line">(2) select 获取数据的方法</span><br><span class="line">1. 全表扫描(应当尽量避免,因为性能低)</span><br><span class="line">2. 索引扫描</span><br><span class="line">3. 获取不到数据</span><br></pre></td></tr></table></figure><h2 id="8-1-执行计划获取"><a href="#8-1-执行计划获取" class="headerlink" title="8.1 执行计划获取"></a>8.1 执行计划获取</h2><p>获取优化器选择后的执行计划</p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-54b2b99aaf0b2783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/873/format/webp" alt="img"></p><p>image</p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-03030eb1a5dc92de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image</p><h2 id="8-2-执行计划分析"><a href="#8-2-执行计划分析" class="headerlink" title="8.2 执行计划分析"></a>8.2 执行计划分析</h2><h3 id="8-2-0-重点关注的信息"><a href="#8-2-0-重点关注的信息" class="headerlink" title="8.2.0 重点关注的信息"></a>8.2.0 重点关注的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table: city                              ----&gt;查询操作的表    **</span><br><span class="line">possible_keys: CountryCode,idx_co_po      ----&gt;可能会走的索引  **</span><br><span class="line">key: CountryCode   ----&gt;真正走的索引    ***</span><br><span class="line">type: ref   ----&gt;索引类型        *****</span><br><span class="line">Extra: Using index condition              ----&gt;额外信息        *****</span><br></pre></td></tr></table></figure><h3 id="8-2-1-type详解"><a href="#8-2-1-type详解" class="headerlink" title="8.2.1 type详解"></a>8.2.1 type详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">从左到右性能依次变好.</span><br><span class="line">ALL  :  </span><br><span class="line">全表扫描,不走索引</span><br><span class="line">例子:</span><br><span class="line">1. 查询条件列,没有索引</span><br><span class="line">SELECT * FROM t_100w WHERE k2&#x3D;&#39;780P&#39;;  </span><br><span class="line">2. 查询条件出现以下语句(辅助索引列)</span><br><span class="line">USE world </span><br><span class="line">DESC city;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode &lt;&gt; &#39;CHN&#39;;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode NOT IN (&#39;CHN&#39;,&#39;USA&#39;);</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode LIKE &#39;%CH%&#39;;</span><br><span class="line">注意:对于聚集索引列,使用以上语句,依然会走索引</span><br><span class="line">DESC SELECT * FROM city WHERE id &lt;&gt; 10;</span><br><span class="line"></span><br><span class="line">INDEX  :</span><br><span class="line">全索引扫描</span><br><span class="line">1. 查询需要获取整个索引树种的值时:</span><br><span class="line">DESC  SELECT countrycode  FROM city;</span><br><span class="line"></span><br><span class="line">2. 联合索引中,任何一个非最左列作为查询条件时:</span><br><span class="line">idx_a_b_c(a,b,c)  ---&gt; a  ab  abc</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 WHERE b </span><br><span class="line">SELECT * FROM t1 WHERE c    </span><br><span class="line"></span><br><span class="line">RANGE :</span><br><span class="line">索引范围扫描 </span><br><span class="line">辅助索引&gt; &lt; &gt;&#x3D; &lt;&#x3D; LIKE IN OR </span><br><span class="line">主键 &lt;&gt;  NOT IN</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line">1. </span><br><span class="line">DESC SELECT * FROM city WHERE id&lt;5;</span><br><span class="line">2. </span><br><span class="line">DESC SELECT * FROM city WHERE countrycode LIKE &#39;CH%&#39;;</span><br><span class="line">3. </span><br><span class="line">DESC SELECT * FROM city WHERE countrycode IN (&#39;CHN&#39;,&#39;USA&#39;);</span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line">1和2例子中,可以享受到B+树的优势,但是3例子中是不能享受的.</span><br><span class="line">所以,我们可以将3号列子改写:</span><br><span class="line"></span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">UNION ALL </span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;USA&#39;;</span><br><span class="line">ref: </span><br><span class="line">非唯一性索引,等值查询</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;;</span><br><span class="line">eq_ref: </span><br><span class="line">在多表连接时,连接条件使用了唯一索引(uk  pK)</span><br><span class="line"></span><br><span class="line">DESC SELECT b.name,a.name FROM city AS a </span><br><span class="line">JOIN country AS b </span><br><span class="line">ON a.countrycode&#x3D;b.code </span><br><span class="line">WHERE a.population &lt;100;</span><br><span class="line">DESC country</span><br><span class="line">system,const :</span><br><span class="line">唯一索引的等值查询</span><br><span class="line">DESC SELECT * FROM city WHERE id&#x3D;10;</span><br></pre></td></tr></table></figure><h3 id="8-2-2-其他字段解释"><a href="#8-2-2-其他字段解释" class="headerlink" title="8.2.2 其他字段解释"></a>8.2.2 其他字段解释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">extra: </span><br><span class="line">filesort ,文件排序.</span><br><span class="line">SHOW INDEX FROM city;</span><br><span class="line">ALTER TABLE city ADD INDEX CountryCode(CountryCode);</span><br><span class="line">ALTER TABLE city DROP INDEX idx_c_p;</span><br><span class="line"></span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line"></span><br><span class="line">ALTER TABLE city ADD INDEX idx_(population);</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line">ALTER TABLE city ADD INDEX idx_c_p(countrycode,population);</span><br><span class="line">ALTER TABLE city DROP INDEX idx_;</span><br><span class="line">ALTER TABLE city DROP INDEX CountryCode;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line"></span><br><span class="line">结论: </span><br><span class="line">1.当我们看到执行计划extra位置出现filesort,说明由文件排序出现</span><br><span class="line">2.观察需要排序(ORDER BY,GROUP BY ,DISTINCT )的条件,有没有索引</span><br><span class="line">3. 根据子句的执行顺序,去创建联合索引</span><br><span class="line"></span><br><span class="line">索引优化效果测试:</span><br><span class="line">优化前:</span><br><span class="line">[root@db01 ~]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf \</span><br><span class="line">&gt; --concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;oldboy&#39; \</span><br><span class="line">&gt; --query&#x3D;&quot;select * from oldboy.t_100w where k2&#x3D;&#39;780P&#39;&quot; engine&#x3D;innodb \</span><br><span class="line">&gt; --number-of-queries&#x3D;2000 -uroot -p123 -verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine rbose</span><br><span class="line">    Average number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Number of clients running queries: 100</span><br><span class="line">    Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">优化后:</span><br><span class="line">[root@db01 ~]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;oldboy&#39; --query&#x3D;&quot;select * from oldboy.t_100w where k2&#x3D;&#39;780P&#39;&quot; engine&#x3D;innodb --number-of-queries&#x3D;2000 -uroot -p123 -verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine rbose</span><br><span class="line">    Average number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Number of clients running queries: 100</span><br><span class="line">    Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">联合索引:</span><br><span class="line">1. SELECT * FROM t1  WHERE a&#x3D;    b&#x3D;   </span><br><span class="line">我们建立联合索引时:</span><br><span class="line">ALTER TABLE t1 ADD INDEX idx_a_b(a,b);  </span><br><span class="line">ALTER TABLE t1 ADD INDEX idx_b_a(b,a);  </span><br><span class="line">以上的查询不考虑索引的顺序,优化器会自动调整where的条件顺序</span><br><span class="line">注意: 索引,我们在这种情况下建索引时,需要考虑哪个列的唯一值更多,哪个放在索引左边.</span><br><span class="line"></span><br><span class="line">2.  如果出现where 条件中出现不等值查询条件</span><br><span class="line">DESC  SELECT * FROM t_100w WHERE num &lt;1000 AND k2&#x3D;&#39;DEEF&#39;;</span><br><span class="line">我们建索引时:</span><br><span class="line">ALTER TABLE t_100w ADD INDEX idx_2_n(k2,num);</span><br><span class="line">语句书写时</span><br><span class="line">DESC  SELECT * FROM t_100w WHERE  k2&#x3D;&#39;DEEF&#39;  AND  num &lt;1000 ;</span><br><span class="line">3. 如果查询中出现多子句</span><br><span class="line">我们要按照子句的执行顺序进行建立索引.</span><br></pre></td></tr></table></figure><h3 id="8-2-3-explain-desc-使用场景（面试题）"><a href="#8-2-3-explain-desc-使用场景（面试题）" class="headerlink" title="8.2.3 explain(desc)使用场景（面试题）"></a>8.2.3 explain(desc)使用场景（面试题）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">题目意思:  我们公司业务慢,请你从数据库的角度分析原因</span><br><span class="line">1.mysql出现性能问题,我总结有两种情况:</span><br><span class="line">（1）应急性的慢：突然夯住</span><br><span class="line">应急情况:数据库hang(卡了,资源耗尽)</span><br><span class="line">处理过程:</span><br><span class="line">1.show processlist;  获取到导致数据库hang的语句</span><br><span class="line">2. explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">3. 建索引,改语句</span><br><span class="line">（2）一段时间慢(持续性的):</span><br><span class="line">(1)记录慢日志slowlog,分析slowlog</span><br><span class="line">(2)explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">(3)建索引,改语句</span><br></pre></td></tr></table></figure><h1 id="9-索引应用规范"><a href="#9-索引应用规范" class="headerlink" title="9. 索引应用规范"></a>9. 索引应用规范</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">业务</span><br><span class="line">1.产品的功能</span><br><span class="line">2.用户的行为</span><br><span class="line">&quot;热&quot;查询语句 ---&gt;较慢---&gt;slowlog</span><br><span class="line">&quot;热&quot;数据</span><br></pre></td></tr></table></figure><h2 id="9-1-建立索引的原则（DBA运维规范）"><a href="#9-1-建立索引的原则（DBA运维规范）" class="headerlink" title="9.1 建立索引的原则（DBA运维规范）"></a>9.1 建立索引的原则（DBA运维规范）</h2><h3 id="9-1-0-说明"><a href="#9-1-0-说明" class="headerlink" title="9.1.0 说明"></a>9.1.0 说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。那么索引设计原则又是怎样的?</span><br></pre></td></tr></table></figure><h3 id="9-1-1-必须的-建表时一定要有主键-一般是个无关列"><a href="#9-1-1-必须的-建表时一定要有主键-一般是个无关列" class="headerlink" title="9.1.1 (必须的) 建表时一定要有主键,一般是个无关列"></a>9.1.1 (必须的) 建表时一定要有主键,一般是个无关列</h3><p>略.回顾一下,聚集索引结构.</p><h3 id="9-1-2-选择唯一性索引"><a href="#9-1-2-选择唯一性索引" class="headerlink" title="9.1.2 选择唯一性索引"></a>9.1.2 选择唯一性索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。</span><br><span class="line">例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。</span><br><span class="line">如果使用姓名的话，可能存在同名现象，从而降低查询速度。</span><br><span class="line"></span><br><span class="line">优化方案:</span><br><span class="line">(1) 如果非得使用重复值较多的列作为查询条件(例如:男女),可以将表逻辑拆分</span><br><span class="line">(2) 可以将此列和其他的查询类,做联和索引</span><br><span class="line">select count(*) from world.city;</span><br><span class="line">select count(distinct countrycode) from world.city;</span><br><span class="line">select count(distinct countrycode,population ) from world.city;</span><br></pre></td></tr></table></figure><h3 id="9-1-3-必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，"><a href="#9-1-3-必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，" class="headerlink" title="9.1.3(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，"></a>9.1.3(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">排序操作会浪费很多时间。</span><br><span class="line">where  A B C      ----》 A  B  C</span><br><span class="line">in </span><br><span class="line">where A   group by B  order by C</span><br><span class="line">A,B，C</span><br><span class="line"></span><br><span class="line">如果为其建立索引，优化查询</span><br><span class="line">注：如果经常作为条件的列，重复值特别多，可以建立联合索引。</span><br></pre></td></tr></table></figure><h3 id="9-1-4-尽量使用前缀来索引"><a href="#9-1-4-尽量使用前缀来索引" class="headerlink" title="9.1.4 尽量使用前缀来索引"></a>9.1.4 尽量使用前缀来索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果索引字段的值很长，最好使用值的前缀来索引。</span><br></pre></td></tr></table></figure><h3 id="9-1-5-限制索引的数目"><a href="#9-1-5-限制索引的数目" class="headerlink" title="9.1.5 限制索引的数目"></a>9.1.5 限制索引的数目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">索引的数目不是越多越好。</span><br><span class="line">可能会产生的问题:</span><br><span class="line">(1) 每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。</span><br><span class="line">(2) 修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</span><br><span class="line">(3) 优化器的负担会很重,有可能会影响到优化器的选择.</span><br><span class="line">percona-toolkit中有个工具,专门分析索引是否有用</span><br></pre></td></tr></table></figure><h3 id="9-1-6-删除不再使用或者很少使用的索引-percona-toolkit"><a href="#9-1-6-删除不再使用或者很少使用的索引-percona-toolkit" class="headerlink" title="9.1.6 删除不再使用或者很少使用的索引(percona toolkit)"></a>9.1.6 删除不再使用或者很少使用的索引(percona toolkit)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pt-duplicate-key-checker</span><br><span class="line"></span><br><span class="line">表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理</span><br><span class="line">员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</span><br></pre></td></tr></table></figure><h3 id="9-1-7-大表加索引-要在业务不繁忙期间操作"><a href="#9-1-7-大表加索引-要在业务不繁忙期间操作" class="headerlink" title="9.1.7 大表加索引,要在业务不繁忙期间操作"></a>9.1.7 大表加索引,要在业务不繁忙期间操作</h3><h3 id="9-1-8-尽量少在经常更新值的列上建索引"><a href="#9-1-8-尽量少在经常更新值的列上建索引" class="headerlink" title="9.1.8 尽量少在经常更新值的列上建索引"></a>9.1.8 尽量少在经常更新值的列上建索引</h3><h3 id="9-1-9-建索引原则"><a href="#9-1-9-建索引原则" class="headerlink" title="9.1.9 建索引原则"></a>9.1.9 建索引原则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1) 必须要有主键,如果没有可以做为主键条件的列,创建无关列</span><br><span class="line">(2) 经常做为where条件列  order by  group by  join on, distinct 的条件(业务:产品功能+用户行为)</span><br><span class="line">(3) 最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引</span><br><span class="line">(4) 列值长度较长的索引列,我们建议使用前缀索引.</span><br><span class="line">(5) 降低索引条目,一方面不要创建没用索引,不常使用的索引清理,percona toolkit(xxxxx)</span><br><span class="line">(6) 索引维护要避开业务繁忙期</span><br></pre></td></tr></table></figure><h2 id="9-2-不走索引的情况（开发规范）"><a href="#9-2-不走索引的情况（开发规范）" class="headerlink" title="9.2 不走索引的情况（开发规范）"></a>9.2 不走索引的情况（开发规范）</h2><h3 id="9-2-1-没有查询条件，或者查询条件没有建立索引"><a href="#9-2-1-没有查询条件，或者查询条件没有建立索引" class="headerlink" title="9.2.1 没有查询条件，或者查询条件没有建立索引"></a>9.2.1 没有查询条件，或者查询条件没有建立索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select * from tab;       全表扫描。</span><br><span class="line">select  * from tab where 1&#x3D;1;</span><br><span class="line">在业务数据库中，特别是数据量比较大的表。</span><br><span class="line">是没有全表扫描这种需求。</span><br><span class="line">1、对用户查看是非常痛苦的。</span><br><span class="line">2、对服务器来讲毁灭性的。</span><br><span class="line">（1）</span><br><span class="line">select * from tab;</span><br><span class="line">SQL改写成以下语句：</span><br><span class="line">select  * from  tab  order by  price  limit 10 ;    需要在price列上建立索引</span><br><span class="line">（2）</span><br><span class="line">select  * from  tab where name&#x3D;&#39;zhangsan&#39;          name列没有索引</span><br><span class="line">改：</span><br><span class="line">1、换成有索引的列作为查询条件</span><br><span class="line">2、将name列建立索引</span><br></pre></td></tr></table></figure><h3 id="9-2-2-查询结果集是原表中的大部分数据，应该是25％以上。"><a href="#9-2-2-查询结果集是原表中的大部分数据，应该是25％以上。" class="headerlink" title="9.2.2 查询结果集是原表中的大部分数据，应该是25％以上。"></a>9.2.2 查询结果集是原表中的大部分数据，应该是25％以上。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查询的结果集，超过了总数行数25%，优化器觉得就没有必要走索引了。</span><br><span class="line"></span><br><span class="line">假如：tab表 id，name    id:1-100w  ，id列有(辅助)索引</span><br><span class="line">select * from tab  where id&gt;500000;</span><br><span class="line">如果业务允许，可以使用limit控制。</span><br><span class="line">怎么改写 ？</span><br><span class="line">结合业务判断，有没有更好的方式。如果没有更好的改写方案</span><br><span class="line">尽量不要在mysql存放这个数据了。放到redis里面。</span><br></pre></td></tr></table></figure><h3 id="9-2-3-索引本身失效，统计数据不真实"><a href="#9-2-3-索引本身失效，统计数据不真实" class="headerlink" title="9.2.3 索引本身失效，统计数据不真实"></a>9.2.3 索引本身失效，统计数据不真实</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">索引有自我维护的能力。</span><br><span class="line">对于表内容变化比较频繁的情况下，有可能会出现索引失效。</span><br><span class="line">一般是删除重建</span><br><span class="line"></span><br><span class="line">现象:</span><br><span class="line">有一条select语句平常查询时很快,突然有一天很慢,会是什么原因</span><br><span class="line">select?  ---&gt;索引失效,，统计数据不真实</span><br><span class="line">DML ?   ---&gt;锁冲突</span><br></pre></td></tr></table></figure><h3 id="9-2-4-查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等"><a href="#9-2-4-查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等" class="headerlink" title="9.2.4 查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)"></a>9.2.4 查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">错误的例子：select * from test where id-1&#x3D;9;</span><br><span class="line">正确的例子：select * from test where id&#x3D;10;</span><br><span class="line">算术运算</span><br><span class="line">函数运算</span><br><span class="line">子查询</span><br></pre></td></tr></table></figure><h3 id="9-2-5-隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误"><a href="#9-2-5-隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误" class="headerlink" title="9.2.5 隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误."></a>9.2.5 隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">这样会导致索引失效. 错误的例子：</span><br><span class="line">mysql&gt; alter table tab add index inx_tel(telnum);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; desc tab;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)    | YES  |    | NULL    |      |</span><br><span class="line">| name  | varchar(20) | YES  |    | NULL    |      |</span><br><span class="line">| telnum | varchar(20) | YES  | MUL | NULL    |      |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line">mysql&gt; select * from tab where telnum&#x3D;&#39;1333333&#39;;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from tab where telnum&#x3D;1333333;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;&#39;1333333&#39;;</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref  | rows | Extra                |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line"></span><br><span class="line">|  1 | SIMPLE      | tab  | ref  | inx_tel      | inx_tel | 63      | const |    1 | Using index condition |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;1333333;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra      |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ALL  | inx_tel      | NULL | NULL    | NULL |    2 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;1555555;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra      |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ALL  | inx_tel      | NULL | NULL    | NULL |    2 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;&#39;1555555&#39;;</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref  | rows | Extra                |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ref  | inx_tel      | inx_tel | 63      | const |    1 | Using index condition |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="9-2-6-lt-gt-，not-in-不走索引（辅助索引）"><a href="#9-2-6-lt-gt-，not-in-不走索引（辅助索引）" class="headerlink" title="9.2.6 &lt;&gt; ，not in 不走索引（辅助索引）"></a>9.2.6 &lt;&gt; ，not in 不走索引（辅助索引）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  &lt;&gt; &#39;110&#39;;</span><br><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  NOT IN (&#39;110&#39;,&#39;119&#39;);</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tab where telnum &lt;&gt; &#39;1555555&#39;;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain select * from tab where telnum &lt;&gt; &#39;1555555&#39;;</span><br><span class="line"></span><br><span class="line">单独的&gt;,&lt;,in 有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit</span><br><span class="line">or或in  尽量改成union</span><br><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  IN (&#39;110&#39;,&#39;119&#39;);</span><br><span class="line">改写成：</span><br><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum&#x3D;&#39;110&#39;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM teltab WHERE telnum&#x3D;&#39;119&#39;</span><br></pre></td></tr></table></figure><h3 id="9-2-7-like-“-“-百分号在最前面不走"><a href="#9-2-7-like-“-“-百分号在最前面不走" class="headerlink" title="9.2.7 like “%_“ 百分号在最前面不走"></a>9.2.7 like “%_“ 百分号在最前面不走</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE &#39;31%&#39;  走range索引扫描</span><br><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE &#39;%110&#39;  不走索引</span><br><span class="line">%linux%类的搜索需求，可以使用elasticsearch+mongodb 专门做搜索服务的数据库产品</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（三）</title>
      <link href="/posts/16274/"/>
      <url>/posts/16274/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-SQL基础应用"><a href="#MySQL-SQL基础应用" class="headerlink" title="MySQL-SQL基础应用"></a>MySQL-SQL基础应用</h1><h1 id="1、SQL介绍"><a href="#1、SQL介绍" class="headerlink" title="1、SQL介绍"></a>1、SQL介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构化查询语言</span><br><span class="line">5.7 以后符合SQL92严格模式</span><br><span class="line">通过sql_mode参数来控制</span><br></pre></td></tr></table></figure><h1 id="2、常用SQL分类"><a href="#2、常用SQL分类" class="headerlink" title="2、常用SQL分类"></a>2、常用SQL分类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DDL：数据定义语言</span><br><span class="line">DCL：数据控制语言</span><br><span class="line">DML：数据操作语言</span><br><span class="line">DQL：数据的查询语言</span><br></pre></td></tr></table></figure><h1 id="3、数据类型、表属性、字符集"><a href="#3、数据类型、表属性、字符集" class="headerlink" title="3、数据类型、表属性、字符集"></a>3、数据类型、表属性、字符集</h1><h2 id="3-1-数据类型"><a href="#3-1-数据类型" class="headerlink" title="3.1 数据类型"></a>3.1 数据类型</h2><h3 id="3-1-1-作用"><a href="#3-1-1-作用" class="headerlink" title="3.1.1 作用"></a>3.1.1 作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保证数据的准确性和标准性。</span><br></pre></td></tr></table></figure><h3 id="3-1-2-种类"><a href="#3-1-2-种类" class="headerlink" title="3.1.2 种类"></a>3.1.2 种类</h3><p><strong>数值类型</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-6cb8cf2c0c681252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><p>image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tinyint  ： -128~127</span><br><span class="line">int       ：-2^31~2^31-1</span><br><span class="line">说明：手机号是无法存储到int的。一般是使用char类型来存储收集号</span><br></pre></td></tr></table></figure><p><strong>字符类型</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-599be7ba0c7040a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/609/format/webp" alt="img"></p><p>image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char(11) ：</span><br><span class="line">定长 的字符串类型,在存储字符串时，最大字符长度11个，立即分配11个字符长度的存储空间，如果存不满，空格填充。</span><br><span class="line">varchar(11):</span><br><span class="line">变长的字符串类型看，最大字符长度11个。在存储字符串时，自动判断字符长度，按需分配存储空间。</span><br><span class="line">enum(&#39;bj&#39;,&#39;tj&#39;,&#39;sh&#39;)：</span><br><span class="line">枚举类型，比较适合于将来此列的值是固定范围内的特点，可以使用enum,可以很大程度的优化我们的索引结构。</span><br></pre></td></tr></table></figure><p><strong>时间类型</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-7abec7820bfb10cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/645/format/webp" alt="img"></p><p>image</p><p>列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空。可以设置默认值为0<br><strong>unique key</strong> ：唯一键<br>列值不能重复<br><strong>unsigned</strong> ：无符号<br>针对数字列，非负数。</p><p>其他属性:<br><strong>key</strong> :索引<br>可以在某列上建立索引，来优化查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATETIME </span><br><span class="line">范围为从 1000-01-01 00:00:00.000000 至 9999-12-31 23:59:59.999999。</span><br><span class="line">TIMESTAMP </span><br><span class="line">1970-01-01 00:00:00.000000 至 2038-01-19 03:14:07.999999。</span><br><span class="line">timestamp会受到时区的影响</span><br></pre></td></tr></table></figure><p><strong>二进制类型</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/16956686-f69aa8a185589451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp" alt="img"></p><p>image</p><h2 id="3-2-表属性"><a href="#3-2-表属性" class="headerlink" title="3.2 表属性"></a>3.2 表属性</h2><h3 id="3-2-1-列属性"><a href="#3-2-1-列属性" class="headerlink" title="3.2.1 列属性"></a>3.2.1 列属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">约束(一般建表时添加):</span><br><span class="line">**primary key** ：主键约束</span><br><span class="line">设置为主键的列，此列的值必须非空且唯一，主键在一个表中只能有一个，但是可以有多个列一起构成。</span><br><span class="line">**not null**      ：非空约束</span><br><span class="line">列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空。可以设置默认值为0</span><br><span class="line">**unique key** ：唯一键</span><br><span class="line">列值不能重复</span><br><span class="line">**unsigned** ：无符号</span><br><span class="line">针对数字列，非负数。</span><br><span class="line"></span><br><span class="line">其他属性:</span><br><span class="line">**key** :索引</span><br><span class="line">可以在某列上建立索引，来优化查询,一般是根据需要后添加</span><br><span class="line">**default**           :默认值</span><br><span class="line">列中，没有录入值时，会自动使用default的值填充</span><br><span class="line">**auto_increment**:自增长</span><br><span class="line">针对数字列，顺序的自动填充数据（默认是从1开始，将来可以设定起始点和偏移量）</span><br><span class="line">**comment ** : 注释</span><br></pre></td></tr></table></figure><h3 id="3-2-2-表的属性"><a href="#3-2-2-表的属性" class="headerlink" title="3.2.2 表的属性"></a>3.2.2 表的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">存储引擎:</span><br><span class="line">InnoDB（默认的）</span><br><span class="line">字符集和排序规则:</span><br><span class="line">utf8       </span><br><span class="line">utf8mb4</span><br></pre></td></tr></table></figure><h2 id="3-3-字符集和校对规则"><a href="#3-3-字符集和校对规则" class="headerlink" title="3.3 字符集和校对规则"></a>3.3 字符集和校对规则</h2><h3 id="3-3-1-字符集"><a href="#3-3-1-字符集" class="headerlink" title="3.3.1 字符集"></a>3.3.1 字符集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utf8       </span><br><span class="line">utf8mb4</span><br></pre></td></tr></table></figure><h3 id="3-3-2-校对规则（排序规则）"><a href="#3-3-2-校对规则（排序规则）" class="headerlink" title="3.3.2 校对规则（排序规则）"></a>3.3.2 校对规则（排序规则）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大小写是否敏感</span><br></pre></td></tr></table></figure><h1 id="4、DDL应用"><a href="#4、DDL应用" class="headerlink" title="4、DDL应用"></a>4、DDL应用</h1><h2 id="4-1-数据定义语言"><a href="#4-1-数据定义语言" class="headerlink" title="4.1 数据定义语言"></a>4.1 数据定义语言</h2><h2 id="4-2-库定义"><a href="#4-2-库定义" class="headerlink" title="4.2 库定义"></a>4.2 库定义</h2><h3 id="4-2-1-创建"><a href="#4-2-1-创建" class="headerlink" title="4.2.1 创建"></a>4.2.1 创建</h3><h3 id="4-2-1-创建数据库"><a href="#4-2-1-创建数据库" class="headerlink" title="4.2.1 创建数据库"></a>4.2.1 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create database school;</span><br><span class="line">create schema sch;</span><br><span class="line">show charset;</span><br><span class="line">show collation;</span><br><span class="line">CREATE DATABASE test CHARSET utf8;</span><br><span class="line">create database xyz charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line"></span><br><span class="line">建库规范：</span><br><span class="line">1.库名不能有大写字母   </span><br><span class="line">2.建库要加字符集         </span><br><span class="line">3.库名不能有数字开头</span><br><span class="line">4. 库名要和业务相关</span><br></pre></td></tr></table></figure><p>建库标准语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db charset utf8mb4;</span><br><span class="line">mysql&gt; show create database xuexiao;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-删除-生产中禁止使用"><a href="#4-2-2-删除-生产中禁止使用" class="headerlink" title="4.2.2 删除(生产中禁止使用)"></a>4.2.2 删除(生产中禁止使用)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database oldboy;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-修改"><a href="#4-2-3-修改" class="headerlink" title="4.2.3 修改"></a>4.2.3 修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">ALTER DATABASE school  CHARSET utf8;</span><br><span class="line">注意：修改字符集，修改后的字符集一定是原字符集的严格超集</span><br></pre></td></tr></table></figure><h3 id="4-2-4-查询库相关信息（DQL）"><a href="#4-2-4-查询库相关信息（DQL）" class="headerlink" title="4.2.4 查询库相关信息（DQL）"></a>4.2.4 查询库相关信息（DQL）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases；</span><br><span class="line">show create database oldboy；</span><br></pre></td></tr></table></figure><h2 id="4-3-表定义"><a href="#4-3-表定义" class="headerlink" title="4.3 表定义"></a>4.3 表定义</h2><h3 id="4-3-1-创建"><a href="#4-3-1-创建" class="headerlink" title="4.3.1 创建"></a>4.3.1 创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table stu(</span><br><span class="line">列1  属性（数据类型、约束、其他属性） ，</span><br><span class="line">列2  属性，</span><br><span class="line">列3  属性</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4-3-2-建表"><a href="#4-3-2-建表" class="headerlink" title="4.3.2 建表"></a>4.3.2 建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE school;</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id      INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">sname   VARCHAR(255) NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">sage    TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;年龄&#39;,</span><br><span class="line">sgender ENUM(&#39;m&#39;,&#39;f&#39;,&#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;性别&#39; ,</span><br><span class="line">sfz     CHAR(18) NOT NULL UNIQUE  COMMENT &#39;身份证&#39;,</span><br><span class="line">intime  TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;入学时间&#39;</span><br><span class="line">) ENGINE&#x3D;INNODB CHARSET&#x3D;utf8 COMMENT &#39;学生表&#39;;</span><br></pre></td></tr></table></figure><p>建表规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 表名小写</span><br><span class="line">2. 不能是数字开头</span><br><span class="line">3. 注意字符集和存储引擎</span><br><span class="line">4. 表名和业务有关</span><br><span class="line">5. 选择合适的数据类型</span><br><span class="line">6. 每个列都要有注释</span><br><span class="line">7. 每个列设置为非空，无法保证非空，用0来填充。</span><br></pre></td></tr></table></figure><h3 id="4-3-2-删除-生产中禁用命令"><a href="#4-3-2-删除-生产中禁用命令" class="headerlink" title="4.3.2 删除(生产中禁用命令)"></a>4.3.2 删除(生产中禁用命令)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table t1;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-修改"><a href="#4-3-3-修改" class="headerlink" title="4.3.3 修改"></a>4.3.3 修改</h3><ol><li>在stu表中添加qq列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC stu;</span><br><span class="line">ALTER TABLE stu ADD qq VARCHAR(20) NOT NULL UNIQUE COMMENT &#39;qq号&#39;;</span><br></pre></td></tr></table></figure><ol><li>在sname后加微信列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD wechat VARCHAR(64) NOT NULL UNIQUE  COMMENT &#39;微信号&#39; AFTER sname ;</span><br></pre></td></tr></table></figure><ol><li>在id列前加一个新列num</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD num INT NOT NULL COMMENT &#39;数字&#39; FIRST;</span><br><span class="line">DESC stu;</span><br></pre></td></tr></table></figure><ol><li>把刚才添加的列都删掉(危险)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu DROP num;</span><br><span class="line">ALTER TABLE stu DROP qq;</span><br><span class="line">ALTER TABLE stu DROP wechat;</span><br></pre></td></tr></table></figure><ol><li>修改sname数据类型的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY sname VARCHAR(128)  NOT NULL ;</span><br></pre></td></tr></table></figure><ol><li>将sgender 改为 sg 数据类型改为 CHAR 类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu CHANGE sgender sg CHAR(1) NOT NULL DEFAULT &#39;n&#39; ;</span><br><span class="line">DESC stu;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-表属性查询（DQL）"><a href="#4-3-4-表属性查询（DQL）" class="headerlink" title="4.3.4 表属性查询（DQL）"></a>4.3.4 表属性查询（DQL）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use school</span><br><span class="line">show tables；</span><br><span class="line">desc stu;</span><br><span class="line">show create table stu；</span><br><span class="line">CREATE TABLE ceshi LIKE stu;</span><br></pre></td></tr></table></figure><h1 id="5-DCL应用"><a href="#5-DCL应用" class="headerlink" title="5. DCL应用 ****"></a>5. DCL应用 ****</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant </span><br><span class="line">revoke</span><br></pre></td></tr></table></figure><h1 id="6-DML应用"><a href="#6-DML应用" class="headerlink" title="6. DML应用"></a>6. DML应用</h1><h2 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对表中的数据行进行增、删、改</span><br></pre></td></tr></table></figure><h2 id="6-2-insert"><a href="#6-2-insert" class="headerlink" title="6.2 insert"></a>6.2 insert</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--- 最标准的insert语句</span><br><span class="line">INSERT INTO stu(id,sname,sage,sg,sfz,intime) </span><br><span class="line">VALUES</span><br><span class="line">(1,&#39;zs&#39;,18,&#39;m&#39;,&#39;123456&#39;,NOW());</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line">--- 省事的写法</span><br><span class="line">INSERT INTO stu </span><br><span class="line">VALUES</span><br><span class="line">(2,&#39;ls&#39;,18,&#39;m&#39;,&#39;1234567&#39;,NOW());</span><br><span class="line">--- 针对性的录入数据</span><br><span class="line">INSERT INTO stu(sname,sfz)</span><br><span class="line">VALUES (&#39;w5&#39;,&#39;34445788&#39;);</span><br><span class="line">--- 同时录入多行数据</span><br><span class="line">INSERT INTO stu(sname,sfz)</span><br><span class="line">VALUES </span><br><span class="line">(&#39;w55&#39;,&#39;3444578d8&#39;),</span><br><span class="line">(&#39;m6&#39;,&#39;1212313&#39;),</span><br><span class="line">(&#39;aa&#39;,&#39;123213123123&#39;);</span><br><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><h2 id="6-3-update"><a href="#6-3-update" class="headerlink" title="6.3 update"></a>6.3 update</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DESC stu;</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line">UPDATE stu SET sname&#x3D;&#39;zhao4&#39; WHERE id&#x3D;2;</span><br><span class="line">注意：update语句必须要加where。</span><br></pre></td></tr></table></figure><h2 id="6-4-delete（危险！！）"><a href="#6-4-delete（危险！！）" class="headerlink" title="6.4 delete（危险！！）"></a>6.4 delete（危险！！）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM stu  WHERE id&#x3D;3;</span><br></pre></td></tr></table></figure><p>全表删除:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM stu</span><br><span class="line">truncate table stu;</span><br><span class="line">区别:</span><br><span class="line">delete: DML操作, 是逻辑性质删除,逐行进行删除,速度慢.</span><br><span class="line">truncate: DDL操作,对与表段中的数据页进行清空,速度快.</span><br></pre></td></tr></table></figure><p>伪删除：用update来替代delete，最终保证业务中查不到（select）即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.添加状态列</span><br><span class="line">ALTER TABLE stu ADD state TINYINT NOT NULL DEFAULT 1 ;</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line">2. UPDATE 替代 DELETE</span><br><span class="line">UPDATE stu SET state&#x3D;0 WHERE id&#x3D;6;</span><br><span class="line">3. 业务语句查询</span><br><span class="line">SELECT * FROM stu WHERE state&#x3D;1;</span><br></pre></td></tr></table></figure><h1 id="7-DQL应用-select"><a href="#7-DQL应用-select" class="headerlink" title="7. DQL应用(select )"></a>7. DQL应用(select )</h1><h2 id="7-1-单独使用"><a href="#7-1-单独使用" class="headerlink" title="7.1 单独使用"></a>7.1 单独使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- select @@xxx 查看系统参数</span><br><span class="line">SELECT @@port;</span><br><span class="line">SELECT @@basedir;</span><br><span class="line">SELECT @@datadir;</span><br><span class="line">SELECT @@socket;</span><br><span class="line">SELECT @@server_id;</span><br></pre></td></tr></table></figure><p>-- select 函数();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line">SELECT CONCAT(&quot;hello world&quot;);</span><br><span class="line">SELECT CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br><span class="line">SELECT GROUP_CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br><span class="line">http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;func-op-summary-ref.html?tdsourcetag&#x3D;s_pcqq_aiomsg</span><br></pre></td></tr></table></figure><h2 id="7-2-单表子句-from"><a href="#7-2-单表子句-from" class="headerlink" title="7.2 单表子句-from"></a>7.2 单表子句-from</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列1,列2 FROM 表</span><br><span class="line">SELECT  *  FROM 表</span><br></pre></td></tr></table></figure><p>例子:<br>-- 查询stu中所有的数据(不要对大表进行操作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ;</span><br></pre></td></tr></table></figure><p>-- 查询stu表中,学生姓名和入学时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname , intime FROM stu;</span><br></pre></td></tr></table></figure><p>=====================<br>oldguo带大家学单词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">world            &#x3D;&#x3D;&#x3D;&gt;世界</span><br><span class="line">city             &#x3D;&#x3D;&#x3D;&gt;城市</span><br><span class="line">country          &#x3D;&#x3D;&#x3D;&gt;国家</span><br><span class="line">countrylanguage  &#x3D;&#x3D;&#x3D;&gt;国家语言</span><br><span class="line"></span><br><span class="line">city:城市表</span><br><span class="line">DESC city;</span><br><span class="line">ID :         城市ID</span><br><span class="line">NAME :       城市名</span><br><span class="line">CountryCode: 国家代码，比如中国CHN 美国USA</span><br><span class="line">District :   区域</span><br><span class="line">Population : 人口</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE city;</span><br><span class="line">SELECT * FROM city WHERE id&lt;10;</span><br></pre></td></tr></table></figure><p>======================</p><h2 id="7-3-单表子句-where"><a href="#7-3-单表子句-where" class="headerlink" title="7.3 单表子句-where"></a>7.3 单表子句-where</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col1,col2 FROM TABLE WHERE colN 条件;</span><br></pre></td></tr></table></figure><h3 id="7-3-1-where配合等值查询"><a href="#7-3-1-where配合等值查询" class="headerlink" title="7.3.1 where配合等值查询"></a>7.3.1 where配合等值查询</h3><p>例子:<br>-- 查询中国(CHN)所有城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;;</span><br></pre></td></tr></table></figure><p>-- 查询北京市的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE NAME&#x3D;&#39;peking&#39;;</span><br></pre></td></tr></table></figure><p>-- 查询甘肃省所有城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE district&#x3D;&#39;gansu&#39;;</span><br></pre></td></tr></table></figure><h3 id="7-3-2-where配合比较操作符-gt-lt-gt-lt-lt-gt"><a href="#7-3-2-where配合比较操作符-gt-lt-gt-lt-lt-gt" class="headerlink" title="7.3.2 where配合比较操作符(&gt; &lt; &gt;= &lt;= &lt;&gt;)"></a>7.3.2 where配合比较操作符(&gt; &lt; &gt;= &lt;= &lt;&gt;)</h3><p>例子:<br>-- 查询世界上少于100人的城市</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE population&lt;100;</span><br></pre></td></tr></table></figure><h3 id="7-3-3-where配合逻辑运算符-and-or"><a href="#7-3-3-where配合逻辑运算符-and-or" class="headerlink" title="7.3.3 where配合逻辑运算符(and or )"></a>7.3.3 where配合逻辑运算符(and or )</h3><p>例子:<br>-- 中国人口数量大于500w</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; AND population&gt;5000000;</span><br></pre></td></tr></table></figure><p>-- 中国或美国城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; OR countrycode&#x3D;&#39;USA&#39;;</span><br></pre></td></tr></table></figure><h3 id="7-3-4-where配合模糊查询"><a href="#7-3-4-where配合模糊查询" class="headerlink" title="7.3.4 where配合模糊查询"></a>7.3.4 where配合模糊查询</h3><p>例子:<br>-- 查询省的名字前面带guang开头的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE district LIKE &#39;guang%&#39;;    </span><br><span class="line">注意:%不能放在前面,因为不走索引.</span><br></pre></td></tr></table></figure><h3 id="7-3-5-where配合in语句"><a href="#7-3-5-where配合in语句" class="headerlink" title="7.3.5 where配合in语句"></a>7.3.5 where配合in语句</h3><p>-- 中国或美国城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode IN (&#39;CHN&#39; ,&#39;USA&#39;);</span><br></pre></td></tr></table></figure><h3 id="7-3-6-where配合between-and"><a href="#7-3-6-where配合between-and" class="headerlink" title="7.3.6 where配合between and"></a>7.3.6 where配合between and</h3><p>例子:<br>-- 查询世界上人口数量大于100w小于200w的城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city  WHERE population &gt;1000000 AND population &lt;2000000;</span><br><span class="line">SELECT * FROM city  WHERE population BETWEEN 1000000 AND 2000000;</span><br></pre></td></tr></table></figure><h2 id="7-4-group-by-常用聚合函数"><a href="#7-4-group-by-常用聚合函数" class="headerlink" title="7.4 group by + 常用聚合函数"></a>7.4 group by + 常用聚合函数</h2><h3 id="7-4-1-作用"><a href="#7-4-1-作用" class="headerlink" title="7.4.1 作用"></a>7.4.1 作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据 by后面的条件进行分组，方便统计，by后面跟一个列或多个列</span><br></pre></td></tr></table></figure><h3 id="7-4-2-常用聚合函数"><a href="#7-4-2-常用聚合函数" class="headerlink" title="7.4.2 常用聚合函数"></a>7.4.2 常用聚合函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**max()**      ：最大值</span><br><span class="line">**min()**      ：最小值</span><br><span class="line">**avg()**      ：平均值</span><br><span class="line">**sum()**      ：总和</span><br><span class="line">**count()**    ：个数</span><br><span class="line">group_concat() : 列转行</span><br></pre></td></tr></table></figure><h3 id="7-4-3-例子："><a href="#7-4-3-例子：" class="headerlink" title="7.4.3 例子："></a>7.4.3 例子：</h3><p>例子1：统计世界上每个国家的总人口数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE world</span><br><span class="line">SELECT countrycode ,SUM(population)    FROM  city  GROUP BY countrycode;</span><br></pre></td></tr></table></figure><p>例子2： 统计中国各个省的总人口数量(练习)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT district,SUM(Population) FROM city  WHERE countrycode&#x3D;&#39;chn&#39; GROUP BY district;</span><br></pre></td></tr></table></figure><p>例子3：统计世界上每个国家的城市数量(练习)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT countrycode,COUNT(id)  FROM city GROUP BY countrycode;</span><br></pre></td></tr></table></figure><h2 id="7-5-having"><a href="#7-5-having" class="headerlink" title="7.5 having"></a>7.5 having</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where|group|having</span><br></pre></td></tr></table></figure><p>例子4：统计中国每个省的总人口数，只打印总人口数小于100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT district,SUM(Population)</span><br><span class="line">FROM city</span><br><span class="line">WHERE countrycode&#x3D;&#39;chn&#39;</span><br><span class="line">GROUP BY district</span><br><span class="line">HAVING SUM(Population) &lt; 1000000 ;</span><br></pre></td></tr></table></figure><h2 id="7-6-order-by-limit"><a href="#7-6-order-by-limit" class="headerlink" title="7.6 order by + limit"></a>7.6 order by + limit</h2><h3 id="7-6-1-作用"><a href="#7-6-1-作用" class="headerlink" title="7.6.1 作用"></a>7.6.1 作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现先排序，by后添加条件列</span><br></pre></td></tr></table></figure><h3 id="7-6-2-应用案例"><a href="#7-6-2-应用案例" class="headerlink" title="7.6.2 应用案例"></a>7.6.2 应用案例</h3><ol><li>查看中国所有的城市，并按人口数进行排序(从大到小)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; ORDER BY population DESC;</span><br></pre></td></tr></table></figure><ol><li>统计中国各个省的总人口数量，按照总人口从大到小排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT district AS 省 ,SUM(Population) AS 总人口</span><br><span class="line">FROM city</span><br><span class="line">WHERE countrycode&#x3D;&#39;chn&#39;</span><br><span class="line">GROUP BY district</span><br><span class="line">ORDER BY 总人口 DESC ;</span><br></pre></td></tr></table></figure><ol><li>统计中国,每个省的总人口,找出总人口大于500w的,并按总人口从大到小排序,只显示前三名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT  district, SUM(population)  FROM  city </span><br><span class="line">WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">GROUP BY district </span><br><span class="line">HAVING SUM(population)&gt;5000000</span><br><span class="line">ORDER BY SUM(population) DESC</span><br><span class="line">LIMIT 3 ;</span><br><span class="line"></span><br><span class="line">LIMIT N ,M ---&gt;跳过N,显示一共M行</span><br><span class="line">LIMIT 5,5</span><br><span class="line"></span><br><span class="line">SELECT  district, SUM(population)  FROM  city </span><br><span class="line">WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">GROUP BY district </span><br><span class="line">HAVING SUM(population)&gt;5000000</span><br><span class="line">ORDER BY SUM(population) DESC</span><br><span class="line">LIMIT 5,5;</span><br></pre></td></tr></table></figure><h2 id="7-7-distinct：去重复"><a href="#7-7-distinct：去重复" class="headerlink" title="7.7 distinct：去重复"></a>7.7 distinct：去重复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT countrycode FROM city ;</span><br><span class="line">SELECT DISTINCT(countrycode) FROM city  ;</span><br></pre></td></tr></table></figure><h2 id="7-8-联合查询-union-all"><a href="#7-8-联合查询-union-all" class="headerlink" title="7.8 联合查询- union all"></a>7.8 联合查询- union all</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 中国或美国城市信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM city </span><br><span class="line">WHERE countrycode IN (&#39;CHN&#39; ,&#39;USA&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;USA&#39;</span><br><span class="line"></span><br><span class="line">说明:一般情况下,我们会将 IN 或者 OR 语句 改写成 UNION ALL,来提高性能</span><br><span class="line">UNION     去重复</span><br><span class="line">UNION ALL 不去重复</span><br></pre></td></tr></table></figure><h2 id="7-9-join-多表连接查询"><a href="#7-9-join-多表连接查询" class="headerlink" title="7.9 join 多表连接查询"></a>7.9 join 多表连接查询</h2><h3 id="7-9-0-案例准备"><a href="#7-9-0-案例准备" class="headerlink" title="7.9.0 案例准备"></a>7.9.0 案例准备</h3><p>按需求创建一下表结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">use school</span><br><span class="line">student ：学生表</span><br><span class="line">sno：    学号</span><br><span class="line">sname：学生姓名</span><br><span class="line">sage： 学生年龄</span><br><span class="line">ssex： 学生性别</span><br><span class="line"></span><br><span class="line">teacher ：教师表</span><br><span class="line">tno：     教师编号</span><br><span class="line">tname：教师名字</span><br><span class="line"></span><br><span class="line">course ：课程表</span><br><span class="line">cno：  课程编号</span><br><span class="line">cname：课程名字</span><br><span class="line">tno：  教师编号</span><br><span class="line"></span><br><span class="line">score  ：成绩表</span><br><span class="line">sno：  学号</span><br><span class="line">cno：  课程编号</span><br><span class="line">score：成绩</span><br><span class="line"></span><br><span class="line">-- 项目构建</span><br><span class="line">drop database school;</span><br><span class="line">CREATE DATABASE school CHARSET utf8;</span><br><span class="line">USE school</span><br><span class="line"></span><br><span class="line">CREATE TABLE student(</span><br><span class="line">sno INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">sname VARCHAR(20) NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">sage TINYINT UNSIGNED  NOT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">ssex  ENUM(&#39;f&#39;,&#39;m&#39;) NOT NULL DEFAULT &#39;m&#39; COMMENT &#39;性别&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE course(</span><br><span class="line">cno INT NOT NULL PRIMARY KEY COMMENT &#39;课程编号&#39;,</span><br><span class="line">cname VARCHAR(20) NOT NULL COMMENT &#39;课程名字&#39;,</span><br><span class="line">tno INT NOT NULL  COMMENT &#39;教师编号&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE sc (</span><br><span class="line">sno INT NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">cno INT NOT NULL COMMENT &#39;课程编号&#39;,</span><br><span class="line">score INT  NOT NULL DEFAULT 0 COMMENT &#39;成绩&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE teacher(</span><br><span class="line">tno INT NOT NULL PRIMARY KEY COMMENT &#39;教师编号&#39;,</span><br><span class="line">tname VARCHAR(20) NOT NULL COMMENT &#39;教师名字&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES (1,&#39;zhang3&#39;,18,&#39;m&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(2,&#39;zhang4&#39;,18,&#39;m&#39;),</span><br><span class="line">(3,&#39;li4&#39;,18,&#39;m&#39;),</span><br><span class="line">(4,&#39;wang5&#39;,19,&#39;f&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student</span><br><span class="line">VALUES</span><br><span class="line">(5,&#39;zh4&#39;,18,&#39;m&#39;),</span><br><span class="line">(6,&#39;zhao4&#39;,18,&#39;m&#39;),</span><br><span class="line">(7,&#39;ma6&#39;,19,&#39;f&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(&#39;oldboy&#39;,20,&#39;m&#39;),</span><br><span class="line">(&#39;oldgirl&#39;,20,&#39;f&#39;),</span><br><span class="line">(&#39;oldp&#39;,25,&#39;m&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO teacher(tno,tname) VALUES</span><br><span class="line">(101,&#39;oldboy&#39;),</span><br><span class="line">(102,&#39;hesw&#39;),</span><br><span class="line">(103,&#39;oldguo&#39;);</span><br><span class="line"></span><br><span class="line">DESC course;</span><br><span class="line">INSERT INTO course(cno,cname,tno)</span><br><span class="line">VALUES</span><br><span class="line">(1001,&#39;linux&#39;,101),</span><br><span class="line">(1002,&#39;python&#39;,102),</span><br><span class="line">(1003,&#39;mysql&#39;,103);</span><br><span class="line"></span><br><span class="line">DESC sc;</span><br><span class="line">INSERT INTO sc(sno,cno,score)</span><br><span class="line">VALUES</span><br><span class="line">(1,1001,80),</span><br><span class="line">(1,1002,59),</span><br><span class="line">(2,1002,90),</span><br><span class="line">(2,1003,100),</span><br><span class="line">(3,1001,99),</span><br><span class="line">(3,1003,40),</span><br><span class="line">(4,1001,79),</span><br><span class="line">(4,1002,61),</span><br><span class="line">(4,1003,99),</span><br><span class="line">(5,1003,40),</span><br><span class="line">(6,1001,89),</span><br><span class="line">(6,1003,77),</span><br><span class="line">(7,1001,67),</span><br><span class="line">(7,1003,82),</span><br><span class="line">(8,1001,70),</span><br><span class="line">(9,1003,80),</span><br><span class="line">(10,1003,96);</span><br><span class="line"></span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM sc;</span><br></pre></td></tr></table></figure><h3 id="7-9-1-语法"><a href="#7-9-1-语法" class="headerlink" title="7.9.1 语法"></a>7.9.1 语法</h3><p><img src="http://upload-images.jianshu.io/upload_images/16956686-764e2f0b3601f6ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/760/format/webp" alt="img"></p><p>image</p><p>查询张三的家庭住址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.name,B.address FROM</span><br><span class="line">A JOIN  B</span><br><span class="line">ON A.id&#x3D;B.id</span><br><span class="line">WHERE A.name&#x3D;&#39;zhangsan&#39;</span><br></pre></td></tr></table></figure><h3 id="7-9-2-例子："><a href="#7-9-2-例子：" class="headerlink" title="7.9.2 例子："></a>7.9.2 例子：</h3><ol><li>查询一下世界上人口数量小于100人的城市名和国家名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.name ,a.name ,a.population</span><br><span class="line">FROM  city  AS a</span><br><span class="line">JOIN  country AS b</span><br><span class="line">ON    b.code&#x3D;a.countrycode</span><br><span class="line">WHERE  a.Population&lt;100</span><br></pre></td></tr></table></figure><ol><li>查询城市shenyang，城市人口，所在国家名（name）及国土面积（SurfaceArea）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.name,a.population,b.name ,b.SurfaceArea</span><br><span class="line">FROM city  AS a JOIN country AS b</span><br><span class="line">ON a.countrycode&#x3D;b.code</span><br><span class="line">WHERE a.name&#x3D;&#39;shenyang&#39;;</span><br></pre></td></tr></table></figure><h3 id="7-9-3-别名"><a href="#7-9-3-别名" class="headerlink" title="7.9.3 别名"></a>7.9.3 别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">列别名,表别名</span><br><span class="line">SELECT </span><br><span class="line">a.Name AS an ,</span><br><span class="line">b.name AS bn ,</span><br><span class="line">b.SurfaceArea AS bs,</span><br><span class="line">a.Population AS bp</span><br><span class="line">FROM city AS a  JOIN country AS b</span><br><span class="line">ON a.CountryCode&#x3D;b.Code</span><br><span class="line">WHERE a.name &#x3D;&#39;shenyang&#39;;</span><br></pre></td></tr></table></figure><h3 id="7-9-4-多表SQL练习题"><a href="#7-9-4-多表SQL练习题" class="headerlink" title="7.9.4 多表SQL练习题"></a>7.9.4 多表SQL练习题</h3><ol><li>统计zhang3,学习了几门课</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT st.sname , COUNT(sc.cno)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN</span><br><span class="line">sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">WHERE st.sname&#x3D;&#39;zhang3&#39;</span><br></pre></td></tr></table></figure><ol><li>查询zhang3,学习的课程名称有哪些?</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT st.sname , GROUP_CONCAT(co.cname)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON sc.cno&#x3D;co.cno</span><br><span class="line">WHERE st.sname&#x3D;&#39;zhang3&#39;</span><br></pre></td></tr></table></figure><ol><li>查询oldguo老师教的学生名.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname ,GROUP_CONCAT(st.sname)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON sc.cno&#x3D;co.cno</span><br><span class="line">JOIN teacher AS te</span><br><span class="line">ON co.tno&#x3D;te.tno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39;;</span><br></pre></td></tr></table></figure><ol><li>查询oldguo所教课程的平均分数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,AVG(sc.score)</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39;</span><br></pre></td></tr></table></figure><p>4.1 每位老师所教课程的平均分,并按平均分排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,AVG(sc.score)</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">GROUP BY te.tname</span><br><span class="line">ORDER BY AVG(sc.score) DESC ;</span><br></pre></td></tr></table></figure><ol><li>查询oldguo所教的不及格的学生姓名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,st.sname,sc.score</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course  AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">JOIN student AS st</span><br><span class="line">ON sc.sno&#x3D;st.sno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39; AND sc.score&lt;60;</span><br></pre></td></tr></table></figure><p>5.1 查询所有老师所教学生不及格的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,st.sname,sc.score</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course  AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">JOIN student AS st</span><br><span class="line">ON sc.sno&#x3D;st.sno</span><br><span class="line">WHERE sc.score&lt;60;</span><br></pre></td></tr></table></figure><h3 id="7-9-5-综合练习"><a href="#7-9-5-综合练习" class="headerlink" title="7.9.5 综合练习"></a>7.9.5 综合练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 查询平均成绩大于60分的同学的学号和平均成绩；</span><br><span class="line">2. 查询所有同学的学号、姓名、选课数、总成绩；</span><br><span class="line">3. 查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分 </span><br><span class="line">4. 统计各位老师,所教课程的及格率</span><br><span class="line">5. 查询每门课程被选修的学生数</span><br><span class="line">6. 查询出只选修了一门课程的全部学生的学号和姓名</span><br><span class="line">7. 查询选修课程门数超过1门的学生信息</span><br><span class="line">8. 统计每门课程:优秀(85分以上),良好(70-85),一般(60-70),不及格(小于60)的学生列表</span><br><span class="line">9. 查询平均成绩大于85的所有学生的学号、姓名和平均成绩 </span><br></pre></td></tr></table></figure><h1 id="8-information-schema-tables视图"><a href="#8-information-schema-tables视图" class="headerlink" title="8.information_schema.tables视图"></a>8.information_schema.tables视图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DESC information_schema.TABLES</span><br><span class="line">TABLE_SCHEMA    ----&gt;库名</span><br><span class="line">TABLE_NAME      ----&gt;表名</span><br><span class="line">ENGINE          ----&gt;引擎</span><br><span class="line">TABLE_ROWS      ----&gt;表的行数</span><br><span class="line">AVG_ROW_LENGTH  ----&gt;表中行的平均行（字节）</span><br><span class="line">INDEX_LENGTH    ----&gt;索引的占用空间大小（字节）</span><br></pre></td></tr></table></figure><ol><li>查询整个数据库中所有库和所对应的表信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,GROUP_CONCAT(table_name)</span><br><span class="line">FROM  information_schema.tables</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure><ol><li>统计所有库下的表个数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,COUNT(table_name)</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema</span><br></pre></td></tr></table></figure><ol><li>查询所有innodb引擎的表及所在的库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,table_name,ENGINE FROM information_schema.&#96;TABLES&#96;</span><br><span class="line">WHERE ENGINE&#x3D;&#39;innodb&#39;;</span><br></pre></td></tr></table></figure><ol><li>统计world数据库下每张表的磁盘空间占用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_name,CONCAT((TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&quot; KB&quot;)  AS size_KB</span><br><span class="line">FROM information_schema.tables WHERE TABLE_SCHEMA&#x3D;&#39;world&#39;;</span><br></pre></td></tr></table></figure><ol><li>统计所有数据库的总的磁盘空间占用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">TABLE_SCHEMA,</span><br><span class="line">CONCAT(SUM(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&quot; KB&quot;) AS Total_KB</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">GROUP BY table_schema;</span><br><span class="line">mysql -uroot -p123 -e &quot;SELECT TABLE_SCHEMA,CONCAT(SUM(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&#39; KB&#39;) AS Total_KB FROM information_schema.tables GROUP BY table_schema;&quot;</span><br></pre></td></tr></table></figure><ol><li>生成整个数据库下的所有表的单独备份语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模板语句：</span><br><span class="line">mysqldump -uroot -p123 world city &gt;&#x2F;tmp&#x2F;world_city.sql</span><br><span class="line">SELECT CONCAT(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; &gt;&#x2F;tmp&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot; )</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">WHERE table_schema NOT IN(&#39;information_schema&#39;,&#39;performance_schema&#39;,&#39;sys&#39;)</span><br><span class="line">INTO OUTFILE &#39;&#x2F;tmp&#x2F;bak.sh&#39; ;</span><br><span class="line"></span><br><span class="line">CONCAT(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; &gt;&#x2F;tmp&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot; )</span><br></pre></td></tr></table></figure><ol><li>107张表，都需要执行以下2条语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE world.city DISCARD TABLESPACE;</span><br><span class="line">ALTER TABLE world.city IMPORT TABLESPACE;</span><br><span class="line">SELECT CONCAT(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; discard tablespace&quot;)</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">WHERE table_schema&#x3D;&#39;world&#39;</span><br><span class="line">INTO OUTFILE &#39;&#x2F;tmp&#x2F;dis.sql&#39;;</span><br></pre></td></tr></table></figure><h1 id="9-show-命令"><a href="#9-show-命令" class="headerlink" title="9. show 命令"></a>9. show 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">show  databases;                          #查看所有数据库</span><br><span class="line">show tables;                                          #查看当前库的所有表</span><br><span class="line">SHOW TABLES FROM                        #查看某个指定库下的表</span><br><span class="line">show create database world                #查看建库语句</span><br><span class="line">show create table world.city                #查看建表语句</span><br><span class="line">show  grants for  root@&#39;localhost&#39;       #查看用户的权限信息</span><br><span class="line">show  charset；                                   #查看字符集</span><br><span class="line">show collation                                      #查看校对规则</span><br><span class="line">show processlist;                                  #查看数据库连接情况</span><br><span class="line">show index from                                 #表的索引情况</span><br><span class="line">show status                                         #数据库状态查看</span><br><span class="line">SHOW STATUS LIKE &#39;%lock%&#39;;         #模糊查询数据库某些状态</span><br><span class="line">SHOW VARIABLES                             #查看所有配置信息</span><br><span class="line">SHOW variables LIKE &#39;%lock%&#39;;          #查看部分配置信息</span><br><span class="line">show engines                                       #查看支持的所有的存储引擎</span><br><span class="line">show engine innodb status\G               #查看InnoDB引擎相关的状态信息</span><br><span class="line">show binary logs                                    #列举所有的二进制日志</span><br><span class="line">show master status                                 #查看数据库的日志位置信息</span><br><span class="line">show binlog evnets in                             #查看二进制日志事件</span><br><span class="line">show slave status \G                             #查看从库状态</span><br><span class="line">SHOW RELAYLOG EVENTS               #查看从库relaylog事件信息</span><br><span class="line">desc  (show colums from city)               #查看表的列定义信息</span><br><span class="line">http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;show.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 进阶之路初级 DBA（二）</title>
      <link href="/posts/38154/"/>
      <url>/posts/38154/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL体系结构与管理"><a href="#MySQL体系结构与管理" class="headerlink" title="MySQL体系结构与管理"></a>MySQL体系结构与管理</h1><h1 id="1-体系结构"><a href="#1-体系结构" class="headerlink" title="1. 体系结构"></a>1. 体系结构</h1><h2 id="1-1-C-S-客户端-服务端-模型介绍"><a href="#1-1-C-S-客户端-服务端-模型介绍" class="headerlink" title="1.1 C/S(客户端/服务端)模型介绍"></a>1.1 C/S(客户端/服务端)模型介绍</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-301b140a033d0dd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/712/format/webp" alt="img"></p><p>TCP/IP方式（远程、本地）：<br>mysql -uroot -poldboy123 -h 10.0.0.51 -P3306<br>Socket方式(仅本地)：<br>mysql -uroot -poldboy123 -S /tmp/mysql.sock</p><h2 id="1-2-实例介绍"><a href="#1-2-实例介绍" class="headerlink" title="1.2 实例介绍"></a>1.2 实例介绍</h2><p>实例=mysqld后台守护进程+Master Thread +干活的Thread+预分配的内存<br>公司=老板+经理+员工+办公室</p><h2 id="1-3-mysqld程序运行原理"><a href="#1-3-mysqld程序运行原理" class="headerlink" title="1.3 mysqld程序运行原理"></a>1.3 mysqld程序运行原理</h2><h3 id="1-3-1-mysqld程序结构"><a href="#1-3-1-mysqld程序结构" class="headerlink" title="1.3.1 mysqld程序结构"></a>1.3.1 mysqld程序结构</h3><p><img src="http://upload-images.jianshu.io/upload_images/16956686-7824255ca53f23e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/645/format/webp" alt="img"></p><h3 id="1-3-2-一条SQL语句的执行过程"><a href="#1-3-2-一条SQL语句的执行过程" class="headerlink" title="1.3.2 一条SQL语句的执行过程"></a>1.3.2 一条SQL语句的执行过程</h3><p>1.3.2.1 连接层<br>（1）提供连接协议：TCP/IP 、SOCKET<br>（2）提供验证：用户、密码，IP，SOCKET<br>（3）提供专用连接线程：接收用户SQL，返回结果<br>通过以下语句可以查看到连接线程基本情况<br>mysql&gt; show processlist;</p><p>1.3.2.2 SQL层 （重点）</p><p>（1）接收上层传送的SQL语句<br>（2）语法验证模块：验证语句语法,是否满足SQL_MODE<br>（3）语义检查：判断SQL语句的类型<br>DDL ：数据定义语言<br>DCL ：数据控制语言<br>DML ：数据操作语言<br>DQL： 数据查询语言<br>…<br>（4）权限检查：用户对库表有没有权限<br>（5）解析器：对语句执行前,进行预处理，生成解析树(执行计划),说白了就是生成多种执行方案.<br>（6）优化器：根据解析器得出的多种执行计划，进行判断，选择最优的执行计划<br>        代价模型：资源（CPU IO MEM）的耗损评估性能好坏<br>（7）执行器：根据最优执行计划，执行SQL语句，产生执行结果<br>执行结果：在磁盘的xxxx位置上<br>（8）提供查询缓存（默认是没开启的），会使用redis tair替代查询缓存功能<br>（9）提供日志记录（日志管理章节）：binlog，默认是没开启的。</p><p>1.3.2.3 存储引擎层（类似于Linux中的文件系统）</p><p>负责根据SQL层执行的结果，从磁盘上拿数据。<br>将16进制的磁盘数据，交由SQL结构化化成表，<br>连接层的专用线程返回给用户。</p><h2 id="1-4-逻辑结构"><a href="#1-4-逻辑结构" class="headerlink" title="1.4 逻辑结构"></a>1.4 逻辑结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-127fff46fdb7fea9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/505/format/webp" alt="img"></p><p>image.png</p><p><strong>以上图片由五行哥提供</strong></p><h3 id="1-4-1-库："><a href="#1-4-1-库：" class="headerlink" title="1.4.1 库："></a>1.4.1 库：</h3><p>库名，库属性</p><h3 id="1-4-2-表"><a href="#1-4-2-表" class="headerlink" title="1.4.2 表"></a>1.4.2 表</h3><p>表名<br>属性<br>列:列名(字段),列属性(数据类型,约束等)<br>数据行(记录)</p><h2 id="1-5-物理存储结构引入"><a href="#1-5-物理存储结构引入" class="headerlink" title="1.5 物理存储结构引入"></a>1.5 物理存储结构引入</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-bfd40838aef7971b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/973/format/webp" alt="img"></p><p>image.png</p><p><strong>以上图片由五行哥提供</strong></p><h3 id="1-5-1-库的物理存储结构"><a href="#1-5-1-库的物理存储结构" class="headerlink" title="1.5.1 库的物理存储结构"></a>1.5.1 库的物理存储结构</h3><p>用文件系统的目录来存储</p><h3 id="1-5-2-表的物理存储结构"><a href="#1-5-2-表的物理存储结构" class="headerlink" title="1.5.2 表的物理存储结构"></a>1.5.2 表的物理存储结构</h3><p>MyISAM（一种引擎）的表：<br>-rw-r—– 1 mysql mysql   10816 Apr 18 11:37 user.frm<br>-rw-r—– 1 mysql mysql     396 Apr 18 12:20  user.MYD<br>-rw-r—– 1 mysql mysql    4096 Apr 18 14:48 user.MYI<br>​<br>InnoDB(默认的存储引擎)的表：<br>-rw-r—– 1 mysql mysql    8636 Apr 18 11:37 time_zone.frm<br>-rw-r—– 1 mysql mysql   98304 Apr 18 11:37 time_zone.ibd<br>time_zone.frm：存储列相关信息<br>time_zone.ibd：数据行+索引</p><h3 id="1-5-3-表的段、区、页（16k）（了解）"><a href="#1-5-3-表的段、区、页（16k）（了解）" class="headerlink" title="1.5.3 表的段、区、页（16k）（了解）"></a>1.5.3 表的段、区、页（16k）（了解）</h3><p>页：最小的存储单元，默认16k<br>区：64个连续的页，共1M<br>段：一个表就是一个段，包含一个或多个区</p><h1 id="2-基础管理"><a href="#2-基础管理" class="headerlink" title="2. 基础管理"></a>2. 基础管理</h1><h2 id="2-1-用户、权限管理"><a href="#2-1-用户、权限管理" class="headerlink" title="2.1 用户、权限管理"></a>2.1 用户、权限管理</h2><h3 id="2-1-1-用户"><a href="#2-1-1-用户" class="headerlink" title="2.1.1 用户"></a>2.1.1 用户</h3><p>作用：</p><p>登录，管理数据库逻辑对象</p><p>定义：</p><p>用户名@’白名单’<br>白名单支持的方式？<br>wordpress@’10.0.0.%’<br>wordpress@’%’<br>wordpress@’10.0.0.200’<br>wordpress@’localhost’<br>wordpress@’db02’<br>wordpress@’10.0.0.5%’<br>wordpress@’10.0.0.0/255.255.254.0’</p><p>管理操作：</p><p>增：<br>mysql&gt; create user oldboy@’10.0.0.%’ identified by ‘123’;<br>查：<br>mysql&gt; desc mysql.user;    —-&gt;  authentication_string<br>mysql&gt; select user ,host ,authentication_string from mysql.user<br>改:<br>mysql&gt; alter user oldboy@’10.0.0.%’ identified by ‘456’;<br>删：<br>mysql&gt; drop user oldboy@’10.0.0.%’;</p><h3 id="2-1-2-权限"><a href="#2-1-2-权限" class="headerlink" title="2.1.2 权限"></a>2.1.2 权限</h3><p>权限管理操作：</p><p>mysql&gt; grant all on wordpress.* to wordpress@’10.0.0.%’ identified  by ‘123’;</p><p>常用权限介绍:</p><p>ALL:<br>SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE<br>ALL : 以上所有权限，一般是普通管理员拥有的<br>with grant option：超级管理员才具备的，给别的用户授权的功能</p><p>权限作用范围:</p><p>*.*                  —-&gt;管理员用户<br>wordpress.*          —-&gt;开发和应用用户<br>wordpress.t1</p><p>需求1：windows机器的navicat登录到linux中的MySQL，管理员用户。</p><p>mysql&gt; grant all on *.* to root@’10.0.0.%’ identified by ‘123’;</p><p>需求2：创建一个应用用户app用户，能从windows上登录mysql，并能操作app库</p><p>mysql&gt; grant select ,update,insert,delete on app.* to app@’10.0.0.%’ identified by ‘123’;</p><h3 id="2-1-3-开发人员用户授权流程"><a href="#2-1-3-开发人员用户授权流程" class="headerlink" title="2.1.3 开发人员用户授权流程"></a>2.1.3 开发人员用户授权流程</h3><p>1.权限<br>2.对谁操作<br>3.你从哪来<br>4.密码要求</p><h3 id="2-1-4-提示：8-0在grant命令添加新特性"><a href="#2-1-4-提示：8-0在grant命令添加新特性" class="headerlink" title="2.1.4 提示：8.0在grant命令添加新特性"></a>2.1.4 提示：8.0在grant命令添加新特性</h3><p>建用户和授权分开了<br>grant 不再支持自动创建用户了，不支持改密码<br>授权之前，必须要提前创建用户。</p><h3 id="2-1-5-查看授权"><a href="#2-1-5-查看授权" class="headerlink" title="2.1.5 查看授权"></a>2.1.5 查看授权</h3><p>mysql&gt; show grants for app@’10.0.0.%’;</p><h3 id="2-1-6-回收权限"><a href="#2-1-6-回收权限" class="headerlink" title="2.1.6 回收权限"></a>2.1.6 回收权限</h3><p>revoke  delete on app.*  from app@’10.0.0.%’；</p><h3 id="2-1-7-本地管理员用户密码忘记"><a href="#2-1-7-本地管理员用户密码忘记" class="headerlink" title="2.1.7 本地管理员用户密码忘记."></a>2.1.7 本地管理员用户密码忘记.</h3><p>[root@db01 ~]# mysqld_safe –skip-grant-tables –skip-networking &amp;<br>mysql&gt; flush privileges;<br>mysql&gt;  alter user root@’localhost’ identified by ‘123456’;<br>[root@db01 ~]# pkill mysqld<br>[root@db01 ~]# systemctl start  mysqld</p><h2 id="2-2-连接管理"><a href="#2-2-连接管理" class="headerlink" title="2.2 连接管理"></a>2.2 连接管理</h2><h3 id="2-2-1-自带客户端命令"><a href="#2-2-1-自带客户端命令" class="headerlink" title="2.2.1 自带客户端命令"></a>2.2.1 自带客户端命令</h3><p>mysql 常用参数：</p><p>-u                   用户<br>-p                   密码<br>-h                   IP<br>-P                   端口<br>-S                   socket文件<br>-e                   免交互执行命令<br>&lt;                    导入SQL脚本<br>​<br>[root@db01 ~]# mysql -uroot -p -h 10.0.0.51 -P3306<br>Enter password:<br>mysql&gt; select @@socket;<br>+—————–+<br>| @@socket        |<br>+—————–+<br>| /tmp/mysql.sock |<br>[root@db01 ~]# mysql -uroot -p -S /tmp/mysql.sock<br>Enter password:<br>[root@db01 ~]# mysql -uroot -p -e “select user,host from mysql.user;”<br>Enter password:<br>+—————+———–+<br>| user          | host      |<br>+—————+———–+<br>| abc          | 10.0.0.%  |<br>| app          | 10.0.0.%  |<br>| root          | 10.0.0.%  |<br>| mysql.session | localhost |<br>| mysql.sys    | localhost |<br>| root          | localhost |<br>+—————+———–+<br>[root@db01 ~]#<br>[root@db01 ~]# mysql -uroot -p &lt;world.sql<br>Enter password:<br>[root@db01 ~]#</p><h2 id="2-3-多种启动方式介绍"><a href="#2-3-多种启动方式介绍" class="headerlink" title="2.3 多种启动方式介绍"></a>2.3 多种启动方式介绍</h2><p><img src="http://upload-images.jianshu.io/upload_images/16956686-54becae60bf4ca48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="img"></p><p>image</p><p>提示：</p><p>以上多种方式，都可以单独启动MySQL服务<br>mysqld_safe和mysqld一般是在临时维护时使用。<br>另外，从Centos 7系统开始，支持systemd直接调用mysqld的方式进行启动数据库</p><h2 id="2-4-初始化配置"><a href="#2-4-初始化配置" class="headerlink" title="2.4 初始化配置"></a>2.4 初始化配置</h2><h3 id="2-4-0-作用"><a href="#2-4-0-作用" class="headerlink" title="2.4.0 作用"></a>2.4.0 作用</h3><p>控制MySQL的启动<br>影响到客户端的连接</p><h3 id="2-4-1-初始化配置的方法"><a href="#2-4-1-初始化配置的方法" class="headerlink" title="2.4.1 初始化配置的方法"></a>2.4.1 初始化配置的方法</h3><p>预编译<br>**配置文件(所有启动方式)**<br>命令行参数 (仅限于 mysqld_safe mysqld)</p><h3 id="2-4-2-初始配置文件"><a href="#2-4-2-初始配置文件" class="headerlink" title="2.4.2 初始配置文件"></a>2.4.2 初始配置文件</h3><p>初始化配置文件的默认读取路径</p><p>[root@db01 ~]# mysqld –help –verbose |grep my.cnf<br>/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf<br>注:<br>默认情况下，MySQL启动时，会依次读取以上配置文件，如果有重复选项，会以最后一个文件设置的为准。<br>但是，如果启动时加入了–defaults-file=xxxx时，以上的所有文件都不会读取.</p><p>配置文件的书写方式:</p><p>[标签]<br>配置项=xxxx<br>​<br>标签类型：服务端、客户端<br>服务器端标签：<br>[mysqld]<br>[mysqld_safe]<br>[server]<br>​<br>客户端标签：<br>[mysql]<br>[mysqldump]<br>[client]<br>​<br>配置文件的示例展示：<br>[root@db01 ~]# cat /etc/my.cnf<br>[mysqld]<br>user=mysql<br>basedir=/app/mysql<br>datadir=/data/mysql<br>socket=/tmp/mysql.sock<br>server_id=6<br>port=3306<br>log_error=/data/mysql/mysql.log<br>[mysql]<br>socket=/tmp/mysql.sock<br>prompt=Master [\\d]&gt;</p><h2 id="2-5-多实例的应用"><a href="#2-5-多实例的应用" class="headerlink" title="2.5 多实例的应用"></a>2.5 多实例的应用</h2><h3 id="2-5-1-准备多个目录"><a href="#2-5-1-准备多个目录" class="headerlink" title="2.5.1 准备多个目录"></a>2.5.1 准备多个目录</h3><p>mkdir -p /data/330{7,8,9}/data</p><h3 id="2-5-2-准备配置文件"><a href="#2-5-2-准备配置文件" class="headerlink" title="2.5.2 准备配置文件"></a>2.5.2 准备配置文件</h3><p>cat &gt; /data/3307/my.cnf &lt;&lt;EOF<br>[mysqld]<br>basedir=/app/mysql<br>datadir=/data/3307/data<br>socket=/data/3307/mysql.sock<br>log_error=/data/3307/mysql.log<br>port=3307<br>server_id=7<br>log_bin=/data/3307/mysql-bin<br>EOF<br>​<br>cat &gt; /data/3308/my.cnf &lt;&lt;EOF<br>[mysqld]<br>basedir=/app/mysql<br>datadir=/data/3308/data<br>socket=/data/3308/mysql.sock<br>log_error=/data/3308/mysql.log<br>port=3308<br>server_id=8<br>log_bin=/data/3308/mysql-bin<br>EOF<br>​<br>cat &gt; /data/3309/my.cnf &lt;&lt;EOF<br>[mysqld]<br>basedir=/app/mysql<br>datadir=/data/3309/data<br>socket=/data/3309/mysql.sock<br>log_error=/data/3309/mysql.log<br>port=3309<br>server_id=9<br>log_bin=/data/3309/mysql-bin<br>EOF</p><h3 id="2-5-3-初始化三套数据"><a href="#2-5-3-初始化三套数据" class="headerlink" title="2.5.3 初始化三套数据"></a>2.5.3 初始化三套数据</h3><p>mv /etc/my.cnf /etc/my.cnf.bak<br>mysqld –initialize-insecure  –user=mysql –datadir=/data/3307/data –basedir=/app/mysql<br>mysqld –initialize-insecure  –user=mysql –datadir=/data/3308/data –basedir=/app/mysql<br>mysqld –initialize-insecure  –user=mysql –datadir=/data/3309/data –basedir=/app/mysql</p><h3 id="2-5-4-systemd管理多实例"><a href="#2-5-4-systemd管理多实例" class="headerlink" title="2.5.4 systemd管理多实例"></a>2.5.4 systemd管理多实例</h3><p>cd /etc/systemd/system<br>cp mysqld.service mysqld3307.service<br>cp mysqld.service mysqld3308.service<br>cp mysqld.service mysqld3309.service<br>​<br>vim mysqld3307.service<br>ExecStart=/app/mysql/bin/mysqld  –defaults-file=/data/3307/my.cnf<br>vim mysqld3308.service<br>ExecStart=/app/mysql/bin/mysqld  –defaults-file=/data/3308/my.cnf<br>vim mysqld3309.service<br>ExecStart=/app/mysql/bin/mysqld  –defaults-file=/data/3309/my.cnf</p><h3 id="2-5-5-授权"><a href="#2-5-5-授权" class="headerlink" title="2.5.5 授权"></a>2.5.5 授权</h3><p>chown -R mysql.mysql /data/*</p><h3 id="2-5-6-启动"><a href="#2-5-6-启动" class="headerlink" title="2.5.6 启动"></a>2.5.6 启动</h3><p>systemctl start mysqld3307.service<br>systemctl start mysqld3308.service<br>systemctl start mysqld3309.service</p><h3 id="2-5-7-验证多实例"><a href="#2-5-7-验证多实例" class="headerlink" title="2.5.7 验证多实例"></a>2.5.7 验证多实例</h3><p>netstat -lnp|grep 330<br>mysql -S /data/3307/mysql.sock -e “select @@server_id”<br>mysql -S /data/3308/mysql.sock -e “select @@server_id”<br>mysql -S /data/3309/mysql.sock -e “select @@server_id”</p>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶之路初级DBA（一）</title>
      <link href="/posts/41873/"/>
      <url>/posts/41873/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-MySQL-大纲介绍"><a href="#第一章-MySQL-大纲介绍" class="headerlink" title="第一章 MySQL 大纲介绍"></a>第一章 MySQL 大纲介绍</h1><h2 id="1、官方定义的MySQL-DBA工作内容"><a href="#1、官方定义的MySQL-DBA工作内容" class="headerlink" title="1、官方定义的MySQL DBA工作内容"></a>1、官方定义的MySQL DBA工作内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（1）运维DBA</span><br><span class="line">初级：各版本、各平台安装搭建、升级</span><br><span class="line">中级：体系结构原理、基础管理（启动关闭、初始化配置文件管理、多实例管理、用户权限管理、基本SQL（增删改查））、</span><br><span class="line">     日志管理、备份与恢复、主从复制（构建、状态监控） </span><br><span class="line">高级：高可用（MGR、InnoDB Cluster）、高性能（优化）</span><br><span class="line">（2）开发DBA</span><br><span class="line">懂至少一门开发语言 ：JAVA、Python</span><br><span class="line">基本SQL语句深入学习（增删改查）、数据库结构设计（建模）</span><br><span class="line">高级SQL：存储过程、函数、触发器、视图、事件</span><br></pre></td></tr></table></figure><h2 id="2、老男孩MySQL课程-2019-03月-中级DBA要求（80-以上）"><a href="#2、老男孩MySQL课程-2019-03月-中级DBA要求（80-以上）" class="headerlink" title="2、老男孩MySQL课程-2019-03月-中级DBA要求（80%以上）"></a>2、老男孩MySQL课程-2019-03月-中级DBA要求（80%以上）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">（1）MySQL 5.7 安装部署（二进制）*****</span><br><span class="line">    编译自己扩展</span><br><span class="line">（2）MySQL升级步骤扩展 ***</span><br><span class="line">（3）MySQL5.7 体系结构原理 *****</span><br><span class="line">（4）MySQL基础管理  *****</span><br><span class="line">（5）基础SQL语句使用 *****</span><br><span class="line">（6）SQL高级应用  ***</span><br><span class="line">（7）Information_schema获取元数据 ***</span><br><span class="line">（8）索引、执行计划管理（基础优化）*****</span><br><span class="line">（9）存储引擎  *****</span><br><span class="line">（10）日志管理 *****</span><br><span class="line">（11）备份与恢复 ******</span><br><span class="line">（12）主从复制及架构演变 ******</span><br><span class="line">（13）传统的高可用及读写分离（MHA&amp;Atlas）****</span><br><span class="line">（14）传统分布式架构设计与实现-扩展（Mycat---&gt;DBLE,DRDS）**</span><br><span class="line">（15）MySQL 5.7 高可用及分布式架构-扩展（MGR,InnoDB Cluster）***</span><br><span class="line">（16）MySQL优化（安全、性能） ****</span><br><span class="line">（17）MySQL 监控（zabbix、Open-falcon）    ****</span><br><span class="line"> (18) RDS(阿里云课程)    *****</span><br><span class="line"></span><br><span class="line">额外要会的：</span><br><span class="line">    Redis</span><br><span class="line">    mongodb     </span><br><span class="line">了解: </span><br><span class="line">    PG</span><br><span class="line">    Oracle  </span><br></pre></td></tr></table></figure><h2 id="3、DBA职业素养"><a href="#3、DBA职业素养" class="headerlink" title="3、DBA职业素养"></a>3、DBA职业素养</h2><hr><h3 id="3-1、人品"><a href="#3-1、人品" class="headerlink" title="3.1、人品"></a>3.1、人品</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">责任-----权利</span><br></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><h4 id="3-2-1、严谨"><a href="#3-2-1、严谨" class="headerlink" title="3.2.1、严谨"></a>3.2.1、严谨</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">磁带库-----&gt;备份软件-----17楼</span><br><span class="line">数据库修改\删除类的命令时 再三考虑，而且要有理论或者实践的支撑</span><br></pre></td></tr></table></figure><h4 id="3-2-2-请收起你的好奇心！！！！！"><a href="#3-2-2-请收起你的好奇心！！！！！" class="headerlink" title="3.2.2 请收起你的好奇心！！！！！"></a>3.2.2 请收起你的好奇心！！！！！</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意规范:</span><br><span class="line">脱库？ 华住网（ip root 密码），“脱敏”!!!!!。</span><br><span class="line">学会保护自己!!!</span><br></pre></td></tr></table></figure><h3 id="3-3、细心"><a href="#3-3、细心" class="headerlink" title="3.3、细心"></a>3.3、细心</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">把最简单的事情做的最漂亮，最专业。</span><br><span class="line">不要怕成功的门很拥挤,因为很多人在半路就已经放弃了.</span><br><span class="line">                                           ----oldguo                     </span><br></pre></td></tr></table></figure><h3 id="3-4、心态"><a href="#3-4、心态" class="headerlink" title="3.4、心态"></a>3.4、心态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">别惹事，出事别怕事</span><br></pre></td></tr></table></figure><h3 id="3-5、熟悉操作系统（精通）"><a href="#3-5、熟悉操作系统（精通）" class="headerlink" title="3.5、熟悉操作系统（精通）"></a>3.5、熟悉操作系统（精通）</h3><h3 id="3-6、熟悉公司业务"><a href="#3-6、熟悉公司业务" class="headerlink" title="3.6、熟悉公司业务"></a>3.6、熟悉公司业务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">业务？</span><br><span class="line">    产品的功能</span><br><span class="line">    用户的行为(热功能,热数据)      </span><br></pre></td></tr></table></figure><h3 id="3-7、熟悉行业"><a href="#3-7、熟悉行业" class="headerlink" title="3.7、熟悉行业"></a>3.7、熟悉行业</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">熟悉行业发展趋势</span><br><span class="line">版本</span><br><span class="line">数据库产品类型</span><br><span class="line">https:&#x2F;&#x2F;db-engines.com&#x2F;en&#x2F;ranking</span><br></pre></td></tr></table></figure><h3 id="3-8、喜欢数据库"><a href="#3-8、喜欢数据库" class="headerlink" title="3.8、喜欢数据库"></a>3.8、喜欢数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">体验很重要</span><br></pre></td></tr></table></figure><h1 id="第二章-MySQL-介绍和安装"><a href="#第二章-MySQL-介绍和安装" class="headerlink" title="第二章: MySQL 介绍和安装"></a>第二章: MySQL 介绍和安装</h1><h2 id="1、什么是数据？"><a href="#1、什么是数据？" class="headerlink" title="1、什么是数据？"></a>1、什么是数据？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据：文字、图片、视频。。。人类认知的数据表现方式</span><br><span class="line">计算机：二进制、16进制的机器语言</span><br><span class="line">基于数据的重要性和复杂性的不同，我们可能有不同的管理方式。</span><br><span class="line"></span><br><span class="line">哪些数据是适合存储到数据库的呢？</span><br><span class="line">重要性比较高的</span><br><span class="line">关系较复杂的数据</span><br></pre></td></tr></table></figure><h2 id="2、什么是数据库管理系统（DBMS）？"><a href="#2、什么是数据库管理系统（DBMS）？" class="headerlink" title="2、什么是数据库管理系统（DBMS）？"></a>2、什么是数据库管理系统（DBMS）？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RDBMS: 关系型数据库管理系统</span><br><span class="line">比较适合于,安全级别要求高的数据以及关系较复杂的数据</span><br><span class="line"></span><br><span class="line">NoSQL:非关系型数据库管理系统</span><br><span class="line">适合于高性能存取数据,一般是配合RDBMS进行使用的</span><br><span class="line">针对大数据处理分析,分布式架构更加擅长</span><br></pre></td></tr></table></figure><h2 id="3、数据库管理系统种类"><a href="#3、数据库管理系统种类" class="headerlink" title="3、数据库管理系统种类"></a>3、数据库管理系统种类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RDBMS  ：</span><br><span class="line">MySQL 、Oracle、MSSQL（SQL Server）、PG</span><br><span class="line"></span><br><span class="line">NoSQL：Not Only SQL</span><br><span class="line">键-值（key-value）：Redis, memcached</span><br><span class="line">文档（document）：Mongodb</span><br></pre></td></tr></table></figure><h2 id="4、MySQL简介及产品线"><a href="#4、MySQL简介及产品线" class="headerlink" title="4、MySQL简介及产品线"></a>4、MySQL简介及产品线</h2><h3 id="4-1-MySQL行业主流版本："><a href="#4-1-MySQL行业主流版本：" class="headerlink" title="4.1 MySQL行业主流版本："></a>4.1 MySQL行业主流版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.6  </span><br><span class="line">5.7    </span><br><span class="line">8.0(现在开始研究新特性)</span><br></pre></td></tr></table></figure><h3 id="4-2-企业版本选择-MySQL分支版本-笔试题"><a href="#4-2-企业版本选择-MySQL分支版本-笔试题" class="headerlink" title="4.2 企业版本选择(MySQL分支版本),笔试题"></a>4.2 企业版本选择(MySQL分支版本),笔试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Oracle:</span><br><span class="line">      MySQL官方版</span><br><span class="line">红帽  :</span><br><span class="line">      MariaDB</span><br><span class="line">Percona:</span><br><span class="line">      PerconaDB</span><br></pre></td></tr></table></figure><h3 id="4-3-版本选择建议要上新环境"><a href="#4-3-版本选择建议要上新环境" class="headerlink" title="4.3 版本选择建议要上新环境"></a>4.3 版本选择建议要上新环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.一般选择官方主流版本:5.6,5.7 </span><br><span class="line">2.GA（稳定发布版）</span><br><span class="line">3.6-12月的产品版本</span><br></pre></td></tr></table></figure><h3 id="4-4-课程版本："><a href="#4-4-课程版本：" class="headerlink" title="4.4 课程版本："></a>4.4 课程版本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.7.20  二进制安装，其他安装方式自己扩展</span><br></pre></td></tr></table></figure><h3 id="4-5-如何获取MySQL软件"><a href="#4-5-如何获取MySQL软件" class="headerlink" title="4.5 如何获取MySQL软件"></a>4.5 如何获取MySQL软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">企业版：Enterprise  , 互联网行业一般不选择.</span><br><span class="line">社区版本：选择</span><br><span class="line">源码包：source code    .tar.gz   </span><br><span class="line">通用二进制   </span><br><span class="line">面试题:</span><br><span class="line">你们公司用什么版本数据库? 具体什么小版本号?</span><br><span class="line">5.6.20 5.6.34 5.6.36  5.6.38  5.6.40    </span><br><span class="line">5.7.18  5.7.20  5.7.22</span><br></pre></td></tr></table></figure><h2 id="5、MySQL二进制安装"><a href="#5、MySQL二进制安装" class="headerlink" title="5、MySQL二进制安装"></a>5、MySQL二进制安装</h2><h3 id="5-1-创建软件目录"><a href="#5-1-创建软件目录" class="headerlink" title="5.1.创建软件目录:"></a>5.1.创建软件目录:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# mkdir -p &#x2F;app&#x2F;</span><br><span class="line">上传软件到此目录</span><br></pre></td></tr></table></figure><h3 id="5-2-解压并改名为mysql"><a href="#5-2-解压并改名为mysql" class="headerlink" title="5.2. 解压并改名为mysql"></a>5.2. 解压并改名为mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 app]# mv mysql-5.7.20-linux-glibc2.12-x86_64 mysql</span><br><span class="line">[root@db01 app]# ls -l &#x2F;app&#x2F;mysql&#x2F;</span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x  2 root root   4096 Mar  4 14:55 bin</span><br><span class="line">-rw-r--r--  1 7161 31415 17987 Sep 13  2017 COPYING</span><br><span class="line">drwxr-xr-x  2 root root     55 Mar  4 14:55 docs</span><br><span class="line">drwxr-xr-x  3 root root   4096 Mar  4 14:55 include</span><br><span class="line">drwxr-xr-x  5 root root    229 Mar  4 14:55 lib</span><br><span class="line">drwxr-xr-x  4 root root     30 Mar  4 14:55 man</span><br><span class="line">-rw-r--r--  1 7161 31415  2478 Sep 13  2017 README</span><br><span class="line">drwxr-xr-x 28 root root   4096 Mar  4 14:55 share</span><br><span class="line">drwxr-xr-x  2 root root     90 Mar  4 14:55 support-files</span><br></pre></td></tr></table></figure><p>修改环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">export PATH&#x3D;&#x2F;app&#x2F;mysql&#x2F;bin:$PATH</span><br><span class="line">[root@db01 bin]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h3 id="5-3-建立mysql用户和组-如果已有可忽略"><a href="#5-3-建立mysql用户和组-如果已有可忽略" class="headerlink" title="5.3. 建立mysql用户和组(如果已有可忽略)"></a>5.3. 建立mysql用户和组(如果已有可忽略)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd mysql </span><br></pre></td></tr></table></figure><h3 id="5-4-创建相关目录并修改权限"><a href="#5-4-创建相关目录并修改权限" class="headerlink" title="5.4. 创建相关目录并修改权限"></a>5.4. 创建相关目录并修改权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;data&#x2F;mysql -p </span><br><span class="line">chown -R mysql.mysql &#x2F;app&#x2F;*</span><br><span class="line">chown -R mysql.mysql &#x2F;data&#x2F;*</span><br></pre></td></tr></table></figure><h3 id="5-5-初始化数据（建库）"><a href="#5-5-初始化数据（建库）" class="headerlink" title="5.5 初始化数据（建库）"></a>5.5 初始化数据（建库）</h3><p>方法一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">初始化数据，初始化管理员的临时密码</span><br><span class="line">mysqld --initialize  --user&#x3D;mysql --basedir&#x3D;&#x2F;app&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line"></span><br><span class="line">2019-04-18T03:21:53.381108Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2019-04-18T03:21:54.583415Z 0 [Warning] InnoDB: New log files created, LSN&#x3D;45790</span><br><span class="line">2019-04-18T03:21:54.697859Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2019-04-18T03:21:54.760821Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 1daa0c57-6189-11e9-bc80-000c294234c8.</span><br><span class="line">2019-04-18T03:21:54.770856Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.</span><br><span class="line">2019-04-18T03:21:54.772016Z 1 [Note] A temporary password is generated for root@localhost: 9LN.fh_Ea#uU</span><br></pre></td></tr></table></figure><p><a href="https://blog.kococ.cn/wp-content/uploads/2020/01/2020080109354680.png"><img src="https://blog.kococ.cn/wp-content/uploads/2020/01/2020080109354680-1024x97.png"></a></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">报错原因: Linux系统中缺少libaio-devel 软件包</span><br><span class="line">解决:</span><br><span class="line">yum install -y libaio-devel</span><br></pre></td></tr></table></figure><p><a href="https://blog.kococ.cn/wp-content/uploads/2020/01/2020080109360484.png"><img src="https://blog.kococ.cn/wp-content/uploads/2020/01/2020080109360484.png"></a></p><p>image.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">报错原因:</span><br><span class="line">在&#x2F;data&#x2F;mysql 存在文件</span><br><span class="line">解决:</span><br><span class="line">\rm -rf &#x2F;data&#x2F;mysql&#x2F;*</span><br></pre></td></tr></table></figure><p><strong>新特性重要说明:</strong><br><strong>5.7开始,MySQL加入了全新的 密码的安全机制:</strong><br><strong>1.初始化完成后,会生成临时密码(显示到屏幕上,并且会往日志中记一份)</strong><br><strong>2.密码复杂度:长度:超过12位? 复杂度:字符混乱组合</strong><br><strong>3.密码过期时间180天</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">方法二 :</span><br><span class="line">初始化数据，初始化管理员的密码为空</span><br><span class="line"></span><br><span class="line">\rm -rf  &#x2F;data&#x2F;mysql&#x2F;*</span><br><span class="line">[root@db01 ~]# mysqld --initialize-insecure  --user&#x3D;mysql --basedir&#x3D;&#x2F;app&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line"></span><br><span class="line">2019-04-18T03:37:43.146018Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2019-04-18T03:37:43.892132Z 0 [Warning] InnoDB: New log files created, LSN&#x3D;45790</span><br><span class="line">2019-04-18T03:37:43.970412Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2019-04-18T03:37:44.029490Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 5378f3b3-618b-11e9-9164-000c294234c8.</span><br><span class="line">2019-04-18T03:37:44.041469Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.</span><br><span class="line">2019-04-18T03:37:44.042348Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.</span><br><span class="line">[root@db01 ~]# </span><br><span class="line"></span><br><span class="line">[root@db01 ~]# cd &#x2F;data&#x2F;mysql&#x2F;</span><br><span class="line">[root@db01 mysql]# ll</span><br><span class="line">total 110628</span><br><span class="line">-rw-r----- 1 mysql mysql       56 Apr 18 11:37 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql      419 Apr 18 11:37 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 mysql mysql 12582912 Apr 18 11:37 ibdata1</span><br><span class="line">-rw-r----- 1 mysql mysql 50331648 Apr 18 11:37 ib_logfile0</span><br><span class="line">-rw-r----- 1 mysql mysql 50331648 Apr 18 11:37 ib_logfile1</span><br><span class="line">drwxr-x--- 2 mysql mysql     4096 Apr 18 11:37 mysql</span><br><span class="line">drwxr-x--- 2 mysql mysql     8192 Apr 18 11:37 performance_schema</span><br><span class="line">drwxr-x--- 2 mysql mysql     8192 Apr 18 11:37 sys</span><br><span class="line">[root@db01 mysql]# </span><br></pre></td></tr></table></figure><p><strong>注释：5.6初始化的区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;application&#x2F;mysql&#x2F;scripts&#x2F;mysql_install_db  --user&#x3D;mysql --datadir&#x3D;&#x2F;application&#x2F;mysql&#x2F;data --basedir&#x3D;&#x2F;application&#x2F;mysql</span><br></pre></td></tr></table></figure><h3 id="5-6-书写默认配置文件"><a href="#5-6-书写默认配置文件" class="headerlink" title="5.6 书写默认配置文件"></a>5.6 书写默认配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure><p>[mysqld]</p><p>user=mysql basedir=/app/mysql datadir=/data/mysql server_id=6 port=3306 socket=/tmp/mysql.sock</p><p>[mysql]</p><p>socket=/tmp/mysql.sock prompt=3306 [\\d]&gt;</p><h3 id="5-7-配置启动脚本"><a href="#5-7-配置启动脚本" class="headerlink" title="5.7 配置启动脚本:"></a>5.7 配置启动脚本:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 mysql]# cd &#x2F;app&#x2F;mysql&#x2F;support-files</span><br><span class="line">[root@db01 support-files]# .&#x2F;mysql.server start</span><br><span class="line">Starting MySQL.Logging to &#39;&#x2F;data&#x2F;mysql&#x2F;db01.err&#39;.</span><br><span class="line"> SUCCESS! </span><br><span class="line">cp mysql.server    &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br></pre></td></tr></table></figure><h3 id="5-8-使用systemd管理mysql"><a href="#5-8-使用systemd管理mysql" class="headerlink" title="5.8 使用systemd管理mysql"></a>5.8 使用systemd管理mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld.service </span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MySQL Server</span><br><span class="line">Documentation&#x3D;man:mysqld(8)</span><br><span class="line">Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mysql</span><br><span class="line">Group&#x3D;mysql</span><br><span class="line">ExecStart&#x3D;&#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf</span><br><span class="line">LimitNOFILE &#x3D; 5000</span><br></pre></td></tr></table></figure><p>注意：将原来模式启动mysqld先关闭，然后再用systemd管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start&#x2F;stop&#x2F;restart&#x2F;status   mysqld</span><br></pre></td></tr></table></figure><h2 id="6-安装后的简单管理"><a href="#6-安装后的简单管理" class="headerlink" title="6. 安装后的简单管理"></a>6. 安装后的简单管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# mysqladmin -uroot -p password 123</span><br><span class="line">Enter password: </span><br><span class="line">mysqladmin: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</span><br><span class="line"></span><br><span class="line">5.6版本:</span><br><span class="line">select user,password,host from mysql.user;</span><br><span class="line">5.7 中用户基本信息</span><br><span class="line">select user,authentication_string,host from mysql.user;</span><br><span class="line">desc  mysql.user;</span><br></pre></td></tr></table></figure><p>小结:<br>1.版本 (主流版本的GA时间了解一下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">5.6 5.7 </span><br><span class="line">5.6.38   5.7.20 </span><br><span class="line">20170913 </span><br><span class="line">(1) 初始化方式变了</span><br><span class="line">mysql_install_db   </span><br><span class="line">mysqld  --initialize-insecure</span><br><span class="line">(2) 用户安全</span><br><span class="line">12位</span><br><span class="line">180</span><br><span class="line">4种复杂度</span><br><span class="line"></span><br><span class="line">(3)密码字段</span><br><span class="line">authentication_strings</span><br></pre></td></tr></table></figure><p>2.安装方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二进制</span><br><span class="line">源码</span><br><span class="line">yum </span><br></pre></td></tr></table></figure><p>3.建库(初始化数据库)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --intialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;app&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;mysql </span><br></pre></td></tr></table></figure><p>4.简易的配制文件/etc/my.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user </span><br><span class="line">basedir</span><br><span class="line">datadir </span><br><span class="line">server_id</span><br><span class="line">port</span><br><span class="line">socket </span><br></pre></td></tr></table></figure><ol><li>管理员密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p password xx</span><br></pre></td></tr></table></figure><hr><hr><p>转自老郭MySQL笔记总结，原文链接：<a href="https://www.jianshu.com/p/dd7137c4efa5">https://www.jianshu.com/p/dd7137c4efa5</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各大搜索引擎 User-Agent</title>
      <link href="/posts/41490/"/>
      <url>/posts/41490/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于项目需求，所以搜集了各大搜索引擎的蜘蛛User-Agent，做了个统计</p></blockquote><h2 id="百度搜索User-Agent："><a href="#百度搜索User-Agent：" class="headerlink" title="百度搜索User-Agent："></a>百度搜索User-Agent：</h2><p>百度 PC UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line">Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)</span><br></pre></td></tr></table></figure><p>百度移动 UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Linux;u;Android 4.2.2;zh-cn;) AppleWebKit/534.46 (KHTML,like Gecko) Version/5.1 Mobile Safari/10600.6.3 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)</span><br></pre></td></tr></table></figure><p>百度图片UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Baiduspider-image+(+http://www.baidu.com/search/spider.htm)</span><br></pre></td></tr></table></figure><h2 id="神马搜索User-Agent："><a href="#神马搜索User-Agent：" class="headerlink" title="神马搜索User-Agent："></a>神马搜索User-Agent：</h2><p>神马搜索 PC UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</span><br></pre></td></tr></table></figure><p>神马搜索移动 UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e YisouSpider/5.0 Safari/602.1</span><br></pre></td></tr></table></figure><h2 id="谷歌User-Agent："><a href="#谷歌User-Agent：" class="headerlink" title="谷歌User-Agent："></a>谷歌User-Agent：</h2><p>谷歌 PC UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</span><br></pre></td></tr></table></figure><p>谷歌移动UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdsBot-Google-Mobile (+http://www.google.com/mobile/adsbot.html) Mozilla (iPhone; U; CPU iPhone OS 3 0 like Mac OS X) AppleWebKit (KHTML, like Gecko) Mobile Safari</span><br></pre></td></tr></table></figure><p>谷歌图片UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Googlebot-Image/1.0; +http://www.google.com/bot.html)</span><br></pre></td></tr></table></figure><h2 id="搜狗User-Agent："><a href="#搜狗User-Agent：" class="headerlink" title="搜狗User-Agent："></a>搜狗User-Agent：</h2><p>搜索 PC UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sogou web spider/4.0(+http://www.sogou.com/docs/<span class="built_in">help</span>/webmasters.htm<span class="comment">#07)</span></span><br></pre></td></tr></table></figure><p>搜狗图片 UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sogou Pic Spider/3.0(+http://www.sogou.com/docs/<span class="built_in">help</span>/webmasters.htm<span class="comment">#07)</span></span><br></pre></td></tr></table></figure><p>搜狗新闻UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sogou News Spider/4.0(+http://www.sogou.com/docs/<span class="built_in">help</span>/webmasters.htm<span class="comment">#07)</span></span><br></pre></td></tr></table></figure><p>搜狗视频UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sogou Video Spider/3.0(+http://www.sogou.com/docs/<span class="built_in">help</span>/webmasters.htm<span class="comment">#07)</span></span><br></pre></td></tr></table></figure><h2 id="360搜索User-Agent："><a href="#360搜索User-Agent：" class="headerlink" title="360搜索User-Agent："></a>360搜索User-Agent：</h2><p>360搜索UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);</span><br></pre></td></tr></table></figure><p>360移动UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Linux; U; Android 4.0.2; en-us; Galaxy Nexus Build/ICL53F) AppleWebKit/534.30 (KHTML, like Gecko)Version/4.0 Mobile Safari/534.30; 360Spider</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 4.0.2; en-us; Galaxy Nexus Build/ICL53F) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30; HaosouSpider</span><br></pre></td></tr></table></figure><p>360安全UA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">360spider (http://webscan.360.cn)</span><br></pre></td></tr></table></figure><h2 id="必应User-Agent："><a href="#必应User-Agent：" class="headerlink" title="必应User-Agent："></a>必应User-Agent：</h2><pre><code>Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)</code></pre><h2 id="搜搜User-Agent："><a href="#搜搜User-Agent：" class="headerlink" title="搜搜User-Agent："></a>搜搜User-Agent：</h2><p>搜搜UA：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sosospider+(+http://help.soso.com/webspider.htm)</span><br></pre></td></tr></table></figure><p>搜搜图片UA：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sosoimagespider+(+http://help.soso.com/soso-image-spider.htm)</span><br></pre></td></tr></table></figure><h2 id="雅虎User-Agent："><a href="#雅虎User-Agent：" class="headerlink" title="雅虎User-Agent："></a>雅虎User-Agent：</h2><p>雅虎中文UA：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html)</span><br></pre></td></tr></table></figure><p>雅虎英文UA：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/<span class="built_in">help</span>/us/ysearch/slurp)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> User-Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS</title>
      <link href="/posts/54221/"/>
      <url>/posts/54221/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-HTTPS-安全证书基本概述"><a href="#第一章-HTTPS-安全证书基本概述" class="headerlink" title="第一章 HTTPS 安全证书基本概述"></a>第一章 HTTPS 安全证书基本概述</h1><p>为什么需要使用HTTPS, 因为HTTP 不安全。当我们使用http 网站时，经常会遇到包遭到劫持和篡改，如果采用https 协议，那么数据在传输过程中是加密的，所以黑客无法窃取或者篡改数据报文信息。<br>https 主要解决了什么问题，避免网站传输时信息泄露，避免网站传输时内容不被劫持和篡改。<br>下面我们来了解一下HTTPS 证书类型<br>HTTPS 证书购买选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">保护1 个域名<span class="selector-tag">www</span></span><br><span class="line">保护5 个域名<span class="selector-tag">www</span> <span class="selector-tag">images</span> <span class="selector-tag">cdn</span> <span class="selector-tag">test</span> <span class="selector-tag">m</span></span><br><span class="line">通配符域名 *<span class="selector-class">.oldboy</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h2 id="HTTPS-注意事项"><a href="#HTTPS-注意事项" class="headerlink" title="HTTPS 注意事项"></a>HTTPS 注意事项</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Https</span> 不支持续费,证书到期需重新申请新并进行替换.</span><br><span class="line"><span class="selector-tag">Https</span> 如果是通配符域名，二级域名和三级域名需要分别购买，如<span class="selector-tag">test</span><span class="selector-class">.m</span><span class="selector-class">.oldboy</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">Https</span> 显示绿色, 说明整个网站的<span class="selector-tag">URL</span> 都是<span class="selector-tag">https</span> 的。</span><br><span class="line"><span class="selector-tag">Https</span> 显示黄色, 因为网站代码中包含<span class="selector-tag">http</span>的不安全连接。</span><br><span class="line"><span class="selector-tag">Https</span> 显示红色, 要么证书是假的，要么证书过期</span><br></pre></td></tr></table></figure><h1 id="第二章-Nginx-单台实现HTTPS-实战"><a href="#第二章-Nginx-单台实现HTTPS-实战" class="headerlink" title="第二章 Nginx 单台实现HTTPS 实战"></a>第二章 Nginx 单台实现HTTPS 实战</h1><p>1.环境准备</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#nginx 必须有ssl 模块</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># nginx -V</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="meta">#创建存放ssl 证书的路径</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cd /etc/nginx/ssl_key</span></span><br><span class="line">[<span class="meta">root@web01 /etc/nginx/ssl_key</span>]<span class="meta">#</span></span><br></pre></td></tr></table></figure><p>2.使用openssl 命令充当CA 权威机构创建证书(生产不使用此方式生成证书，因为不会被互联网认可)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 /etc/nginx/ssl_key</span>]<span class="meta"># openssl genrsa -idea -out server.key 2048</span></span><br><span class="line">Generating RSA <span class="keyword">private</span> key, <span class="number">2048</span> bit <span class="keyword">long</span> modulus</span><br><span class="line">... +++</span><br><span class="line">e <span class="keyword">is</span> <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#记住配置密码, 我这里是1234</span></span><br><span class="line">Enter pass phrase <span class="keyword">for</span> server.key:</span><br><span class="line">Verifying - Enter pass phrase <span class="keyword">for</span> server.key:</span><br></pre></td></tr></table></figure><p>3.生成自签证书，同时去掉私钥的密码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 /etc/nginx/ssl_key]# openssl req -days <span class="number">36500</span> -x509 -sha256 -nodes -newkey rsa:<span class="number">2048</span> -keyout server.key -out server.crt</span><br><span class="line"></span><br><span class="line">Country Name (<span class="number">2</span> letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BJ</span><br><span class="line">Locality Name (eg, city) [<span class="built_in">Default</span> City]:BJ</span><br><span class="line">Organization Name (eg, company) [<span class="built_in">Default</span> Company Ltd]:edu</span><br><span class="line">Organizational Unit Name (eg, section) []:SA</span><br><span class="line">Common Name (eg, your name or your server<span class="symbol">&#x27;s</span> hostname) []:oldboy</span><br><span class="line">Email Address []:[oldboy@oldboy.com](mailto:oldboy@oldboy.com)</span><br><span class="line"></span><br><span class="line"># req --&gt;用于创建新的证书</span><br><span class="line"># new --&gt;表示创建的是新证书</span><br><span class="line"># x509 --&gt;表示定义证书的格式为标准格式</span><br><span class="line"># key --&gt;表示调用的私钥文件信息</span><br><span class="line"># out --&gt;表示输出证书文件信息</span><br><span class="line"># days --&gt;表示证书的有效期</span><br></pre></td></tr></table></figure><p>4.证书申请完成后需要了解Nginx 如何配置Https</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开始ssl 支持</span></span><br><span class="line">Syntax: ssl on | off;</span><br><span class="line"><span class="keyword">Default</span>: ssl off;</span><br><span class="line">Context: http, server</span><br><span class="line"></span><br><span class="line"><span class="comment">#ssl crt 文件存放位置</span></span><br><span class="line">Syntax: ssl_certificate file;</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: http, server</span><br><span class="line"></span><br><span class="line"><span class="comment">#ssl key 文件存放位置</span></span><br><span class="line">Syntax: ssl_certificate_key file;</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: http, server</span><br></pre></td></tr></table></figure><p>5.配置Nginx 配置Https 实例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/nginx/conf.d/ssl.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span>;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    ssl <span class="keyword">on</span>;</span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#准备对应的站点目录, 并重启 Nginx 服务</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mkdir -p /code</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># echo &quot;Https&quot; &gt; /code/index.html</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># nginx -t</span></span><br><span class="line">nginx: [warn] the <span class="string">&quot;ssl&quot;</span> directive <span class="keyword">is</span> deprecated, use the <span class="string">&quot;listen ... ssl&quot;</span> directive instead <span class="keyword">in</span> /etc/nginx/conf.d/ssl.conf:<span class="number">4</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test <span class="keyword">is</span> successful</span><br><span class="line"><span class="meta">#有个报警提示，告诉我们需要使用listen ... ssl这样的格式</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/nginx/conf.d/ssl.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    <span class="meta">#ssl on;</span></span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#再次检查就没有问题了</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test <span class="keyword">is</span> successful</span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>6.浏览器输入<a href="https://links.jianshu.com/go?to=https://s.xoxoyun.com">http://s.xoxoyun.com</a> 访问, 由于该证书非第三方权威机构颁发，而是我们自己签发的，所以浏览器会警告</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-f38c27217b8740d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/378/format/webp" alt="img"></p><p>image.png</p><p>7.以上配置如果用户忘记在浏览器地址栏输入https:// 那么将不会跳转至https，建议配置将用户访问http 请求强制跳转https</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/ssl.conf      </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    <span class="comment">#ssl on;</span></span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    <span class="comment">#rewrite 跳转方式</span></span><br><span class="line">    rewrite ^(.*) https://<span class="variable">$server_name</span><span class="variable">$1</span> redirect;</span><br><span class="line">    <span class="comment">#return 跳转方式</span></span><br><span class="line">    <span class="comment">#return 302 https://$server_name$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-Nginx-集群实现HTTPS-实践"><a href="#第三章-Nginx-集群实现HTTPS-实践" class="headerlink" title="第三章 Nginx 集群实现HTTPS 实践"></a>第三章 Nginx 集群实现HTTPS 实践</h1><p>实战Nginx 负载均衡+Nginx WEB 配置HTTPS 安全</p><p>1.环境准备</p><table><thead><tr><th>主机名</th><th>外网IP(NAT)</th><th>内网IP(LAN)</th><th>角色</th></tr></thead><tbody><tr><td>lb01</td><td>eth0:10.0.0.5</td><td>eth1:172.16.1.5</td><td>nginx-proxy</td></tr><tr><td>web01</td><td>eth0:10.0.0.7</td><td>eth1:172.16.1.7</td><td>nginx-web01</td></tr><tr><td>web02</td><td>eth0:10.0.0.8</td><td>eth1:172.16.1.8</td><td>nginx-web02</td></tr></tbody></table><p>2.配置后端两台web 节点监听80 端口, 如已配置则无需修改</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/blog.conf    </span></span><br><span class="line">server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name blog.xoxoyun.com;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        index index.php index.html;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root /code/wordpress;</span><br><span class="line">            fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9000</span>;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">            <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置第二台WEB节点</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># scp -rp /etc/nginx/ssl_key/ root@172.16.1.8:/etc/nginx/</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># scp -rp /etc/nginx/conf.d/ root@172.16.1.8:/etc/nginx/</span></span><br></pre></td></tr></table></figure><p>4.重启两台后端web 节点Nginx</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>5.Nginx 负载均衡先生成证书</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># mkdir /etc/nginx/ssl/ssh_key -p</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># mkdir /etc/nginx/ssl_key -p</span></span><br><span class="line">[root@lb01 ~]<span class="comment"># cd /etc/nginx/ssl_key/</span></span><br><span class="line">[root@lb01 /etc/nginx/ssl_key]<span class="comment"># openssl genrsa -idea -out server.key 2048</span></span><br><span class="line">[root@lb01 /etc/nginx/ssl_key]<span class="comment"># openssl req -days 36500 -x509 -sha256 -nodes -newkey rsa:2048 -keyout server.key -out server.crt</span></span><br><span class="line">Country Name (<span class="number">2</span> letter code) [XX]<span class="symbol">:CN</span></span><br><span class="line">State <span class="keyword">or</span> Province Name (full name) []<span class="symbol">:BJ</span></span><br><span class="line">Locality Name (eg, city) [Default City]<span class="symbol">:BJ</span></span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]<span class="symbol">:edu</span></span><br><span class="line">Organizational Unit Name (eg, section) []<span class="symbol">:SA</span></span><br><span class="line">Common Name (eg, your name <span class="keyword">or</span> your server<span class="string">&#x27;s hostname) []:oldboy</span></span><br><span class="line"><span class="string">Email Address []:[oldboy@oldboy.com](mailto:oldboy@oldboy.com)</span></span><br></pre></td></tr></table></figure><p>6.Nginx 负载均衡配置文件如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># cat /etc/nginx/conf.d/proxy.conf</span></span><br><span class="line"><span class="meta"># 定义后端资源池</span></span><br><span class="line">upstream site &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">80</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.8</span>:<span class="number">80</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#https配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name blog.oldboy.com;</span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//site;</span></span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#用户http请求跳转至https</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name blog.oldboy.com;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">302</span> https:<span class="comment">//$server_name$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.重启Nginx 负载均衡</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># nginx -t</span></span><br><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>8.配置代理和nginx服务都是https<br>proxy_params配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffers 4 128k;</span><br></pre></td></tr></table></figure><p>反向代理配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义后端资源池</span></span><br><span class="line">upstream site &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">80</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.8</span>:<span class="number">80</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream ssl &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">443</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.8</span>:<span class="number">443</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#https配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https:<span class="comment">//ssl;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#用户http请求跳转至https</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">302</span> https:<span class="comment">//$server_name$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name s.oldboy.com;</span><br><span class="line">    <span class="comment">#ssl on;</span></span><br><span class="line">    ssl_certificate ssl_key/server.crt;</span><br><span class="line">    ssl_certificate_key ssl_key/server.key;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.wordpress和wecenter配置https<br>wecenter在后台配置：</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-47b646c4f1d2d167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/837/format/webp" alt="img"></p><p>wordpress除了后台配置以外还需要在nginx配置文件里添加php-fastcgi解析的参数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    ...</span><br><span class="line">    fastcgi_param  HTTPS <span class="keyword">on</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> 安全证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采集各种美女图片站并下载图片、自动搭建属于自己的图片站</title>
      <link href="/posts/51554/"/>
      <url>/posts/51554/</url>
      
        <content type="html"><![CDATA[<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://www.moerats.com/usr/picture/94imm.png" alt="请输入图片描述"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>项目地址：</strong><a href="https://github.com/zephyr-y/94imm">https://git.coding.net/zxy_coding/94imm.git</a></p><p><strong>环境要求：</strong><code>Python 3.6</code>、<code>Mysql 5.5+</code>、<code>Nginx</code>/<code>Apache</code>(非必需)，本文只说<code>CentOS 6/7</code>、<code>Debian 8/9</code>。</p><p>这里使用宝塔和手动<code>2</code>种方法安装，如果你需要快速上手就使用手动安装，想操作方便就宝塔，自行选择。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p><strong>1、使用宝塔安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line">#Debian系统</span><br><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>安装完成后，进入面板，点击左侧软件管理，然后安装<code>Mysql 5.5+</code>、<code>Nginx</code>(如果你使用域名的话，就需要安装)。</p><p>然后点击左侧数据库-添加数据库，设置好数据库信息。</p><p><strong>2、手动安装环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：为了简单，这里采用Mysql 5.7+Caddy环境，这里也是，如果你需要使用到域名才安装Caddy。</span><br></pre></td></tr></table></figure><p>这里博主是用的<code>Mysql 5.7</code>，如果内存很低，<code>5.7</code>跑起来会有点吃力，建议增加点虚拟内存，可以用下<code>Swap</code>一键脚本→<a href="https://www.moerats.com/archives/722/">传送门</a>。</p><p>安装<code>Mysql 5.7</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#CentOS 6系统</span><br><span class="line">rpm -ivh http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql57-community-release-el6.rpm</span><br><span class="line">yum install mysql-community-server -y</span><br><span class="line">service mysqld start</span><br><span class="line">chkconfig mysqld on</span><br><span class="line"></span><br><span class="line">#CentOS 7系统</span><br><span class="line">rpm -ivh http:&#x2F;&#x2F;repo.mysql.com&#x2F;mysql57-community-release-el7.rpm</span><br><span class="line">yum install mysql-community-server -y</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">#Debian 8系统</span><br><span class="line">echo &#39;deb http:&#x2F;&#x2F;repo.mysql.com&#x2F;apt&#x2F;debian&#x2F; jessie mysql-5.7</span><br><span class="line">deb-src http:&#x2F;&#x2F;repo.mysql.com&#x2F;apt&#x2F;debian&#x2F; jessie mysql-5.7&#39; &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mysql.list</span><br><span class="line">wget https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql</span><br><span class="line">apt-key add RPM-GPG-KEY-mysql</span><br><span class="line">apt update</span><br><span class="line">#安装的时候会要你输入数据库密码</span><br><span class="line">apt install mysql-server -y</span><br><span class="line"></span><br><span class="line">#Debian 9系统</span><br><span class="line">echo &#39;deb http:&#x2F;&#x2F;repo.mysql.com&#x2F;apt&#x2F;debian&#x2F; stretch mysql-5.7</span><br><span class="line">deb-src http:&#x2F;&#x2F;repo.mysql.com&#x2F;apt&#x2F;debian&#x2F; stretch mysql-5.7&#39; &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mysql.list</span><br><span class="line">wget https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql</span><br><span class="line">apt-key add RPM-GPG-KEY-mysql</span><br><span class="line">apt update</span><br><span class="line">#安装的时候会要你输入数据库密码</span><br><span class="line">apt install mysql-server -y</span><br></pre></td></tr></table></figure><p>这里<code>CentOS</code>安装<code>MySQL 5.7</code>的时候会生成一个随机密码，使用命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">#大致信息，******为密码</span><br><span class="line">[Note] A temporary password is generated for root@localhost: ******</span><br></pre></td></tr></table></figure><p>然后<code>CentOS</code>还需要修改数据库密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#登录数据库，输入你上面看到的密码</span><br><span class="line">mysql -u root -p</span><br><span class="line">#稍微设置密码难度下，不然修改的时候，密码必须很复杂才行</span><br><span class="line">mysql&gt; set global validate_password_policy&#x3D;0;</span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;4;</span><br><span class="line">#修改密码为moerats</span><br><span class="line">mysql&gt; set password&#x3D;password(&quot;moerats&quot;);</span><br><span class="line">#退出数据库</span><br><span class="line">mysql&gt; exit;</span><br><span class="line"></span><br><span class="line">#CentOS 6重启数据库</span><br><span class="line">service mysqld restart</span><br><span class="line">#CentOS 7重启数据库</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>创建新的数据库，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#创建94imm数据库，moerats为数据库密码，自行修改</span><br><span class="line">mysql -uroot -pmoerats</span><br><span class="line">mysql &gt; create database 94imm;</span><br><span class="line">#退出</span><br><span class="line">mysql &gt; exit;</span><br></pre></td></tr></table></figure><p>此时<code>Mysql 5.7</code>算是安装完成了。</p><p>安装<code>Caddy</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br><span class="line">#备用地址</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Caddy&#x2F;caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure><h2 id="搭建站点"><a href="#搭建站点" class="headerlink" title="搭建站点"></a>搭建站点</h2><p><strong>1、安装Python3</strong><br>为了避免下面依赖安装出错，这里就不使用软件包安装<code>Python3</code>了，直接就使用脚本安装，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Python3&#x2F;CentOS_Python3.6.sh &amp;&amp; sh CentOS_Python3.6.sh</span><br><span class="line">#Debian系统</span><br><span class="line">wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Python3&#x2F;Debian_Python3.6.sh &amp;&amp; sh Debian_Python3.6.sh</span><br></pre></td></tr></table></figure><p><strong>2、搭建站点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#下载源码</span><br><span class="line">git clone https:&#x2F;&#x2F;git.coding.net&#x2F;zxy_coding&#x2F;94imm.git</span><br><span class="line">#安装依赖</span><br><span class="line">cd 94imm</span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line">#导入目录的数据库文件，这里数据库名94imm，用户名和密码root、moerats，请自行修改</span><br><span class="line">mysql -uroot -pmoerats 94imm &lt; silumz.sql</span><br><span class="line">#编辑配置文件</span><br><span class="line">nano silumz&#x2F;settings.py</span><br></pre></td></tr></table></figure><p>填上你的数据库信息，大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;94imm&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;moerats&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;PORT&#39;: &#39;3306&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再使用<code>Ctrl+x</code>、<code>y</code>保存退出。</p><p>编辑启动配置文件，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano uwsgi.ini</span><br></pre></td></tr></table></figure><p>然后看着改，大致修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#配置文件默认是将源码放在root目录，如果在其他目录可以自行修改</span><br><span class="line">#如果你要是用ip访问，将127.0.0.1:8000改成http&#x3D;0.0.0.0:8000，端口也可以改</span><br></pre></td></tr></table></figure><p>启动程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>此时站点地址为<code>ip:8000</code>。</p><p><strong>3、域名反代</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：不需要域名的跳过该步骤</span><br></pre></td></tr></table></figure><p>宝塔面板设置：<br>然后点击左侧网站-添加站点，填上你的域名，其他默认，然后点击域名设置-反向代理，<code>url</code>设置<code>http://127.0.0.1:8000</code>即可。然后打开你的域名就可以看到站点了。</p><p><code>Caddy</code>设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！且会自动给你配置ssl证书</span><br><span class="line">echo &quot;www.moerats.com &#123;</span><br><span class="line"> gzip</span><br><span class="line"> tls admin@moerats.com</span><br><span class="line"> proxy &#x2F; 127.0.0.1:8000</span><br><span class="line">&#125;&quot; &gt; &#x2F;usr&#x2F;local&#x2F;caddy&#x2F;Caddyfile</span><br><span class="line"></span><br><span class="line">#启动Caddy</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;caddy start</span><br></pre></td></tr></table></figure><h2 id="采集发布"><a href="#采集发布" class="headerlink" title="采集发布"></a>采集发布</h2><p>光搭建站点是不够的，还需要采集并自动发布图片，爬虫和发布脚本在<code>crawler</code>目录，详细脚本说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crawler开头的脚本为图片采集爬虫，然后也会自动给你发布到文章，目前有6个美女站的爬虫脚本，后期可能会更多</span><br><span class="line">AutoPost.py为自动发布脚本，将你本地的图片自动发布到搭建的站点中</span><br><span class="line">Compress.py为图片压缩脚本，可以自动压缩图片，减少硬盘占用</span><br></pre></td></tr></table></figure><p>这里以<code>mm131</code>爬虫脚本为例，先编辑<code>crawler_mm131.py</code>爬虫脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd crawler</span><br><span class="line">nano crawler_mm131.py</span><br></pre></td></tr></table></figure><p>大致修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#修改为你的数据库连接信息</span><br><span class="line">dbhost &#x3D; &#123;</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dbname&quot;: &quot;94imm&quot;,</span><br><span class="line">    &quot;user&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;moerats&quot;</span><br><span class="line">&#125;</span><br><span class="line">#修改爬取的页数和图片保存路径，page为页数，img_path为路径，自行修改</span><br><span class="line">for i in [&#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;xinggan&quot;, &quot;type_id&quot;: 1&#125;, &#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;qingchun&quot;, &quot;type_id&quot;: 3&#125;,</span><br><span class="line">          &#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;xiaohua&quot;, &quot;type_id&quot;: 3&#125;, &#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;chemo&quot;, &quot;type_id&quot;: 1&#125;,</span><br><span class="line">          &#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;qipao&quot;, &quot;type_id&quot;: 2&#125;, &#123;&quot;page&quot;: 1, &quot;type&quot;: &quot;mingxing&quot;, &quot;type_id&quot;: 1&#125;]:</span><br><span class="line">spider&#x3D;Spider(page_num&#x3D;i.get(&quot;page&quot;),img_path&#x3D;&#39;&#x2F;static&#x2F;images&#x2F;mm131&#x2F;&#39;,thread_num&#x3D;10,type_id&#x3D;i.get(&quot;type_id&quot;),type&#x3D;i.get(&quot;type&quot;))</span><br></pre></td></tr></table></figure><p>然后开始采集并自动发布到程序，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#其它爬虫使用方法也都一样</span><br><span class="line">python3 crawler_mm131.py</span><br></pre></td></tr></table></figure><p>然后就可以再图片站看到你的图片了，要是不显示的话，可以尝试删除<code>cache</code>目录里的缓存文件。</p><p>如果你的硬盘空间很小，可以使用压缩脚本压缩下，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#压缩时，会要你选择图片等路径</span><br><span class="line">python3 Compress.py</span><br></pre></td></tr></table></figure><p>如果压缩报错<code>No module named &#39;PIL&#39;</code>，那需要先使用命令<code>pip3 install Pillow</code>。</p><p>如果你要发布你本地的图片，就需要编辑<code>AutoPost.py</code>，填上你的数据库信息，再使用<code>python3 AutoPost.py</code>发布即可。</p><p>最后你运行爬虫脚本的时候出现<code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode</code>错误，那就需要先将系统的默认语言环境编码设置为<code>UTF-8</code>格式，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;export LANG&#x3D;en_US.UTF-8 LANGUAGE&#x3D;en_US.UTF-8&#39; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>对于修改模板，目前模板总共有<code>3</code>套，位于<code>templates</code>文件夹下，需要先修改<code>silumz</code>下<code>settings</code>文件中的模板配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#94imm为模板名</span><br><span class="line">TEMPLATES &#x3D; [</span><br><span class="line">&#123;</span><br><span class="line">    &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,</span><br><span class="line">    &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;+&quot;&#x2F;&quot;+&quot;94imm&quot;)]</span><br></pre></td></tr></table></figure><p>然后将模板目录下的<code>pagination.html</code>文件放入<code>python</code>安装目录的<code>pagination</code>下。</p><p>一般为<code>/usr/local/lib/python3.6/site-packages/dj_pagination/templates/pagination</code></p><p>然后自己修改模板，模板为<code>html</code>文件，可在页面添加统计代码和广告代码。</p><p>对于想了解更多的，或者修改模板，爬虫分类、数据库的可以看下以下参考文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.dablog.cn&#x2F;index.php&#x2F;archives&#x2F;7&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;sunsea.im&#x2F;139&#x2F;94imm_tips&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 双网卡绑定</title>
      <link href="/posts/36647/"/>
      <url>/posts/36647/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-双网卡绑定"><a href="#Linux-双网卡绑定" class="headerlink" title="Linux 双网卡绑定"></a>Linux 双网卡绑定</h1><p>　双网卡绑定这项继续特别适合利用再生产环境7x24小时的网络传输服务，采取双网卡绑定模式不仅可以提高网络传输速度，更重要的是，还可以确保其中一块网卡出现故障时，依然可以正常高效可靠的措施。下面我会使用两种方案来完成网双卡绑定 一种是传统的配置文件修改方案，另一种是最新的命令生成配置文件方案。</p><p><strong>主要常用的三种模式</strong></p><ul><li>mode0（平衡负载模式）：平时两块网卡均工作，且自动备援，但需要在与服务器本地网卡相连的交换机设备上进行端口聚合来支持绑定技术。</li><li>mode1（自动备援模式）：平时只有一块网卡工作，在它故障后自动替换为另外的网卡。</li><li>mode6（平衡负载模式）：平时两块网卡均工作，且自动备援，无须交换机设备提供辅助支持。(推荐)</li></ul><p><strong>其他模式介绍</strong></p><pre><code>balance-rr (mode=0)       默认, 有高可用 (容错) 和负载均衡的功能,  需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡).active-backup (mode=1)  只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。缺点是端口利用率比较低balance-xor (mode=2)     不常用broadcast (mode=3)        不常用802.3ad (mode=4)          IEEE 802.3ad 动态链路聚合，需要交换机配置，没用过balance-tlb (mode=5)      不常用balance-alb (mode=6)     有高可用 ( 容错 )和负载均衡的功能，不需要交换机配置  (流量分发到每个接口不是特别均衡)</code></pre><h2 id="bond-模式-修改配置文件实现双网卡绑定"><a href="#bond-模式-修改配置文件实现双网卡绑定" class="headerlink" title="bond 模式 修改配置文件实现双网卡绑定"></a>bond 模式 修改配置文件实现双网卡绑定</h2><p><strong>注意</strong><br><code>必须保证服务器有两块同网段网卡设备</code><br><strong>环境：</strong></p><ul><li>已添加 网卡1 ens33</li><li>已添加 网卡2 ens34</li></ul><p><strong>1、新建Master配置文件</strong></p><p>/etc/sysconfig/network-scripts/ifcfg-bond6</p><pre><code># 设备名DEVICE=bond6# 手动配置地址BOOTPROTO=none# 配置模式BONDING_OPTS=&quot;miimon=100 mode=6&quot;# IP地址IPADDR=192.168.1.100# 子网掩码PREFIX=24# 网关地址GATEWAY=192.168.1.1# DNS1地址DNS1=114.114.114.114# DNS2地址DNS2=8.8.8.8</code></pre><p><strong>2、新建Slave1配置文件</strong></p><p>/etc/sysconfig/network-scripts/ifcfg-ens33</p><pre><code># 设备名DEVICE=ens33# 手动获取                                                            BOOTPROTO=none# master设备名MASTER=bond0# 开启SLAVESLAVE=yes#是否允许普通用户管理此端口USERCTL=no</code></pre><p><strong>3、新建Slave2配置文件</strong></p><pre><code># 设备名DEVICE=ens34# 手动获取                                                            BOOTPROTO=none# master设备名MASTER=bond0# 开启SLAVESLAVE=yes#是否允许普通用户管理此端口USERCTL=no</code></pre><p><strong>4、重启网卡服务</strong></p><pre><code>systemctl restart network</code></pre><p><strong>5、查看详情信息</strong></p><pre><code>cat /proc/net/bonding/bond6 </code></pre><h2 id="bond-模式-nmcli命令行实现双网卡绑定"><a href="#bond-模式-nmcli命令行实现双网卡绑定" class="headerlink" title="bond 模式 nmcli命令行实现双网卡绑定"></a><strong>bond 模式 nmcli命令行实现双网卡绑定</strong></h2><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>必须保证服务器有两块同网段网卡设备</code><br><strong>环境：</strong></p><ul><li>已添加 网卡1 ens33</li><li>已添加 网卡2 ens34</li></ul><p><strong>1、创建Master配置文件</strong></p><pre><code># nmcli connection add type bond con-name 设备名称 ifname 设备名称 mode 模式号 miimon 毫秒nmcli connection add type bond con-name bond6 ifname bond6 mode 1 miimon 100</code></pre><p><code>注：miimon：指定当发现一个链路恢复时，在激活该链路之前的等待时间，以毫秒计算</code></p><p><strong>2、新建Slave1配置文件</strong></p><pre><code># nmcli connection add type bond-slave ifname 设备名称 master master设备名称nmcli connection add type bond-slave ifname ens33 master bond6</code></pre><p><strong>3、新建Slave2配置文件</strong></p><pre><code># nmcli connection add type bond-slave ifname 设备名称 master master设备名称nmcli connection add type bond-slave ifname ens34 master bond6</code></pre><p><strong>4、激活网路设备</strong></p><pre><code># 激活bond6网络设备nmcli connection up &quot;bond6&quot;# 激活ens33网络设备nmcli connection up &quot;bond-slave-ens33&quot;# 激活ens34网络设备nmcli connection up &quot;bond-slave-ens33&quot;</code></pre><p><strong>5、查看详情信息</strong></p><pre><code>cat /proc/net/bonding/bond6 </code></pre><a id="more"></a><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双网卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理负载均衡</title>
      <link href="/posts/51205/"/>
      <url>/posts/51205/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-反向代理"><a href="#第一章-反向代理" class="headerlink" title="第一章 反向代理"></a>第一章 反向代理</h1><h2 id="Nginx代理服务基本概述"><a href="#Nginx代理服务基本概述" class="headerlink" title="Nginx代理服务基本概述"></a>Nginx代理服务基本概述</h2><p>1.代理一词往往并不陌生, 该服务我们常常用到如(代理理财、代理租房、代理收货等等)，如下图所示</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-a3b5875e1b44445a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>2.在没有代理模式的情况下，客户端和 Nginx 服务端，都是客户端直接请求服务端，服务端直接响应客户端。</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b0f9334374c9a40f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>3.那么在互联网请求里面, 客户端往往无法直接向服务端发起请求, 那么就需要用到代理服务, 来实现客户端和服务通信，如下图所示</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-7ef0e8f177241a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p>以访问Goo为例，客户端连接到VPN相当于正向代理<br>VPN代理请求访问后端服务器并返回属于反向代理</p><h2 id="Nginx代理服务支持的协议"><a href="#Nginx代理服务支持的协议" class="headerlink" title="Nginx代理服务支持的协议"></a>Nginx代理服务支持的协议</h2><p>1.Nginx 作为代理服务，可支持的代理协议非常的多，具体如下图</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-e812f49d132dc120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>2.如果将 Nginx 作为反向代理服务，常常会用到如下几种代理协议，如下图所示</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-9338a70ac645620d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>3.反向代理模式与 Nginx 代理模块总结如表格所示</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-5dd0c477e40e6079.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/742/format/webp" alt="img"></p><h2 id="Nginx反向代理配置语法"><a href="#Nginx反向代理配置语法" class="headerlink" title="Nginx反向代理配置语法"></a>Nginx反向代理配置语法</h2><p>1.Nginx代理配置语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Syntax: proxy_pass URL;</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: location, <span class="keyword">if</span> in location, limit_except</span><br><span class="line">http:<span class="comment">//localhost:8000/uri/</span></span><br><span class="line">http:<span class="comment">//192.168.56.11:8000/uri/</span></span><br><span class="line">http:<span class="comment">//unix:/tmp/backend.socket:/uri/</span></span><br></pre></td></tr></table></figure><p>2.添加传递给后端服务器的请求头信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Syntax: proxy_set_header field value;</span><br><span class="line"><span class="keyword">Default</span>: proxy_set_header Host $proxy_host;</span><br><span class="line">proxy_set_header Connection close;</span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="comment"># 用户请求的时候 HOST 的值是 www.oldboy.com, 那么代理服务会像后端传递请求的还是 www.oldboy.com</span></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line"><span class="comment"># 将$remote_addr 的值放进变量 X-Real-IP 中， $remote_addr 的值为客户端的 ip</span></span><br><span class="line">proxy_set_header X-<span class="keyword">Real</span>-IP $remote_addr;</span><br><span class="line"><span class="comment"># 客户端通过代理服务访问后端服务, 后端服务通过该变量会记录真实客户端地址</span></span><br><span class="line">proxy_set_header X-Forwarded-<span class="keyword">For</span> $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><p>3.代理到后端的TCP连接数，响应，返回等超时时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nginx 代理与后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">Syntax: proxy_connect_timeout time;</span><br><span class="line"><span class="keyword">Default</span>: proxy_connect_timeout <span class="number">60</span>s;</span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="comment">//nginx 代理等待后端服务器的响应时间</span></span><br><span class="line">Syntax: proxy_read_timeout time;</span><br><span class="line"><span class="keyword">Default</span>: proxy_read_timeout <span class="number">60</span>s;</span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="comment">//后端服务器数据回传给 nginx 代理超时时间</span></span><br><span class="line">Syntax: proxy_send_timeout time;</span><br><span class="line"><span class="keyword">Default</span>: proxy_send_timeout <span class="number">60</span>s;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><p>4.代理缓冲区</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nignx 会把后端返回的内容先放到缓冲区当中，然后再返回给客户端,边收边传, 不是全部接收完再传给客户端</span></span><br><span class="line">Syntax: proxy_buffering on | off;</span><br><span class="line"><span class="keyword">Default</span>: proxy_buffering on;</span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="comment">//设置 nginx 代理保存用户头信息的缓冲区大小</span></span><br><span class="line">Syntax: proxy_buffer_size size;</span><br><span class="line"><span class="keyword">Default</span>: proxy_buffer_size <span class="number">4</span>k|<span class="number">8</span>k;</span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="comment">//proxy_buffers 缓冲区</span></span><br><span class="line">Syntax: proxy_buffers number size;</span><br><span class="line"><span class="keyword">Default</span>: proxy_buffers <span class="number">8</span> <span class="number">4</span>k|<span class="number">8</span>k;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><p>5.proxy代理网站常用配置<br>将配置写入新文件，调用时使用include引用即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># cat /etc/nginx/proxy_params </span></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_connect_timeout <span class="number">30</span>;</span><br><span class="line">proxy_send_timeout <span class="number">60</span>;</span><br><span class="line">proxy_read_timeout <span class="number">60</span>;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffer_size <span class="number">32</span>k;</span><br><span class="line">proxy_buffers <span class="number">4</span> <span class="number">128</span>k;</span><br></pre></td></tr></table></figure><p>6.代理配置location时调用，方便后面多个location重复使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//127.0.0.1:8080;</span></span><br><span class="line">    <span class="keyword">include</span> proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx反向代理实战"><a href="#Nginx反向代理实战" class="headerlink" title="Nginx反向代理实战"></a>Nginx反向代理实战</h2><p>配置关系图：</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-624ce98a23326448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>1.环境准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lb01       代理服务器</span><br><span class="line">web01   web服务器</span><br></pre></td></tr></table></figure><p>2.web01服务器配置<br>配置一个网站，监听在 8080，此时网站仅 172 网段的用户能访问</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cd /etc/nginx/conf.d/</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># vim web.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">        deny <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">        allow all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># mkdir /code</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># echo &quot;web01-7&quot; &gt;/code/index.html</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>3.配置lb01代理服务器<br>配置监听 eth0 的 80 端口，使 10.0.0.0 网段的用户，能够通过代理服务器访问到后端的172.16.1.7 的 8080 端口站点内容</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># cd /etc/nginx/conf.d/</span></span><br><span class="line">[<span class="meta">root@lb01 conf.d</span>]<span class="meta"># cat proxy_web_node1.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name nginx.oldboy.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//172.16.1.7:8080;</span></span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">root@lb01 conf.d</span>]<span class="meta"># systemctl enable nginx</span></span><br><span class="line">[<span class="meta">root@lb01 conf.d</span>]<span class="meta"># systemctl start nginx</span></span><br></pre></td></tr></table></figure><h1 id="第二章-负载均衡"><a href="#第二章-负载均衡" class="headerlink" title="第二章 负载均衡"></a>第二章 负载均衡</h1><h2 id="Nginx负载均衡概述"><a href="#Nginx负载均衡概述" class="headerlink" title="Nginx负载均衡概述"></a>Nginx负载均衡概述</h2><h3 id="为什么需要负载均衡"><a href="#为什么需要负载均衡" class="headerlink" title="为什么需要负载均衡"></a>为什么需要负载均衡</h3><p>我们的 Web 服务器直接面向用户，往往要承载大量并发请求，单台服务器难以负荷，我使用多台 WEB 服务器组成集群，前端使用 Nginx 负载均衡，将请求分散的打到我们的后端服务器集群中，实现负载的分发。那么会大大提升系统的吞吐率、请求性能、高容灾</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-3e3daa9bf57283c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>往往我们接触的最多的是 SLB(Server Load Balance)负载均衡，实现最多的也是 SLB、那么 SLB 它的调度节点和服务节点通常是在一个地域里面。那么它在这个小的逻辑地域里面决定了他对部分服务的实时性、响应性是非常好的。<br>所以说当海量用户请求过来以后，它同样是请求调度节点，调度节点将用户的请求转发给后端对应的服务节点，服务节点处理完请求后在转发给调度节点，调度节点最后响应给用户节点。这样也能实现一个均衡的作用，那么Nginx 则是一个典型的 SLB</p><h2 id="Nginx负载均衡配置场景"><a href="#Nginx负载均衡配置场景" class="headerlink" title="Nginx负载均衡配置场景"></a>Nginx负载均衡配置场景</h2><h3 id="1-四层负载均衡"><a href="#1-四层负载均衡" class="headerlink" title="1.四层负载均衡"></a>1.四层负载均衡</h3><p>所谓四层负载均衡指的是 OSI 七层模型中的传输层，那么传输层 Nginx 已经能支持 TCP/IP 的控制，所以只需要对客户端的请求进行 TCP/IP 协议的包转发就可以实现负载均衡，那么它的好处是性能非常快、只需要底层进行应用处理，而不需要进行一些复杂的逻辑</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-969d03f8082a1915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="2-七层负载均衡"><a href="#2-七层负载均衡" class="headerlink" title="2.七层负载均衡"></a>2.七层负载均衡</h3><p>七层负载均衡它是在应用层，那么它可以完成很多应用方面的协议请求，比如我们说的 http 应用的负载均衡，它可以实现 http 信息的改写、头信息的改写、安全应用规则控制、 URL 匹配规则控制、以及转发、 rewrite 等等的规则，所以在应用层的服务里面，我们可以做的内容就更多，那么 Nginx 则是一个典型的七层负载均衡 SLB</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-f61309f2feaf95e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="3-四层负载均衡与七层负载均衡区别"><a href="#3-四层负载均衡与七层负载均衡区别" class="headerlink" title="3.四层负载均衡与七层负载均衡区别"></a>3.四层负载均衡与七层负载均衡区别</h3><p>四层负载均衡数据包在底层就进行了分发，而七层负载均衡数据包则是在最顶层进行分发、由此可以看出，七层负载均衡效率没有四负载均衡高。<br>但七层负载均衡更贴近于服务，如:http 协议就是七层协议，我们可以用 Nginx 可以作会话保持， URL 路径规则匹配、 head 头改写等等，这些是四层负载均衡无法实现的</p><h2 id="Nginx负载均衡调度算法"><a href="#Nginx负载均衡调度算法" class="headerlink" title="Nginx负载均衡调度算法"></a>Nginx负载均衡调度算法</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-373a5e02f00f66ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="Nginx负载均衡配置参数"><a href="#Nginx负载均衡配置参数" class="headerlink" title="Nginx负载均衡配置参数"></a>Nginx负载均衡配置参数</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-3f7e8e92e3982c78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/746/format/webp" alt="img"></p><h2 id="Nginx反向代理负载均衡关系图"><a href="#Nginx反向代理负载均衡关系图" class="headerlink" title="Nginx反向代理负载均衡关系图"></a>Nginx反向代理负载均衡关系图</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-c02fb171c4f25977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/704/format/webp" alt="img"></p><h2 id="Nginx负载均衡实战"><a href="#Nginx负载均衡实战" class="headerlink" title="Nginx负载均衡实战"></a>Nginx负载均衡实战</h2><h3 id="1-规划分类"><a href="#1-规划分类" class="headerlink" title="1.规划分类"></a>1.规划分类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/upload     <span class="number">10.0</span><span class="number">.0</span><span class="number">.8</span>:<span class="number">80</span>     upload服务器</span><br><span class="line">/<span class="keyword">static</span>     <span class="number">10.0</span><span class="number">.0</span><span class="number">.7</span>:<span class="number">80</span>     <span class="keyword">static</span>静态服务器</span><br><span class="line">/           <span class="number">10.0</span><span class="number">.0</span><span class="number">.9</span>:<span class="number">80</span>     默认服务器</span><br></pre></td></tr></table></figure><h3 id="2-创建地址池"><a href="#2-创建地址池" class="headerlink" title="2.创建地址池"></a>2.创建地址池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream upload_pools&#123;</span><br><span class="line">    server 10.0.0.8:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream static_pools&#123;</span><br><span class="line">    server 10.0.0.7:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream defaule_pools&#123;</span><br><span class="line">    server 10.0.0.9:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-匹配条件"><a href="#3-匹配条件" class="headerlink" title="3.匹配条件"></a>3.匹配条件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location /<span class="built_in">static</span>/ &#123; </span><br><span class="line">    proxy_pass http:<span class="comment">//static_pools;</span></span><br><span class="line">    <span class="keyword">include</span> proxy_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###将符合upload的请求交给上传服务器池upload_pools,配置如下</span></span><br><span class="line">location /upload/ &#123; </span><br><span class="line">    proxy_pass http:<span class="comment">//upload_pools;</span></span><br><span class="line">    <span class="keyword">include</span> proxy_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###不符合上述规则的请求,默认全交给动态服务器池default_pools,配置如下:</span></span><br><span class="line">location / &#123; </span><br><span class="line">    proxy_pass http:<span class="comment">//default_pools;</span></span><br><span class="line">    <span class="keyword">include</span> proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-组合在一起"><a href="#4-组合在一起" class="headerlink" title="4.组合在一起"></a>4.组合在一起</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># cat /etc/nginx/conf.d/node_proxy.conf</span></span><br><span class="line">upstream upload_pools &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.0</span><span class="number">.8</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line">upstream static_pools &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.0</span><span class="number">.7</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line">upstream default_pools &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.0</span><span class="number">.9</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name www.oldboy.com;</span><br><span class="line">    location /<span class="built_in">static</span>/ &#123; </span><br><span class="line">        proxy_pass http:<span class="comment">//static_pools;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location /upload/ &#123; </span><br><span class="line">        proxy_pass http:<span class="comment">//upload_pools;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass http:<span class="comment">//default_pools;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建代码环境"><a href="#5-创建代码环境" class="headerlink" title="5.创建代码环境"></a>5.创建代码环境</h3><p>每个虚拟机存放的网页路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www.oldboy.com/index.html</span><br><span class="line">www.oldboy.com/upload/index.html</span><br><span class="line">www.oldboy.com/<span class="keyword">static</span>/index.html</span><br></pre></td></tr></table></figure><p>创建目录及测试页面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/html/www/&#123;upload,static&#125;</span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;<span class="subst">$(hostname)</span> default&quot;</span> &gt;/data/html/www/index.html </span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;<span class="subst">$(hostname)</span> upload&quot;</span> &gt;/data/html/www/upload/index.html </span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;<span class="subst">$(hostname)</span> static&quot;</span> &gt;/data/html/www/static/index.html </span><br></pre></td></tr></table></figure><h3 id="6-进行测试"><a href="#6-进行测试" class="headerlink" title="6.进行测试"></a>6.进行测试</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># curl www.oldboy.com/index.html</span></span><br><span class="line">sweb01 <span class="keyword">default</span></span><br><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># curl www.oldboy.com/static/</span></span><br><span class="line">web01 <span class="keyword">static</span></span><br><span class="line">[<span class="meta">root@lb01 ~</span>]<span class="meta"># curl www.oldboy.com/upload/</span></span><br><span class="line">web02 upload</span><br></pre></td></tr></table></figure><h1 id="第三章-根据条件转发实战"><a href="#第三章-根据条件转发实战" class="headerlink" title="第三章 根据条件转发实战"></a>第三章 根据条件转发实战</h1><h2 id="3-1-根据文件类型转发"><a href="#3-1-根据文件类型转发" class="headerlink" title="3.1 根据文件类型转发"></a>3.1 根据文件类型转发</h2><h3 id="转发需求"><a href="#转发需求" class="headerlink" title="转发需求"></a>转发需求</h3><p>只需修改nginx.conf的配置文件中的loaction区块代码即可</p><h3 id="lb配置文件"><a href="#lb配置文件" class="headerlink" title="lb配置文件"></a>lb配置文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*.(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//static_pools;</span></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-<span class="keyword">For</span> $remote_addr;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    upstream server_pools &#123;</span><br><span class="line">        server <span class="number">10.0</span><span class="number">.0</span><span class="number">.7</span> weight=<span class="number">1</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">        server <span class="number">10.0</span><span class="number">.0</span><span class="number">.8</span> weight=<span class="number">1</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">        server <span class="number">10.0</span><span class="number">.0</span><span class="number">.9</span> weight=<span class="number">1</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10</span>s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-动静分离"><a href="#3-2-动静分离" class="headerlink" title="3.2 动静分离"></a>3.2 动静分离</h2><h3 id="转发需求-1"><a href="#转发需求-1" class="headerlink" title="转发需求"></a>转发需求</h3><p>动态资源转发到php服务器<br>静态资源转发到静态服务器</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 /etc/nginx/conf.d]<span class="comment"># cat ds_proxy.conf </span></span><br><span class="line">root@lb01 conf.d]<span class="comment"># cat ds_proxy.conf</span></span><br><span class="line">upstream <span class="built_in">static</span> &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.0</span><span class="number">.7</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line">upstream php &#123;</span><br><span class="line">    server <span class="number">10.0</span><span class="number">.0</span><span class="number">.8</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name ds.oldboy.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(png|jpg|gif)$ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//static;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.php$ &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//php;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-根据客户端转发"><a href="#3-3-根据客户端转发" class="headerlink" title="3.3 根据客户端转发"></a>3.3 根据客户端转发</h2><h3 id="转发需求-2"><a href="#转发需求-2" class="headerlink" title="转发需求"></a>转发需求</h3><p>手机和电脑 访问相同的网站—-结果不同</p><h3 id="lb服务器配置文件"><a href="#lb服务器配置文件" class="headerlink" title="lb服务器配置文件"></a>lb服务器配置文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 conf.d]<span class="comment"># cat sj.conf    </span></span><br><span class="line">upstream iphone &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">9091</span>;</span><br><span class="line">&#125;</span><br><span class="line">upstream android &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">9090</span>;</span><br><span class="line">&#125;</span><br><span class="line">upstream pc &#123;</span><br><span class="line">    server <span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span>:<span class="number">9092</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name sj.oldboy.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment">#默认跳转至 pc 站点</span></span><br><span class="line">        proxy_pass http:<span class="comment">//pc;</span></span><br><span class="line">        <span class="keyword">include</span> proxy_params;</span><br><span class="line">        <span class="comment">#如果客户端是 Iphone 则跳转到 iphone 的资源池</span></span><br><span class="line">        <span class="keyword">if</span> ($http_user_agent ~* <span class="string">&quot;Iphone&quot;</span>) &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//iphone;</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">#如果客户端是 Android 则跳转到 android 的资源池</span></span><br><span class="line">        <span class="keyword">if</span> ($http_user_agent ~* <span class="string">&quot;Android&quot;</span>)&#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//android;</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">#如果客户端是 IE 浏览器，则返回 403 错误。</span></span><br><span class="line">        <span class="keyword">if</span> ($http_user_agent ~* <span class="string">&quot;msie&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web服务器配置"><a href="#web服务器配置" class="headerlink" title="web服务器配置"></a>web服务器配置</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># cat sj.conf    </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">9090</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/android;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">9091</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/iphone;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">9092</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /code/pc;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># mkdir -p /code/&#123;android,iphone,pc&#125;</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># echo &quot;PC&quot; &gt; /code/pc/index.html</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># echo &quot;Iphone&quot; &gt; /code/iphone/index.html</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># echo &quot;Android&quot; &gt; /code/android/index.html</span></span><br><span class="line">[<span class="meta">root@web01 conf.d</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@lb01 conf.d]</span># <span class="selector-tag">curl</span> <span class="selector-tag">-A</span> &quot;<span class="selector-tag">chrome</span>&quot; <span class="selector-tag">sj</span><span class="selector-class">.oldboy</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">PC</span></span><br><span class="line"><span class="selector-attr">[root@lb01 conf.d]</span># <span class="selector-tag">curl</span> <span class="selector-tag">-A</span> &quot;<span class="selector-tag">iphone</span>&quot; <span class="selector-tag">sj</span><span class="selector-class">.oldboy</span><span class="selector-class">.com</span>      </span><br><span class="line"><span class="selector-tag">Iphone</span></span><br><span class="line"><span class="selector-attr">[root@lb01 conf.d]</span># <span class="selector-tag">curl</span> <span class="selector-tag">-A</span> &quot;<span class="selector-tag">android</span>&quot; <span class="selector-tag">sj</span><span class="selector-class">.oldboy</span><span class="selector-class">.com</span>      </span><br><span class="line"><span class="selector-tag">Android</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Nginx反向代理 </tag>
            
            <tag> Nginx负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的引入</title>
      <link href="/posts/39421/"/>
      <url>/posts/39421/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-Docker容器介绍"><a href="#第1章-Docker容器介绍" class="headerlink" title="第1章 Docker容器介绍"></a>第1章 Docker容器介绍</h1><h2 id="1-1-docker是什么"><a href="#1-1-docker是什么" class="headerlink" title="1.1 docker是什么"></a>1.1 docker是什么</h2><p>Docker 是 Docker.Inc 公司开源的一个基于 LXC技术之上构建的Container容器引擎， 源代码托管在 GitHub 上, 基于Go语言并遵从Apache2.0协议开源。<br>Docker是通过内核虚拟化技术（namespaces及cgroups等）来提供容器的资源隔离与安全保障等。由于Docker通过操作系统层的虚拟化实现隔离，所以Docker容器在运行时，不需要类似虚拟机（VM）额外的操作系统开销，提高资源利用率。</p><h2 id="1-2-容器与虚拟机对比"><a href="#1-2-容器与虚拟机对比" class="headerlink" title="1.2 容器与虚拟机对比"></a>1.2 容器与虚拟机对比</h2><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/usr/uploads/2020/07/1147648620.png" alt="Docker对比图"></p><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/usr/uploads/2020/07/2783417689.png" alt="启动速度对比"></p><h2 id="1-3-docker的三个重要概念"><a href="#1-3-docker的三个重要概念" class="headerlink" title="1.3 docker的三个重要概念"></a>1.3 docker的三个重要概念</h2><p>Image(镜像):<br>那么镜像到底是什么呢？Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。<br>Container(容器)<br>容器(Container)的定义和镜像(Image)几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。<br>Repository(仓库)<br>镜像仓库是 Docker 用来集中存放镜像文件的地方，类似于我们之前常用的代码仓库。<br>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。<br>我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 Latest 作为默认标签。</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/usr/uploads/2020/07/497164864.png" alt="构成图"></p><h2 id="1-4-docker的组成部分"><a href="#1-4-docker的组成部分" class="headerlink" title="1.4 docker的组成部分"></a>1.4 docker的组成部分</h2><p>docker是传统的CS架构分为docker client和docker server<br>Docker 客户端是 Docker 用户与 Docker 交互的主要方式。当您使用 Docker 命令行运行命令时，Docker 客户端将这些命令发送给服务器端，服务端将执行这些命令。<br>Docker 命令使用 Docker API 。Docker 客户端可以与多个服务端进行通信。</p><p><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/usr/uploads/2020/07/3695901469.png" alt="请输入图片描述"></p><h1 id="第2章-Docker安装部署"><a href="#第2章-Docker安装部署" class="headerlink" title="第2章 Docker安装部署"></a>第2章 Docker安装部署</h1><h2 id="2-1-国内源安装docker-ce"><a href="#2-1-国内源安装docker-ce" class="headerlink" title="2.1 国内源安装docker-ce"></a>2.1 国内源安装docker-ce</h2><pre><code># step 1: 安装必要的一些系统工具sudo yum install -y yum-utils device-mapper-persistent-data lvm2# Step 2: 添加软件源信息sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3: 更新并安装Docker-CEsudo yum makecache fastsudo yum -y install docker-ce# Step 4: 开启Docker服务sudo service docker start# 注意：# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。# vim /etc/yum.repos.d/docker-ee.repo#   将[docker-ce-test]下方的enabled=0修改为enabled=1## 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# yum list docker-ce.x86_64 --showduplicates | sort -r#   Loading mirror speeds from cached hostfile#   Loaded plugins: branch, fastestmirror, langpacks#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable#   Available Packages# Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)# sudo yum -y install docker-ce-[VERSION]</code></pre><p>安装校验</p><pre><code>root@iZbp12adskpuoxodbkqzjfZ:$ docker versionClient: Version:      17.03.0-ce API version:  1.26 Go version:   go1.7.5 Git commit:   3a232c8 Built:        Tue Feb 28 07:52:04 2017 OS/Arch:      linux/amd64Server: Version:      17.03.0-ce API version:  1.26 (minimum version 1.12) Go version:   go1.7.5 Git commit:   3a232c8 Built:        Tue Feb 28 07:52:04 2017 OS/Arch:      linux/amd64 Experimental: false</code></pre><h2 id="2-2-（国内远镜像加速）等配置"><a href="#2-2-（国内远镜像加速）等配置" class="headerlink" title="2.2 （国内远镜像加速）等配置"></a>2.2 （国内远镜像加速）等配置</h2><pre><code>[root@docker01 ~]# cat /etc/docker/daemon.json &#123;    &quot;graph&quot;: &quot;/data/docker&quot;,    &quot;storage-driver&quot;: &quot;overlay2&quot;,    &quot;insecure-registries&quot;: [&quot;registry.access.redhat.com&quot;,&quot;quay.io&quot;],    &quot;registry-mirrors&quot;: [&quot;https://q2gr04ke.mirror.aliyuncs.com&quot;],    &quot;bip&quot;: &quot;192.168.1.1/24&quot;,    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],    &quot;live-restore&quot;: true&#125;[root@docker01 ~]# systemctl restart docker</code></pre><h2 id="2-3-快速安装"><a href="#2-3-快速安装" class="headerlink" title="2.3 快速安装"></a>2.3 快速安装</h2><p>思路：</p><pre><code>1.开启yum缓存2.全新环境安装docker3.将缓存的包全部打包出来4.安装的时候使用rpm -ivh *.rpm方式安装</code></pre><h2 id="2-4-运行第一个容器"><a href="#2-4-运行第一个容器" class="headerlink" title="2.4 运行第一个容器"></a>2.4 运行第一个容器</h2><p>运行一个Hello world</p><pre><code>docker run alpine /bin/echo &quot;Hello world&quot;</code></pre><h1 id="第3章-Docker镜像和容器管理"><a href="#第3章-Docker镜像和容器管理" class="headerlink" title="第3章 Docker镜像和容器管理"></a>第3章 Docker镜像和容器管理</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h2 id="3-1-1-搜索镜像"><a href="#3-1-1-搜索镜像" class="headerlink" title="3.1.1 搜索镜像"></a>3.1.1 搜索镜像</h2><p>选择镜像建议：</p><pre><code>1.优先选择官方的2.选择星星多的docker search centos</code></pre><h2 id="3-1-2-获取镜像"><a href="#3-1-2-获取镜像" class="headerlink" title="3.1.2 获取镜像"></a>3.1.2 获取镜像</h2><pre><code>docker pull centosdocker pull busyboxdocker pull busybox:1.29</code></pre><h2 id="3-1-3-查看镜像"><a href="#3-1-3-查看镜像" class="headerlink" title="3.1.3 查看镜像"></a>3.1.3 查看镜像</h2><pre><code>docker images</code></pre><h2 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h2><pre><code>docker rmi centos</code></pre><h2 id="3-1-5-导出镜像"><a href="#3-1-5-导出镜像" class="headerlink" title="3.1.5 导出镜像"></a>3.1.5 导出镜像</h2><pre><code>docker save -o centos.tar centos:latest</code></pre><h2 id="3-1-6-导入镜像"><a href="#3-1-6-导入镜像" class="headerlink" title="3.1.6 导入镜像"></a>3.1.6 导入镜像</h2><pre><code>docker load  &lt; centos.tar</code></pre><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h2 id="3-2-1-启动容器"><a href="#3-2-1-启动容器" class="headerlink" title="3.2.1 启动容器"></a>3.2.1 启动容器</h2><pre><code>docker run -d -p 80:80 nginx docker run --name mydocker -t -i centos /bin/bash</code></pre><p><strong>报错：</strong></p><pre><code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></pre><p><strong>解决方法：</strong></p><pre><code>vim /usr/lib/sysctl.d/00-system.confnet.ipv4.ip_forward=1systemctl restart network</code></pre><p>3.2.2 停止容器</p><hr><pre><code>docker stop </code></pre><h2 id="3-2-3-查看容器"><a href="#3-2-3-查看容器" class="headerlink" title="3.2.3 查看容器"></a>3.2.3 查看容器</h2><pre><code>docker ps docker ps -a docker ps -qdocker ps -aq</code></pre><h2 id="3-2-4-进入容器"><a href="#3-2-4-进入容器" class="headerlink" title="3.2.4 进入容器"></a>3.2.4 进入容器</h2><pre><code>docker exec会分配一个新的终端ttydocker exec -it 容器ID  /bin/bash docker attach会使用同一个终端docker attach 容器ID</code></pre><h2 id="3-2-5-删除容器"><a href="#3-2-5-删除容器" class="headerlink" title="3.2.5 删除容器"></a>3.2.5 删除容器</h2><p>删除单个容器</p><pre><code>docker rm 容器ID</code></pre><p>批量删除容器</p><pre><code>docker stop $(docker ps -q)docker rm $(docker ps -aq)</code></pre><h1 id="容器内部修改软件源（Nginx举例）"><a href="#容器内部修改软件源（Nginx举例）" class="headerlink" title="容器内部修改软件源（Nginx举例）"></a>容器内部修改软件源（Nginx举例）</h1><pre><code>tee /etc/apt/sources.list &lt;&lt;EOF deb http://mirrors.163.com/debian/ jessie main non-free contrib   deb http://mirrors.163.com/debian/ jessie-updates main non-free contribEOFapt-get update apt-get -y install curl</code></pre><h1 id="第4章-Docker网络管理"><a href="#第4章-Docker网络管理" class="headerlink" title="第4章 Docker网络管理"></a>第4章 Docker网络管理</h1><h2 id="4-1-随机映射端口"><a href="#4-1-随机映射端口" class="headerlink" title="4.1 随机映射端口"></a>4.1 随机映射端口</h2><pre><code>docker run -P </code></pre><h2 id="4-2-指定映射端口"><a href="#4-2-指定映射端口" class="headerlink" title="4.2 指定映射端口"></a>4.2 指定映射端口</h2><p>p 宿主机端口:容器端口</p><pre><code>-p 80:80 -p 443:443</code></pre><p>-p 宿主机IP:宿主机端口:容器端口<br>如果想多个容器使用8080端口，可以通过添加多个IP地址实现</p><pre><code>ifconfig eth0:1 10.0.1.13 updocker run -d -p 10.0.1.11:8080:80 nginx:latestdocker run -d -p 10.0.1.13:8080:80 nginx:latest</code></pre><p>进入容器里修改站点目录，然后访问测试</p><pre><code>docker exec -it bdb2a4e7e24d /bin/bashecho &quot;web01&quot; &gt; /usr/share/nginx/html/index.htmldocker exec -it 31c1de138dda /bin/bashecho &quot;web02&quot; &gt; /usr/share/nginx/html/index.html</code></pre><p>访问测试：</p><pre><code>[root@docker01 ~]# curl 10.0.1.11:8080web02[root@docker01 ~]# curl 10.0.1.13:8080web01</code></pre><h1 id="第5章-Docker数据卷管理"><a href="#第5章-Docker数据卷管理" class="headerlink" title="第5章 Docker数据卷管理"></a>第5章 Docker数据卷管理</h1><h2 id="5-1-持久化数据卷"><a href="#5-1-持久化数据卷" class="headerlink" title="5.1 持久化数据卷"></a>5.1 持久化数据卷</h2><p>v 宿主机目录:容器内目录<br>下面我们来创建一个html5小游戏</p><h2 id="5-1-1-创建游戏代码目录"><a href="#5-1-1-创建游戏代码目录" class="headerlink" title="5.1.1 创建游戏代码目录"></a>5.1.1 创建游戏代码目录</h2><pre><code>mkdir /data/xiaoniao -pcd /data/unzip xiaoniaofeifei.zip  -d xiaoniao /</code></pre><h2 id="5-1-2-创建容器并映射数据卷"><a href="#5-1-2-创建容器并映射数据卷" class="headerlink" title="5.1.2 创建容器并映射数据卷"></a>5.1.2 创建容器并映射数据卷</h2><pre><code>docker run -d  -p 80:80 -v /data/xiaoniao:/usr/share/nginx/html nginx:latestdocker ps</code></pre><h2 id="5-1-3-访问游戏页面"><a href="#5-1-3-访问游戏页面" class="headerlink" title="5.1.3 访问游戏页面"></a>5.1.3 访问游戏页面</h2><pre><code>10.0.1.11</code></pre><h2 id="5-2-持久化数据卷容器"><a href="#5-2-持久化数据卷容器" class="headerlink" title="5.2 持久化数据卷容器"></a>5.2 持久化数据卷容器</h2><p><code>volumes-from</code> (跟某一个已经存在的容器挂载相同的卷)<br>查看当前容器有哪些卷</p><pre><code>docker volume ls</code></pre><p>下面我们利用容器卷创建一个小游戏</p><h2 id="5-2-1-创建一个容器卷"><a href="#5-2-1-创建一个容器卷" class="headerlink" title="5.2.1 创建一个容器卷"></a>5.2.1 创建一个容器卷</h2><pre><code>docker run -d  -p 8080:80 --volume xiaoniao:/usr/share/nginx/html nginx:latestdocker volume ls</code></pre><h2 id="5-2-2-查看卷的目录"><a href="#5-2-2-查看卷的目录" class="headerlink" title="5.2.2 查看卷的目录"></a>5.2.2 查看卷的目录</h2><pre><code>docker volume inspect xiaoniao</code></pre><h2 id="5-2-3-复制代码目录到容器卷目录"><a href="#5-2-3-复制代码目录到容器卷目录" class="headerlink" title="5.2.3 复制代码目录到容器卷目录"></a>5.2.3 复制代码目录到容器卷目录</h2><pre><code>\cp -a /data/xiaoniao/* /var/lib/docker/volumes/xiaoniao/_data/</code></pre><h2 id="5-2-4-使用容器卷创建新容器"><a href="#5-2-4-使用容器卷创建新容器" class="headerlink" title="5.2.4 使用容器卷创建新容器"></a>5.2.4 使用容器卷创建新容器</h2><pre><code>docker run -d  -p 8090:80 --volume xiaoniao:/usr/share/nginx/html nginx:latest</code></pre><h2 id="5-3-实验-访问不同端口展示不同页面"><a href="#5-3-实验-访问不同端口展示不同页面" class="headerlink" title="5.3 实验-访问不同端口展示不同页面"></a>5.3 实验-访问不同端口展示不同页面</h2><p><code>需求：</code><br>访问8080端口，展示xiaoniao首页<br>访问8090端口，展示游戏集合页面</p><h2 id="5-3-1-准备nginx配置文件"><a href="#5-3-1-准备nginx配置文件" class="headerlink" title="5.3.1 准备nginx配置文件"></a>5.3.1 准备nginx配置文件</h2><pre><code>[root@docker01 ~]# cat /data/game.conf server &#123;    listen       8080;    server_name  localhost;    location / &#123;        root   /opt/game/;        index  index.html index.htm;    &#125;&#125;server &#123;    listen       8090;    server_name  localhost;    location / &#123;        root   /opt/xiaoniao/;        index  index.html index.htm;    &#125;&#125;</code></pre><h2 id="5-3-2-上传代码目录"><a href="#5-3-2-上传代码目录" class="headerlink" title="5.3.2 上传代码目录"></a>5.3.2 上传代码目录</h2><pre><code>[root@docker01 /data]# ll 总用量 18896drwxr-xr-x 5 root root       73 9月   7 23:03 game-rw-r--r-- 1 root root      309 9月   7 22:57 game.conf-rw-r--r-- 1 root root 19248295 8月  28 09:48 html5.zipdrwxr-xr-x 3 root root       92 9月   7 22:15 xiaoniao-rw-r--r-- 1 root root    91014 9月   7 22:11 xiaoniaofeifei.zip</code></pre><h2 id="5-3-3-创建容器并挂载"><a href="#5-3-3-创建容器并挂载" class="headerlink" title="5.3.3 创建容器并挂载"></a>5.3.3 创建容器并挂载</h2><p>需要挂载的内容：<br>1.nginx配置文件<br>2.游戏目录<br>创建容器命令</p><pre><code>docker run -d -p 8080:8080 -p 8090:8090 -v /data/game.conf:/etc/nginx/conf.d/game.conf -v /data/game:/opt/game -v /data/xiaoniao:/opt/xiaoniao nginx:latest   5.3.4 访问测试10.0.1.11:808010.0.1.11:8090</code></pre><h1 id="第6章-Docker镜像手动构建"><a href="#第6章-Docker镜像手动构建" class="headerlink" title="第6章 Docker镜像手动构建"></a>第6章 Docker镜像手动构建</h1><h2 id="6-1-手动制作游戏镜像"><a href="#6-1-手动制作游戏镜像" class="headerlink" title="6.1 手动制作游戏镜像"></a>6.1 手动制作游戏镜像</h2><p>下面我们基于centos容器制作一个新镜像，并安装nginx服务</p><h2 id="6-1-1-启动一个容器并安装nginx"><a href="#6-1-1-启动一个容器并安装nginx" class="headerlink" title="6.1.1 启动一个容器并安装nginx"></a>6.1.1 启动一个容器并安装nginx</h2><pre><code>[root@docker01 ~]# docker run -it centos /bin/bash[root@0ede2760ba65 /]# yum install wget install openssh-clients -y [root@0ede2760ba65 /]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo[root@0ede2760ba65 /]# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo[root@0ede2760ba65 /]# sed -i -e &#39;/mirrors.cloud.aliyuncs.com/d&#39; -e &#39;/mirrors.aliyuncs.com/d&#39; /etc/yum.repos.d/CentOS-Base.repo[root@0ede2760ba65 /]# cat /etc/yum.repos.d/nginx.repo  [nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.key[root@0ede2760ba65 /]# yum makecache fast[root@0ede2760ba65 /]# yum install nginx -y</code></pre><h2 id="6-1-2-上传代码目录并配置nginx配置文件"><a href="#6-1-2-上传代码目录并配置nginx配置文件" class="headerlink" title="6.1.2 上传代码目录并配置nginx配置文件"></a>6.1.2 上传代码目录并配置nginx配置文件</h2><pre><code>[root@0ede2760ba65 /]# scp -r 10.0.1.11:/data/* /opt/[root@0ede2760ba65 /]# ll /opt/total 18896drwxr-xr-x 5 root root       73 Sep  7 16:02 game-rw-r--r-- 1 root root      303 Sep  7 16:02 game.conf-rw-r--r-- 1 root root 19248295 Sep  7 16:02 html5.zipdrwxr-xr-x 3 root root       92 Sep  7 16:02 xiaoniao-rw-r--r-- 1 root root    91014 Sep  7 16:02 xiaoniaofeifei.zip[root@0ede2760ba65 /]# cp /opt/game.conf /etc/nginx/conf.d/</code></pre><h2 id="6-1-3-将容器提交为新的镜像"><a href="#6-1-3-将容器提交为新的镜像" class="headerlink" title="6.1.3 将容器提交为新的镜像"></a>6.1.3 将容器提交为新的镜像</h2><pre><code>[root@docker01 ~]# docker ps -aq0ede2760ba65[root@docker01 ~]# docker commit 0ede2760ba65 game:v1sha256:a61d28fbfe27ebe36d4b73825b55e5f94097083273ab56dccce0453ce2bd6d38</code></pre><h2 id="6-1-4-测试镜像功能是否可用"><a href="#6-1-4-测试镜像功能是否可用" class="headerlink" title="6.1.4 测试镜像功能是否可用"></a>6.1.4 测试镜像功能是否可用</h2><pre><code>[root@docker01 ~]# docker run -d -p 8080:8080 -p 8090:8090 game:v1  nginx -g &#39;daemon off;&#39;f58f209d4761c4bdd9bb164c0050a94a3273b1ee0e57eafe29e48b1517c72950</code></pre><h2 id="6-1-5-将新镜像导出"><a href="#6-1-5-将新镜像导出" class="headerlink" title="6.1.5 将新镜像导出"></a>6.1.5 将新镜像导出</h2><pre><code>docker save -o game_v1.tar game:v1</code></pre><h2 id="6-2-手动制作云盘镜像"><a href="#6-2-手动制作云盘镜像" class="headerlink" title="6.2 手动制作云盘镜像"></a>6.2 手动制作云盘镜像</h2><h2 id="6-2-1-创建容器"><a href="#6-2-1-创建容器" class="headerlink" title="6.2.1 创建容器"></a>6.2.1 创建容器</h2><pre><code>docker run -d -p 80:80 --name clould game:v1  nginx -g &#39;daemon off;&#39;</code></pre><h2 id="6-2-2-进入容器安装php并求改运行用户"><a href="#6-2-2-进入容器安装php并求改运行用户" class="headerlink" title="6.2.2 进入容器安装php并求改运行用户"></a>6.2.2 进入容器安装php并求改运行用户</h2><pre><code>[root@d0c987bcefa2 /]# yum install php-fpm -y[root@d0c987bcefa2 /]# php-fpm -vPHP 5.4.16 (fpm-fcgi) (built: Oct 30 2018 19:32:20)Copyright (c) 1997-2013 The PHP GroupZend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies[root@d0c987bcefa2 /]# sed -i &#39;/^user/c user = nginx&#39; /etc/php-fpm.d/www.conf[root@d0c987bcefa2 /]# sed -i &#39;/^group/c group = nginx&#39; /etc/php-fpm.d/www.conf[root@d0c987bcefa2 /]# sed -i &#39;/daemonize/s#no#yes#g&#39; /etc/php-fpm.conf     [root@d0c987bcefa2 /]# php-fpm -c /etc/php.ini -y /etc/php-fpm.conf[root@d0c987bcefa2 /]# php-fpm -c /etc/php.ini -y /etc/php-fpm.conf                                   [root@d0c987bcefa2 /]# ps -ef|grep phproot         77      0  0 21:43 ?        00:00:00 php-fpm: master process (/etc/php-fpm.conf)nginx        78     77  0 21:43 ?        00:00:00 php-fpm: pool wwwnginx        79     77  0 21:43 ?        00:00:00 php-fpm: pool wwwnginx        80     77  0 21:43 ?        00:00:00 php-fpm: pool wwwnginx        81     77  0 21:43 ?        00:00:00 php-fpm: pool wwwnginx        82     77  0 21:43 ?        00:00:00 php-fpm: pool www</code></pre><h2 id="6-2-3-配置nginx"><a href="#6-2-3-配置nginx" class="headerlink" title="6.2.3 配置nginx"></a>6.2.3 配置nginx</h2><pre><code>[root@d0c987bcefa2 /]# cat /etc/nginx/conf.d/cloud.conf   server &#123;    listen 80;    server_name localhost;    root /code;    index index.php index.html;    location ~ \.php$ &#123;        root /code;        fastcgi_pass 127.0.0.1:9000;        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        include fastcgi_params;    &#125;&#125;[root@d0c987bcefa2 /]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful[root@d0c987bcefa2 /]# nginx -s reload</code></pre><h2 id="6-2-4-下载代码目录"><a href="#6-2-4-下载代码目录" class="headerlink" title="6.2.4 下载代码目录"></a>6.2.4 下载代码目录</h2><pre><code>[root@d0c987bcefa2 /]# mkdir /code[root@d0c987bcefa2 /]# cd /code/[root@d0c987bcefa2 code]# scp -r 10.0.1.11:/data/kod/* /code/[root@d0c987bcefa2 code]# lsChangeLog.md  README.MD  app  config  data  index.php  plugins  static[root@d0c987bcefa2 code]# chown -R nginx:nginx /code/</code></pre><h2 id="6-2-5-测试"><a href="#6-2-5-测试" class="headerlink" title="6.2.5 测试"></a>6.2.5 测试</h2><pre><code>[root@d0c987bcefa2 code]# curl -I 127.0.0.1HTTP/1.1 302 Moved TemporarilyServer: nginx/1.16.1Date: Sat, 07 Sep 2019 21:53:17 GMTContent-Type: text/html; charset=utf-8Connection: keep-aliveX-Powered-By: PHP/5.4.16Set-Cookie: KOD_SESSION_ID_9d6d9=ljq63o0tmcscon6eb3gdpqscf4; path=/Set-Cookie: KOD_SESSION_ID_9d6d9=ljq63o0tmcscon6eb3gdpqscf4; path=/Set-Cookie: KOD_SESSION_ID_9d6d9=ljq63o0tmcscon6eb3gdpqscf4; path=/Set-Cookie: KOD_SESSION_SSO=bboh1p0h1uc50tfibrg67dnra7; path=/Expires: Thu, 19 Nov 1981 08:52:00 GMTCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0Pragma: no-cacheSet-Cookie: KOD_SESSION_ID_9d6d9=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/Set-Cookie: kod_name=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMTSet-Cookie: kodToken=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMTSet-Cookie: X-CSRF-TOKEN=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMTLocation: ./index.php?user/login</code></pre><h2 id="6-2-6-提交新的镜像"><a href="#6-2-6-提交新的镜像" class="headerlink" title="6.2.6 提交新的镜像"></a>6.2.6 提交新的镜像</h2><pre><code>[root@docker01 ~]# docker commit d0c987bcefa2 kod:v1sha256:169df6e8db11bd044e3e05237f2947783f9cc7a65b643dc9206ecf05fdc4a3ea</code></pre><h2 id="6-2-7-编写启动脚本并提交新镜像"><a href="#6-2-7-编写启动脚本并提交新镜像" class="headerlink" title="6.2.7 编写启动脚本并提交新镜像"></a>6.2.7 编写启动脚本并提交新镜像</h2><pre><code>[root@docker01 ~]# docker exec -it c14835183fb5 /bin/bash[root@c14835183fb5 /]# cat init.sh     #!/bin/bashphp-fpm -c /etc/php.ini -y /etc/php-fpm.confnginx -g &#39;daemon off;&#39;[root@c14835183fb5 /]# chmod +x init.sh [root@docker01 ~]# docker commit c14835183fb5 kod:v2sha256:c05ebdf400aa7f7a27aa857df0d9c75c42943db89abca66f79101771db8e9585</code></pre><h2 id="6-2-8-启动测试"><a href="#6-2-8-启动测试" class="headerlink" title="6.2.8 启动测试"></a>6.2.8 启动测试</h2><pre><code>[root@docker01 ~]# docker stop $(docker ps -qa)[root@docker01 ~]# docker run -d -p 80:80 kod:v2 /bin/bash /init.shdccf4aea5471713872e4fefaca45f7fac3bffec8f5f602570863ed14231dea1a[root@docker01 ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                            NAMESdccf4aea5471        kod:v2              &quot;/bin/bash /init.sh&quot;     36 seconds ago      Up 35 seconds       0.0.0.0:80-&gt;80/tcp                               magical_napier</code></pre><h2 id="6-2-9-添加GD库"><a href="#6-2-9-添加GD库" class="headerlink" title="6.2.9 添加GD库"></a>6.2.9 添加GD库</h2><p>此时打开页面提示缺少GD库，进入容器内安装php支持插件</p><pre><code>[root@dccf4aea5471 /]yum install php-mbstring php-gd -y</code></pre><p>然后重启容器</p><p>​    </p><pre><code>[root@docker01 ~]# docker restart dccf4aea5471</code></pre><h2 id="6-2-10-访问测试没问题后提交新镜像"><a href="#6-2-10-访问测试没问题后提交新镜像" class="headerlink" title="6.2.10 访问测试没问题后提交新镜像"></a>6.2.10 访问测试没问题后提交新镜像</h2><pre><code>[root@docker01 ~]# docker commit dccf4aea5471 kod:v2sha256:23051ce545a2eb6bb50bb2307bd9cfbaf6139e52f205a4126fb1d8d974c417f4</code></pre><h1 id="第7章-Dockerfile自动构建Docker镜像"><a href="#第7章-Dockerfile自动构建Docker镜像" class="headerlink" title="第7章 Dockerfile自动构建Docker镜像"></a>第7章 Dockerfile自动构建Docker镜像</h1><h2 id="7-1-Dockerfile操作命令说明"><a href="#7-1-Dockerfile操作命令说明" class="headerlink" title="7.1 Dockerfile操作命令说明"></a>7.1 Dockerfile操作命令说明</h2><pre><code>Docker通过对于在Dockerfile中的一系列指令的顺序解析实现自动的image的构建　　通过使用build命令，根据Dockerfiel的描述来构建镜像　　通过源代码路径的方式　　通过标准输入流的方式Dockerfile指令：　　只支持Docker自己定义的一套指令，不支持自定义　　大小写不敏感，但是建议全部使用大写　　根据Dockerfile的内容顺序执行FROM：　　FROM &#123;base镜像&#125;　　必须放在DOckerfile的第一行，表示从哪个baseimage开始构建MAINTAINER：　　可选的，用来标识image作者的地方RUN：　　每一个RUN指令都会是在一个新的container里面运行，并提交为一个image作为下一个RUN的base　　一个Dockerfile中可以包含多个RUN，按定义顺序执行　　RUN支持两种运行方式：　　　　RUN &lt;cmd&gt; 这个会当作/bin/sh -c “cmd” 运行　　　　RUN [“executable”，“arg1”，。。]，Docker把他当作json的顺序来解析，因此必须使用双引号，而且executable需要是完整路径　　RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN command1 的执行仅仅是当前进程，一个内存上的变化而已，其结果不会造成任何文件。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。而如果需要将两条命令或者多条命令联合起来执行需要加上&amp;&amp;。如：cd /usr/local/src &amp;&amp; wget xxxxxxxCMD：　　CMD的作用是作为执行container时候的默认行为（容器默认的启动命令）　　当运行container的时候声明了command，则不再用image中的CMD默认所定义的命令　　一个Dockerfile中只能有一个有效的CMD，当定义多个CMD的时候，只有最后一个才会起作用 CMD定义的三种方式：　　CMD &lt;cmd&gt; 这个会当作/bin/sh -c &quot;cmd&quot;来执行　　CMD [&quot;executable&quot;,&quot;arg1&quot;,....]　　CMD [&quot;arg1&quot;,&quot;arg2&quot;]，这个时候CMD作为ENTRYPOINT的参数 EXPOSE 声明端口　　格式为 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]。　　EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。entrypoint：　　entrypoint的作用是，把整个container变成了一个可执行的文件，这样不能够通过替换CMD的方法来改变创建container的方式。但是可以通过参数传递的方法影响到container内部　　每个Dockerfile只能够包含一个entrypoint，多个entrypoint只有最后一个有效　　当定义了entrypoint以后，CMD只能够作为参数进行传递entrypoint定义方式：　　entrypoint [&quot;executable&quot;,&quot;arg1&quot;,&quot;arg2&quot;]，这种定义方式下，CMD可以通过json的方式来定义entrypoint的参数，可以通过在运行container的时候通过指定command的方式传递参数　　entrypoint &lt;cmd&gt;，当作/bin/bash -c &quot;cmd&quot;运行命令ADD &amp; COPY：　　当在源代码构建的方式下，可以通过ADD和COPY的方式，把host上的文件或者目录复制到image中　　ADD和COPY的源必须在context路径下　　当src为网络URL的情况下，ADD指令可以把它下载到dest的指定位置，这个在任何build的方式下都可以work　　ADD相对COPY还有一个多的功能，能够进行自动解压压缩包ENV：　　ENV key value    调用变量格式：$&#123;key&#125;　　用来设置环境变量，后续的RUN可以使用它所创建的环境变量　　当创建基于该镜像的container的时候，会自动拥有设置的环境变量 WORKDIR：　　用来指定当前工作目录（或者称为当前目录）　　当使用相对目录的情况下，采用上一个WORKDIR指定的目录作为基准 USER：　　指定UID或者username，来决定运行RUN指令的用户 ONBUILD：　　ONBUILD作为一个trigger的标记，可以用来trigger任何Dockerfile中的指令　　可以定义多个ONBUILD指令　　当下一个镜像B使用镜像A作为base的时候，在FROM A指令前，会先按照顺序执行在构建A时候定义的ONBUILD指令　　ONBUILD &lt;DOCKERFILE 指令&gt; &lt;content&gt;VOLUME：　　用来创建一个在image之外的mount point，用来在多个container之间实现数据共享　　运行使用json array的方式定义多个volume　　VOLUME [&quot;/var/data1&quot;,&quot;/var/data2&quot;]　　或者plain text的情况下定义多个VOLUME指令</code></pre><h2 id="7-2-使用Dockerfile创建云盘"><a href="#7-2-使用Dockerfile创建云盘" class="headerlink" title="7.2 使用Dockerfile创建云盘"></a>7.2 使用Dockerfile创建云盘</h2><h2 id="7-2-1-准备需要的文件"><a href="#7-2-1-准备需要的文件" class="headerlink" title="7.2.1 准备需要的文件"></a>7.2.1 准备需要的文件</h2><pre><code>[root@docker01 ~/dockerfile/kod]# ls CentOS-Base.repo cloud.conf dockerfile epel.repo init.sh kodexplorer4.40.zip nginx.repo</code></pre><h2 id="7-2-2-编写dockerfile"><a href="#7-2-2-编写dockerfile" class="headerlink" title="7.2.2 编写dockerfile"></a>7.2.2 编写dockerfile</h2><pre><code>[root@docker01 ~/dockerfile/kod]# cat dockerfile FROM centos:latestADD CentOS-Base.repo  /etc/yum.repos.d/CentOS-Base.repoADD epel.repo  /etc/yum.repos.d/epel.repoADD nginx.repo  /etc/yum.repos.d/nginx.repoRUN yum install nginx php-fpm unzip php-gd php-mbstring -y RUN rm -rf /etc/nginx/conf.d/default.conf RUN sed -i &#39;/^user/c user = nginx&#39; /etc/php-fpm.d/www.confRUN sed -i &#39;/^group/c group = nginx&#39; /etc/php-fpm.d/www.confRUN sed -i &#39;/daemonize/s#no#yes#g&#39; /etc/php-fpm.conf   ADD cloud.conf /etc/nginx/conf.d/cloud.confRUN   mkdir /codeWORKDIR /codeADD kodexplorer4.40.zip /code/kodexplorer4.40.zip RUN unzip kodexplorer4.40.zip RUN chown -R nginx:nginx .VOLUME /codeADD init.sh  /init.shEXPOSE 80CMD [&quot;/bin/bash&quot;,&quot;/init.sh&quot;]</code></pre><h2 id="7-2-3-构建新镜像"><a href="#7-2-3-构建新镜像" class="headerlink" title="7.2.3 构建新镜像"></a>7.2.3 构建新镜像</h2><pre><code>[root@docker01 ~/dockerfile/kod]# docker build --network=host -t centos_kod:v1 .[root@docker01 ~/dockerfile/kod]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEcentos_kod          v1                  87071ea7c86b        2 minutes ago       465MB</code></pre><h2 id="7-2-4-基于新镜像运行容器"><a href="#7-2-4-基于新镜像运行容器" class="headerlink" title="7.2.4 基于新镜像运行容器"></a>7.2.4 基于新镜像运行容器</h2><pre><code>[root@docker01 ~/dockerfile/kod]# docker run -d -p 80:80 centos_kod:v14d1007d7194d434248762e5aca76070206643f0f0f533f2112d0359b25fe7ba0</code></pre><h1 id="第8章-Docker私有仓库"><a href="#第8章-Docker私有仓库" class="headerlink" title="第8章 Docker私有仓库"></a>第8章 Docker私有仓库</h1><h2 id="8-1-普通的docker-registry"><a href="#8-1-普通的docker-registry" class="headerlink" title="8.1 普通的docker registry"></a>8.1 普通的docker registry</h2><h2 id="8-2-带认证的docker-registry"><a href="#8-2-带认证的docker-registry" class="headerlink" title="8.2 带认证的docker registry"></a>8.2 带认证的docker registry</h2><h2 id="8-3-企业级的docker-harbor"><a href="#8-3-企业级的docker-harbor" class="headerlink" title="8.3 企业级的docker-harbor"></a>8.3 企业级的docker-harbor</h2><h2 id="8-3-1-部署思路"><a href="#8-3-1-部署思路" class="headerlink" title="8.3.1 部署思路"></a>8.3.1 部署思路</h2><pre><code>第一步：安装docker和docker-compose第二步：下载harbor-offline-installer-v1.9.0-rc1.tgz第三步：上传到/opt,并解压第四步：修改harbor.yml配置文件 hostname = 10.0.0.11 harbor_admin_password = 123456第五步：执行install.sh</code></pre><h2 id="8-3-2-安装docker-compose"><a href="#8-3-2-安装docker-compose" class="headerlink" title="8.3.2 安装docker-compose"></a>8.3.2 安装docker-compose</h2><p>1.安装docker-compose</p><pre><code>yum install -y python2-pip</code></pre><p>2.这里使用pip安装，默认源为国外，可以使用国内加速，相关网站</p><pre><code>https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</code></pre><p>pip加速操作命令</p><pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>3.继续安装docker-compose</p><pre><code>pip install docker-compose</code></pre><p>4.检查</p><pre><code>docker-compose version</code></pre><h2 id="8-3-3-上传解压docker-harbor"><a href="#8-3-3-上传解压docker-harbor" class="headerlink" title="8.3.3 上传解压docker-harbor"></a>8.3.3 上传解压docker-harbor</h2><pre><code>[root@docker01 ~]# cd /opt/[root@docker01 /opt]# lsharbor-offline-installer-v1.9.0-rc1.tgz[root@docker01 /opt]# tar zxf harbor-offline-installer-v1.9.0-rc1.tgz [root@docker01 /opt]# lsharbor  harbor-offline-installer-v1.9.0-rc1.tgz[root@docker01 /opt]# cd harbor/</code></pre><h2 id="8-3-4-修改配置文件"><a href="#8-3-4-修改配置文件" class="headerlink" title="8.3.4 修改配置文件"></a>8.3.4 修改配置文件</h2><p>修改2个地方：</p><pre><code>[root@docker01 /opt/harbor]# egrep &quot;10.0.1.11|123456&quot; harbor.yml hostname: 10.0.1.11harbor_admin_password: 123456</code></pre><h2 id="8-3-5-安装"><a href="#8-3-5-安装" class="headerlink" title="8.3.5 安装"></a>8.3.5 安装</h2><pre><code>[root@docker01 /opt/harbor]# ./install.sh</code></pre><h2 id="8-3-6-修改docker信任仓库"><a href="#8-3-6-修改docker信任仓库" class="headerlink" title="8.3.6 修改docker信任仓库"></a>8.3.6 修改docker信任仓库</h2><pre><code>[root@docker01 /opt/harbor]# cat /etc/docker/daemon.json    &#123;      &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;],      &quot;insecure-registries&quot;: [&quot;http://10.0.1.11&quot;] &#125;</code></pre><h2 id="8-3-7-重启docker并上传镜像"><a href="#8-3-7-重启docker并上传镜像" class="headerlink" title="8.3.7 重启docker并上传镜像"></a>8.3.7 重启docker并上传镜像</h2><pre><code>systemctl restart docker  </code></pre><h2 id="8-3-8-给镜像打标签并提交到dockerharbor"><a href="#8-3-8-给镜像打标签并提交到dockerharbor" class="headerlink" title="8.3.8 给镜像打标签并提交到dockerharbor"></a>8.3.8 给镜像打标签并提交到dockerharbor</h2><pre><code>[root@docker01 /opt/harbor]# docker login 10.0.1.11           Username: zhangya Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded[root@docker01 ~]# docker run -d -p 8080:80 centos_kod:v1          78be80f7c2029b68e8943e38fa99131ec6709f798e63c94afb5a7fdfa4a8047c[root@docker01 ~]# docker ps|grep kod78be80f7c202        centos_kod:v1                                       &quot;/bin/bash /init.sh&quot;     15 seconds ago      Up 13 seconds            0.0.0.0:8080-&gt;80/tcp        tender_dirac[root@docker01 ~]# docker commit 78be80f7c202 10.0.1.11/linux/centos_kod:v1sha256:6bf1e1eef1969bcd4c82472aed945d4dda74a923c0d7dae91e38539676f8c240[root@docker01 ~/dockerfile/kod]# docker imagesREPOSITORY                      TAG                        IMAGE ID            CREATED             SIZE10.0.1.11/linux/centos_kod      v1                         6bf1e1eef196        13 minutes ago      465MB[root@docker01 /opt/harbor]# docker push 10.0.1.11/linux/centos_kod:v1</code></pre><h2 id="8-3-9-在docker-harbor上查看"><a href="#8-3-9-在docker-harbor上查看" class="headerlink" title="8.3.9 在docker-harbor上查看"></a>8.3.9 在docker-harbor上查看</h2><h2 id="8-3-10-其他主机上下载镜像"><a href="#8-3-10-其他主机上下载镜像" class="headerlink" title="8.3.10 其他主机上下载镜像"></a>8.3.10 其他主机上下载镜像</h2><pre><code>[root@docker02 ~]# cat /etc/docker/daemon.json &#123;      &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;],      &quot;insecure-registries&quot;: [&quot;http://10.0.1.11&quot;],      &quot;insecure-registries&quot;: [&quot;https://10.0.1.11&quot;] &#125;[root@docker02 ~]# docker pull 10.0.1.11/linux/centos_kod:v1</code></pre>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的掌握 LVS、Nginx 及 HAProxy 的工作原理吗？</title>
      <link href="/posts/32858/"/>
      <url>/posts/32858/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当前大多数的互联网系统都使用了服务器集群技术，集群是将相同服务部署在多台服务器上构成一个集群整体对外提供服务，这些集群可以是 Web应用服务器集群，也可以是数据库服务器集群，还可以是分布式缓存服务器集群等等。</p></blockquote><p>在实际应用中，在 Web 服务器集群之前总会有一台负载均衡服务器，负载均衡设备的任务就是作为 Web 服务器流量的入口，挑选最合适的一台 Web 服务器，将客户端的请求转发给它处理，实现客户端到真实服务端的透明转发。</p><p>最近几年很火的「云计算」以及分布式架构，本质上也是将后端服务器作为计算资源、存储资源，由某台管理服务器封装成一个服务对外提供，客户端不需要关心真正提供服务的是哪台机器，在它看来，就好像它面对的是一台拥有近乎无限能力的服务器，而本质上，真正提供服务的，是后端的集群。</p><p>LVS、Nginx、HAProxy 是目前使用最广泛的三种软件负载均衡软件。</p><p>一般对负载均衡的使用是随着网站规模的提升根据不同的阶段来使用不同的技术。具体的应用需求还得具体分析，如果是中小型的 Web 应用，比如日 PV 小于1000万，用 Nginx 就完全可以了；</p><p>如果机器不少，可以用 DNS 轮询，LVS 所耗费的机器还是比较多的；大型网站或重要的服务，且服务器比较多时，可以考虑用 LVS。<br>目前关于网站架构一般比较合理流行的架构方案：Web 前端采用 Nginx/HAProxy+Keepalived 作负载均衡器；后端采用 MySQ L数据库一主多从和读写分离，采用 LVS+Keepalived 的架构。</p><h1 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h1><hr><p>LVS 是 Linux Virtual Server 的简称，也就是 Linux 虚拟服务器。现在 LVS 已经是 Linux 标准内核的一部分，从 Linux2.4 内核以后，已经完全内置了 LVS 的各个功能模块，无需给内核打任何补丁，可以直接使用 LVS 提供的各种功能。</p><p>LVS 自从1998年开始，发展到现在已经是一个比较成熟的技术项目了。</p><h2 id="1-LVS的体系结构"><a href="#1-LVS的体系结构" class="headerlink" title="1 LVS的体系结构"></a>1 LVS的体系结构</h2><p>LVS 架设的服务器集群系统有三个部分组成：<br>(1) 最前端的负载均衡层，用 Load Balancer 表示。<br>(2) 中间的服务器集群层，用 Server Array 表示。<br>(3) 最底端的数据共享存储层，用 Shared Storage 表示。</p><h2 id="2-LVS-负载均衡机制"><a href="#2-LVS-负载均衡机制" class="headerlink" title="2 LVS 负载均衡机制"></a>2 LVS 负载均衡机制</h2><p>LVS 不像 HAProxy 等七层软负载面向的是 HTTP 包，所以七层负载可以做的 URL 解析等工作，LVS 无法完成。</p><p>LVS 是四层负载均衡，也就是说建立在 OSI 模型的第四层——传输层之上，传输层上有我们熟悉的 TCP/UDP，LVS 支持 TCP/UDP 的负载均衡。因为 LVS 是四层负载均衡，因此它相对于其它高层负载均衡的解决办法，比如 DNS 域名轮流解析、应用层负载的调度、客户端的调度等，它的效率是非常高的。</p><p>所谓四层负载均衡 ，也就是主要通过报文中的目标地址和端口。七层负载均衡 ，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容。</p><p>LVS 的转发主要通过修改 IP 地址（NAT 模式，分为源地址修改 SNAT 和目标地址修改 DNAT）、修改目标 MAC（DR 模式）来实现。</p><h2 id="3-NAT-模式：网络地址转换"><a href="#3-NAT-模式：网络地址转换" class="headerlink" title="3 NAT 模式：网络地址转换"></a>3 NAT 模式：网络地址转换</h2><p>NAT（Network Address Translation）是一种外网和内网地址映射的技术。</p><p>NAT 模式下，网络数据报的进出都要经过 LVS 的处理。LVS 需要作为 RS（真实服务器）的网关。</p><p>当包到达 LVS 时，LVS 做目标地址转换（DNAT），将目标 IP 改为 RS 的 IP。RS 接收到包以后，仿佛是客户端直接发给它的一样。RS 处理完，返回响应时，源 IP 是 RS IP，目标 IP 是客户端的 IP。</p><p>这时 RS 的包通过网关（LVS）中转，LVS 会做源地址转换（SNAT），将包的源地址改为 VIP，这样，这个包对客户端看起来就仿佛是 LVS 直接返回给它的。</p><h2 id="4-DR-模式：直接路由"><a href="#4-DR-模式：直接路由" class="headerlink" title="4 DR 模式：直接路由"></a>4 DR 模式：直接路由</h2><p>DR 模式下需要 LVS 和 RS 集群绑定同一个 VIP（RS 通过将 VIP 绑定在 loopback 实现），但与 NAT 的不同点在于：请求由 LVS 接受，由真实提供服务的服务器（RealServer，RS）直接返回给用户，返回的时候不经过 LVS。<br>详细来看，一个请求过来时，LVS 只需要将网络帧的 MAC 地址修改为某一台 RS 的 MAC，该包就会被转发到相应的 RS 处理，注意此时的源 IP 和目标 IP 都没变，LVS 只是做了一下移花接木。RS 收到 LVS 转发来的包时，链路层发现 MAC 是自己的，到上面的网络层，发现 IP 也是自己的，于是这个包被合法地接受，RS 感知不到前面有 LVS 的存在。而当 RS 返回响应时，只要直接向源 IP（即用户的 IP）返回即可，不再经过 LVS。</p><p>DR 负载均衡模式数据分发过程中不修改 IP 地址，只修改 mac 地址，由于实际处理请求的真实物理 IP 地址和数据请求目的 IP 地址一致，所以不需要通过负载均衡服务器进行地址转换，可将响应数据包直接返回给用户浏览器，避免负载均衡服务器网卡带宽成为瓶颈。因此，DR 模式具有较好的性能，也是目前大型网站使用最广泛的一种负载均衡手段。</p><h2 id="5-LVS的优点"><a href="#5-LVS的优点" class="headerlink" title="5 LVS的优点"></a>5 LVS的优点</h2><ul><li>抗负载能力强、是工作在传输层上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和 cpu<br>资源消耗比较低。</li><li>配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率。</li><li>工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如 LVS+Keepalived。</li><li>无流量，LVS 只分发请求，而流量并不从它本身出去，这点保证了均衡器 IO 的性能不会受到大流量的影响。</li><li>应用范围比较广，因为 LVS 工作在传输层，所以它几乎可以对所有应用做负载均衡，包括 http、数据库、在线聊天室等等。</li></ul><h2 id="6-LVS的缺点"><a href="#6-LVS的缺点" class="headerlink" title="6 LVS的缺点"></a>6 LVS的缺点</h2><ul><li>软件本身不支持正则表达式处理，不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是<br>Nginx、HAProxy+Keepalived 的优势所在。</li><li>如果是网站应用比较庞大的话，LVS/DR+Keepalived<br>实施起来就比较复杂了，相对而言，Nginx/HAProxy+Keepalived就简单多了。</li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx 是一个强大的 Web 服务器软件，用于处理高并发的 HTTP 请求和作为反向代理服务器做负载均衡。具有高性能、轻量级、内存消耗少，强大的负载均衡能力等优势。</p><h2 id="1-Nignx-的架构设计"><a href="#1-Nignx-的架构设计" class="headerlink" title="1 Nignx 的架构设计"></a>1 Nignx 的架构设计</h2><p>相对于传统基于进程或线程的模型（Apache就采用这种模型）在处理并发连接时会为每一个连接建立一个单独的进程或线程，且在网络或者输入/输出操作时阻塞。这将导致内存和 CPU 的大量消耗，因为新起一个单独的进程或线程需要准备新的运行时环境，包括堆和栈内存的分配，以及新的执行上下文，当然，这些也会导致多余的 CPU 开销。</p><p>最终，会由于过多的上下文切换而导致服务器性能变差。反过来，Nginx 的架构设计是采用模块化的、基于事件驱动、异步、单线程且非阻塞。<br>Nginx 大量使用多路复用和事件通知，Nginx 启动以后，会在系统中以 daemon 的方式在后台运行，其中包括一个 master 进程，n(n&gt;=1) 个 worker 进程。所有的进程都是单线程（即只有一个主线程）的，且进程间通信主要使用共享内存的方式。</p><p>其中，master 进程用于接收来自外界的信号，并给 worker 进程发送信号，同时监控 worker 进程的工作状态。worker 进程则是外部请求真正的处理者，每个 worker 请求相互独立且平等的竞争来自客户端的请求。请求只能在一个 worker 进程中被处理，且一个 worker 进程只有一个主线程，所以同时只能处理一个请求。（原理同 Netty 很像）</p><h2 id="2-Nginx-负载均衡"><a href="#2-Nginx-负载均衡" class="headerlink" title="2 Nginx 负载均衡"></a>2 Nginx 负载均衡</h2><p>Nginx 负载均衡主要是对七层网络通信模型中的第七层应用层上的 http、https 进行支持。</p><p>Nginx 是以反向代理的方式进行负载均衡的。反向代理（Reverse Proxy）方式是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个服务器。<br>Nginx 实现负载均衡的分配策略有很多，Nginx 的 upstream 目前支持以下几种方式：</p><ul><li>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</li><li>weight：指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</li><li>ip_hash：每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</li><li>fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li><li>url_hash（第三方）：按访问 url 的 hash 结果来分配请求，使每个 url定向到同一个后端服务器，后端服务器为缓存时比较有效。</li></ul><h2 id="3-Nginx-的优点"><a href="#3-Nginx-的优点" class="headerlink" title="3 Nginx 的优点"></a>3 Nginx 的优点</h2><ul><li>跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有 Windows 的移植版本</li><li>配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置</li><li>非阻塞、高并发连接：官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数</li><li>事件驱动：通信机制采用 epoll 模型，支持更大的并发连接</li><li>Master/Worker 结构：一个 master 进程，生成一个或多个 worker 进程</li><li>内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个 Nginx 进程才消耗150M 内存（15M*10=150M）</li><li>内置的健康检查功能：如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响前端访问</li><li>节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头</li><li>稳定性高：用于反向代理，宕机的概率微乎其微</li></ul><h2 id="4-Nginx-的缺点"><a href="#4-Nginx-的缺点" class="headerlink" title="4 Nginx 的缺点"></a>4 Nginx 的缺点</h2><ul><li>Nginx 仅能支 持http、https 和 Email 协议，这样就在适用范围上面小些，这个是它的缺点。</li><li>对后端服务器的健康检查，只支持通过端口来检测，不支持通过 url来检测。</li><li>不支持 Session 的直接保持，但能通过 ip_hash 来解决。</li></ul><h1 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h1><p>HAProxy 支持两种代理模式 TCP（四层）和HTTP（七层），也是支持虚拟主机的。</p><p>HAProxy 的优点能够补充 Nginx 的一些缺点，比如支持 Session 的保持，Cookie 的引导；同时支持通过获取指定的 url 来检测后端服务器的状态。</p><p>HAProxy 跟 LVS 类似，本身就只是一款负载均衡软件；单纯从效率上来讲 HAProxy 会比 Nginx 有更出色的负载均衡速度，在并发处理上也是优于 Nginx 的。</p><p>HAProxy 支持 TCP 协议的负载均衡转发，可以对 MySQL 读进行负载均衡，对后端的 MySQL 节点进行检测和负载均衡，大家可以用 LVS+Keepalived 对 MySQL 主从做负载均衡。</p><p>HAProxy 负载均衡策略非常多：Round-robin（轮循）、Weight-round-robin（带权轮循）、source（原地址保持）、RI（请求URL）、rdp-cookie（根据cookie）。</p><p>出自：京东运维</p><hr><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Haproxy </tag>
            
            <tag> Lvs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP(YUM)</title>
      <link href="/posts/12262/"/>
      <url>/posts/12262/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-LNMP架构概述"><a href="#第一章-LNMP架构概述" class="headerlink" title="第一章 LNMP架构概述"></a>第一章 LNMP架构概述</h1><h2 id="1-1-什么是LNMP"><a href="#1-1-什么是LNMP" class="headerlink" title="1.1 什么是LNMP"></a>1.1 什么是LNMP</h2><p>LNMP 是一套技术的组合， L=Linux、 N=Nginx、 M=MySQL、 P=PHP</p><h2 id="1-2-LNMP架构是如何工作的"><a href="#1-2-LNMP架构是如何工作的" class="headerlink" title="1.2 LNMP架构是如何工作的"></a>1.2 LNMP架构是如何工作的</h2><p>首先 Nginx 服务是不能处理动态请求，那么当用户发起动态请求时, Nginx 又是如何进行处理的。<br> 当用户发起 http 请求，请求会被 Nginx 处理，如果是静态资源请求 Nginx 则直接返回，如果是动态请求 Nginx 则通过 fastcgi 协议转交给后端的 PHP 程序处理，具体如下图所示</p><h2 id="1-3-Nginx与Fast-CGI工作流程"><a href="#1-3-Nginx与Fast-CGI工作流程" class="headerlink" title="1.3 Nginx与Fast-CGI工作流程"></a>1.3 Nginx与Fast-CGI工作流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-d748fdac327fb43c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>比喻：<br> Nginx: 拉货的货车<br> FastCGI: 高速公路<br> php-fpm: 每个路道的收费站<br> wrapper: 搬货的师傅<br> systemctl start php-fpm:  管理整个高速工作所有的收费站</p><p>1.用户通过 http 协议发起请求，请求会先抵达 LNMP 架构中的 Nginx<br> 2.Nginx 会根据用户的请求进行判断，这个判断是有 Location 进行完成<br> 3.判断用户请求的是静态页面， Nginx 直接进行处理<br> 4.判断用户请求的是动态页面， Nginx 会将该请求交给 fastcgi 协议下发<br> 5.fastgi 会将请求交给 php-fpm 管理进程, php-fpm 管理进程接收到后会调用具体的工作进程 warrap<br> 6.warrap 进程会调用 php 程序进行解析,如果只是解析代码 php 直接返回<br> 7.如果有查询数据库操作，则由 php 连接数据库(用户 密码 IP)发起查询的操作<br> 8.最终数据由 mysql-&gt;php-&gt;php-fpm-&gt;fastcgi-&gt;nginx-&gt;http-&gt;user</p><h1 id="第二章-LNMP安装部署"><a href="#第二章-LNMP安装部署" class="headerlink" title="第二章 LNMP安装部署"></a>第二章 LNMP安装部署</h1><h2 id="2-0-创建www统一用户"><a href="#2-0-创建www统一用户" class="headerlink" title="2.0 创建www统一用户"></a>2.0 创建www统一用户</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># groupadd www -g 666</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># useradd www -s /sbin/nologin -M -u 666 -g 666</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># id www</span></span><br><span class="line">uid=<span class="number">666</span>(www) gid=<span class="number">666</span>(www) 组=<span class="number">666</span>(www)</span><br></pre></td></tr></table></figure><h2 id="2-1-使用官方仓库安装nginx"><a href="#2-1-使用官方仓库安装nginx" class="headerlink" title="2.1 使用官方仓库安装nginx"></a>2.1 使用官方仓库安装nginx</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cat /etc/yum.repos.d/nginx.repo </span></span><br><span class="line">[<span class="meta">nginx-stable</span>]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http:<span class="comment">//nginx.org/packages/centos/$releasever/$basearch/</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="comment">//nginx.org/keys/nginx_signing.key</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">nginx-mainline</span>]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http:<span class="comment">//nginx.org/packages/mainline/centos/$releasever/$basearch/</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">0</span></span><br><span class="line">gpgkey=https:<span class="comment">//nginx.org/keys/nginx_signing.key</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># yum install nginx -y</span></span><br></pre></td></tr></table></figure><h2 id="2-2-启动Nginx并加入开机自启动"><a href="#2-2-启动Nginx并加入开机自启动" class="headerlink" title="2.2 启动Nginx并加入开机自启动"></a>2.2 启动Nginx并加入开机自启动</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl start nginx</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl enable nginx</span></span><br></pre></td></tr></table></figure><h2 id="2-3-使用第三方拓展源安装php7-1"><a href="#2-3-使用第三方拓展源安装php7-1" class="headerlink" title="2.3 使用第三方拓展源安装php7.1"></a>2.3 使用第三方拓展源安装php7.1</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># yum remove php-mysql-5.4 php php-fpm php-common</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb </span></span><br></pre></td></tr></table></figure><h2 id="2-4-配置php-fpm用户与nginx用户保持一致"><a href="#2-4-配置php-fpm用户与nginx用户保持一致" class="headerlink" title="2.4 配置php-fpm用户与nginx用户保持一致"></a>2.4 配置php-fpm用户与nginx用户保持一致</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># sed -i &#x27;/^user/c user = www&#x27; /etc/php-fpm.d/www.conf</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># sed -i &#x27;/^group/c group = www&#x27; /etc/php-fpm.d/www.conf</span></span><br></pre></td></tr></table></figure><h2 id="2-5-启动php-fpm并加入开机自启动"><a href="#2-5-启动php-fpm并加入开机自启动" class="headerlink" title="2.5 启动php-fpm并加入开机自启动"></a>2.5 启动php-fpm并加入开机自启动</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl start php-fpm</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl enable php-fpm</span></span><br></pre></td></tr></table></figure><h2 id="2-6-安装Mariadb数据库"><a href="#2-6-安装Mariadb数据库" class="headerlink" title="2.6 安装Mariadb数据库"></a>2.6 安装Mariadb数据库</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># yum install mariadb-server mariadb -y</span></span><br></pre></td></tr></table></figure><h2 id="2-7-启动Mariadb数据库并加入开机自启动"><a href="#2-7-启动Mariadb数据库并加入开机自启动" class="headerlink" title="2.7 启动Mariadb数据库并加入开机自启动"></a>2.7 启动Mariadb数据库并加入开机自启动</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl start mariadb</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl enable mariadb</span></span><br></pre></td></tr></table></figure><h2 id="2-8-配置Mariadb账号密码"><a href="#2-8-配置Mariadb账号密码" class="headerlink" title="2.8 配置Mariadb账号密码"></a>2.8 配置Mariadb账号密码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mysqladmin password &#x27;oldboy123&#x27;</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mysql -uroot -poldboy123</span></span><br></pre></td></tr></table></figure><h2 id="2-9-mysql基础命令"><a href="#2-9-mysql基础命令" class="headerlink" title="2.9 mysql基础命令"></a>2.9 mysql基础命令</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前mysql有哪些用户</span></span><br><span class="line">MariaDB [(none)]&gt; select user,host from mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line"><span class="params">| user |</span> host      <span class="params">|</span></span><br><span class="line"><span class="params">+------+-----------+</span></span><br><span class="line"><span class="params">|</span> root <span class="params">| 127.0.0.1 |</span></span><br><span class="line"><span class="params">| root |</span> <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span>      <span class="params">| localhost |</span></span><br><span class="line"><span class="params">| root |</span> localhost <span class="params">|</span></span><br><span class="line"><span class="params">|</span>      <span class="params">| web01     |</span></span><br><span class="line"><span class="params">| root |</span> web01     <span class="params">|</span></span><br><span class="line"><span class="params">+------+-----------+</span></span><br></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mysql -uroot -poldboy123</span></span><br></pre></td></tr></table></figure><p>使用指定IP登录</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@web01 ~]</span># <span class="selector-tag">mysql</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-poldboy123</span> <span class="selector-tag">-h127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><p>查询当前数据库有哪些用户</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user,host <span class="keyword">from</span> mysql.user;</span><br><span class="line">查询   mysql库里的user表里的    user和host字段的内容</span><br></pre></td></tr></table></figure><p>查看当前有哪些数据库</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| Database           |</span></span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| information_schema |</span></span><br><span class="line"><span class="params">| mysql              |</span></span><br><span class="line"><span class="params">| performance_schema |</span></span><br><span class="line"><span class="params">| test               |</span></span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>查看库里面有哪些表</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show tables from mysql;</span><br><span class="line">+---------------------------+</span><br><span class="line"><span class="params">| Tables_in_mysql           |</span></span><br><span class="line">+---------------------------+</span><br><span class="line"><span class="params">| columns_priv              |</span></span><br><span class="line"><span class="params">| db                        |</span></span><br><span class="line"><span class="params">| event                     |</span></span><br><span class="line"><span class="params">| func                      |</span></span><br><span class="line"><span class="params">| general_log               |</span></span><br><span class="line"><span class="params">| help_category             |</span></span><br><span class="line"><span class="params">| help_keyword              |</span></span><br><span class="line"><span class="params">| help_relation             |</span></span><br><span class="line"><span class="params">| help_topic                |</span></span><br><span class="line"><span class="params">| host                      |</span></span><br><span class="line"><span class="params">| ndb_binlog_index          |</span></span><br><span class="line"><span class="params">| plugin                    |</span></span><br><span class="line"><span class="params">| proc                      |</span></span><br><span class="line"><span class="params">| procs_priv                |</span></span><br><span class="line"><span class="params">| proxies_priv              |</span></span><br><span class="line"><span class="params">| servers                   |</span></span><br><span class="line"><span class="params">| slow_log                  |</span></span><br><span class="line"><span class="params">| tables_priv               |</span></span><br><span class="line"><span class="params">| time_zone                 |</span></span><br><span class="line"><span class="params">| time_zone_leap_second     |</span></span><br><span class="line"><span class="params">| time_zone_name            |</span></span><br><span class="line"><span class="params">| time_zone_transition      |</span></span><br><span class="line"><span class="params">| time_zone_transition_type |</span></span><br><span class="line"><span class="params">| user                      |</span></span><br><span class="line">+---------------------------+</span><br><span class="line"><span class="number">24</span> rows <span class="keyword">in</span> set (<span class="number">0</span>.<span class="number">00</span> sec)</span><br></pre></td></tr></table></figure><p>查看表里有哪些字段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [mysql]&gt; desc user;</span><br><span class="line">+------------------------+-----------------------------------+------+-----+---------+-------+</span><br><span class="line"><span class="params">| Field                  |</span> Type                              <span class="params">| Null |</span> Key <span class="params">| Default |</span> Extra <span class="params">|</span></span><br><span class="line"><span class="params">+------------------------+-----------------------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="params">|</span> Host                   <span class="params">| char(60)                          |</span> NO   <span class="params">| PRI |</span>         <span class="params">|       |</span></span><br><span class="line"><span class="params">| User                   |</span> char(<span class="number">16</span>)                          <span class="params">| NO   |</span> PRI <span class="params">|         |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Password               <span class="params">| char(41)                          |</span> NO   <span class="params">|     |</span>         <span class="params">|       |</span></span><br><span class="line"><span class="params">| Select_priv            |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Insert_priv            <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Update_priv            |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Delete_priv            <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Create_priv            |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Drop_priv              <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Reload_priv            |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Shutdown_priv          <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Process_priv           |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> File_priv              <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Grant_priv             |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> References_priv        <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Index_priv             |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Alter_priv             <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Show_db_priv           |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Super_priv             <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Create_tmp_table_priv  |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Lock_tables_priv       <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Execute_priv           |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Repl_slave_priv        <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Repl_client_priv       |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Create_view_priv       <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Show_view_priv         |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Create_routine_priv    <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Alter_routine_priv     |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Create_user_priv       <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Event_priv             |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> Trigger_priv           <span class="params">| enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     |</span> NO   <span class="params">|     |</span> N       <span class="params">|       |</span></span><br><span class="line"><span class="params">| Create_tablespace_priv |</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="params">| NO   |</span>     <span class="params">| N       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> ssl_type               <span class="params">| enum(&#x27;&#x27;,&#x27;ANY&#x27;,&#x27;X509&#x27;,&#x27;SPECIFIED&#x27;) |</span> NO   <span class="params">|     |</span>         <span class="params">|       |</span></span><br><span class="line"><span class="params">| ssl_cipher             |</span> blob                              <span class="params">| NO   |</span>     <span class="params">| NULL    |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> x509_issuer            <span class="params">| blob                              |</span> NO   <span class="params">|     |</span> NULL    <span class="params">|       |</span></span><br><span class="line"><span class="params">| x509_subject           |</span> blob                              <span class="params">| NO   |</span>     <span class="params">| NULL    |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> max_questions          <span class="params">| int(11) unsigned                  |</span> NO   <span class="params">|     |</span> <span class="number">0</span>       <span class="params">|       |</span></span><br><span class="line"><span class="params">| max_updates            |</span> int(<span class="number">11</span>) unsigned                  <span class="params">| NO   |</span>     <span class="params">| 0       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> max_connections        <span class="params">| int(11) unsigned                  |</span> NO   <span class="params">|     |</span> <span class="number">0</span>       <span class="params">|       |</span></span><br><span class="line"><span class="params">| max_user_connections   |</span> int(<span class="number">11</span>)                           <span class="params">| NO   |</span>     <span class="params">| 0       |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">|</span> plugin                 <span class="params">| char(64)                          |</span> NO   <span class="params">|     |</span>         <span class="params">|       |</span></span><br><span class="line"><span class="params">| authentication_string  |</span> text                              <span class="params">| NO   |</span>     <span class="params">| NULL    |</span>       <span class="params">|</span></span><br><span class="line"><span class="params">+------------------------+-----------------------------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="params">42 rows <span class="keyword">in</span> set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h1 id="第三章-LNMP环境配置"><a href="#第三章-LNMP环境配置" class="headerlink" title="第三章 LNMP环境配置"></a>第三章 LNMP环境配置</h1><h2 id="3-1-Fastcgi语法"><a href="#3-1-Fastcgi语法" class="headerlink" title="3.1 Fastcgi语法"></a>3.1 Fastcgi语法</h2><p>设置 fastcgi 服务器的地址，该地址可以指定为域名或 IP 地址，以及端口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Syntax: fastcgi_pass address;</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: location, <span class="keyword">if</span> in location</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法示例</span></span><br><span class="line">fastcgi_pass localhost:<span class="number">9000</span>;</span><br><span class="line">fastcgi_pass unix:/tmp/fastcgi.socket;</span><br></pre></td></tr></table></figure><p>设置 fastcgi 默认的首页文件，需要结合 fastcgi_param 一起设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: fastcgi_index name;</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><p>通过 fastcgi_param 设置变量，并将设置的变量传递到后端的 fastcgi 服务器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Syntax: fastcgi_param parameter value [if_not_empty];</span><br><span class="line"><span class="keyword">Default</span>: —</span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法示例</span></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /code$fastcgi_script_name;</span><br></pre></td></tr></table></figure><h2 id="3-2-最终Nginx连接FastCGI服务器配置如下"><a href="#3-2-最终Nginx连接FastCGI服务器配置如下" class="headerlink" title="3.2 最终Nginx连接FastCGI服务器配置如下"></a>3.2 最终Nginx连接FastCGI服务器配置如下</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/php.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name www.xoxo.com;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    root /code;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root /code;</span><br><span class="line">        fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9000</span>;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-在-code目录下创建info-php文件并访问测试"><a href="#3-3-在-code目录下创建info-php文件并访问测试" class="headerlink" title="3.3 在/code目录下创建info.php文件并访问测试"></a>3.3 在/code目录下创建info.php文件并访问测试</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># mkdir /code</span></span><br><span class="line">[root@web01 ~]<span class="comment"># chown -R www:www /code/</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cat /code/info.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-检查nginx语法并重启"><a href="#3-4-检查nginx语法并重启" class="headerlink" title="3.4 检查nginx语法并重启"></a>3.4 检查nginx语法并重启</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test <span class="keyword">is</span> successful</span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><h2 id="3-5-绑定hosts然后在浏览器访问"><a href="#3-5-绑定hosts然后在浏览器访问" class="headerlink" title="3.5 绑定hosts然后在浏览器访问"></a>3.5 绑定hosts然后在浏览器访问</h2><p><a href="http://links.jianshu.com/go?to=http://www.xoxo.com/info.php">http://www.xoxo.com/info.php</a></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-afbdb80c1c011970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="3-6-测试php和数据库访问是否正常"><a href="#3-6-测试php和数据库访问是否正常" class="headerlink" title="3.6 测试php和数据库访问是否正常"></a>3.6 测试php和数据库访问是否正常</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /code/mysql.php </span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    $username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    $password = <span class="string">&quot;xoxo123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    $conn = mysqli_connect($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 检测连接</span></span><br><span class="line">    <span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;php 连接 MySQL 数据库成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-6-通过浏览器访问数据库页面"><a href="#3-6-通过浏览器访问数据库页面" class="headerlink" title="3.6 通过浏览器访问数据库页面"></a>3.6 通过浏览器访问数据库页面</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-3a48ddeaf5e0131e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="img"></p><h1 id="第四章-部署博客Wordpress"><a href="#第四章-部署博客Wordpress" class="headerlink" title="第四章 部署博客Wordpress"></a>第四章 部署博客Wordpress</h1><h2 id="4-1-配置Nginx虚拟主机站点"><a href="#4-1-配置Nginx虚拟主机站点" class="headerlink" title="4.1 配置Nginx虚拟主机站点"></a>4.1 配置Nginx虚拟主机站点</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/wordpress.conf    </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name blog.xoxo.com;</span><br><span class="line">    root /code/wordpress;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root /code/wordpress;</span><br><span class="line">        fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9000</span>;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-重启nginx"><a href="#4-2-重启nginx" class="headerlink" title="4.2 重启nginx"></a>4.2 重启nginx</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><h2 id="4-3-下载解压wordpress到代码目录"><a href="#4-3-下载解压wordpress到代码目录" class="headerlink" title="4.3 下载解压wordpress到代码目录"></a>4.3 下载解压wordpress到代码目录</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mkdir /code</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cd /code/</span></span><br><span class="line">[<span class="meta">root@web01 /code</span>]<span class="meta"># wget http://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz</span></span><br><span class="line">[<span class="meta">root@web01 /code</span>]<span class="meta"># tar xf wordpress-4.9.4-zh_CN.tar.gz </span></span><br><span class="line">[<span class="meta">root@web01 /code</span>]<span class="meta"># chown -R www:www /code/wordpress</span></span><br></pre></td></tr></table></figure><h2 id="4-4-创建wordpress数据库"><a href="#4-4-创建wordpress数据库" class="headerlink" title="4.4 创建wordpress数据库"></a>4.4 创建wordpress数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 /code]<span class="comment"># mysql -uroot -poldboy123</span></span><br><span class="line">&gt; create database wordpress;</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="4-5-浏览器访问wordpress并部署"><a href="#4-5-浏览器访问wordpress并部署" class="headerlink" title="4.5 浏览器访问wordpress并部署"></a>4.5 浏览器访问wordpress并部署</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-dd38100064951e77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-917f136b8d1f2221.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-63fc1d8feb9a6d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-fd5a927bf9abb1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-bf85028664bb24e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-9cf599089d9c11f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/808/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-e9d90ec2658dd12d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第五章-部署问答网站Wecenter"><a href="#第五章-部署问答网站Wecenter" class="headerlink" title="第五章 部署问答网站Wecenter"></a>第五章 部署问答网站Wecenter</h1><h2 id="5-1-配置Nginx虚拟站点"><a href="#5-1-配置Nginx虚拟站点" class="headerlink" title="5.1 配置Nginx虚拟站点"></a>5.1 配置Nginx虚拟站点</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/conf.d/wecenter.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name zh.xoxo.com;</span><br><span class="line">    root /code/zh;</span><br><span class="line">    index index.php index.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root /code/zh;</span><br><span class="line">        fastcgi_pass <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9000</span>;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-下载解压wecenter并授权"><a href="#5-2-下载解压wecenter并授权" class="headerlink" title="5.2 下载解压wecenter并授权"></a>5.2 下载解压wecenter并授权</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mkdir /code/zh -p</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># cd /opt/</span></span><br><span class="line">[<span class="meta">root@web01 /opt</span>]<span class="meta"># rz</span></span><br><span class="line">[<span class="meta">root@web01 /opt</span>]<span class="meta"># ls</span></span><br><span class="line">WeCenter_3<span class="number">-3</span><span class="number">-2.</span>zip</span><br><span class="line">[<span class="meta">root@web01 /opt</span>]<span class="meta"># unzip WeCenter_3-3-2.zip -d /code/zh/</span></span><br><span class="line">[<span class="meta">root@web01 /opt</span>]<span class="meta"># chown -R www:www /code/</span></span><br></pre></td></tr></table></figure><h2 id="5-3-创建wecenter数据库"><a href="#5-3-创建wecenter数据库" class="headerlink" title="5.3 创建wecenter数据库"></a>5.3 创建wecenter数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># mysql -uroot -poldboy123</span></span><br><span class="line">&gt; create database zh;</span><br><span class="line">&gt; <span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><h2 id="5-4-浏览器访问"><a href="#5-4-浏览器访问" class="headerlink" title="5.4 浏览器访问"></a>5.4 浏览器访问</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-45af6dbf2723e166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-ba367727e768d79e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-31c7fb7b33531170.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-f70702b0f513d8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="5-5-清除首页安装文件"><a href="#5-5-清除首页安装文件" class="headerlink" title="5.5 清除首页安装文件"></a>5.5 清除首页安装文件</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># rm -rf /code/zh/install</span></span><br></pre></td></tr></table></figure><h1 id="第六章-拆分数据库"><a href="#第六章-拆分数据库" class="headerlink" title="第六章 拆分数据库"></a>第六章 拆分数据库</h1><h2 id="6-1-为什么要进行数据库的拆分"><a href="#6-1-为什么要进行数据库的拆分" class="headerlink" title="6.1 为什么要进行数据库的拆分"></a>6.1 为什么要进行数据库的拆分</h2><p>由于单台服务器运行 LNMP 架构会导致网站访问缓慢，当内存被吃满时，很容易导致系统出现 oom，从而 kill 掉MySQL 数据库，所以需要将 web 和数据库进行独立部署</p><h2 id="6-2-数据库拆分后解决了什么问题"><a href="#6-2-数据库拆分后解决了什么问题" class="headerlink" title="6.2 数据库拆分后解决了什么问题"></a>6.2 数据库拆分后解决了什么问题</h2><p>1.缓解 web 网站的压力<br> 2.增强数据库读写性能<br> 3.提高用户访问的速度</p><h2 id="6-3-数据库拆分架构演变过程"><a href="#6-3-数据库拆分架构演变过程" class="headerlink" title="6.3 数据库拆分架构演变过程"></a>6.3 数据库拆分架构演变过程</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-bded52866d935067.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="6-4-数据库拆分环境搭建"><a href="#6-4-数据库拆分环境搭建" class="headerlink" title="6.4 数据库拆分环境搭建"></a>6.4 数据库拆分环境搭建</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">web01</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span>    <span class="selector-tag">nginx</span>+<span class="selector-tag">php</span></span><br><span class="line"><span class="selector-tag">db01</span>    172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.51</span>  <span class="selector-tag">mysql</span></span><br></pre></td></tr></table></figure><h2 id="6-5-数据库拆分详细步骤"><a href="#6-5-数据库拆分详细步骤" class="headerlink" title="6.5 数据库拆分详细步骤"></a>6.5 数据库拆分详细步骤</h2><h3 id="6-5-1-web01上备份数据库并拷贝到db01上"><a href="#6-5-1-web01上备份数据库并拷贝到db01上" class="headerlink" title="6.5.1 web01上备份数据库并拷贝到db01上"></a>6.5.1 web01上备份数据库并拷贝到db01上</h3><p>备份 web01 上的数据库,xoxo123 是数据库密码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># mysqldump -uroot -p&#x27;xoxo123&#x27; -A --single-transaction &gt; mysql-all.sql</span></span><br></pre></td></tr></table></figure><p>将 web01 上备份的数据库拷贝至 db01 服务器上</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># scp mysql-all.sql 10.0.1.51:/tmp</span></span><br></pre></td></tr></table></figure><h3 id="6-5-2-db01恢复数据库"><a href="#6-5-2-db01恢复数据库" class="headerlink" title="6.5.2 db01恢复数据库"></a>6.5.2 db01恢复数据库</h3><p>将 web01 服务器上推送的数据库备份文件恢复至 db01 服务器新数据库中</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># yum install mariadb mariadb-server -y</span></span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysqladmin password &#x27;xoxo123&#x27;</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p&#x27;xoxo123&#x27; &lt; /tmp/mysql-all.sql</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysql -uroot -p&#x27;xoxo123&#x27; -e &quot;show databases;&quot;</span></span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| Database           |</span></span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| information_schema |</span></span><br><span class="line"><span class="params">| mysql              |</span></span><br><span class="line"><span class="params">| performance_schema |</span></span><br><span class="line"><span class="params">| test               |</span></span><br><span class="line"><span class="params">| wordpress          |</span></span><br><span class="line"><span class="params">| zh                 |</span></span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="6-6-3-db01数据库进行授权"><a href="#6-6-3-db01数据库进行授权" class="headerlink" title="6.6.3 db01数据库进行授权"></a>6.6.3 db01数据库进行授权</h3><p>在新数据库上授权, 允许所有网段, 通过 all 账户连接并操作该数据库<br> 授权所有权限 grant all privileges<br> 授权所有库所有表 <em>.</em><br> 将授权赋予给哪个用户，这个用户只能通过哪个网段过来(%所有) ‘all’@’%’<br> 授权该用户登录的密码 identified by</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@db01 ~</span>]<span class="meta"># mysql -uroot -p&#x27;xoxo123&#x27;</span></span><br><span class="line">&gt; grant all privileges <span class="keyword">on</span> *.* to <span class="string">&#x27;all&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;xoxo123&#x27;</span>;</span><br><span class="line">&gt; flush privileges; </span><br><span class="line">&gt;exit;</span><br></pre></td></tr></table></figure><p>测试使用IP地址能不能登陆</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -uall -p&#x27;xoxo123&#x27; -h 10.0.1.51</span></span><br><span class="line">&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| Database           |</span></span><br><span class="line">+--------------------+</span><br><span class="line"><span class="params">| information_schema |</span></span><br><span class="line"><span class="params">| mysql              |</span></span><br><span class="line"><span class="params">| performance_schema |</span></span><br><span class="line"><span class="params">| test               |</span></span><br><span class="line"><span class="params">| wordpress          |</span></span><br><span class="line"><span class="params">| zh                 |</span></span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="6-6-4-web01修改代码连接到新数据库"><a href="#6-6-4-web01修改代码连接到新数据库" class="headerlink" title="6.6.4 web01修改代码连接到新数据库"></a>6.6.4 web01修改代码连接到新数据库</h3><p>修改wordpress</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># vim /code/wordpress/wp-config.php</span></span><br><span class="line"><span class="comment">/** MySQL数据库用户名 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;all&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL数据库密码 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;xoxo123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL主机 */</span></span><br><span class="line">define(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;172.16.1.51&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改wecenter</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@web</span>01 ~]# vim /code/zh/system/config/database.php</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;172.16.1.51&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;xoxo123&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;zh&#x27;</span>,</span><br></pre></td></tr></table></figure><p>停止web01上的数据库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># systemctl stop mariadb.service </span></span><br></pre></td></tr></table></figure><h3 id="6-6-5-测试访问"><a href="#6-6-5-测试访问" class="headerlink" title="6.6.5 测试访问"></a>6.6.5 测试访问</h3><p>此时如果打开网页没有问题则表明数据库拆分完成</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-99b22a82925ed9d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-a81bb35ff49e4c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第七章-拓展WEB服务器"><a href="#第七章-拓展WEB服务器" class="headerlink" title="第七章 拓展WEB服务器"></a>第七章 拓展WEB服务器</h1><h2 id="7-1-为什么要拓展多台web节点"><a href="#7-1-为什么要拓展多台web节点" class="headerlink" title="7.1 为什么要拓展多台web节点"></a>7.1 为什么要拓展多台web节点</h2><p>单台 web 服务器能抗住的访问量是有限的，配置多台 web 服务器能提升更高的访问速度</p><h2 id="7-2-拓展多台web解决了什么问题"><a href="#7-2-拓展多台web解决了什么问题" class="headerlink" title="7.2 拓展多台web解决了什么问题"></a>7.2 拓展多台web解决了什么问题</h2><p>1.单台 web 节点如果故障，会导致业务 down 机<br> 2.多台 web 节点能保证业务的持续稳定，扩展性高<br> 3.多台 web 节点能有效的提升用户访问网站的速度</p><h2 id="7-3-多台web服务器架构组成"><a href="#7-3-多台web服务器架构组成" class="headerlink" title="7.3 多台web服务器架构组成"></a>7.3 多台web服务器架构组成</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-31c746a3e1874575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="7-4-多台web服务器思路"><a href="#7-4-多台web服务器思路" class="headerlink" title="7.4 多台web服务器思路"></a>7.4 多台web服务器思路</h2><p>1.可以使用ansible批量部署多台web服务器<br> 2.配置内网私有yum仓库<br> 3 按照web01的步骤安装好nginx和php，然后远程拷贝代码到新机器</p><h2 id="7-5-正常配置步骤"><a href="#7-5-正常配置步骤" class="headerlink" title="7.5 正常配置步骤"></a>7.5 正常配置步骤</h2><h3 id="7-5-1-创建用户名密码"><a href="#7-5-1-创建用户名密码" class="headerlink" title="7.5.1 创建用户名密码"></a>7.5.1 创建用户名密码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># groupadd www -g 666</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># useradd www -s /sbin/nologin -M -u 666 -g 666</span></span><br></pre></td></tr></table></figure><h3 id="7-5-2-安装NP"><a href="#7-5-2-安装NP" class="headerlink" title="7.5.2 安装NP"></a>7.5.2 安装NP</h3><p>可以直接从web01上拷贝yum源到本机yum目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># scp -rp root@172.16.1.7:/etc/yum.repos.d/* /etc/yum.repos.d/</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># scp -rp root@172.16.1.7:/etc/pki/rpm-gpg/* /etc/pki/rpm-gpg/</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># yum install nginx -y</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb </span></span><br></pre></td></tr></table></figure><h3 id="7-5-3-拷贝web01的nginx配置文件到web02"><a href="#7-5-3-拷贝web01的nginx配置文件到web02" class="headerlink" title="7.5.3 拷贝web01的nginx配置文件到web02"></a>7.5.3 拷贝web01的nginx配置文件到web02</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># scp -rp root@172.16.1.7:/etc/nginx /etc/</span></span><br></pre></td></tr></table></figure><h3 id="7-5-4-拷贝web01的php配置文件到web02"><a href="#7-5-4-拷贝web01的php配置文件到web02" class="headerlink" title="7.5.4 拷贝web01的php配置文件到web02"></a>7.5.4 拷贝web01的php配置文件到web02</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># scp -rp root@172.16.1.7:/etc/php-fpm.d /etc/</span></span><br></pre></td></tr></table></figure><h3 id="7-5-5-拷贝代码目录到web02"><a href="#7-5-5-拷贝代码目录到web02" class="headerlink" title="7.5.5 拷贝代码目录到web02"></a>7.5.5 拷贝代码目录到web02</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># tar czf code.tar.gz /code</span></span><br><span class="line">[<span class="meta">root@web01 ~</span>]<span class="meta"># scp code.tar.gz root@172.16.1.8:/tmp</span></span><br></pre></td></tr></table></figure><h3 id="7-5-6-web02上将代码解压到相应目录"><a href="#7-5-6-web02上将代码解压到相应目录" class="headerlink" title="7.5.6 web02上将代码解压到相应目录"></a>7.5.6 web02上将代码解压到相应目录</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># tar zxf /tmp/code.tar.gz -C /</span></span><br></pre></td></tr></table></figure><h3 id="7-5-7-web02上启动nginx和php-fpm并加入开机自启动"><a href="#7-5-7-web02上启动nginx和php-fpm并加入开机自启动" class="headerlink" title="7.5.7 web02上启动nginx和php-fpm并加入开机自启动"></a>7.5.7 web02上启动nginx和php-fpm并加入开机自启动</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># systemctl start nginx php-fpm</span></span><br><span class="line">[<span class="meta">root@web02 ~</span>]<span class="meta"># systemctl enable nginx php-fpm </span></span><br></pre></td></tr></table></figure><h3 id="7-5-8-web访问测试"><a href="#7-5-8-web访问测试" class="headerlink" title="7.5.8 web访问测试"></a>7.5.8 web访问测试</h3><p>修改hosts为web02的地址，然后浏览器访问测试</p><h1 id="第八章-将静态资源挂载到共享存储"><a href="#第八章-将静态资源挂载到共享存储" class="headerlink" title="第八章 将静态资源挂载到共享存储"></a>第八章 将静态资源挂载到共享存储</h1><h2 id="8-1-为什么要拆分静态资源到独立服务器"><a href="#8-1-为什么要拆分静态资源到独立服务器" class="headerlink" title="8.1 为什么要拆分静态资源到独立服务器"></a>8.1 为什么要拆分静态资源到独立服务器</h2><p>当后端的 web 节点出现多台时，会导致用户上传的图片、视频附件等内容仅上传至一台 web 服务器，那么其他的web 服务器则无法访问到该图片</p><h2 id="8-2-新增一台nfs存储解决了什么问题"><a href="#8-2-新增一台nfs存储解决了什么问题" class="headerlink" title="8.2 新增一台nfs存储解决了什么问题"></a>8.2 新增一台nfs存储解决了什么问题</h2><p>1.保证了多台 web 节点静态资源一致。<br> 2.有效节省多台 web 节点的存储空间。<br> 3.统一管理静态资源，便于后期推送至 CDN 进行静态资源加速</p><h2 id="8-3-多台web节点架构组成"><a href="#8-3-多台web节点架构组成" class="headerlink" title="8.3 多台web节点架构组成"></a>8.3 多台web节点架构组成</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-d43c3a8fe3f54693.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="8-4-多台web节点环境规划"><a href="#8-4-多台web节点环境规划" class="headerlink" title="8.4 多台web节点环境规划"></a>8.4 多台web节点环境规划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">web01      nginx+php</span><br><span class="line">web02      nginx+php</span><br><span class="line">db01        mysql</span><br><span class="line">nfs           nfs</span><br></pre></td></tr></table></figure><h2 id="8-5-共享存储配置"><a href="#8-5-共享存储配置" class="headerlink" title="8.5 共享存储配置"></a>8.5 共享存储配置</h2><h3 id="8-5-1-安装配置NFS"><a href="#8-5-1-安装配置NFS" class="headerlink" title="8.5.1 安装配置NFS"></a>8.5.1 安装配置NFS</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@nfs01 ~</span>]<span class="meta"># yum install nfs-utils -y</span></span><br><span class="line">[<span class="meta">root@nfs01 ~</span>]<span class="meta"># cat /etc/exports</span></span><br><span class="line">/data/blog <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>(rw,sync,all_squash,anonuid=<span class="number">666</span>,anongid=<span class="number">666</span>)</span><br><span class="line">/data/zh <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>(rw,sync,all_squash,anonuid=<span class="number">666</span>,anongid=<span class="number">666</span>)</span><br></pre></td></tr></table></figure><h3 id="8-5-2-创建共享目录并进行授权"><a href="#8-5-2-创建共享目录并进行授权" class="headerlink" title="8.5.2 创建共享目录并进行授权"></a>8.5.2 创建共享目录并进行授权</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@nfs01 ~</span>]<span class="meta"># mkdir /data/&#123;blog,zh&#125; -p</span></span><br><span class="line">[<span class="meta">root@nfs01 ~</span>]<span class="meta"># chown -R www.www /data</span></span><br></pre></td></tr></table></figure><h3 id="8-5-3-启动nfs服务并加入开机自启"><a href="#8-5-3-启动nfs服务并加入开机自启" class="headerlink" title="8.5.3 启动nfs服务并加入开机自启"></a>8.5.3 启动nfs服务并加入开机自启</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@nfs01 ~</span>]<span class="meta"># systemctl restart nfs-server</span></span><br></pre></td></tr></table></figure><h2 id="8-6-web01端操作步骤如下"><a href="#8-6-web01端操作步骤如下" class="headerlink" title="8.6 web01端操作步骤如下"></a>8.6 web01端操作步骤如下</h2><h3 id="8-6-1-web01节点挂在nfs"><a href="#8-6-1-web01节点挂在nfs" class="headerlink" title="8.6.1 web01节点挂在nfs"></a>8.6.1 web01节点挂在nfs</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># yum install nfs-utils -y</span></span><br><span class="line">[root@web01 ~]<span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">1.31</span><span class="symbol">:</span></span><br><span class="line">/data/zh   <span class="number">172.16</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br><span class="line">/data/blog <span class="number">172.16</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="8-6-2-查找Wordpress-静态资源存放的位置"><a href="#8-6-2-查找Wordpress-静态资源存放的位置" class="headerlink" title="8.6.2 查找Wordpress 静态资源存放的位置"></a>8.6.2 查找Wordpress 静态资源存放的位置</h3><p>在wordpress的文章里添加一张图片，然后查看图片URL资源</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-7eb776f29a163116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p> 这里地址为：<br><a href="http://links.jianshu.com/go?to=http://blog.xoxo.com/wp-content/uploads/2019/07/DNS">http://blog.xoxo.com/wp-content/uploads/2019/07/DNS</a>图.png</p><h3 id="8-6-3-备份web01服务器上Wordpress-的静态资源"><a href="#8-6-3-备份web01服务器上Wordpress-的静态资源" class="headerlink" title="8.6.3 备份web01服务器上Wordpress 的静态资源"></a>8.6.3 备份web01服务器上Wordpress 的静态资源</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cd /code/wordpress/wp-content</span></span><br><span class="line">[root@web01 /code/wordpress/wp-content]<span class="comment"># cp -a uploads/ uploads_bak/</span></span><br></pre></td></tr></table></figure><h3 id="8-6-4-web01客户端执行挂载操作"><a href="#8-6-4-web01客户端执行挂载操作" class="headerlink" title="8.6.4 web01客户端执行挂载操作"></a>8.6.4 web01客户端执行挂载操作</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@web01 /code/wordpress/wp-content</span>]<span class="meta"># mount -t nfs 172.16.1.31:/data/blog /code/wordpress/wp-content/uploads/</span></span><br><span class="line">[<span class="meta">root@web01 /code/wordpress/wp-content</span>]<span class="meta"># cp -rp uploads_bak/* uploads/</span></span><br></pre></td></tr></table></figure><h3 id="8-6-5-将挂载信息加入开机自启"><a href="#8-6-5-将挂载信息加入开机自启" class="headerlink" title="8.6.5 将挂载信息加入开机自启"></a>8.6.5 将挂载信息加入开机自启</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># tail -1 /etc/fstab </span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.31</span><span class="symbol">:/data/blog</span> /code/wordpress/wp-content/uploads nfs defaults <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="8-7-web02端操作"><a href="#8-7-web02端操作" class="headerlink" title="8.7 web02端操作"></a>8.7 web02端操作</h2><p>web02端操作和web01端一样</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@web02 ~]<span class="comment"># cd /code/wordpress/wp-content</span></span><br><span class="line">[root@web02 /code/wordpress/wp-content]<span class="comment"># cp -a uploads/ uploads_bak/</span></span><br><span class="line">[root@web02 /code/wordpress/wp-content]<span class="comment"># mount -t nfs 172.16.1.31:/data/blog /code/wordpress/wp-content/uploads/</span></span><br><span class="line">[root@web02 /code/wordpress/wp-content]<span class="comment"># cp -rp uploads_bak/* uploads/</span></span><br><span class="line">[root@web02 ~]<span class="comment"># tail -1 /etc/fstab </span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">1.31</span><span class="symbol">:/data/blog</span> /code/wordpress/wp-content/uploads nfs defaults <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中小型电商公司架构演变</title>
      <link href="/posts/18399/"/>
      <url>/posts/18399/</url>
      
        <content type="html"><![CDATA[<h1 id="演变过程"><a href="#演变过程" class="headerlink" title="演变过程"></a>演变过程</h1><p><img src="https://cdn.jsdelivr.net/gh/xoxoyun/MCDN/usr/uploads/2020/03/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98.jpg" alt="网架构演变"></p><h1 id="完成架构图"><a href="#完成架构图" class="headerlink" title="完成架构图"></a>完成架构图</h1><p><img src="http://www.kococ.cn/usr/uploads/2020/03/%E5%AE%8C%E6%88%90%E6%9E%B6%E6%9E%84%E5%9B%BE.bmp" alt="请输入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构演变过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述文件系统共享网络服务NFS</title>
      <link href="/posts/4399/"/>
      <url>/posts/4399/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-存储与nfs存储概述"><a href="#第1章-存储与nfs存储概述" class="headerlink" title="第1章 存储与nfs存储概述"></a>第1章 存储与nfs存储概述</h1><blockquote><p>1.为什么用共享存储<br>2.存储有哪些工具<br>3.共享存储应用场景有哪些<br>4.部署nfs共享存储<br>5.客户端尝试连接共享存储</p></blockquote><p><strong>什么是NFS？</strong><br>NFS 是 Network File System 的缩写及网络文件系统。 NFS 主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。<br>NFS 系统和 Windows 网络共享、网络驱动器类似, 只不过 windows 用于局域网, NFS 用于企业集群架构中, 如果是大型网站, 会用到更复杂的分布式文件系统 FastDFS,glusterfs,HDFS<br><strong>那么我们为什么要使用数据存储共享服务？</strong></p><blockquote><p>1.实现多台服务器之间数据共享<br>2.实现多台服务器之间数据一致</p></blockquote><h2 id="1-1-NFS应用场景"><a href="#1-1-NFS应用场景" class="headerlink" title="1.1 NFS应用场景"></a>1.1 NFS应用场景</h2><p>下面我将通过图解给大家展示集群需要共享存储服务的理由。<br>1.A 用户上传图片经过负载均衡，负载均衡将上传请求调度至 WEB1 服务器上。<br>2.B 用户访问 A 用户上传的图片，此时 B 用户被负载均衡调度至 WEB2 上，因为 WEB2 上没有这张图片，所以 B用户无法看到 A 用户传的图片</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-126daaf52c3df95f.png" alt="请输入图片描述"></p><p>如果有共享存储的情况<br>1.A 用户上传图片无论被负载均衡调度至 WEB1 还是 WEB2, 最终数据都被写入至共享存储<br>2.B 用户访问 A 用户上传图片时，无论调度至 WEB1 还是 WEB2，最终都会上共享存储访问对应的文件，这样就可以访问到资源了</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-97354c7a9be2dea0.png" alt="请输入图片描述"></p><h2 id="1-2-nfs存储工作原理实现"><a href="#1-2-nfs存储工作原理实现" class="headerlink" title="1.2 nfs存储工作原理实现"></a>1.2 nfs存储工作原理实现</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b92ace7bacf7aeb2.png" alt="请输入图片描述"></p><p>NFS工作原理</p><pre><code>1.用户进程访问 NFS 客户端，使用不同的函数对数据进行处理2.NFS 客户端通过 TCP/IP 的方式传递给 NFS 服务端3.NFS 服务端接收到请求后，会先调用 portmap 进程进行端口映射。4.nfsd 进程用于判断 NFS 客户端是否拥有权限连接 NFS 服务端。5.Rpc.mount 进程判断客户端是否有对应的权限进行验证。6.idmap 进程实现用户映射和压缩7.最后 NFS 服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件。注意: rpc 是一个远程过程调用，那么使用 nfs 必须有 rpc 服务</code></pre><h2 id="1-3-前提条件"><a href="#1-3-前提条件" class="headerlink" title="1.3 前提条件"></a>1.3 前提条件</h2><blockquote><p>1.nfs依赖于RPC服务来传递消息<br>2.NFS服务启动的端口号是随机的,启动之后会向本地的RCP注册<br>3.先启动RPC服务,再启动NFS服务<br>4.NFS和RPC之间的通讯是他们自己内部完成的,对于用户来说无感知<br>5.NFS客户端和服务端不会直接沟通,必须通过RPC服务传递消息<br>6.防火墙要开放RPC服务的端口</p></blockquote><h1 id="第2章-nfs服务端部署"><a href="#第2章-nfs服务端部署" class="headerlink" title="第2章 nfs服务端部署"></a>第2章 nfs服务端部署</h1><h2 id="2-1-安装nfs"><a href="#2-1-安装nfs" class="headerlink" title="2.1 安装nfs"></a>2.1 安装nfs</h2><pre><code>yum install nfs-utils -y</code></pre><h2 id="2-2-配置参数"><a href="#2-2-配置参数" class="headerlink" title="2.2 配置参数"></a>2.2 配置参数</h2><p>nfs 服务程序的配置文件为/etc/exports，需要严格按照共享目录的路径 允许访问的 NFS 客户端（共享权限参数）格式书写，定义要共享的目录与相应的权限，具体书写方式如下图所示</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-78e854e15c61eb10.png" alt="111"></p><p>配置文件参数解释：<br>执行 man exports 命令，然后切换到文件结尾，可以快速查看如下样例格式：</p><pre><code>nfs共享参数 参数作用rw 读写权限ro 只读权限root_squash当 NFS 客户端以 root 管理员访问时，映射为 NFS 服务器的匿名用户(不常用)no_root_squash当 NFS 客户端以 root 管理员访问时，映射为 NFS 服务器的 root 管理员(不常用)all_squash无论 NFS 客户端使用什么账户访问，均映射为 NFS 服务器的匿名用户(常用)no_all_squash无论 NFS 客户端使用什么账户访问，都不进行压缩sync同时将数据写入到内存与硬盘中，保证不丢失数据async优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据anonuid配置 all_squash 使用,指定 NFS 的用户 UID,必须存在系统anongid配置 all_squash 使用,指定 NFS 的用户 UID,必须存在系统</code></pre><h2 id="2-3-配置NFS服务端"><a href="#2-3-配置NFS服务端" class="headerlink" title="2.3 配置NFS服务端"></a>2.3 配置NFS服务端</h2><p>写入配置文件：注意！IP地址和后面的小括号没有空格</p><pre><code>[root@nfs01 ~]# cat &gt; /etc/exports &lt;&lt;EOF /data 172.16.1.0/24(rw,sync,all_squash) EOF</code></pre><p>创建数据目录和授权:</p><pre><code>[root@nfs01 ~]# mkdir /data -p[root@nfs01 ~]# chown -R nfsnobody:nfsnobody /data/</code></pre><h2 id="2-4-启动nfs"><a href="#2-4-启动nfs" class="headerlink" title="2.4 启动nfs"></a>2.4 启动nfs</h2><pre><code>[root@nfs01 ~]# systemctl start nfs-server.service</code></pre><h2 id="2-5-检查命令"><a href="#2-5-检查命令" class="headerlink" title="2.5 检查命令"></a>2.5 检查命令</h2><pre><code>[root@nfs01 ~]# showmount -e 172.16.1.31Export list for 172.16.1.31:/data 172.16.1.0/24</code></pre><h2 id="2-6-加入开机自启动"><a href="#2-6-加入开机自启动" class="headerlink" title="2.6 加入开机自启动"></a>2.6 加入开机自启动</h2><p>在使用 NFS 服务进行文件共享之前，需要使用 RPC（Remote Procedure Call 远程过程调用服务将 NFS 服务器的IP 地址和端口号信息发送给客户端。因此，在启动 NFS 服务之前，需要先重启并启用 rpcbind 服务程序,同时都加入开机自启动</p><pre><code>[root@nfs01 ~]# systemctl enable rpcbind nfs-server[root@nfs01 ~]# systemctl restart rpcbind nfs-server</code></pre><h2 id="2-7-客户端挂载命令"><a href="#2-7-客户端挂载命令" class="headerlink" title="2.7 客户端挂载命令"></a>2.7 客户端挂载命令</h2><p>客户端安装nfs服务十分简单，只需要安装nfs软件包即可</p><pre><code>[root@backup ~]# yum install nfs-utils rpcbind -y</code></pre><p>安装完成后只需要启动rpcbind，不需要启动nfs</p><pre><code>[root@backup ~]# systemctl restart rpcbind</code></pre><p>使用showmount命令查看nfs共享信息查询 NFS 服务器的远程共享信息，其输出格式为“共享的目录名称 允许使用客户端地址”。</p><pre><code>[root@backup ~]# showmount -e 172.16.1.31Export list for 172.16.1.31:/data 172.16.1.0/24 </code></pre><p>挂载命令: 创建挂载目录<br>在 NFS 客户端创建一个挂载目录, 使用 mount 命令并结合-t 参数, 指定要挂载的文件系统的类型, 并在命令后面写上服务器的 IP 地址, 以及服务器上的共享目录, 最后需要写上要挂载到本地系统(客户端)的目录</p><pre><code>[root@backup ~]# mkdir /data -p[root@backup ~]# mount -t nfs 172.16.1.31:/data /data</code></pre><p>查看是否挂载成功：</p><pre><code>[root@backup ~]# df -h文件系统           容量  已用  可用 已用% 挂载点/dev/sda3           18G  1.9G   17G   11% /devtmpfs           480M     0  480M    0% /devtmpfs              489M     0  489M    0% /dev/shmtmpfs              489M   32M  458M    7% /runtmpfs              489M     0  489M    0% /sys/fs/cgroup/dev/sda1         1014M  110M  905M   11% /boottmpfs               98M     0   98M    0% /run/user/0172.16.1.31:/data   18G  1.9G   17G   11% /data</code></pre><p>测试写入数据是否正常</p><pre><code>[root@backup ~]# echo &quot;123&quot; &gt; /data/123.txt[root@backup ~]# cat /data/123.txt 123</code></pre><p>写入开机自动挂载</p><pre><code>[root@backup ~]# vim /etc/fstab [root@backup ~]# tail -1 /etc/fstab       172.16.1.31:/data                         /data                   nfs     defaults        0 0[root@backup ~]# mount -a[root@backup ~]# df -h文件系统           容量  已用  可用 已用% 挂载点/dev/sda3           18G  1.9G   17G   11% /devtmpfs           480M     0  480M    0% /devtmpfs              489M     0  489M    0% /dev/shmtmpfs              489M   32M  458M    7% /runtmpfs              489M     0  489M    0% /sys/fs/cgroup/dev/sda1         1014M  110M  905M   11% /boottmpfs               98M     0   98M    0% /run/user/0172.16.1.31:/data   18G  1.9G   17G   11% /data</code></pre><p>卸载命令：注意!卸载的时候如果提示”umount.nfs: /nfsdir: device is busy”先切换到其他目录再卸载</p><pre><code>[root@backup ~]# umount /data/</code></pre><p>强制卸载命令：</p><pre><code>[root@backup ~]# umount -rl /data/</code></pre><h2 id="2-8-NFS-权限验证"><a href="#2-8-NFS-权限验证" class="headerlink" title="2.8 NFS 权限验证"></a>2.8 NFS 权限验证</h2><p>2.8.1 验证ro权限<br>服务端配置：</p><pre><code>[root@nfs01 ~]# cat /etc/exports/data 172.16.1.0/24(ro,sync,all_squash)[root@nfs01 ~]# systemctl restart nfs-server.service[root@nfs01 ~]# showmount -e 172.16.1.31Export list for 172.16.1.31:/data 172.16.1.0/24</code></pre><p>客户端挂载：</p><pre><code>[root@backup ~]# mount -t nfs 172.16.1.31:/data /data[root@backup ~]# df -h文件系统           容量  已用  可用 已用% 挂载点/dev/sda3           18G  1.9G   17G   11% /devtmpfs           480M     0  480M    0% /devtmpfs              489M     0  489M    0% /dev/shmtmpfs              489M   38M  452M    8% /runtmpfs              489M     0  489M    0% /sys/fs/cgroup/dev/sda1         1014M  110M  905M   11% /boottmpfs               98M     0   98M    0% /run/user/0172.16.1.31:/data   18G  1.9G   17G   11% /data</code></pre><p>测试读取：</p><pre><code>[root@backup ~]# cat /data/123.txt 123</code></pre><p>写入测试：</p><pre><code>[root@backup ~]# echo &quot;backup&quot; &gt; /data/123.txt -bash: /data/123.txt: 权限不够</code></pre><p>2.8.2 验证all_squash、 anonuid、 anongid 权限<br>服务端配置：</p><pre><code>[root@nfs01 ~]# cat /etc/exports /data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)</code></pre><p>服务端创建用户及授权：</p><pre><code>[root@nfs01 ~]# useradd -s /sbin/nologin -M -u 666 -g 666 www[root@nfs01 ~]# id wwwuid=666(www) gid=666(www) 组=666(www)</code></pre><p>重启NFS服务：</p><pre><code>[root@nfs01 ~]# systemctl restart nfs-server.service</code></pre><p>更改目录授权：</p><pre><code>[root@nfs01 ~]# chown -R www:www /data/[root@nfs01 ~]# ls -ld /data/drwxr-xr-x 2 www www 35 7月  17 19:50 /data/</code></pre><p>客户端操作:</p><pre><code>[root@backup ~]# mount -t nfs 172.16.1.31:/data /data[root@backup ~]# ls -ld /data/drwxr-xr-x 2 666 666 35 7月  17 19:50 /data/[root@backup ~]# ll /data/总用量 4-rw-r--r-- 1 666 666 0 7月  17 19:50 123-rw-r--r-- 1 666 666 9 7月  17 19:46 oldzhang.txt[root@backup ~]# echo &quot;oldzhangy&quot; &gt; /data/oldzhang.txt [root@backup ~]# cat /data/oldzhang.txt                    oldzhangy</code></pre><p>我们会发现依然可以写入，但是为了避免这种情况发生，建议客户端也创建相同uid gid的用户</p><pre><code>[root@backup ~]# groupadd -g 666 www[root@backup ~]# useradd -s /sbin/nologin -M -u 666 -g 666 www[root@backup ~]# id wwwuid=666(www) gid=666(www) 组=666(www)[root@backup ~]# ls -ld /data/drwxr-xr-x 2 www www 35 7月  17 19:50 /data/[root@backup ~]# ll /data/    总用量 4-rw-r--r-- 1 www www  0 7月  17 19:50 123-rw-r--r-- 1 www www 10 7月  17 21:31 oldzhang.txt</code></pre><p>查看nfs的端口</p><pre><code>[root@nfs01 ~]# rpcinfo -p   program vers proto   port  service    100000    4   tcp    111  portmapper    100000    3   tcp    111  portmapper    100000    2   tcp    111  portmapper    100000    4   udp    111  portmapper    100000    3   udp    111  portmapper    100000    2   udp    111  portmapper    100024    1   udp  43177  status    100024    1   tcp  36750  status    100003    3   tcp   2049  nfs    100003    4   tcp   2049  nfs    100227    3   tcp   2049  nfs_acl    100003    3   udp   2049  nfs    100003    4   udp   2049  nfs    100227    3   udp   2049  nfs_acl    100021    1   udp  41388  nlockmgr    100021    3   udp  41388  nlockmgr    100021    4   udp  41388  nlockmgr    100021    1   tcp  43678  nlockmgr    100021    3   tcp  43678  nlockmgr    100021    4   tcp  43678  nlockmgr```</code></pre><p>firewall防火墙配置</p><pre><code>firewall-cmd --add-service=nfs --permanentfirewall-cmd --add-service=mountd --permanentfirewall-cmd --add-service=rpc-bind --permanentfirewall-cmd --reload</code></pre><p>iptables防火墙配置<br>参考博客<br><a href="https://www.cnblogs.com/xiangsikai/p/10297233.html">https://www.cnblogs.com/xiangsikai/p/10297233.html</a><br>启动NFS会开启如下端口：</p><pre><code>1）portmapper 端口：111 udp/tcp；2）nfs/nfs_acl 端口：2049 udp/tcp；3）mountd 端口：&quot;32768--65535&quot; udp/tcp4）nlockmgr 端口：&quot;32768--65535&quot; udp/tcp</code></pre><p>系统 RPC服务在 nfs服务启动时默认会给 mountd 和 nlockmgr 动态选取一个随机端口来进行通讯。<br>1.查看NFS启动后的端口</p><pre><code>[root@nfs01 /opt/sersync]# rpcinfo -p   program vers proto   port  service    100000    4   tcp    111  portmapper    100000    3   tcp    111  portmapper    100000    2   tcp    111  portmapper    100000    4   udp    111  portmapper    100000    3   udp    111  portmapper    100000    2   udp    111  portmapper    100024    1   udp  43177  status    100024    1   tcp  36750  status    100003    3   tcp   2049  nfs    100003    4   tcp   2049  nfs    100227    3   tcp   2049  nfs_acl    100003    3   udp   2049  nfs    100003    4   udp   2049  nfs    100227    3   udp   2049  nfs_acl    100021    1   udp  41388  nlockmgr    100021    3   udp  41388  nlockmgr    100021    4   udp  41388  nlockmgr    100021    1   tcp  43678  nlockmgr    100021    3   tcp  43678  nlockmgr    100021    4   tcp  43678  nlockmgr</code></pre><p>2.将随机的端口号设置固定</p><pre><code>[root@nfs01 ~]# vim /etc/sysconfig/nfs[root@nfs01 ~]# tail -5 /etc/sysconfig/nfsRQUOTAD_PORT=4001LOCKD_TCPPORT=4002LOCKD_UDPPORT=4002MOUNTD_PORT=4003STATD_PORT=4004</code></pre><p>3.重启nfs和rpc服务</p><pre><code>[root@nfs01 ~]# systemctl restart rpcbind.service nfs-server.service</code></pre><p>4.再次查看端口信息,发现端口号已经固定了</p><pre><code>[root@nfs01 ~]# rpcinfo -p   program vers proto   port  service    100000    4   tcp    111  portmapper    100000    3   tcp    111  portmapper    100000    2   tcp    111  portmapper    100000    4   udp    111  portmapper    100000    3   udp    111  portmapper    100000    2   udp    111  portmapper    100024    1   udp  43177  status    100024    1   tcp  36750  status    100005    1   udp   4003  mountd    100005    1   tcp   4003  mountd    100005    2   udp   4003  mountd    100005    2   tcp   4003  mountd    100005    3   udp   4003  mountd    100005    3   tcp   4003  mountd    100003    3   tcp   2049  nfs    100003    4   tcp   2049  nfs    100227    3   tcp   2049  nfs_acl    100003    3   udp   2049  nfs    100003    4   udp   2049  nfs    100227    3   udp   2049  nfs_acl    100021    1   udp   4002  nlockmgr    100021    3   udp   4002  nlockmgr    100021    4   udp   4002  nlockmgr    100021    1   tcp   4002  nlockmgr    100021    3   tcp   4002  nlockmgr    100021    4   tcp   4002  nlockmgr</code></pre><p>5.设置iptables</p><pre><code>-A INPUT -p tcp -m tcp --dport 111 -j ACCEPT-A INPUT -p udp -m udp --dport 111 -j ACCEPT-A INPUT -p tcp -m tcp --dport 2049 -j ACCEPT-A INPUT -p udp -m udp --dport 2049 -j ACCEPT-A INPUT -p tcp -m tcp --dport 4001:4004 -j ACCEPT-A INPUT -p udp -m udp --dport 4001:4004 -j ACCEPT</code></pre><p>6.保存配置</p><pre><code>iptables-save iptables -nL</code></pre><p>NFS故障案例<br>如果设置了开机自启动，但是系统启动的时候NFS并没有提供服务，就会导致开机自检的时候卡在挂在那一步<br>开机启动时添加rd.break</p><pre><code>ctrl+xmount -o remount,rw /sysroot/chroot /sysroot/</code></pre><h1 id="第3章-NFS小结"><a href="#第3章-NFS小结" class="headerlink" title="第3章 NFS小结"></a>第3章 NFS小结</h1><p>NFS 存储优点</p><blockquote><p>1.NFS 文件系统简单易用、方便部署、数据可靠、服务稳定、满足中小企业需求。<br>2.NFS 文件系统内存放的数据都在文件系统之上，所有数据都是能看得见</p></blockquote><p>NFS 存储局限</p><blockquote><p>1.存在单点故障, 如果构建高可用维护麻烦 web-&gt;nfs()-&gt;backup<br>2.NFS 数据明文, 并不对数据做任何校验。<br>3.客户端挂载 NFS 服务没有密码验证, 安全性一般(内网使用)</p></blockquote><p>NFS 应用建议</p><blockquote><p>1.生产场景应将静态数据尽可能往前端推, 减少后端存储压力<br>2.必须将存储里的静态资源通过 CDN 缓存 jpg\png\mp4\avi\css\js<br>3.如果没有缓存或架构本身历史遗留问题太大, 在多存储也无用</p></blockquote><hr><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP认识</title>
      <link href="/posts/37304/"/>
      <url>/posts/37304/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-用户访问流程"><a href="#第一章-用户访问流程" class="headerlink" title="第一章 用户访问流程"></a>第一章 用户访问流程</h1><p><img src="http://upload-images.jianshu.io/upload_images/14248468-95cb0c765edac802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="01-访问网站流程："><a href="#01-访问网站流程：" class="headerlink" title="01.访问网站流程："></a>01.访问网站流程：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00. 客户端  浏览器输入网址信息点击回车(<span class="selector-tag">www</span><span class="selector-class">.oldboyedu</span><span class="selector-class">.com</span>)</span><br><span class="line">01. 客户端  完成域名的解析过程(<span class="selector-tag">DNS</span>) </span><br><span class="line">02. 客户端  直接访问相应网站服务器  建立<span class="selector-tag">TCP</span>三次握手过程</span><br><span class="line">03. 客户端  访问网站服务器         发送<span class="selector-tag">HTTP</span>请求报文  多次</span><br><span class="line">04. 服务端  响应客户端请求         回复<span class="selector-tag">HTTP</span>响应报文  多次</span><br><span class="line">05. 客户端  浏览器看到网站页面</span><br><span class="line">06. 客户端  结束访问网站过程       完成<span class="selector-tag">TCP</span>四次挥手过程</span><br></pre></td></tr></table></figure><h2 id="02-关键名词："><a href="#02-关键名词：" class="headerlink" title="02.关键名词："></a>02.关键名词：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.域名</span><br><span class="line">2<span class="selector-class">.DNS</span>域名解析</span><br><span class="line">3<span class="selector-class">.TCP</span>三次握手</span><br><span class="line">4<span class="selector-class">.TCP</span>四次挥手</span><br><span class="line">5<span class="selector-class">.HTTP</span>请求报文</span><br><span class="line">6<span class="selector-class">.HTTP</span>响应报文</span><br></pre></td></tr></table></figure><h1 id="第二章-DNS域名解析"><a href="#第二章-DNS域名解析" class="headerlink" title="第二章 DNS域名解析"></a>第二章 DNS域名解析</h1><h2 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h2><p>DNS,全称Domain Name System/Serve<br> 它在一个网站运行中起到了至关重要的作用<br> 它的主要作用是负责把网站域名解析为对应的IP地址<br> 例如:把<a href="http://links.jianshu.com/go?to=http://www.etiantian.org">www.etiantian.org</a>解析为对应的IP地址记录如1.1.1.1,这个从域名到IP的解析过程称为A记录,即Address Record<br> DNS常用记录类型主要有</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@记录</span><br><span class="line">A记录</span><br><span class="line"><span class="built_in">CNAME</span>记录</span><br></pre></td></tr></table></figure><p>阿里云的DNS解析界面</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-445161470b1607f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="DNS系统树状结构图"><a href="#DNS系统树状结构图" class="headerlink" title="DNS系统树状结构图"></a>DNS系统树状结构图</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-400fe050806b95e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="DNS解析流程图"><a href="#DNS解析流程图" class="headerlink" title="DNS解析流程图"></a>DNS解析流程图</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-67597f2486b75de5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image.png</p><h2 id="使用dig命令追踪DNS解析过程"><a href="#使用dig命令追踪DNS解析过程" class="headerlink" title="使用dig命令追踪DNS解析过程"></a>使用dig命令追踪DNS解析过程</h2><p>安装dig命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="built_in">bind</span>-utils -y</span><br></pre></td></tr></table></figure><p>使用dig命令追踪</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@m01 ~]</span># <span class="selector-tag">dig</span> +<span class="selector-tag">trace</span> <span class="selector-tag">www</span><span class="selector-class">.oldboyedu</span><span class="selector-class">.com</span>        </span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; <span class="selector-tag">DiG</span> 9<span class="selector-class">.9</span><span class="selector-class">.4-RedHat-9</span><span class="selector-class">.9</span><span class="selector-class">.4-74</span><span class="selector-class">.el7_6</span><span class="selector-class">.1</span> &lt;&lt;&gt;&gt; +<span class="selector-tag">trace</span> <span class="selector-tag">www</span><span class="selector-class">.oldboyedu</span><span class="selector-class">.com</span></span><br><span class="line">;; <span class="selector-tag">global</span> <span class="selector-tag">options</span>: +<span class="selector-tag">cmd</span></span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">d</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">j</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">b</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">l</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">f</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">m</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">i</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">e</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">a</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">g</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">c</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">h</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">.                       5       <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">k</span><span class="selector-class">.root-servers</span><span class="selector-class">.net</span>.</span><br><span class="line">;; <span class="selector-tag">Received</span> 492 <span class="selector-tag">bytes</span> <span class="selector-tag">from</span> 10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.2</span><span class="selector-id">#53</span>(10<span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-class">.2</span>) <span class="selector-tag">in</span> 52 <span class="selector-tag">ms</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">h</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">i</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">c</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">e</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">j</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">m</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">g</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">f</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">k</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">d</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">a</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">l</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">b</span><span class="selector-class">.gtld-servers</span><span class="selector-class">.net</span>.</span><br><span class="line"><span class="selector-tag">com</span>.                    86400   <span class="selector-tag">IN</span>      <span class="selector-tag">DS</span>      30909 8 2 </span><br><span class="line">..............................</span><br><span class="line"><span class="selector-tag">oldboyedu</span><span class="selector-class">.com</span>.          172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">dns9</span><span class="selector-class">.hichina</span><span class="selector-class">.com</span>.</span><br><span class="line"><span class="selector-tag">oldboyedu</span><span class="selector-class">.com</span>.          172800  <span class="selector-tag">IN</span>      <span class="selector-tag">NS</span>      <span class="selector-tag">dns10</span><span class="selector-class">.hichina</span><span class="selector-class">.com</span>.</span><br><span class="line">..............................</span><br><span class="line"><span class="selector-tag">www</span><span class="selector-class">.oldboyedu</span><span class="selector-class">.com</span>.      600     <span class="selector-tag">IN</span>      <span class="selector-tag">A</span>       39<span class="selector-class">.97</span><span class="selector-class">.3</span><span class="selector-class">.87</span></span><br><span class="line">;; <span class="selector-tag">Received</span> 62 <span class="selector-tag">bytes</span> <span class="selector-tag">from</span> 106<span class="selector-class">.11</span><span class="selector-class">.141</span><span class="selector-class">.126</span><span class="selector-id">#53</span>(<span class="selector-tag">dns10</span><span class="selector-class">.hichina</span><span class="selector-class">.com</span>) <span class="selector-tag">in</span> 4 <span class="selector-tag">ms</span></span><br></pre></td></tr></table></figure><h2 id="DNS解析流程"><a href="#DNS解析流程" class="headerlink" title="DNS解析流程"></a>DNS解析流程</h2><p>第一步:客户端用户在浏览器里输入<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>网址后回车,系统首先会查找系统本地的DNS缓存及host文件信息,确定是否存在<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名对应的IP解析记录,如果有就直接获取到IP地址,然后去访问这个IP地址对应的<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名的服务器.一般第一次请求时,DNS缓存是没有解析记录的,而hosts多为内部临时测试使用.<br> 第二步:如果客户端本地DNS缓存及本地hosts文件没有<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名对应的解析记录,那么,系统会把浏览器的解析请求发送给在客户端本地设置的DNS服务器地址解析,通常称次DNS为LDNS即local DNS,如果LDNS服务器的本地缓存存有对应的解析记录就会直接返回给IP地址给客户端:如果没有,则LDNS会负责继续请求其他的DNS服务器.<br> 第三步:LDNS从DNS系统的(“.”)根开始请求对<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名的解析,根DNS服务器在全球一共有13台,根服务器下面是没有<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名解析记录的,但是根下面有<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>对应的顶级域名.com的解析记录,因此,根会把.com对应的DNS服务器地址返回给LDNS.<br> 第四步:LDNS获取到.com对应的DNS服务器地址后,就会去.com服务器请求<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名的解析,.而com服务器下面也没有<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名对应的解析记录,但是有<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>域名的解析记录,因此.com服务器会把<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>对应的DNS服务器地址返回给DNS.<br> 第五步:同理,LDNS获取到<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>对应的DNS服务器地址后,就会去<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>服务器请求对<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>域名的解析,<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>域名对应的DNS服务器是该域名的授权DNS服务器,这个DNS服务器正是企业购买域名时用于管理解析的服务器,这个服务器会有<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>对应的解析记录,如果此时没有,就表示企业还没有对这个域名做解析,即网站服务器还没有架设好.<br> 第六步:<a href="https://links.jianshu.com/go?to=http://baidu.com">baidu.com</a>域名DNS服务器会把<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>对应的IP解析记录发给LDNS.<br> 第七步:LDNS把来自授权DNS服务器的与<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>对应的IP解析记录发给客户端浏览器,并且LDNS会在本地把域名和IP对应解析记录缓存起来,以便下一次更快的返回相同解析请求的记录.至此,整个DNS的解析流程就完成了.</p><h1 id="第三章-TCP-IP协议"><a href="#第三章-TCP-IP协议" class="headerlink" title="第三章 TCP/IP协议"></a>第三章 TCP/IP协议</h1><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-779ac1762309b88b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="TCP-IP五层模型"><a href="#TCP-IP五层模型" class="headerlink" title="TCP/IP五层模型"></a>TCP/IP五层模型</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-1cbda690f006d087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="TCP-IP每层包含的协议"><a href="#TCP-IP每层包含的协议" class="headerlink" title="TCP/IP每层包含的协议"></a>TCP/IP每层包含的协议</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-5585d397fb2e8be6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b6bcaff1086daa34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>image.png</p><h2 id="TCP-IP三次握手"><a href="#TCP-IP三次握手" class="headerlink" title="TCP/IP三次握手"></a>TCP/IP三次握手</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-1cd97a2e1c591cf9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp" alt="img"></p><h2 id="TCP-IP四次挥手"><a href="#TCP-IP四次挥手" class="headerlink" title="TCP/IP四次挥手"></a>TCP/IP四次挥手</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-1c8420711e350ab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/868/format/webp" alt="img"></p><h1 id="第四章-HTTP协议介绍"><a href="#第四章-HTTP协议介绍" class="headerlink" title="第四章 HTTP协议介绍"></a>第四章 HTTP协议介绍</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>全称为Uniform Resource Location，中文翻译为统一资源定位符</p><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><p>全称为Uniform Resource Identifier，中文翻译为统一资源标识符</p><h2 id="URL和URI关系"><a href="#URL和URI关系" class="headerlink" title="URL和URI关系"></a>URL和URI关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docs.ansible.com   &#x2F; ansible&#x2F;latest&#x2F;user_guide&#x2F;playbooks_reuse_roles.html</span><br><span class="line">URL                  URI </span><br></pre></td></tr></table></figure><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>特点说明:</p><ol><li>网页内容是固定不变的，因此，容易被搜索引擎收录（容易被用户找到）（优点）。</li><li>因为网页没有数据库的支持，所以在网站制作和维护方面的工作量较大，当网站信息量很大时，<br>完全依靠静态网页比较困难（缺点）。</li><li>网页的交互性较差，在程序的功能实现方面有较大的限制（缺点）。</li><li>当客户端向服务器请求数据时，服务器会直接从磁盘文件系统上返回数据（不做任何解析）。</li></ol><h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><p>要什么信息,需要进行查询数据库进行解析后发送给客户端<br> 查看班级人员信息表</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">班级   人名   年龄   学历</span><br><span class="line">sz-<span class="number">01</span>  张三   <span class="number">18</span>     高中   ---&gt; 数据库中 oldboy=<span class="number">123</span>  &lt;--- post </span><br><span class="line">sz-<span class="number">01</span>  李四   <span class="number">20</span>     大专   </span><br><span class="line"></span><br><span class="line">班级   人员   年龄   学历</span><br><span class="line">代码信息直接调用数据库的内容</span><br><span class="line"><span class="number">1</span>) 采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、</span><br><span class="line">   投票、用户管理、订单处理、发博文等。</span><br><span class="line"><span class="number">2</span>) 动态资源页面会出现 <span class="string">&quot;?&quot;</span> <span class="string">&quot;&amp;&quot;</span>, 不便于被搜索引擎收录</span><br><span class="line"><span class="number">3</span>) 接收到用户请求,需要让动态服务和数据库服务进行处理</span><br></pre></td></tr></table></figure><h2 id="伪静态资源-动态页面"><a href="#伪静态资源-动态页面" class="headerlink" title="伪静态资源(动态页面)"></a>伪静态资源(动态页面)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 可以便于搜索引擎进行收录</span><br><span class="line">2. 有数据库服务支持,实现网页交互功能</span><br></pre></td></tr></table></figure><h1 id="第五章-HTTP请求方法"><a href="#第五章-HTTP请求方法" class="headerlink" title="第五章 HTTP请求方法"></a>第五章 HTTP请求方法</h1><p><img src="http://upload-images.jianshu.io/upload_images/14248468-51fb5e253a457202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h1 id="第六章-HTTP响应状态码"><a href="#第六章-HTTP响应状态码" class="headerlink" title="第六章 HTTP响应状态码"></a>第六章 HTTP响应状态码</h1><h2 id="响应状态码分类"><a href="#响应状态码分类" class="headerlink" title="响应状态码分类"></a>响应状态码分类</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-f063478cde3d5360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="常见响应状态码解释"><a href="#常见响应状态码解释" class="headerlink" title="常见响应状态码解释"></a>常见响应状态码解释</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-2afcfa5f944d6815.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>使用curl查看状态码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -I -s -w <span class="string">&quot;%&#123;http_code&#125;\n&quot;</span> -o /dev/<span class="literal">null</span>  www.baidu.com</span><br></pre></td></tr></table></figure><h1 id="第七章-HTTP请求报文"><a href="#第七章-HTTP请求报文" class="headerlink" title="第七章 HTTP请求报文"></a>第七章 HTTP请求报文</h1><p><img src="http://upload-images.jianshu.io/upload_images/14248468-2e407c3d0b51d5c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><p><img src="https://upload-images.jianshu.io/upload_images/14248468-f04d5b8ebacceb1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b59a33d44de16458.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><h2 id="请求主体"><a href="#请求主体" class="headerlink" title="请求主体"></a>请求主体</h2><h1 id="第八章-HTTP响应报文"><a href="#第八章-HTTP响应报文" class="headerlink" title="第八章 HTTP响应报文"></a>第八章 HTTP响应报文</h1><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b9b1b91892eb300f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h2><p>响应报文的起始行也叫状态行,用来说明服务器相应客户端请求的状态,一般为协议及版本号,数字状态码,状态情况,例如:HTTP/1.1 200 OK</p><h2 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h2><p>和请求报文类似,起始行的后面一般有若干个头部字段,每隔头部字段都包含一个名字和一个值,两者之间用冒号分隔.头部结尾也是以空行结束.常见的头部信息有</p><h2 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h2><h2 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h2><p>响应报文主体装载了要返回给客户端的数据,这些数据可以是文本,也可以使二进制的图片视频,下面是响应报文主体的html格式文本</p><h1 id="第十章-用户访问网站流程总结"><a href="#第十章-用户访问网站流程总结" class="headerlink" title="第十章 用户访问网站流程总结"></a>第十章 用户访问网站流程总结</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.用户输入域名-&gt;浏览器跳转-&gt;浏览器缓存-&gt;Hosts 文件-&gt;DNS 解析( 递归查询 | 迭代查询 )</span><br><span class="line">客户端向服务端发起查询-&gt;递归查询</span><br><span class="line">服务端向服务端发起查询-&gt;迭代查询</span><br><span class="line"><span class="number">2</span>.由浏览器向服务端发起 TCP 连接（三次握手）</span><br><span class="line">客户端 --&gt;请求包连接-syn=<span class="number">1</span> seq=x 服务端</span><br><span class="line">服务端 --&gt;向应客户端 syn=<span class="number">1</span> ack=x+<span class="number">1</span> seq=y 客户端</span><br><span class="line">客户端 --&gt;建立连接 ack=y+<span class="number">1</span> seq=x+<span class="number">1</span> 服务端</span><br><span class="line"><span class="number">3</span>.客户端发起 http 请求：</span><br><span class="line"><span class="number">1</span>.请求的方法是什么： Get 获取</span><br><span class="line"><span class="number">2</span>.请求的 Host 主机是： www.oldboyedu.com</span><br><span class="line"><span class="number">3</span>.请求的资源是什么： /index.html</span><br><span class="line"><span class="number">4</span>.请求的端口是什么： 默认 http 是 <span class="number">80</span> https <span class="number">443</span></span><br><span class="line"><span class="number">5</span>.请求携带的参数是： 属性（请求的类型、压缩、认证、浏览器信息、等等）</span><br><span class="line"><span class="number">6</span>.请求最后的空行</span><br><span class="line"><span class="number">4</span>.服务端响应的内容是</span><br><span class="line"><span class="number">1</span>.服务端响应使用的 WEB 服务软件</span><br><span class="line"><span class="number">2</span>.服务端响应请求文件的类型</span><br><span class="line"><span class="number">3</span>.服务端响应请求的文件是否进行压缩</span><br><span class="line"><span class="number">4</span>.服务端响应请求的主机是否进行长连接</span><br><span class="line"><span class="number">5</span>.客户端向服务端发起 TCP 断开（四次挥手）</span><br><span class="line">客户端 --&gt; 断开请求 fin=<span class="number">1</span> seq=x --&gt; 服务端</span><br><span class="line">服务端 --&gt; 响应断开 fin=<span class="number">1</span> ack=x+<span class="number">1</span> seq=y --&gt; 客户端</span><br><span class="line">服务端 --&gt; 断开连接 fin=<span class="number">1</span> ack=x+<span class="number">1</span> seq=z --&gt; 客户端</span><br><span class="line">客户端 --&gt; 确认断开 fin=<span class="number">1</span> ack=z+<span class="number">1</span> seq=sj --&gt; 服务端</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux VPS 一键搭建 KMS 服务器脚本及激活 Windows 和 Office</title>
      <link href="/posts/30589/"/>
      <url>/posts/30589/</url>
      
        <content type="html"><![CDATA[<p><strong>说明：</strong><code>KMS</code> 就不详细介绍了，可以用来激活微软的一些系统和软件，让你免费体验正版的系统或软件。这里就分享个 <code>KMS</code> 激活服务器一键搭建脚本，可以供多人使用，一次激活有效期 <code>180</code> 天，且 <code>180</code> 天内只要服务器重新在线一次就会自动续期。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Github 地址：</strong><a href="https://github.com/dakkidaze/one-key-kms">https://github.com/dakkidaze/one-key-kms</a></p><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#CentOS，Redhat，Fedora等请选择CentOS脚本</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;dakkidaze&#x2F;one-key-kms&#x2F;master&#x2F;one-key-kms-centos.sh</span><br><span class="line">chmod +x one-key-kms-centos.sh</span><br><span class="line">.&#x2F;one-key-kms-centos.sh</span><br><span class="line"></span><br><span class="line">#Debian，Ubuntu，Mint等请选择Debian脚本</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;dakkidaze&#x2F;one-key-kms&#x2F;master&#x2F;one-key-kms-debian.sh</span><br><span class="line">chmod +x one-key-kms-debian.sh</span><br><span class="line">.&#x2F;one-key-kms-debian.sh</span><br><span class="line"></span><br><span class="line">#启动KMS</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;dakkidaze&#x2F;one-key-kms&#x2F;master&#x2F;kms.sh</span><br><span class="line">chmod +x kms.sh</span><br><span class="line">.&#x2F;kms.sh start</span><br></pre></td></tr></table></figure><p>注意放行服务器 <code>1688</code> 端口！</p><h2 id="激活-Windows"><a href="#激活-Windows" class="headerlink" title="激活 Windows"></a>激活 Windows</h2><p>系统需要是 <code>VL</code> 版本的，然后使用管理员权限运行 <code>cmd</code>，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;d &quot;%SystemRoot%\system32&quot;</span><br><span class="line">slmgr &#x2F;skms ip  #ip为你KMS的IP地址或者域名 </span><br><span class="line">slmgr &#x2F;ato</span><br><span class="line">slmgr &#x2F;xpr</span><br></pre></td></tr></table></figure><p>看到网上还有很多系统不是 <code>VL</code> 版本的激活方法，这个方法就不说了，感觉没啥用，因为不是 <code>VL</code> 版本的都没 <code>KEY</code>，比如说旗舰版，家庭高级版等。</p><h2 id="激活-Office"><a href="#激活-Office" class="headerlink" title="激活 Office"></a>激活 Office</h2><p>首先你的 <code>Office</code> 必须是 <code>VOL</code> 版本，否则无法激活。</p><p>找到你的 <code>Office</code> 安装目录，如果你不知道你的 <code>Office</code> 装在哪个目录，可以鼠标右键一个程序图标比如 <code>Word</code>，然后选择 “打开文件所在的位置”，在上面地址栏就可以看到了。</p><p>这里以 <code>Office2016</code> 为例，<code>32</code> 位文件夹目录为 <code>C:\Program Files (x86)\Microsoft Office\Office16</code>。<code>62</code> 位目录为 <code>C:\Program Files\Microsoft Office\Office16</code>。关于文件夹对应的版本说明：<code>Office16</code> 是 <code>Office2016</code>，<code>Office15</code> 就是 <code>Office2013</code>，<code>Office14</code> 就是 <code>Office2010</code>。</p><p>下面以 <code>32</code> 位为参考。使用管理员权限运行 <code>cmd</code>，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#进入Office文件夹执行命令</span><br><span class="line">cd &quot;C:\Program Files (x86)\Microsoft Office\Office16&quot;</span><br><span class="line">cscript ospp.vbs &#x2F;sethst:ip  #ip为你KMS的IP地址或者域名</span><br><span class="line">cscript ospp.vbs &#x2F;act</span><br></pre></td></tr></table></figure><p>如果提示看到 <code>successful</code> 的字样，那么就是激活成功了，重新打开 <code>Office</code> 就好。</p><p>原文：<a href="https://www.moerats.com/archives/512/">https://www.moerats.com/archives/512/</a><br><a href="https://www.moerats.com/kms/">KMS 激活工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Zabbix4.0~</title>
      <link href="/posts/47310/"/>
      <url>/posts/47310/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix监控服务"><a href="#zabbix监控服务" class="headerlink" title="zabbix监控服务"></a>zabbix监控服务</h1><hr><h1 id="第一章-监控知识基本概述"><a href="#第一章-监控知识基本概述" class="headerlink" title="第一章 监控知识基本概述"></a>第一章 监控知识基本概述</h1><h2 id="1-为什么要使用监控"><a href="#1-为什么要使用监控" class="headerlink" title="1.为什么要使用监控"></a>1.为什么要使用监控</h2><ul><li>1.对系统不间断实时监控</li><li>2.实时反馈系统当前状态</li><li>3.保证服务可靠性安全性</li><li>4.保证业务持续稳定运行</li></ul><h2 id="2-如何进行监控，比如我们需要监控磁盘的使用率"><a href="#2-如何进行监控，比如我们需要监控磁盘的使用率" class="headerlink" title="2.如何进行监控，比如我们需要监控磁盘的使用率"></a>2.如何进行监控，比如我们需要监控磁盘的使用率</h2><ul><li>1.如何查看磁盘使用率 df -h</li><li>2.监控磁盘的那些指标 block、 inode</li><li>3.如何获取具体的信息 df -h|awk ‘///{print(NF-1)}’</li><li>4.获取的数值到达多少报警 80%</li></ul><h2 id="3-流行的监控工具"><a href="#3-流行的监控工具" class="headerlink" title="3.流行的监控工具"></a>3.流行的监控工具</h2><ul><li>1.Zabbix</li><li>2.Lepus(天兔)数据库监控系统</li><li>3.Open-Falcon 小米</li><li>4.Prometheus(普罗米修斯， Docker、 K8s)</li></ul><h2 id="4-如果去到一家新公司，如何入手监控"><a href="#4-如果去到一家新公司，如何入手监控" class="headerlink" title="4.如果去到一家新公司，如何入手监控"></a>4.如果去到一家新公司，如何入手监控</h2><ul><li>1.硬件监控 路由器、交换机、防火墙</li><li>2.系统监控 CPU、内存、磁盘、网络、进程、 TCP</li><li>3.服务监控 nginx、 php、 tomcat、 redis、 memcache、 mysql</li><li>4.WEB 监控 请求时间、响应时间、加载时间、</li><li>5.日志监控 ELk（收集、存储、分析、展示） 日志易</li><li>6.安全监控 Firewalld、 WAF(Nginx+lua)、安全宝、牛盾云、安全狗</li><li>7.网络监控 smokeping 多机房</li><li>8.业务监控 活动引入多少流量、产生多少注册量、带来多大价值</li></ul><h1 id="第二章-单机时代如何监控"><a href="#第二章-单机时代如何监控" class="headerlink" title="第二章 单机时代如何监控"></a>第二章 单机时代如何监控</h1><p>CPU 监控命令: w、 top、 htop、 glances</p><pre><code>%Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 stus 用户态: 跟用户的操作有关 35%sy 系统态: 跟内核的处理有关 60%id CPU 空闲:</code></pre><p>内存监控命令: free</p><pre><code>[root@m01 ~]# free -h              total        used        free      shared  buff/cache   availableMem:           977M        105M        724M        6.6M        148M        729MSwap:          1.0G          0B        1.0G</code></pre><p>磁盘监控命令: df、 iotop</p><pre><code>Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnsda 0.80 25.32 33.36 221034 291193设备名 每秒传输次数 每秒读大小 每秒写大小 读的总大小 写的总大小</code></pre><p>  网络监控命令: ifconfig、 route、 glances、 iftop、 nethogs、 netstat</p><pre><code>单位换算Mbps 100Mbps/8MB 12MBiftop 中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向。TX：发送流量、 RX：接收流量、 TOTAL：总流量#查看 TCP11 中状态netstat -an|grep ESTABLISHEDnetstat -rn # 查看路由信息netstat -lntup</code></pre><p>随着时间的推移，用户不断的增多，服务随时可能扛不住会被 oom(out of memory)，当系统内存不足的时候，会<br>触发 oom<br>1.当系统内存不足的时候就会大量使用 swap<br>2.当系统大量使用 swap 的时候，系统会特别卡<br>注意: 有时可能内存还有剩余 300Mb-500Mb，但会发现 swap 依然被使用</p><pre><code>[root@ZabbixServer ~]# dd if=/dev/zero of=/dev/null bs=800M[root@ZabbixServer ~]# tail -f /var/log/messagesOut of memory: Kill process 2227 (dd) score 778 or sacrifice childKilled process 2227 (dd) total-vm:906724kB, anon-rss:798820kB, file-rss:0kB</code></pre><p>3.那单机时代，如何使用 shell 脚本来实现服务器的监控<br>需求: 每隔 1 分钟监控一次内存,当你的可用内存低于 100m,发邮件报警,要求显示剩余内存</p><ul><li><p>1.怎么获取内存可用的值 free -m|awk ‘/^Mem/{print $NF}’</p></li><li><p>2.获取到内存可用的值如何和设定的阈值进行比较</p></li><li><p>3.比较如果大于 100m 则不处理，如果小于 100 则报警</p></li><li><p>4.如何每隔 1 分钟执行一次</p><p> [root@ZabbixServer ~]# cat free.sh<br>   #!/usr/bin/bash<br> HostName=$(hostname)_$(hostname -i)<br> Date=$(date +%F)<br> while true;do<br> Free=$(free -m|awk ‘/^Mem/{print $NF}’)<br> if [ $Free -le 100 ];then<br> echo “$Date: $HostName Mem Is &lt; ${Free}MB”<br> fi<br> sleep 5<br> done</p></li></ul><h1 id="第三章-zabbix-监控快速安装"><a href="#第三章-zabbix-监控快速安装" class="headerlink" title="第三章 zabbix 监控快速安装"></a>第三章 zabbix 监控快速安装</h1><h2 id="1-配置zabbix仓库"><a href="#1-配置zabbix仓库" class="headerlink" title="1.配置zabbix仓库"></a>1.配置zabbix仓库</h2><p>###在这里提供zabbix4.2yum仓库可供日常使用</p><p>  <a href="http://www.kococ.cn/cloud/index.php?share/folder&user=1&sid=eJIcXWhz">Zabbix4.2仓库链接</a> （<a href="http://www.xoxoyun.cn/cloud/index.php?share/folder&amp;user=1&amp;sid=eJIcXWhz%EF%BC%89">http://www.xoxoyun.cn/cloud/index.php?share/folder&amp;user=1&amp;sid=eJIcXWhz）</a></p><pre><code>[root@m01 ~]# rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</code></pre><p>[file href=”<a href="http://cloud.xoxoyun.cn/index.php?share/file&amp;user=1&amp;sid=TIDYUqRn&quot;%5D%E5%8F%AF%E7%94%A84.0%E9%95%9C%E5%83%8F%E6%BA%90%5B/file%5D">http://cloud.xoxoyun.cn/index.php?share/file&amp;user=1&amp;sid=TIDYUqRn&quot;]可用4.0镜像源[/file]</a><br>2.安装 Zabbix 程序包，以及 MySQL、 Zabbix-agent</p><hr><pre><code>[root@m01 ~]# yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server</code></pre><p>下载阿里云epel源base源</p><pre><code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repowget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum install -y http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/iksemel-1.4-6.sdl7.x86_64.rpm[root@m01 ~]# systemctl start mariadb.service &amp;&amp; systemctl enable mariadb.service</code></pre><h2 id="3-创建-Zabbix-数据库以及用户"><a href="#3-创建-Zabbix-数据库以及用户" class="headerlink" title="3.创建 Zabbix 数据库以及用户"></a>3.创建 Zabbix 数据库以及用户</h2><pre><code>[root@m01 ~]# mysqladmin password 123456[root@m01 ~]# mysql -uroot -p123456MariaDB [(none)]&gt; create database zabbix character set utf8 collate utf8_bin;MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#39;zabbix&#39;;MariaDB [(none)]&gt; flush privileges;</code></pre><h2 id="4-导入-Zabbix-数据至数据库中"><a href="#4-导入-Zabbix-数据至数据库中" class="headerlink" title="4.导入 Zabbix 数据至数据库中"></a>4.导入 Zabbix 数据至数据库中</h2><pre><code>[root@m01 ~]# zcat /usr/share/doc/zabbix-server-mysql-4.0.11/create.sql.gz | mysql -uzabbix -pzabbix zabbix</code></pre><h2 id="5-编辑-etc-zabbix-zabbix-server-conf-文件，修改数据库配置"><a href="#5-编辑-etc-zabbix-zabbix-server-conf-文件，修改数据库配置" class="headerlink" title="5.编辑/etc/zabbix/zabbix_server.conf 文件，修改数据库配置"></a>5.编辑/etc/zabbix/zabbix_server.conf 文件，修改数据库配置</h2><pre><code>[root@m01 ~]# grep &quot;^[a-Z]&quot; /etc/zabbix/zabbix_server.conf ...............DBHost=localhostDBName=zabbixDBUser=zabbixDBPassword=zabbix...............</code></pre><h2 id="6-启动-Zabbix-服务进程，并加入开机自启"><a href="#6-启动-Zabbix-服务进程，并加入开机自启" class="headerlink" title="6.启动 Zabbix 服务进程，并加入开机自启"></a>6.启动 Zabbix 服务进程，并加入开机自启</h2><pre><code>[root@m01 ~]# systemctl start zabbix-server.service [root@m01 ~]# systemctl enable zabbix-server.service</code></pre><h2 id="7-配置-Apache-的配置文件-etc-httpd-conf-d-zabbix-conf，修改时区"><a href="#7-配置-Apache-的配置文件-etc-httpd-conf-d-zabbix-conf，修改时区" class="headerlink" title="7.配置 Apache 的配置文件/etc/httpd/conf.d/zabbix.conf，修改时区"></a>7.配置 Apache 的配置文件/etc/httpd/conf.d/zabbix.conf，修改时区</h2><pre><code>[root@m01 ~]# grep &quot;Shanghai&quot; /etc/httpd/conf.d/zabbix.conf         php_value date.timezone Asia/Shanghai</code></pre><h2 id="8-重启-Apache-Web-服务器"><a href="#8-重启-Apache-Web-服务器" class="headerlink" title="8.重启 Apache Web 服务器"></a>8.重启 Apache Web 服务器</h2><h2 id="root-m01-systemctl-start-httpd"><a href="#root-m01-systemctl-start-httpd" class="headerlink" title="[root@m01 ~]# systemctl start httpd"></a>[root@m01 ~]# systemctl start httpd</h2><h1 id="第四章-WEB安装步骤"><a href="#第四章-WEB安装步骤" class="headerlink" title="第四章 WEB安装步骤"></a>第四章 WEB安装步骤</h1><h2 id="1-浏览器打开地址：http-192-168-10-66-zabbix-setup-php"><a href="#1-浏览器打开地址：http-192-168-10-66-zabbix-setup-php" class="headerlink" title="1.浏览器打开地址：http://192.168.10.66/zabbix/setup.php"></a>1.浏览器打开地址：<a href="http://192.168.10.66/zabbix/setup.php">http://192.168.10.66/zabbix/setup.php</a></h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/194576284.png" alt="1.png"></p><h2 id="2-检查依赖项是否存在异常"><a href="#2-检查依赖项是否存在异常" class="headerlink" title="2.检查依赖项是否存在异常"></a>2.检查依赖项是否存在异常</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/2386190024.png" alt="2.png"></p><h2 id="3-配置zabbix连接数据库"><a href="#3-配置zabbix连接数据库" class="headerlink" title="3.配置zabbix连接数据库"></a>3.配置zabbix连接数据库</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/395866565.png" alt="请输入图片描述"></p><h2 id="4-配置-ZabbixServer-服务器的信息"><a href="#4-配置-ZabbixServer-服务器的信息" class="headerlink" title="4.配置 ZabbixServer 服务器的信息"></a>4.配置 ZabbixServer 服务器的信息</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/3424985468.png" alt="4.png"><br>5.最终确认检查</p><hr><p><img src="http://www.kococ.cn/usr/uploads/2020/01/3424985468.png" alt="5.png"><br>6.安装成功</p><hr><p><img src="http://www.kococ.cn/usr/uploads/2020/01/1365103457.png" alt="6.png"></p><p>提示已成功地安装了 Zabbix 前端。配置文件/etc/zabbix/web/zabbix.conf.php 被创建。</p><h2 id="7-登陆zabbix"><a href="#7-登陆zabbix" class="headerlink" title="7.登陆zabbix"></a>7.登陆zabbix</h2><p><img src="http://www.kcooc.cn/usr/uploads/2020/01/1375784407.png" alt="7.png"></p><p>默认登陆 ZabbixWeb 的用户名 Admin，密码 zabbix</p><h2 id="8-调整字符集为中文"><a href="#8-调整字符集为中文" class="headerlink" title="8.调整字符集为中文"></a>8.调整字符集为中文</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/632295469.png" alt="8.png"></p><p><img src="http://www.kcooc.cn/usr/uploads/2020/01/3064526244.png" alt="9.png"></p><h2 id="9-修复中文乱码"><a href="#9-修复中文乱码" class="headerlink" title="9.修复中文乱码"></a>9.修复中文乱码</h2><p><img src="http://www.kococ.cn/usr/uploads/2020/01/172339092.png" alt="10.png"></p><p>打开图形之后会发现语言为乱码，原因是缺少字体</p><p><strong>解决方法:安装字体并替换现有字体</strong></p><pre><code>[root@m01 ~]# yum install wqy-microhei-fonts -y[root@m01 ~]# cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf</code></pre><p>再次刷新发现已经变成中文了<br><img src="http://www.kococ.cn/usr/uploads/2020/01/643160504.png" alt="11.png"></p><a id="more"></a><h1 id="第五章-Zabbix-监控基础架构"><a href="#第五章-Zabbix-监控基础架构" class="headerlink" title="第五章 Zabbix 监控基础架构"></a>第五章 Zabbix 监控基础架构</h1><p>zabbix-agent(数据采集)—&gt;zabbix-server(数据分析|报警)—&gt; 数据库(数据存储)&lt;—zabbix web(数据展示)<br><img src="http://upload-images.jianshu.io/upload_images/14248468-189ad59c27ddffec.png" alt="请输入图片描述"></p><h1 id="第六章-zabbix-快速监控主机"><a href="#第六章-zabbix-快速监控主机" class="headerlink" title="第六章 zabbix 快速监控主机"></a>第六章 zabbix 快速监控主机</h1><h2 id="1-安装zabbix-agent"><a href="#1-安装zabbix-agent" class="headerlink" title="1.安装zabbix-agent"></a>1.安装zabbix-agent</h2><pre><code>[root@web01 ~]# rpm -ivh https://mirror.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-agent-4.0.11-1.el7.x86_64.rpm</code></pre><h2 id="2-配置zabbix-agent"><a href="#2-配置zabbix-agent" class="headerlink" title="2.配置zabbix-agent"></a>2.配置zabbix-agent</h2><pre><code>[root@web01 ~]# grep &quot;^[a-Z]&quot; /etc/zabbix/zabbix_agentd.conf    PidFile=/var/run/zabbix/zabbix_agentd.pidLogFile=/var/log/zabbix/zabbix_agentd.logLogFileSize=0Server=10.0.1.61ServerActive=127.0.0.1Hostname=Zabbix serverInclude=/etc/zabbix/zabbix_agentd.d/*.conf</code></pre><p>3.启动zabbix-agent并检查</p><pre><code>[root@web01 ~]# systemctl start zabbix-agent.service [root@web01 ~]# systemctl enable zabbix-agent.service[root@web01 ~]# netstat -lntup|grep 10050tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      10351/zabbix_agentd tcp6       0      0 :::10050                :::*                    LISTEN      10351/zabbix_agentd </code></pre><h2 id="4-zabbix-web界面，添加主机"><a href="#4-zabbix-web界面，添加主机" class="headerlink" title="4.zabbix-web界面，添加主机"></a>4.zabbix-web界面，添加主机</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-10db69c42454d500.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-ceee736beb333ce5.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-5d12b07231386679.png" alt="请输入图片描述"><br>第七章 自定义监控主机<br>===============</p><h2 id="1-监控需求"><a href="#1-监控需求" class="headerlink" title="1.监控需求"></a>1.监控需求</h2><p>监控TCP11种状态集</p><h2 id="2-命令行实现"><a href="#2-命令行实现" class="headerlink" title="2.命令行实现"></a>2.命令行实现</h2><pre><code>[root@web01 ~]# netstat -ant|grep -c TIME_WAIT55[root@web01 ~]# netstat -ant|grep -c LISTEN12</code></pre><h2 id="3-编写zabbix监控文件-传参形式"><a href="#3-编写zabbix监控文件-传参形式" class="headerlink" title="3.编写zabbix监控文件(传参形式)"></a>3.编写zabbix监控文件(传参形式)</h2><pre><code>[root@web01 ~]# cat /etc/zabbix/zabbix_agentd.d/tcp_status.conf UserParameter=tcp_state[*],netstat -ant|grep -c $1root@web01 ~]# systemctl restart zabbix-agent.service</code></pre><h2 id="4-server端进行测试"><a href="#4-server端进行测试" class="headerlink" title="4.server端进行测试"></a>4.server端进行测试</h2><pre><code>[root@m01 ~]# rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm[root@m01 ~]# yum install zabbix-get.x86_64 -y [root@m01 ~]# zabbix_get -s 10.0.1.7 -k tcp_state[TIME_WAIT]51[root@m01 ~]# zabbix_get -s 10.0.1.7 -k tcp_state[LISTEN]   12</code></pre><h2 id="5-web端添加"><a href="#5-web端添加" class="headerlink" title="5.web端添加"></a>5.web端添加</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-0b20f0a22391f3d1.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-19c41a9832857c2b.png" alt="请输入图片描述"><br>6.克隆监控项</p><hr><p>由于TCP有多种状态，需要添加多个监控项，我们可以使用克隆快速达到创建的效果<br><img src="http://upload-images.jianshu.io/upload_images/14248468-743524f196e73c5e.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-35342ea8d4cb7a44.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-2e2be3806f3c1c42.png" alt="请输入图片描述"></p><p>其他的状态依次添加即可</p><h2 id="7-创建图形"><a href="#7-创建图形" class="headerlink" title="7.创建图形"></a>7.创建图形</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-6203bb8201c63361.png" alt="请输入图片描述"><br>8.查看图形</p><hr><p><img src="http://upload-images.jianshu.io/upload_images/14248468-a6cf4a1d2bdb3449.png" alt="请输入图片描述"><br>9.设置触发器</p><hr><p><img src="http://upload-images.jianshu.io/upload_images/14248468-98cb06eb3b07e1d5.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-37e7cc88098879d9.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-d684d487eb68da11.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-2e3bc7010546c2a1.png" alt="请输入图片描述"></p><h1 id="第八章-邮件报警"><a href="#第八章-邮件报警" class="headerlink" title="第八章 邮件报警"></a>第八章 邮件报警</h1><h2 id="1-定义发件人"><a href="#1-定义发件人" class="headerlink" title="1.定义发件人"></a>1.定义发件人</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-816d27e93e19aa6f.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-7e3279840e20452e.png" alt="请输入图片描述"></p><h2 id="2-定义收件人"><a href="#2-定义收件人" class="headerlink" title="2.定义收件人"></a>2.定义收件人</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-57e702ed809d0b1b.png" alt="https://upload-images.jianshu.io/upload_images/14248468-57e702ed809d0b1b.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-ced9fc46c956b1e3.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-90efc1aa92eb84da.png" alt="请输入图片描述"></p><h2 id="3-自定义报警内容过"><a href="#3-自定义报警内容过" class="headerlink" title="3.自定义报警内容过"></a>3.自定义报警内容过</h2><p>定制报警内容：<br><a href="http://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location">https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location</a><br>参考博客</p><p><a href="http://www.cnblogs.com/bixiaoyu/p/7302541.html">https://www.cnblogs.com/bixiaoyu/p/7302541.html</a><br>发送警告</p><pre><code>报警邮件标题可以使用默认信息，亦可使用如下中文报警内容名称：Action-Email默认标题：故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;　恢复警告</code></pre><p>恢复标题：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!</p><pre><code>恢复信息：告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;</code></pre><h1 id="第九章-微信报警"><a href="#第九章-微信报警" class="headerlink" title="第九章 微信报警"></a>第九章 微信报警</h1><h2 id="1-查看配置文件里的脚本目录路径"><a href="#1-查看配置文件里的脚本目录路径" class="headerlink" title="1.查看配置文件里的脚本目录路径"></a>1.查看配置文件里的脚本目录路径</h2><pre><code>[root@m01 ~]# grep &quot;^AlertScriptsPath&quot; /etc/zabbix/zabbix_server.confAlertScriptsPath=/usr/lib/zabbix/alertscripts</code></pre><h2 id="2-将weixin-py放在zabbix特定目录"><a href="#2-将weixin-py放在zabbix特定目录" class="headerlink" title="2.将weixin.py放在zabbix特定目录"></a>2.将weixin.py放在zabbix特定目录</h2><pre><code>[root@m01 /usr/lib/zabbix/alertscripts]# ll总用量 4-rwxr-xr-x 1 root root 1344 8月   7 21:58 weixin.py</code></pre><h2 id="3-配置发信人"><a href="#3-配置发信人" class="headerlink" title="3.配置发信人"></a>3.配置发信人</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-75d0cf249f19bafe.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-7f1aaedd340ef02f.png" alt="请输入图片描述"></p><h2 id="4-配置收信人"><a href="#4-配置收信人" class="headerlink" title="4.配置收信人"></a>4.配置收信人</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-9709cce24dcb910a.png" alt="请输入图片描述"></p><h2 id="5-登陆企业微信公众号添加账户"><a href="#5-登陆企业微信公众号添加账户" class="headerlink" title="5.登陆企业微信公众号添加账户"></a>5.登陆企业微信公众号添加账户</h2><p><a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">https://work.weixin.qq.com/wework_admin/loginpage_wx</a><br>1.登陆后在企业号上新建应用</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-1ae7607fe5113d11.png" alt="请输入图片描述"></p><p>2.上传logo，填写应用名称 ，应用介绍等</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-ee6bc21e8c1e9d39.png" alt="请输入图片描述"></p><p>3.查看启动应用<br>同时会生成应用的AgentId以及Secret，这个在后面步骤会有用<br><img src="http://upload-images.jianshu.io/upload_images/14248468-2cccdc342330c5d0.png" alt="请输入图片描述"></p><p>4.接口调用测试<br><a href="http://work.weixin.qq.com/api/devtools/devtool.php">http://work.weixin.qq.com/api/devtools/devtool.php</a><br><img src="http://upload-images.jianshu.io/upload_images/14248468-f24ffa3b5922d0c0.png" alt="请输入图片描述"></p><p>这里的corpid为公司ID</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-03544eed481caa53.png" alt="请输入图片描述"></p><p>Corpsecret就是刚才创建应用生成的Secrt，确认没问题填写进去然后下一步<br>如果没问题会显示200状态码</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-c6aba38bf4da189c.png" alt="请输入图片描述"></p><p>6.添加成员</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-27ba2ae8bf3773fb.png" alt="请输入图片描述"></p><p>7.关注公众号</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-b0341893f157d0fb.png" alt="请输入图片描述"></p><p>8.查看自己的账号</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-8247e4f85f7ddc9a.png" alt="**加粗文字**"></p><p>9.修改脚本里的信息</p><pre><code>[root@m01 /usr/lib/zabbix/alertscripts]# cat weixin.py ..............corpid=&#39;微信企业号corpid&#39;appsecret=&#39;应用的Secret&#39;agentid=应用的id..............</code></pre><p>10.发信测试</p><pre><code>[root@m01 /usr/lib/zabbix/alertscripts]# python  weixin.py  你的账号  &#39;发信测试&#39;  ‘微信测试消息’</code></pre><p>11.微信号上查看</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-9f1dc0fa9d6b8abb.png"></p><p>12.发送到整个微信组<br>虽然我们实现了发送到单个用户的功能，但是如果我们的用户比较多，这样还是麻烦的，不过我们可以发送到整个组，其实脚本里已经预留好了配置，只不过默认注释了。<br>将脚本修改为以下内容，注释掉用户，打开组设置</p><pre><code>#!/usr/bin/env pythonimport requestsimport sysimport osimport jsonimport logginglogging.basicConfig(level = logging.DEBUG, format = &#39;%(asctime)s, %(filename)s, %(levelname)s, %(message)s&#39;,                datefmt = &#39;%a, %d %b %Y %H:%M:%S&#39;,                filename = os.path.join(&#39;/tmp&#39;,&#39;weixin.log&#39;),                filemode = &#39;a&#39;)corpid=&#39;wwd26fdfb9940e7efa&#39;appsecret=&#39;Btg89FnZfMu0k7l6b4iagmAR5Z9TCgKknYbx-SMQvmg&#39;agentid=1000005token_url=&#39;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#39; + corpid + &#39;&amp;corpsecret=&#39; + appsecretreq=requests.get(token_url)accesstoken=req.json()[&#39;access_token&#39;]msgsend_url=&#39;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#39; + accesstoken#touser=sys.argv[1]toparty=sys.argv[1]subject=sys.argv[2]message=sys.argv[2] + &quot;\n\n&quot; +sys.argv[3]params=&#123;        #&quot;touser&quot;: touser,        &quot;toparty&quot;: toparty,        &quot;msgtype&quot;: &quot;text&quot;,        &quot;agentid&quot;: agentid,        &quot;text&quot;: &#123;                &quot;content&quot;: message        &#125;,        &quot;safe&quot;:0&#125;req=requests.post(msgsend_url, data=json.dumps(params))logging.info(&#39;sendto:&#39; + toparty + &#39;;;subject:&#39; + subject + &#39;;;message:&#39; + message)                                                                              12.随机发送到指定用户玩笑脚本#!/bin/bash num=$(echo $(($RANDOM%28+1)))name=$(sed -n &quot;$&#123;num&#125;p&quot; name.txt)ok_boy=$(grep -v &quot;$&#123;name&#125;&quot; name.txt)for ok in $&#123;ok_boy&#125;do  python  weixin.py $&#123;ok&#125;  &quot;$1&quot;  &quot;$2&quot;done</code></pre><h1 id="第十章-自定义模版"><a href="#第十章-自定义模版" class="headerlink" title="第十章 自定义模版"></a>第十章 自定义模版</h1><h2 id="1-监控TCP11种状态"><a href="#1-监控TCP11种状态" class="headerlink" title="1.监控TCP11种状态"></a>1.监控TCP11种状态</h2><p>编写zabbix配置文件</p><pre><code>[root@web01 /etc/zabbix/zabbix_agentd.d]# cat zbx_tcp.conf UserParameter=ESTABLISHED,netstat -ant|grep  -c &#39;ESTABLISHED&#39;UserParameter=SYN_SENT,netstat -ant|grep  -c &#39;SYN_SENT&#39;UserParameter=SYN_RECV,netstat -ant|grep  -c &#39;SYN_RECV&#39;UserParameter=FIN_WAIT1,netstat -ant|grep  -c &#39;FIN_WAIT1&#39;UserParameter=FIN_WAIT2,netstat -ant|grep  -c &#39;FIN_WAIT2&#39;UserParameter=TIME_WAIT,netstat -ant|grep  -c &#39;TIME_WAIT&#39;UserParameter=CLOSE,netstat -ant|grep  -c &#39;CLOSE&#39;UserParameter=CLOSE_WAIT,netstat -ant|grep  -c &#39;CLOSE_WAIT&#39;UserParameter=LAST_ACK,netstat -ant|grep  -c &#39;LAST_ACK&#39;UserParameter=LISTEN,netstat -ant|grep  -c &#39;LISTEN&#39;UserParameter=CLOSING,netstat -ant|grep  -c &#39;CLOSING&#39;</code></pre><h2 id="2-重启zabbix-agent"><a href="#2-重启zabbix-agent" class="headerlink" title="2.重启zabbix-agent"></a>2.重启zabbix-agent</h2><pre><code>[root@web01 ~]# systemctl restart zabbix-agent.service </code></pre><h2 id="3-测试监控项"><a href="#3-测试监控项" class="headerlink" title="3.测试监控项"></a>3.测试监控项</h2><p>使用zabbix-get命令测试</p><pre><code>[root@m01 ~]# yum install zabbix-get.x86_64 -y[root@m01 ~]# zabbix_get -s 10.0.1.7 -k ESTABLISHED2[root@m01 ~]# zabbix_get -s 10.0.1.7 -k LISTEN12</code></pre><p>4.导入模版文件</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-bf27be32d233f194.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-784f18988c7debab.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-2a388d1ec74725e9.png" alt="请输入图片描述"></p><p>5.主机关联模版文件<br><img src="http://upload-images.jianshu.io/upload_images/14248468-9070da45843e2644.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-0ab34947877205eb.png" alt="请输入图片描述"></p><p>6.查看最新数据<br><img src="http://upload-images.jianshu.io/upload_images/14248468-e17fda198f1ec1ac.png" alt="请输入图片描述"></p><p>7.查看图形<br><img src="http://upload-images.jianshu.io/upload_images/14248468-9c011ab3f383de99.png" alt="请输入图片描述"></p><h2 id="第x章-自定义模版监控nginx状态"><a href="#第x章-自定义模版监控nginx状态" class="headerlink" title="第x章 自定义模版监控nginx状态"></a>第x章 自定义模版监控nginx状态</h2><h2 id="1-开启监控页面并访问测试"><a href="#1-开启监控页面并访问测试" class="headerlink" title="1.开启监控页面并访问测试"></a>1.开启监控页面并访问测试</h2><pre><code>[root@web01 ~]# cat /etc/nginx/conf.d/status.conf server &#123;   listen 80;   server_name localhost;   location /nginx_status &#123;       stub_status on;       access_log off;   &#125;&#125;[root@web01 ~]# curl 127.0.0.1/nginx_status/Active connections: 1 server accepts handled requests 6 6 6 Reading: 0 Writing: 1 Waiting: 0 </code></pre><h2 id="2-准备nginx监控状态脚本"><a href="#2-准备nginx监控状态脚本" class="headerlink" title="2.准备nginx监控状态脚本"></a>2.准备nginx监控状态脚本</h2><pre><code>[root@web01 /etc/zabbix/zabbix_agentd.d]# cat nginx_monitor.sh #!/bin/bashNGINX_COMMAND=$1CACHEFILE=&quot;/tmp/nginx_status.txt&quot;CMD=&quot;/usr/bin/curl http://127.0.0.1/nginx_status/&quot;if [ ! -f $CACHEFILE  ];then   $CMD &gt;$CACHEFILE 2&gt;/dev/nullfi# Check and run the scriptTIMEFLM=`stat -c %Y $CACHEFILE`TIMENOW=`date +%s`if [ `expr $TIMENOW - $TIMEFLM` -gt 60 ]; then    rm -f $CACHEFILEfiif [ ! -f $CACHEFILE  ];then   $CMD &gt;$CACHEFILE 2&gt;/dev/nullfinginx_active()&#123;         grep &#39;Active&#39; $CACHEFILE| awk &#39;&#123;print $NF&#125;&#39;         exit 0;&#125;nginx_reading()&#123;         grep &#39;Reading&#39; $CACHEFILE| awk &#39;&#123;print $2&#125;&#39;         exit 0;&#125;nginx_writing()&#123;         grep &#39;Writing&#39; $CACHEFILE | awk &#39;&#123;print $4&#125;&#39;         exit 0;&#125;nginx_waiting()&#123;         grep &#39;Waiting&#39; $CACHEFILE| awk &#39;&#123;print $6&#125;&#39;         exit 0;&#125;nginx_accepts()&#123;         awk NR==3 $CACHEFILE| awk &#39;&#123;print $1&#125;&#39;          exit 0;&#125;nginx_handled()&#123;         awk NR==3 $CACHEFILE| awk &#39;&#123;print $2&#125;&#39;          exit 0;&#125;nginx_requests()&#123;         awk NR==3 $CACHEFILE| awk &#39;&#123;print $3&#125;&#39;         exit 0;&#125;case $NGINX_COMMAND in    active)        nginx_active;        ;;    reading)        nginx_reading;        ;;    writing)        nginx_writing;        ;;    waiting)        nginx_waiting;        ;;    accepts)        nginx_accepts;        ;;    handled)        nginx_handled;        ;;    requests)        nginx_requests;        ;;    *)echo &#39;Invalid credentials&#39;;exit 2;esac</code></pre><h2 id="3-编写zabbix监控配置文件"><a href="#3-编写zabbix监控配置文件" class="headerlink" title="3.编写zabbix监控配置文件"></a>3.编写zabbix监控配置文件</h2><pre><code>[root@web01 ~]# cat /etc/zabbix/zabbix_agentd.d/nginx_status.confUserParameter=nginx_status[*],/bin/bash /etc/zabbix/zabbix_agentd.d/nginx_monitor.sh $1[root@web01 ~]# systemctl restart zabbix-agent.service</code></pre><h2 id="4-使用zabbix-get取值"><a href="#4-使用zabbix-get取值" class="headerlink" title="4.使用zabbix_get取值"></a>4.使用zabbix_get取值</h2><pre><code>[root@m01 ~]# zabbix_get -s 10.0.1.7 -k nginx_status[accepts]7</code></pre><h2 id="5-导入模版"><a href="#5-导入模版" class="headerlink" title="5.导入模版"></a>5.导入模版</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-c3bbd17a2587f6b4.png" alt="请输入图片描述"></p><h2 id="6-链接模版"><a href="#6-链接模版" class="headerlink" title="6.链接模版"></a>6.链接模版</h2><p><img src="http://upload-images.jianshu.io/upload_images/14248468-7f460c46106c792c.png" alt="请输入图片描述"></p><p>7.查看数据<br><img src="http://upload-images.jianshu.io/upload_images/14248468-3edb2a100a2a3987.png" alt="请输入图片描述"></p><h1 id="第x章-自定义模版监控php状态"><a href="#第x章-自定义模版监控php状态" class="headerlink" title="第x章 自定义模版监控php状态"></a>第x章 自定义模版监控php状态</h1><h2 id="1-开启监控页面"><a href="#1-开启监控页面" class="headerlink" title="1.开启监控页面"></a>1.开启监控页面</h2><pre><code>[root@web01 ~]# tail -1 /etc/php-fpm.d/www.conf    pm.status_path = /php_status[root@web01 ~]# cat /etc/nginx/conf.d/status.conf    server &#123;   listen 80;   server_name localhost;   location /nginx_status &#123;       stub_status on;       access_log off;   &#125;   location /php_status &#123;       fastcgi_pass 127.0.0.1:9000;       fastcgi_index index.php;       fastcgi_param SCRIPT_FILENAME html$fastcgi_script_name;       include fastcgi_params;   &#125;&#125;[root@web01 ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful[root@web01 ~]# systemctl restart nginx.service php-fpm.service</code></pre><h2 id="2-访问测试"><a href="#2-访问测试" class="headerlink" title="2.访问测试"></a>2.访问测试</h2><pre><code>[root@web01 ~]# curl 127.0.0.1/php_statuspool:                 wwwprocess manager:      dynamicstart time:           08/Aug/2019:22:31:27 +0800start since:          37accepted conn:        1listen queue:         0max listen queue:     0listen queue len:     128idle processes:       4active processes:     1total processes:      5max active processes: 1max children reached: 0slow requests:        0</code></pre><h2 id="3-准备访问脚本"><a href="#3-准备访问脚本" class="headerlink" title="3.准备访问脚本"></a>3.准备访问脚本</h2><pre><code>[root@web01 ~]# cat /etc/zabbix/zabbix_agentd.d/fpm.sh #!/bin/bash################################### Zabbix monitoring script## php-fpm:#  - anything available via FPM status page#################################### Contact:#  vincent.viallet@gmail.com################################### ChangeLog:#  20100922     VV      initial creation################################### Zabbix requested parameterZBX_REQ_DATA=&quot;$1&quot;ZBX_REQ_DATA_URL=&quot;$2&quot;# Nginx defaultsNGINX_STATUS_DEFAULT_URL=&quot;http://localhost/fpm/status&quot;WGET_BIN=&quot;/usr/bin/wget&quot;## Error handling:#  - need to be displayable in Zabbix (avoid NOT_SUPPORTED)#  - items need to be of type &quot;float&quot; (allow negative + float)#ERROR_NO_ACCESS_FILE=&quot;-0.91&quot;ERROR_NO_ACCESS=&quot;-0.92&quot;ERROR_WRONG_PARAM=&quot;-0.93&quot;ERROR_DATA=&quot;-0.94&quot; # either can not connect /   bad host / bad port# Handle host and port if non-defaultif [ ! -z &quot;$ZBX_REQ_DATA_URL&quot; ]; then  URL=&quot;$ZBX_REQ_DATA_URL&quot;else  URL=&quot;$NGINX_STATUS_DEFAULT_URL&quot;fi# save the nginx stats in a variable for future parsingNGINX_STATS=$($WGET_BIN -q $URL -O - 2&gt;/dev/null)# error during retrieveif [ $? -ne 0 -o -z &quot;$NGINX_STATS&quot; ]; then  echo $ERROR_DATA  exit 1fi# # Extract data from nginx stats##RESULT=$(echo &quot;$NGINX_STATS&quot; | awk &#39;print $0;match($0, &quot;^&#39;&quot;$ZBX_REQ_DATA&quot;&#39;:[[:space:]]+(.*)&quot;, a) &#123; print a[1] &#125;&#39;)#RESULT=$(echo &quot;$NGINX_STATS&quot; | grep &quot;$ZBX_REQ_DATA&quot; | awk -F : &#39;&#123;print $2&#125;&#39;)RESULT=$(echo &quot;$NGINX_STATS&quot; | awk -F : &quot;&#123;if(\$1==\&quot;$ZBX_REQ_DATA\&quot;) print \$2&#125;&quot;)if [ $? -ne 0 -o -z &quot;$RESULT&quot; ]; then    echo $ERROR_WRONG_PARAM    exit 1fiecho $RESULTexit 0[root@web01 ~]# bash /etc/zabbix/zabbix_agentd.d/fpm.sh &quot;total processes&quot; http://127.0.0.1/php_status5</code></pre><p>4.准备zabbix配置文件</p><pre><code>[root@web01 ~]# cat /etc/zabbix/zabbix_agentd.d/fpm.conf    UserParameter=php-fpm[*],/etc/zabbix/zabbix_agentd.d/fpm.sh &quot;$1&quot; &quot;$2&quot;[root@web01 ~]# systemctl restart zabbix-agent.service4.使用zabbix_get取值[root@m01 ~]# zabbix_get -s 10.0.1.7 -k php-fpm[&quot;total processes&quot;,http://127.0.0.1/php_status]5</code></pre><p>5.导入模版<br>导入之后需要修改一下模版里的宏配置</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-e9002db6117b2a36.png" alt="请输入图片描述"></p><h1 id="第x章-WEB监控"><a href="#第x章-WEB监控" class="headerlink" title="第x章 WEB监控"></a>第x章 WEB监控</h1><p>需求，监控页面状态码</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-5b73f2eb0bbc026e.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-29b41892ec2a2652.png" alt="请输入图片描述"></p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-4d04849ba09f7aa2.png" alt="请输入图片描述"></p><h1 id="第x章-故障记录"><a href="#第x章-故障记录" class="headerlink" title="第x章 故障记录"></a>第x章 故障记录</h1><h2 id="故障1"><a href="#故障1" class="headerlink" title="故障1"></a>故障1</h2><p>故障现象：<br>提示zabbix-server is not running</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-5ec40e3f9f9c0b22.png" alt="请输入图片描述"></p><p>报错日志：</p><pre><code> 34983:20190807:202215.171 database is down: reconnecting in 10 seconds 34983:20190807:202225.172 [Z3001] connection to database &#39;zabbix&#39; failed: [1045] Access denied for user &#39;zabbix&#39;@&#39;localhost&#39; (using password: NO)</code></pre><p>故障原因：<br>zabbix-server的配置文件里配有配置数据库密码<br>故障解决：<br>添加正确的数据库账号密码信息</p><pre><code>[root@m01 ~]# grep &quot;^DB&quot; /etc/zabbix/zabbix_server.conf     DBHost=localhostDBName=zabbixDBUser=zabbixDBPassword=zabbix</code></pre><h2 id="故障2"><a href="#故障2" class="headerlink" title="故障2"></a>故障2</h2><p>故障现象：微信报警失败<br>报错日志：</p><pre><code>[root@m01 ~]# tail -f /var/log/zabbix/zabbix_server.log Problem name: TIME_WAIT过多Host: web01Severity: AverageOriginal problem ID: 51&#39;&quot;: Traceback (most recent call last):  File &quot;/usr/lib/zabbix/alertscripts/weixin.py&quot;, line 7, in &lt;module&gt;    import requestsImportError: No module named requests</code></pre><p>问题原因：<br>缺少模块 requests</p><p>问题解决：<br>安装缺失的依赖包</p><pre><code>[root@m01 ~]# yum install python-pip[root@m01 ~]# pip install --upgrade pip[root@m01 ~]# pip install requests</code></pre><h2 id="故障3"><a href="#故障3" class="headerlink" title="故障3"></a>故障3</h2><p>故障现象：<br>在server端使用zabbix_get命令测试键值命令时提示警告</p><pre><code>[root@m01 ~]# zabbix_get -s 10.0.1.7 -k ESTABLISHED  (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)2</code></pre><p>问题原因：<br>zabbix_agent是以普通用户zabbix运行的，而普通用户执行netstat -antp时会有警告，网上查找发现只要不是用p参数就可以以普通用户运行<br>解决方案：<br>监控脚本里的命令修改为netstat -ant</p><hr><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人Leanote云笔记本</title>
      <link href="/posts/35691/"/>
      <url>/posts/35691/</url>
      
        <content type="html"><![CDATA[<h3 id="连接ECS服务器"><a href="#连接ECS服务器" class="headerlink" title="连接ECS服务器"></a>连接ECS服务器</h3><h4 id="1-打开系统自带的终端工具"><a href="#1-打开系统自带的终端工具" class="headerlink" title="1. 打开系统自带的终端工具"></a>1. 打开系统自带的终端工具</h4><p>Windows：CMD或Powershell</p><p>MAC：Terminal</p><h4 id="2-在终端中输入连接命令ssh-username-ipaddress-。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址例如："><a href="#2-在终端中输入连接命令ssh-username-ipaddress-。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址例如：" class="headerlink" title="2. 在终端中输入连接命令ssh [username]@[ipaddress]。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址例如："></a>2. 在终端中输入连接命令ssh [username]@[ipaddress]。您需要将其中的username和ipaddress替换为第1小节中创建的ECS服务器的登录名和公网地址例如：</h4><p>ssh <a href="mailto:&#x72;&#111;&#111;&#116;&#x40;&#x31;&#50;&#x33;&#x2e;&#x31;&#x32;&#x33;&#46;&#49;&#x32;&#51;&#x2e;&#49;&#x32;&#x33;">&#x72;&#111;&#111;&#116;&#x40;&#x31;&#50;&#x33;&#x2e;&#x31;&#x32;&#x33;&#46;&#49;&#x32;&#51;&#x2e;&#49;&#x32;&#x33;</a></p><p>命令显示结果如下：</p><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006321962.png"></p><h4 id="3-输入yes"><a href="#3-输入yes" class="headerlink" title="3. 输入yes"></a>3. 输入yes</h4><h4 id="4-同意继续后将会提示输入登录密码。-密码为已创建的云服务的ECS的登录密码"><a href="#4-同意继续后将会提示输入登录密码。-密码为已创建的云服务的ECS的登录密码" class="headerlink" title="4. 同意继续后将会提示输入登录密码。 密码为已创建的云服务的ECS的登录密码"></a>4. 同意继续后将会提示输入登录密码。 密码为已创建的云服务的ECS的登录密码</h4><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006322820.png"></p><p>登录成功后会显示如下信息。</p><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006323662.png"></p><h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><p>MongoDB是一个基于分布式文件存储的高性能数据库，介于关系数据库和非关系数据库之间，它支持的数据结构非常松散是类似于json和bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>Leanote云笔记使用MongoDB作为后端数据库，按照以下步骤按照MongoDB数据库</p><h4 id="1-执行以下命令，安装MongoDB"><a href="#1-执行以下命令，安装MongoDB" class="headerlink" title="1. 执行以下命令，安装MongoDB"></a>1. 执行以下命令，安装MongoDB</h4><p>yum -y  install mongodb mongodb-server.x86_64 mariadb-devel.i686</p><h4 id="2-执行以下命令，启动MongoDB服务"><a href="#2-执行以下命令，启动MongoDB服务" class="headerlink" title="2. 执行以下命令，启动MongoDB服务"></a>2. 执行以下命令，启动MongoDB服务</h4><p>systemctl start mongod</p><h4 id="3-执行以下命令，查看MongoDB运行状态"><a href="#3-执行以下命令，查看MongoDB运行状态" class="headerlink" title="3. 执行以下命令，查看MongoDB运行状态"></a>3. 执行以下命令，查看MongoDB运行状态</h4><p>systemctl status mongod</p><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006334433.png"></p><h3 id="安装Leanote"><a href="#安装Leanote" class="headerlink" title="安装Leanote"></a>安装Leanote</h3><h4 id="1-下载Leanote二进制安装包"><a href="#1-下载Leanote二进制安装包" class="headerlink" title="1. 下载Leanote二进制安装包"></a>1. 下载Leanote二进制安装包</h4><p>wget <a href="https://nchc.dl.sourceforge.net/project/leanote-bin/2.6.1/leanote-linux-amd64-v2.6.1.bin.tar.gz">https://nchc.dl.sourceforge.net/project/leanote-bin/2.6.1/leanote-linux-amd64-v2.6.1.bin.tar.gz</a></p><h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2. 解压安装包"></a>2. 解压安装包</h4><p>tar` `-zxvf` `leanote-linux-amd64-v2.6.1.bin.tar.gz</p><h4 id="3-编辑文件leanote-conf-app-conf，在文件中找到-app-secret-项，将该项的值改为任意字符串。（如不修改将会有安全风险）"><a href="#3-编辑文件leanote-conf-app-conf，在文件中找到-app-secret-项，将该项的值改为任意字符串。（如不修改将会有安全风险）" class="headerlink" title="3. 编辑文件leanote/conf/app.conf，在文件中找到 app.secret 项，将该项的值改为任意字符串。（如不修改将会有安全风险）"></a>3. 编辑文件leanote/conf/app.conf，在文件中找到 app.secret 项，将该项的值改为任意字符串。（如不修改将会有安全风险）</h4><p>说明： 根据Leanote官方文档，如不改app.secret项的值，将会有安全隐患</p><p>a. 使用vim编辑器打开文件leanote/conf/app.conf</p><p>vim leanote/conf/app.conf</p><p>b. 进入vim编辑器后，输入 :/app.secret=并按下回车查找 app.secret 位置</p><p>c. 找到该项位置后按下<code>i</code>键进入编辑模式，修改该项的值为任意字符串</p><p>d. 修改完成后，按下<code>esc</code>键退出编辑模式，输入 :wq 保存并退出vim编辑器</p><p>修改后如图所示</p><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006335412.png"></p><h4 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h4><p>mongorestore -h localhost -d leanote  –dir /root/leanote/mongodb_backup/leanote_install_data/</p><h4 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h4><p>nohup bash /root/leanote/bin/run.sh &gt; /root/leanote/run.`log` `2`&gt;&amp;`1` &amp;</p><h4 id="6-访问云笔记"><a href="#6-访问云笔记" class="headerlink" title="6. 访问云笔记"></a>6. 访问云笔记</h4><p>在浏览器中访问 http://公网地址&gt;:9000 ，请将&lt;公网地址&gt; 替换为左侧资源栏中的ECS公网IP地址。默认管理用户为admin，密码为abc123</p><p>登录成功后如下图所示</p><p><img src="https://blog.kococ.cn/wp-content/uploads/2020/07/2020072006340597.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高可用晋升</title>
      <link href="/posts/38073/"/>
      <url>/posts/38073/</url>
      
        <content type="html"><![CDATA[<h1 id="企业高可用性标准"><a href="#企业高可用性标准" class="headerlink" title="企业高可用性标准"></a>企业高可用性标准</h1><h2 id="全年无故障率-非计划内故障停机"><a href="#全年无故障率-非计划内故障停机" class="headerlink" title="全年无故障率(非计划内故障停机)"></a>全年无故障率(非计划内故障停机)</h2><pre><code>99.9%                 ----&gt; 0.001*365*24*60=525.6  min99.99%                ----&gt; 0.0001*365*24*60=52.56 min99.999%               ----&gt; 0.0001*365*24*60=5.256 min</code></pre><h2 id="高可用架构方案"><a href="#高可用架构方案" class="headerlink" title=" 高可用架构方案"></a> 高可用架构方案</h2><pre><code>负载均衡:有一定的高可用性 LVS  Nginx主备系统:有高可用性,但是需要切换,是单活的架构KA ,   MHA, MMM真正高可用(多活系统): NDB Cluster  Oracle RAC  Sysbase cluster   , InnoDB Cluster（MGR）,PXC , MGC</code></pre><h1 id="主从复制简介"><a href="#主从复制简介" class="headerlink" title="主从复制简介"></a>主从复制简介</h1><pre><code>1.1. 基于二进制日志复制的1.2. 主库的修改操作会记录二进制日志1.3. 从库会请求新的二进制日志并回放,最终达到主从数据同步1.4. 主从复制核心功能:辅助备份,处理物理损坏                   扩展新型的架构:高可用,高性能,分布式架构等</code></pre><h1 id="主从复制前提-搭建主从的过程"><a href="#主从复制前提-搭建主从的过程" class="headerlink" title=" 主从复制前提(搭建主从的过程)"></a> 主从复制前提(搭建主从的过程)</h1><pre><code>2.1 两台以上mysql实例 ,server_id,server_uuid不同2.2 主库开启二进制日志2.3 专用的复制用户2.4 保证主从开启之前的某个时间点,从库数据是和主库一致(补课)2.5 告知从库,复制user,passwd,IP port,以及复制起点(change master to)2.6 线程(三个):Dump thread  IO thread  SQL thread 开启(start slave)</code></pre><h1 id="主从复制搭建-Classic-replication"><a href="#主从复制搭建-Classic-replication" class="headerlink" title="主从复制搭建(Classic replication)"></a>主从复制搭建(Classic replication)</h1><h2 id="清理主库数据"><a href="#清理主库数据" class="headerlink" title="清理主库数据"></a>清理主库数据</h2><pre><code>rm -rf /data/3307/data/*</code></pre><h2 id="重新初始化3307"><a href="#重新初始化3307" class="headerlink" title="重新初始化3307"></a>重新初始化3307</h2><pre><code>mysqld --initialize-insecure --user=mysql --basedir=/app/mysql --datadir=/data/3307/data</code></pre><h2 id="修改my-cnf-开启二进制日志功能"><a href="#修改my-cnf-开启二进制日志功能" class="headerlink" title="修改my.cnf ,开启二进制日志功能"></a>修改my.cnf ,开启二进制日志功能</h2><pre><code>[root@db01 3307]# vim /data/3307/my.cnf log_bin=/data/3307/data/mysql-bin</code></pre><h2 id="启动所有节点"><a href="#启动所有节点" class="headerlink" title="启动所有节点"></a>启动所有节点</h2><pre><code>[root@db01 3307]# systemctl start mysqld3307[root@db01 3307]# systemctl start mysqld3308[root@db01 3307]# systemctl start mysqld3309[root@db01 3307]# ps -ef |grep mysqldmysql      3684      1  4 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3307/my.cnfmysql      3719      1  7 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3308/my.cnfmysql      3754      1  8 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf[root@db01 3307]# mysql -S /data/3307/mysql.sock -e &quot;select @@server_id&quot;[root@db01 3307]# mysql -S /data/3308/mysql.sock -e &quot;select @@server_id&quot;[root@db01 3307]# mysql -S /data/3309/mysql.sock -e &quot;select @@server_id&quot;</code></pre><h2 id="主库中创建复制用户"><a href="#主库中创建复制用户" class="headerlink" title="主库中创建复制用户"></a>主库中创建复制用户</h2><pre><code>[root@db01 3307]# mysql -S /data/3307/mysql.sock db01 [(none)]&gt;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;db01 [(none)]&gt;select user,host from mysql.user;</code></pre><h2 id="备份主库并恢复到从库"><a href="#备份主库并恢复到从库" class="headerlink" title="备份主库并恢复到从库"></a>备份主库并恢复到从库</h2><pre><code>[root@db01 3307]# mysqldump -S /data/3307/mysql.sock -A --master-data=2 --single-transaction  -R --triggers &gt;/backup/full.sql-- CHANGE MASTER TO MASTER_LOG_FILE=&#39;mysql-bin.000001&#39;, MASTER_LOG_POS=653;[root@db01 3307]# mysql -S /data/3308/mysql.sockdb01 [(none)]&gt;source /backup/full.sql</code></pre><h2 id="告知从库关键复制信息"><a href="#告知从库关键复制信息" class="headerlink" title="告知从库关键复制信息"></a>告知从库关键复制信息</h2><pre><code>ip port user  password  binlog position [root@db01 3307]# mysql -S /data/3308/mysql.sockdb01 [mysql]&gt;help change master toCHANGE MASTER TO  MASTER_HOST=&#39;10.0.0.51&#39;,  MASTER_USER=&#39;repl&#39;,  MASTER_PASSWORD=&#39;123&#39;,  MASTER_PORT=3307,  MASTER_LOG_FILE=&#39;mysql-bin.000001&#39;,  MASTER_LOG_POS=653,  MASTER_CONNECT_RETRY=10;</code></pre><h2 id="开启主从专用线程"><a href="#开启主从专用线程" class="headerlink" title="开启主从专用线程"></a>开启主从专用线程</h2><pre><code>start slave ;</code></pre><h2 id="检查复制状态"><a href="#检查复制状态" class="headerlink" title="检查复制状态"></a>检查复制状态</h2><pre><code>db01 [mysql]&gt;show slave  status \GSlave_IO_Running: YesSlave_SQL_Running: Yes</code></pre><h1 id="主从复制的原理-Classic-Replication"><a href="#主从复制的原理-Classic-Replication" class="headerlink" title="主从复制的原理 (Classic Replication)"></a>主从复制的原理 (Classic Replication)</h1><h2 id="主从中设置到的文件和线程"><a href="#主从中设置到的文件和线程" class="headerlink" title="主从中设置到的文件和线程"></a>主从中设置到的文件和线程</h2><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><pre><code>主:DUMP THREAD从:IO  THREADSQL THREAD</code></pre><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><pre><code>主:mysql-bin.000001从: db01-relay.000001     ===&gt;中继日志master.info                 ===》主库信息记录日志relay-log.info              ===&gt; 记录中继应用情况信息</code></pre><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><p><img src="http://47.101.133.77/usr/uploads/2020/01/2764515632.png" alt="主从复制原理"></p><p><img src="http://47.101.133.77/usr/uploads/2020/01/3454191668.png" alt="工作流程"></p><h2 id="主从复制原理描述："><a href="#主从复制原理描述：" class="headerlink" title="主从复制原理描述："></a>主从复制原理描述：</h2><hr><pre><code>1.change master to 时，ip pot user password binlog position写入到master.info进行记录2. start slave 时，从库会启动IO线程和SQL线程3.IO_T，读取master.info信息，获取主库信息连接主库4. 主库会生成一个准备binlog DUMP线程，来响应从库5. IO_T根据master.info记录的binlog文件名和position号，请求主库DUMP最新日志6. DUMP线程检查主库的binlog日志，如果有新的，TP(传送)给从从库的IO_T7. IO_T将收到的日志存储到了TCP/IP 缓存，立即返回ACK给主库 ，主库工作完成8.IO_T将缓存中的数据，存储到relay-log日志文件,更新master.info文件binlog 文件名和postion，IO_T工作完成9.SQL_T读取relay-log.info文件，获取到上次执行到的relay-log的位置，作为起点，回放relay-log10.SQL_T回放完成之后，会更新relay-log.info文件。11. relay-log会有自动清理的功能。细节：（5.5版本之后）1.主库一旦有新的日志生成，会发送“信号”给binlog dump ，IO线程再请求</code></pre><hr><h1 id="主从故障监控-分析-处理"><a href="#主从故障监控-分析-处理" class="headerlink" title="主从故障监控\分析\处理"></a>主从故障监控\分析\处理</h1><h2 id="线程相关监控"><a href="#线程相关监控" class="headerlink" title="线程相关监控"></a>线程相关监控</h2><h2 id="主库"><a href="#主库" class="headerlink" title="主库:"></a>主库:</h2><pre><code>show full processlist;每个从库都会有一行dump相关的信息HOSTS: db01:47176State:Master has sent all binlog to slave; waiting for more updates如果现实非以上信息,说明主从之间的关系出现了问题    </code></pre><h2 id="从库"><a href="#从库" class="headerlink" title="从库:"></a>从库:</h2><pre><code>db01 [(none)]&gt;show slave status \G</code></pre><h2 id="主库相关信息监控"><a href="#主库相关信息监控" class="headerlink" title="主库相关信息监控"></a>主库相关信息监控</h2><pre><code>Master_Host: 10.0.0.51Master_User: replMaster_Port: 3307Master_Log_File: mysql-bin.000005Read_Master_Log_Pos: 444</code></pre><h2 id="从库中继日志的应用状态"><a href="#从库中继日志的应用状态" class="headerlink" title="从库中继日志的应用状态"></a>从库中继日志的应用状态</h2><pre><code>Relay_Log_File: db01-relay-bin.000002Relay_Log_Pos: 485</code></pre><h2 id="从库复制线程有关的状态"><a href="#从库复制线程有关的状态" class="headerlink" title="从库复制线程有关的状态"></a>从库复制线程有关的状态</h2><pre><code>Slave_IO_Running: YesSlave_SQL_Running: YesLast_IO_Errno: 0Last_IO_Error: Last_SQL_Errno: 0Last_SQL_Error: </code></pre><h2 id="过滤复制有关的状态"><a href="#过滤复制有关的状态" class="headerlink" title="过滤复制有关的状态"></a>过滤复制有关的状态</h2><pre><code>Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: </code></pre><h2 id="主从延时相关状态-非人为"><a href="#主从延时相关状态-非人为" class="headerlink" title="主从延时相关状态(非人为)"></a>主从延时相关状态(非人为)</h2><pre><code>Seconds_Behind_Master: 0</code></pre><h2 id="延时从库有关的状态-人为"><a href="#延时从库有关的状态-人为" class="headerlink" title="延时从库有关的状态(人为)"></a>延时从库有关的状态(人为)</h2><pre><code>SQL_Delay: 0SQL_Remaining_Delay: NULL</code></pre><h2 id="GTID-复制有关的状态"><a href="#GTID-复制有关的状态" class="headerlink" title="GTID 复制有关的状态"></a>GTID 复制有关的状态</h2><pre><code>Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0</code></pre><h2 id="主从复制故障分析"><a href="#主从复制故障分析" class="headerlink" title="主从复制故障分析"></a>主从复制故障分析</h2><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h2 id="连接主库"><a href="#连接主库" class="headerlink" title="连接主库"></a>连接主库</h2><pre><code>(1) 用户 密码  IP  portLast_IO_Error: error reconnecting to master &#39;repl@10.0.0.51:3307&#39; - retry-time: 10  retries: 7[root@db01 ~]# mysql -urepl  -p123333  -h 10.0.0.51 -P 3307ERROR 1045 (28000): Access denied for user &#39;repl&#39;@&#39;db01&#39; (using password: YES)原因:密码错误 用户错误 skip_name_resolve地址错误端口</code></pre><p>处理方法</p><pre><code>stop  slave  reset slave all change master to start slave主库连接数上线,或者是主库太繁忙show slave  staus \G Last_IO_Errno: 1040Last_IO_Error: error reconnecting to master &#39;repl@10.0.0.51:3307&#39; - retry-time: 10  retries: 7处理思路:拿复制用户,手工连接一下[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.51 -P 3307 mysql: [Warning] Using a password on the command line interface can be insecure.ERROR 1040 (HY000): Too many connections处理方法:db01 [(none)]&gt;set global max_connections=300;(3) 防火墙,网络不通</code></pre><h2 id="请求二进制日志"><a href="#请求二进制日志" class="headerlink" title="请求二进制日志"></a>请求二进制日志</h2><pre><code>主库缺失日志从库方面,二进制日志位置点不对Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;could not find next log; the first event &#39;mysql-bin.000001&#39; at 154, the last event read from &#39;/data/3307/data/mysql-bin.000002&#39; at 154, the last byte read from &#39;/data/3307/data/mysql-bin.000002&#39; at 154.&#39;注意: 在主从复制环境中,严令禁止主库中reset master; 可以选择expire 进行定期清理主库二进制日志解决方案:重新构建主从</code></pre><h2 id="SQL-线程故障"><a href="#SQL-线程故障" class="headerlink" title="SQL 线程故障"></a>SQL 线程故障</h2><p>SQL线程功能：</p><pre><code>(1)读写relay-log.info (2)relay-log损坏,断节,找不到(3)接收到的SQL无法执行</code></pre><p>导致SQL线程故障原因分析：</p><pre><code>1. 版本差异，参数设定不同，比如：数据类型的差异，SQL_MODE影响2.要创建的数据库对象,已经存在3.要删除或修改的对象不存在  4.DML语句不符合表定义及约束时.  归根揭底的原因都是由于从库发生了写入操作.Last_SQL_Error: Error &#39;Can&#39;t create database &#39;db&#39;; database exists&#39; on query. Default database: &#39;db&#39;. Query: &#39;create database db&#39;处理方法(以从库为核心的处理方案)：方法一：stop slave; set global sql_slave_skip_counter = 1;#将同步指针向下移动一个，如果多次不同步，可以重复操作。start slave;方法二：/etc/my.cnfslave-skip-errors = 1032,1062,1007常见错误代码:1007:对象已存在1032:无法执行DML1062:主键冲突,或约束冲突但是，以上操作有时是有风险的，最安全的做法就是重新构建主从。把握一个原则,一切以主库为主.</code></pre><h2 id="一劳永逸的方法"><a href="#一劳永逸的方法" class="headerlink" title="一劳永逸的方法:"></a>一劳永逸的方法:</h2><pre><code>(1) 可以设置从库只读.db01 [(none)]&gt;show variables like &#39;%read_only%&#39;;注意：只会影响到普通用户，对管理员用户无效。(2)加中间件读写分离。</code></pre><h2 id="主从延时监控及原因"><a href="#主从延时监控及原因" class="headerlink" title="主从延时监控及原因"></a>主从延时监控及原因</h2><pre><code>主库做了修改操作,从库比较长时间才能追上.</code></pre><h2 id="外在因素"><a href="#外在因素" class="headerlink" title="外在因素"></a>外在因素</h2><pre><code>网络 主从硬件差异较大版本差异参数因素</code></pre><h2 id="主库-1"><a href="#主库-1" class="headerlink" title="主库"></a>主库</h2><pre><code>(1) 二进制日志写入不及时[rep]&gt;select @@sync_binlog;(2) CR的主从复制中,binlog_dump线程,事件为单元,串行传送二进制日志(5.6 5.5)1. 主库并发事务量大,主库可以并行,传送时是串行2. 主库发生了大事务,由于是串行传送,会产生阻塞后续的事务.解决方案:1. 5.6 开始,开启GTID,实现了GC(group commit)机制,可以并行传输日志给从库IO2. 5.7 开始,不开启GTID,会自动维护匿名的GTID,也能实现GC,我们建议还是认为开启GTID3. 大事务拆成多个小事务,可以有效的减少主从延时.</code></pre><h2 id="从库-1"><a href="#从库-1" class="headerlink" title="从库"></a>从库</h2><pre><code>SQL线程导致的主从延时在CR复制情况下: 从库默认情况下只有一个SQL,只能串行回放事务SQL1. 主库如果并发事务量较大,从库只能串行回放2. 主库发生了大事务,会阻塞后续的所有的事务的运行解决方案:1. 5.6 版本开启GTID之后,加入了SQL多线程的特性,但是只能针对不同库(database)下的事务进行并发回放.2. 5.7 版本开始GTID之后,在SQL方面,提供了基于逻辑时钟(logical_clock),binlog加入了seq_no机制,真正实现了基于事务级别的并发回放,这种技术我们把它称之为MTS(enhanced multi-threaded slave).3. 大事务拆成多个小事务,可以有效的减少主从延时.[https://dev.mysql.com/worklog/task/?id=6314]</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code>1. 主从复制原理2. 主从复制故障3. 主从延时：group commit    MTS   </code></pre><hr><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GlusterFS分布式文件系统群集</title>
      <link href="/posts/1282/"/>
      <url>/posts/1282/</url>
      
        <content type="html"><![CDATA[<p>13.1 GlusterFS概述<br>1.GlusterFS简介<br>GlusterFS是一个开源的分布式文件系统，同时也是Scale-Out存储解决方案Gluster的核心，在存储数据方面具有强大的横向扩展能力，通过扩展不同的节点可以支持数PB级别的存储容量GlusterFS借助TCP/IP或InfiniBand RDMA网络将分散的存储资源汇聚在一起，统一提供存储服务，并使用单一去全局命名空间来管理数据。GlusterFS基于可堆叠的用户空间以及无元的设计，可为各种不同的数据负载提供优异的性能<br>GlusterFS主要由存储服务器（Brick Server）、客户端及NFS/Samba存储网关（可选，根据需要选择使用）组成。GlusterFS架构中最大的设计特点是没有元数据服务器组件，这助于提升整个系统的性能、可靠性和稳定性。传统的分布式文件系统大多通过元服务器来存储元数据，元数据包含存储节点上的目录信息、目录结构等，这样的设计在浏览目录时效率非常高，但是也存在一些缺陷，如单点故障，一旦元数据服务器出现故障，即使节点具备再高的冗余性，整个存储系统也将崩溃，而GlusterFS分布式文件系统是基于无元服务器的设计，数据横向扩展能力强，具备较高的可靠性及存储效率。GlusterFS支持TCP/IP和InfiniBandRDMA高速网络互联，客户端可通过原生GlusterFS协议访问数据，其他没有运行GlusterFS客户端的终端可通过NFS/CIFS标准协议通过存储网关访问数据</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3542246066.jpg" alt="1.jpg"></p><p>2.GlusterFS的特点<br>扩展性和高性能。GlusterFS利用双重特性来提供高容量存储解决方案<br>Scale-Out架构通过增加存储节点的方式来提高存储容量和性能（磁盘、计算机和I/O资源都可以独立增加），支持10GbE和InfiniBand等高速网络互联<br>Gluster弹性哈希（Elastic Hash）解决了GlusterFS对元数据服务器的依赖，GlusterFS采用弹性哈希算法在存储池中定位数据。GlusterFS中可以智能地定位任意数据分片（将数据分片存储在不同节点上），不需要查看索引或者向元数据服务器查询。这种设计机制实现了存储的横向扩展，改善了单点故障及性能瓶颈，真正实现了并行化数据访问<br>高可用性。GlusterFS通过配置某些类型的存储卷，可以对文件进行自动复制（类似于RAID1），即使某个节点出现故障，也不影响数据的访问。当数据出现不一致时，自动修复功能能够把数据恢复到正确的状态，数据的修复是以增量的方式在后台执行，不会占用太多系统资源。GlusterFS可以支持所有的存储，因为它没有设计自己的私有数据文件格式，而是采用操作系统中标准的磁盘文件系统（如EXT3、XFS等）来存储文件，数据可以使用传统的访问磁盘的方式被访问<br>全局统一命名空间。全局统一命名空间将所有的存储资源聚集成一个单一的虚拟存储池，对用户和应用屏蔽了物理存储信息。存储资源（类似于LVM）可以根据生产环境中的需要进行弹性扩展或收缩。在多节点场景中，全局统一命名空间还可以基于不同节点做负载均衡，大大提高了存取效率<br>弹性卷管理。GlusterFS通过将数据储存在逻辑卷中，逻辑卷从逻辑存储池进行独立逻辑划分。逻辑存储池可以在线进行增加和移除，不会导致业务中断。逻辑卷可以根据需求在线增加缩减，并可以在多个节点中负载均衡。文件系统配置更改也可以实时在线进行并应用，从而可以适应工作负载条件变化或在线性能调优<br>基于标准协议。Gluster存储服务支持NFS、CIFS、HTTP、FTP、SMB及Gluster原生协议，完全与POSIX标准兼容。现有应用程序不需要做任何修改就可以对Gluster中的数据进行访问，也可以使用专用API进行访问（效率更高），这在公有云环境中部署Gluster时非常有用，Gluster对云服务器提供商专用API进行抽象，然后提供标准POSIX接口</p><p>3.GlusterFS术语</p><p>Brick（存储块）：指可信主机池中由主机提供的用于物理存储的专用分区，是GlusterFS中的基本存储单元，同时也是可信存储池中服务器上对外提供的存储目录。存储目录的格式由服务器和目录的绝对路径构成，表示方法为SERVER:EXPORT，如192.168.1.4:/data/mydir/<br>Volume（逻辑卷）：一个逻辑卷是一组Brick的集合。卷是数据存储的逻辑设备，类似于LVM中的逻辑卷。大部分Gluster管理操作是在卷上进行的<br>FUSE（Filesystem inUserspace）：是一个内核模块，允许用户创建自己的文件系统，无须修改内核代码<br>VFS：内核空间对用户空间提供的访问磁盘的接口<br>Glusterd（后台管理进程）：在存储群集中的每个节点上都要运行</p><p>4.模块化堆栈式架构</p><p>GlusterFS是模块化堆栈式的架构设计。模块称为Translator，是GlusterFS提供的一种强大机制，借助这种良好定义的接口可以高效简便地扩展文件系统的功能<br>(1)    服务端与客户端的设计高度模块化的同时模块接口是兼容的，同一个translator可同时在客户端和服务器加载<br>(2)    GlusterFS中所有的功能都是通过translator实现的，其中客户端要比服务端更复杂。所以功能的重点主要集中在客户端上</p><p>13.2 GlusterFS的工作原理<br>1.GlusterFS的工作流程</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3904427408.png" alt="请输入图片描述"></p><p>(1)    客户端或应用程序通过GlusterFS的挂载点访问数据<br>(2)    Linux系统内核通过VFS API收到请求并处理<br>(3)    VFS将数据递交给FUSE内核文件系统，并向系统注册一个实际的文件系统FUSE，而FUSE文件系统则是将数据通过/dev/fuse设备文件递交给了GlusterFS client端。可以将FUSE文件系统理解为一个代理<br>(4)    GlusterFS client收到数据后，client根据配置文件对数据进行处理<br>(5)    经过GlusterFS client处理后，通过网络将数据传递至远端的GlusterFS Server，并且将数据写入服务器存储设备</p><p>2.弹性HASH算法</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1491398914.png" alt="请输入图片描述"></p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3063198327.png" alt="请输入图片描述"></p><p>13.3 GlusterFS的卷类型</p><blockquote><p>分布式卷（Distribute volume）：文件通过HASH算法分布到所有Brick<br>Server上，这种卷是GlusterFS的基础；以文件为单位根据HASH算法散列到不同的Brick，其实只是扩大了磁盘空间，如果有一块磁盘损坏，数据也将丢失，属于文件级的RAID0，不具有容错能力<br>条带卷（Stripe volume）：类似RAID0，文件被分成数据块并以轮询的方式分布到多个Brick<br>Server上，文件存储以数据块为单位，支持大文件存储，文件越大，读取效率越高 复制卷（Replica<br>volume）：将文件同步到多个Brick上，使其具备多个文件副本，属于文件级RAID1，具有容错能力。因为数据分散在多个Brick中，所以读性能得到很大提升，但写性能下降<br>分布式条带卷（Distribute Stripe volume）：Brick<br>Server数量是条带数（数据快分布的Brick数量）的倍数，兼具分布式卷和条带卷的特点 分布式复制卷（Stripe Replica<br>volume）：Brick Server数量是镜像数（数据副本数量）的倍数，兼具分布式卷和复制卷的特点 条带复制卷（Stripe<br>Replica volume）：类似RAID 10，同时具有条带卷和复制卷的特点 分布式条带部复制卷（Distribute Stripe<br>Replicavolume）：三种基本卷的复合卷，通常用于类Map Reduce应用</p></blockquote><p>1.分布式卷<br>特点：<br>文件分布在不同的服务器，不具备冗余性<br>更容易且廉价地扩展卷的大小<br>单点故障会造成数据丢失<br>依赖底层的数据保护</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2140635533.png" alt="请输入图片描述"></p><p>2.条带卷<br>特点：<br>数据被分割成更小块分布到块服务器群中的不同条带区<br>分布减少了负载切更小的文件加速了存取的速度<br>没有数据冗余</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2297015581.png" alt="请输入图片描述"></p><p>3.复制卷<br>特点：<br>卷中所有的服务器均保存一个完整的副本<br>卷的副本数量可由客户创建的时候决定<br>至少有两块服务器或更多服务器<br>具备冗余性</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/4226946028.png" alt="请输入图片描述"></p><p>4.分布式条带卷</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/1477673389.png" alt="请输入图片描述"></p><p>5.分布式复制卷</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/813965134.png" alt="请输入图片描述"></p><p>13.4 GlusterFS部署<br>13.4.1 部署群集环境</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/3353905723.gif" alt="请输入图片描述"></p><p>服务器的相关信息（1）</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/2181784901.png" alt="请输入图片描述"></p><p>服务器的相关信息（2）</p><p><img src="https://www.xoxoyun.cn/usr/uploads/2020/02/266306810.png" alt="13.png"></p><p>1.准备环境<br>1)添加硬盘<br>node1添加四块硬盘<br>一块3G、一块4G、一块5G、一块6G<br>node2添加四块硬盘<br>一块3G、一块4G、一块5G、一块6G<br>node3添加三块硬盘<br>一块3G、一块4G、一块5G<br>node4添加三块硬盘<br>一块3G、一块4G、一块5G<br>2)修改主机名</p><pre><code>node1节点    vim /etc/hostnamenode1node2节点vim /etc/hostnamenode2node3节点vim /etc/hostnamenode3node4节点vim /etc/hostnamenode4</code></pre><p>3)添加硬盘和修改主机名后重启系统生效<br>reboot<br>4)新建目录<br>node1、node2<br>mkdir /b3 /c4 /d5 /e6<br>node3、node4<br>mkdir /b3 /c4 /d5<br>5)分区硬盘<br>node1、node2<br>fdisk /dev/sdb<br>n<br>p<br>回车<br>回车<br>回车<br>p<br>w</p><p>fdisk /dev/sdc<br>fdisk /dev/sdd<br>fdisk /dev/sde<br>node3、node4<br>fdisk /dev/sdb<br>n<br>p<br>回车<br>回车<br>回车<br>p<br>w</p><p>fdisk /dev/sdc<br>fdisk /dev/sdd<br>6)    格式化硬盘<br>node1、node2<br>mkfs -t ext4 /dev/sdb1<br>mkfs -t ext4 /dev/sdc1<br>mkfs -t ext4 /dev/sdd1<br>mkfs -t ext4 /dev/sde1<br>node3、node4<br>mkfs -t ext4 /dev/sdb1<br>mkfs -t ext4 /dev/sdc1<br>mkfs -t ext4 /dev/sdd1<br>7)    手动挂载硬盘<br>node1、node2<br>mount /dev/sdb1 /b3<br>mount /dev/sdc1 /c4<br>mount /dev/sdd1 /d5<br>mount /dev/sde1 /e6<br>node3、node4<br>mount /dev/sdb1 /b3<br>mount /dev/sdc1 /c4<br>mount /dev/sdd1 /d5<br>8)自动挂载硬盘<br>node1、node2<br>vim /etc/fstab<br>/dev/sdb1       /b3     ext4     defaults  0 0<br>/dev/sdc1       /c4     ext4     defaults  0 0<br>/dev/sdd1       /d5     ext4     defaults  0 0<br>/dev/sde1       /e6     ext4     defaults  0 0<br>node3、node4<br>vim /etc/fstab<br>/dev/sdb1       /b3     ext4     defaults  0 0<br>/dev/sdc1       /c4     ext4     defaults  0 0<br>/dev/sdd1       /d5     ext4     defaults  0 0<br>2.关闭防火墙和SELinux（node1、node2、node3、node4）<br>systemctl stop firewalld<br>setenforce 0<br>3.配置hosts文件（node1、node2、node3、node4）<br>vim /etc/hosts<br>192.168.10.101  node1<br>192.168.10.102  node2<br>192.168.10.103  node3<br>192.168.10.104  node4<br>4.安装软件（node1、node2、node3、node4）<br>把gfsrepo文件夹复制到每个节点的/opt目录下<br>修改YUM仓库配置文件<br>vim /etc/yum.repos.d/CentOS-Media.repo<br>[gfsrepo]<br>name=GFS<br>baseurl=file:///opt/gfsrepo<br>gpgcheck=0<br>enabled=1<br>创建YUM仓库<br>createrepo /opt/gfsrepo<br>安装GFS所需软件<br>yum -y install glusterfs glusterfs-server glusterfs-fuse glusterfs-rdma<br>5.启动GlusterFS（node1、node2、node3、node4）<br>启动GFS服务<br>systemctl start glusterd<br>设置GFS开机自启<br>systemctl enable glusterd<br>6.添加节点（node1）<br>gluster peer probe node1<br>gluster peer probe node2<br>gluster peer probe node3<br>gluster peer probe node4<br>7.查看群集状态（node1、node2、node3、node4）<br>gluster peer status<br>13.4.2 创建卷（node1）<br>1.创建分布式卷<br>gluster volume create dis-volume node1:/e6 node2:/e6 force<br>gluster volume info dis-volume<br>gluster volume start dis-volume<br>2.创建条带卷<br>gluster volume create stripe-volume stripe 2 node1:/d5 node2:/d5 force<br>gluster volume info stripe-volume<br>gluster volume start stripe-volume<br>3.创建复制卷<br>gluster volume create rep-volume replica 2 node3:/d5 node4:/d5 force<br>gluster volume info rep-volume<br>gluster volume start rep-volume<br>4.创建分布式条带卷<br>gluster volume create dis-stripe stripe 2 node1:/b3 node2:/b3 node3:/b3 node4:/b3 force<br>gluster volume info dis-stripe<br>gluster volume start dis-stripe<br>5.创建分布式复制卷<br>gluster volume create dis-rep replica 2 node1:/c4 node2:/c4 node3:/c4 node4:/c4 force<br>gluster volume info dis-rep<br>gluster volume start dis-rep<br>13.4.3 部署Gluster客户端（client）<br>1.安装客户端软件<br>修改主机名<br>hostname client<br>vim /etc/hostname<br>client<br>bash<br>关闭防火墙和SELinux<br>systemctl stop firewalld<br>setenforce 0<br>systemctl disable firewalld<br>把gfsrepo文件夹复制到每个节点的/opt目录下<br>修改YUM仓库配置文件<br>vim /etc/yum.repos.d/CentOS-Media.repo<br>[gfsrepo]<br>name=GFS<br>baseurl=file:///opt/gfsrepo<br>gpgcheck=0<br>enabled=1<br>创建YUM仓库<br>createrepo /opt/gfsrepo<br>安装GFS客户端<br>yum -y install glusterfs glusterfs-fuse<br>2.创建挂载目录<br>mkdir -p /test/{dis,stripe,rep,dis_and_stripe,dis_and_rep}<br>ls /test<br>3.修改hosts文件<br>vim /etc/hosts<br>192.168.10.101  node1<br>192.168.10.102  node2<br>192.168.10.103  node3<br>192.168.10.104  node4<br>4.挂载Gluster文件系统<br>mount -t glusterfs node1:dis-volume /test/dis<br>mount -t glusterfs node1:stripe-volume /test/stripe/<br>mount -t glusterfs node1:rep-volume /test/rep<br>mount -t glusterfs node1:dis-stripe /test/dis_and_stripe/<br>mount -t glusterfs node1:dis-rep /test/dis_and_rep/<br>df -h<br>5.修改fstab配置文件<br>vim /etc/fstab<br>node1:dis-volume     /test/dis             glusterfs  defaules,_netdev  0 0<br>node1:stripe-volume  /test/stripe          glusterfs  defaules,_netdev  0 0<br>node1:rep-volume     /test/rep             glusterfs  defaules,_netdev  0 0<br>node1:dis-stripe     /test/dis_and_stripe  glusterfs  defaules,_netdev  0 0<br>node1:dis-rep        /test/dis_and_rep     glusterfs  defaules,_netdev  0 0<br>13.4.4 测试Gluster文件系统<br>1.创建测试文件（client）<br>dd if=/dev/zero of=/root/demo1.log bs=1M count=43<br>dd if=/dev/zero of=/root/demo2.log bs=1M count=43<br>dd if=/dev/zero of=/root/demo3.log bs=1M count=43<br>dd if=/dev/zero of=/root/demo4.log bs=1M count=43<br>dd if=/dev/zero of=/root/demo5.log bs=1M count=43<br>2.卷中写入文件（client）<br>cp demo* /test/dis/<br>cp demo* /test/stripe/<br>cp demo* /test/rep/<br>cp demo* /test/dis_and_stripe/<br>cp demo* /test/dis_and_rep/<br>3.查看文件分布<br>1)查看分布式卷文件分布<br>node1<br>ll -h /e6<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo4.log<br>node2<br>ll -h /e6<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo5.log<br>2)查看条带卷文件分布<br>node1<br>ll -h /d5<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo4.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo5.log<br>node2<br>ll -h /d5<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo4.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo5.log<br>3)查看复制卷文件分布<br>node3<br>ll -h /d5<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo4.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo5.log<br>node4<br>ll -h /d5<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo4.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:47 demo5.log<br>4)查看分布式条带卷文件分布<br>node1<br>ll -h /b3<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo4.log<br>node2<br>ll -h /b3<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo1.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo2.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo3.log<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo4.log<br>node3<br>ll -h /b3<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo5.log<br>node4<br>ll -h /b3<br>-rw-r–r–. 2 root root 22M 3月  16 17:47 demo5.log<br>5)查看分布式复制卷文件分布<br>node1<br>ll -h /c4<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo1.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo2.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo3.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo4.log<br>node2<br>ll -h /c4<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo1.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo2.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo3.log<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo4.log<br>node3<br>ll -h /c4<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo5.log<br>node4<br>ll -h /c4<br>-rw-r–r–. 2 root root 43M 3月  16 17:55 demo5.log<br>4.破坏性测试（client）<br>挂起node2节点<br>测试分布式卷数据是否可以访问<br>head -1 /test/dis/demo1.log<br>head -1 /test/dis/demo2.log<br>head -1 /test/dis/demo3.log<br>head -1 /test/dis/demo4.log<br>head -1 /test/dis/demo5.log<br>head: 无法打开”/test/dis/demo5.log” 读取数据: 没有那个文件或目录<br>测试条带卷数据是否可以访问<br>head -1 /test/stripe/demo1.log<br>head: 读取”/test/stripe/demo1.log” 时出错: 没有那个文件或目录<br>head -1 /test/stripe/demo2.log<br>head: 读取”/test/stripe/demo2.log” 时出错: 没有那个文件或目录<br>head -1 /test/stripe/demo3.log<br>head: 读取”/test/stripe/demo3.log” 时出错: 没有那个文件或目录<br>head -1 /test/stripe/demo4.log<br>head: 读取”/test/stripe/demo4.log” 时出错: 没有那个文件或目录<br>head -1 /test/stripe/demo5.log<br>head: 读取”/test/stripe/demo5.log” 时出错: 没有那个文件或目录<br>测试分布式条带卷数据是否可以访问<br>head -1 /test/dis_and_stripe/demo1.log<br>head: 读取”/test/dis_and_stripe/demo1.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo2.log<br>head: 读取”/test/dis_and_stripe/demo2.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo3.log<br>head: 读取”/test/dis_and_stripe/demo3.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo4.log<br>head: 读取”/test/dis_and_stripe/demo4.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo5.log<br>测试分布式复制卷数据是否可以访问<br>head -1 /test/dis_and_rep/demo1.log<br>head -1 /test/dis_and_rep/demo2.log<br>head -1 /test/dis_and_rep/demo3.log<br>head -1 /test/dis_and_rep/demo4.log<br>head -1 /test/dis_and_rep/demo5.log<br>挂起node4节点<br>测试复制卷数据是否可以访问<br>head -1 /test/rep/demo1.log<br>head -1 /test/rep/demo2.log<br>head -1 /test/rep/demo3.log<br>head -1 /test/rep/demo4.log<br>head -1 /test/rep/demo5.log<br>测试分布式条带卷数据是否可以访问<br>head -1 /test/dis_and_stripe/demo1.log<br>head: 读取”/test/dis_and_stripe/demo1.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo2.log<br>head: 读取”/test/dis_and_stripe/demo2.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo3.log<br>head: 读取”/test/dis_and_stripe/demo3.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo4.log<br>head: 读取”/test/dis_and_stripe/demo4.log” 时出错: 没有那个文件或目录<br>head -1 /test/dis_and_stripe/demo5.log<br>head: 读取”/test/dis_and_stripe/demo5.log” 时出错: 没有那个文件或目录<br>tail -1 /test/dis_and_stripe/demo5.log<br>tail: 读取”/test/dis_and_stripe/demo5.log” 时出错: 没有那个文件或目录<br>测试分布式复制卷数据是否可以访问<br>head -1 /test/dis_and_rep/demo1.log<br>head -1 /test/dis_and_rep/demo2.log<br>head -1 /test/dis_and_rep/demo3.log<br>head -1 /test/dis_and_rep/demo4.log<br>head -1 /test/dis_and_rep/demo5.log<br>13.4.5 其他的维护命令（node1、node2、node3、node4）<br>1.查看GlusterFS卷<br>查看卷的列表<br>gluster volume list<br>查看所有卷的信息<br>gluster volume info<br>查看卷的状态<br>gluster volume status<br>2.停止/删除卷<br>停止dis-stripe卷<br>gluster volume stop dis-stripe<br>启用dis-stripe卷<br>gluster volume start dis-stripe<br>删除dis-stripe卷<br>gluster volume delete dis-stripe<br>3.设置卷的访问控制<br>只允许192.168.1.0和10.1.1.0网段的客户端访问dis-rep卷<br>gluster volume set dis-rep auth.allow 192.168.1.<em>,10.1.1.</em></p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql+Keepalived 双主热备高可用图文配置详解</title>
      <link href="/posts/22055/"/>
      <url>/posts/22055/</url>
      
        <content type="html"><![CDATA[<h2 id="环境描述："><a href="#环境描述：" class="headerlink" title="环境描述："></a><strong>环境描述：</strong></h2><pre><code>Centos7 版本Master1：192.168.10.1        安装mysql和keepalivedMaster2: 192.168.10.2      安装mysql和keepalivedVIP：192.168.10.188</code></pre><p>要实现主主同步，可以先实现主从同步，即master1-&gt;master2的主从同步，然后master2-&gt;master1的主从同步.<br>这样，双方就完成了主主同步。</p><p><strong>注意下面几点：</strong></p><blockquote><p>1）要保证同步服务期间之间的网络联通。即能相互ping通，能使用对方授权信息连接到对方数据库（防火墙开放3306端口）。</p><p>2）关闭selinux。</p><p>3）同步前，双方数据库中需要同步的数据要保持一致。这样，同步环境实现后，再次更新的数据就会如期同步了。</p></blockquote><h2 id="配置Mysql-Keepalived故障转移的高可用环境"><a href="#配置Mysql-Keepalived故障转移的高可用环境" class="headerlink" title="配置Mysql+Keepalived故障转移的高可用环境"></a>配置Mysql+Keepalived故障转移的高可用环境</h2><blockquote><p>1）    安装keepalived并将其配置成系统服务。master1和master2两台机器上同样进行如下操作：</p></blockquote><pre><code>[root@master1 ~]# yum install -y openssl-devel popt-devel[root@master1 ~]# cd /usr/local/src/[root@master1 src]# wget http://www.keepalived.org/software/keepalived-1.3.5.tar.gz[root@master1 src]# tar -zvxf keepalived-1.3.5.tar.gz[root@master1 src]# cd keepalived-1.3.5[root@master1 keepalived-1.3.5]# ./configure --prefix=/usr/local/keepalived[root@master1 keepalived-1.3.5]# make &amp;&amp; make install[root@master1 keepalived-1.3.5]# cp /usr/local/src/keepalived-1.3.5/keepalived/etc/init.d/keepalived /etc/rc.d/init.d/[root@master1 keepalived-1.3.5]# cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/[root@master1 keepalived-1.3.5]# mkdir /etc/keepalived/[root@master1 keepalived-1.3.5]# cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/[root@master1 keepalived-1.3.5]# cp /usr/local/keepalived/sbin/keepalived /usr/sbin/[root@master1 keepalived-1.3.5]# echo &quot;/etc/init.d/keepalived start&quot; &gt;&gt; /etc/rc.local</code></pre><p><strong>2）    master1机器上的keepalived.conf配置。（下面配置中没有使用lvs的负载均衡功能，所以不需要配置虚拟服务器virtual server）(在这里可以使用yum安装keepalived。配置在有关Keepalived博文中详细介绍，这里略)</strong></p><pre><code>[root@master1 ~]# cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak[root@master1 ~]# vim /etc/keepalived/keepalived.conf </code></pre><p><strong>＃清空默认内容，直接采用下面配置：</strong></p><pre><code>! Configuration File for keepalivedglobal_defs &#123;router_id MASTER-HA&#125;vrrp_script chk_mysql_port &#123;    script &quot;/etc/keepalived/chk_mysql.sh&quot;    interval 2                weight -5                     fall 2                     rise 1               &#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33        mcast_src_ip 192.168.10.1    virtual_router_id 51        priority 101              advert_int 1             authentication &#123;           auth_type PASS         auth_pass 1111         &#125;    virtual_ipaddress &#123;            192.168.10.188    &#125;track_script &#123;                  chk_mysql_port             &#125;virtual_server 192.168.10.188 3306 &#123;    delay_loop 6                   lb_algo wrr                 lb_kind DR                     #nat_mask 255.255.255.0    persistence_timeout 50         protocol TCP                  ## Real Server设置，3306就是连接端口    real_server 192.168.10.1 3306 &#123;        weight 3  ##权重        TCP_CHECK &#123;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3            connect_port 3306        &#125;    &#125;    real_server 192.168.10.2 3306 &#123;        weight 3        TCP_CHECK &#123;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3            connect_port 3306        &#125;    &#125;&#125;&#125;</code></pre><p><strong>master2机器上的keepalived配置。master2机器上的keepalived.conf文件只修改priority为90、nopreempt不设置、real_server设置本地IP。</strong></p><pre><code>! Configuration File for keepalivedglobal_defs &#123;router_id BACKUP-HA&#125;vrrp_script chk_mysql_port &#123;    script &quot;/etc/keepalived/chk_mysql.sh&quot;    interval 2                weight -5                     fall 2                     rise 1               &#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33        mcast_src_ip 192.168.10.2    virtual_router_id 51        priority 99              advert_int 1             authentication &#123;           auth_type PASS         auth_pass 1111         &#125;    virtual_ipaddress &#123;            192.168.10.188    &#125;track_script &#123;                  chk_mysql_port             &#125;virtual_server 192.168.10.188 3306 &#123;    delay_loop 6               #服务轮询的时间间隔    lb_algo wrr                #加权轮询调度，LVS调度算法 rr|wrr|lc|wlc|lblc|sh|sh    lb_kind DR                 #LVS集群模式 NAT|DR|TUN，其中DR模式要求负载均衡器网卡必须有一块与物理网卡在同一个网段    #nat_mask 255.255.255.0    persistence_timeout 50     #会话保持时间    protocol TCP              #健康检查协议    ## Real Server设置，3306就是连接端口    real_server 192.168.10.1 3306 &#123;        weight 3  ##权重        TCP_CHECK &#123;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3            connect_port 3306        &#125;    &#125;    real_server 192.168.10.2 3306 &#123;        weight 3        TCP_CHECK &#123;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3            connect_port 3306        &#125;    &#125;&#125;&#125;</code></pre><p><strong>编写切换脚本。KeepAlived做心跳检测，如果Master的MySQL服务挂了(3306端口挂了),那么它就会选择自杀。Slave的KeepAlived通过心跳检测发现这个情况，就会将VIP的请求接管。</strong></p><pre><code>[root@master1 ~]# vim /etc/keepalived/chk_mysql.sh#!/bin/bashcounter=$(netstat -na|grep &quot;LISTEN&quot;|grep &quot;3306&quot;|wc -l)if [ &quot;$&#123;counter&#125;&quot; -eq 0 ]; then    /etc/init.d/keepalived stopfi [root@master1 ~]# chmod 755 /etc/keepalived/chk_mysql.sh</code></pre><p><strong>启动keepalived服务</strong></p><pre><code>[root@master1 ~]# /etc/init.d/keepalived start</code></pre><blockquote><p>正在启动 keepalived：                                      [确定]</p></blockquote><p><strong>在启动的时候有可能启动失败   打开 vim /lib/systemd/system/keepalived.service  在第7行</strong></p><pre><code>PIDFile=/usr/local/program/keepalived/var/run/keepalived.pid      ##发现这个目录不存在，无法写入keepalived.pid  </code></pre><blockquote><p>修改成 PIDFile=/var/run/keepalived.pid  执行 systemctl daemon-reload<br>重新载入 systemd，扫描新的或有变动的单元   在运行就Ok了    /etc/init.d/keepalived start</p></blockquote><p><strong>ip addr 可以看到 vip在master上</strong></p><p><img src="https://www.kococ.cn/usr/uploads/2020/01/2374467709.png" alt="请输入图片描述"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><code>mysql -h192.168.10.188 -uroot1 -proot1show databases;</code></pre><p>在147服务上看 ip addr 也可以看到vip漂移到了192.168.10.2服务器上<br><img src="https://www.kococ.cn/usr/uploads/2020/01/530623913.png" alt="请输入图片描述"></p><a id="more"></a><p><strong>上面那个脚本简单且粗暴，即脚本一旦监测到Master的mysql服务关闭，就立刻把keepalived服务关闭，不能实现vip转移，也就是当Master数据库恢复的是时候不能再切回来！</strong></p><p><strong>下面这个脚本可以实现 当监测到Master的mysql服务关闭后，就会将vip切换到Backup上 当Master的mysql服务恢复后，就会再次将VIP资源切回来</strong></p><pre><code>#!/bin/bashMYSQL=/usr/local/mysql/bin/mysqlMYSQL_HOST=localhostMYSQL_USER=rootMYSQL_PASSWORD=123456CHECK_TIME=3#mysql  is working MYSQL_OK is 1 , mysql down MYSQL_OK is 0MYSQL_OK=1function check_mysql_helth ()&#123;    $MYSQL -h $MYSQL_HOST -u $MYSQL_USER -p$&#123;MYSQL_PASSWORD&#125; -e &quot;show status;&quot; &gt;/dev/null 2&gt;&amp;1    if [ $? = 0 ] ;then    MYSQL_OK=1    else    MYSQL_OK=0    fi    return $MYSQL_OK&#125;while [ $CHECK_TIME -ne 0 ]do    let &quot;CHECK_TIME -= 1&quot;    check_mysql_helthif [ $MYSQL_OK = 1 ] ; then    CHECK_TIME=0    exit 0fiif [ $MYSQL_OK -eq 0 ] &amp;&amp;  [ $CHECK_TIME -eq 0 ]then    pkill keepalived    exit 1fisleep 1done</code></pre><hr><h2 id="谢谢查阅，转载请注明出处"><a href="#谢谢查阅，转载请注明出处" class="headerlink" title="谢谢查阅，转载请注明出处"></a>谢谢查阅，转载请注明出处</h2>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH服务初识</title>
      <link href="/posts/61716/"/>
      <url>/posts/61716/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-远程连接服务概念介绍"><a href="#第一章-远程连接服务概念介绍" class="headerlink" title="第一章 远程连接服务概念介绍"></a>第一章 远程连接服务概念介绍</h1><p>SSH: 系统默认配置 22 默认可以使用root用户进行登录 数据信息进行加密<br>TELNET：网络设备默认开启 23 默认只能使用普通用户进行登录 数据信息显示明文</p><h1 id="第二章-远程连接服务连接原理"><a href="#第二章-远程连接服务连接原理" class="headerlink" title="第二章 远程连接服务连接原理"></a>第二章 远程连接服务连接原理</h1><p>openssh 远程连接数据包进行加密处理<br>openssl 网站访问请求信息和响应信息进行加密（HTTPS）<br>连接示意图：</p><p><img src="http://upload-images.jianshu.io/upload_images/14248468-af025c4191bb5a68.png" alt="SSH密钥认证过程"></p><p>原理总结：</p><pre><code>01. 客户端 - 服务端   请求建立ssh远程连接 02. 服务端 - 客户端   请求确认公钥信息03. 客户端 - 服务端   确认接收公钥信息，保存到~/.ssh/authorized_keys文件中  04. 服务端 - 客户端   询问用户密码信息05. 客户端 - 服务端   用户密码信息06. 服务端 - 客户端   确认密码信息正确 远程连接建立01 之后：不用反复确认公钥信息06 之后：所有传输的数据信息会进行加密处理</code></pre><p>总结：</p><pre><code>作用01：利用公钥和私钥对数据信息进行加密处理作用02：对用户身份信息进行认证</code></pre><p><strong>远程连接通讯建立方式</strong></p><p>基于口令方式（基于密码方式） 文档/脑子 国家服务器 远程 – 密码（钱）<br>基于密钥方式</p><h1 id="第三章-基于密钥方式实现远程连接步骤："><a href="#第三章-基于密钥方式实现远程连接步骤：" class="headerlink" title="第三章 基于密钥方式实现远程连接步骤："></a>第三章 基于密钥方式实现远程连接步骤：</h1><h2 id="1-管理端服务器"><a href="#1-管理端服务器" class="headerlink" title="1.管理端服务器"></a>1.管理端服务器</h2><p>第一个历程：创建密钥对信息</p><pre><code>[root@m01 ~]# ssh-keygen -t dsaGenerating public/private dsa key pair.Enter file in which to save the key (/root/.ssh/id_dsa): Created directory &#39;/root/.ssh&#39;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_dsa.Your public key has been saved in /root/.ssh/id_dsa.pub.The key fingerprint is:40:72:ff:19:de:23:70:df:cf:f2:a2:6f:0d:ce:42:dc root@m01The key&#39;s randomart image is:+--[ DSA 1024]----+|    . o          ||     + .         ||      . o o      ||       . = = .   ||        S =.+..  ||           .o.Eo ||           . o.oo||            . =o.||            .=...|+-----------------+[root@m01 ~]# ll .ssh/总用量 8-rw------- 1 root root 668 7月  19 15:13 id_dsa-rw-r--r-- 1 root root 598 7月  19 15:13 id_dsa.pub</code></pre><p>第二个历程：分发公钥</p><pre><code>[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_dsa.pub root@172.16.1.31The authenticity of host &#39;172.16.1.31 (172.16.1.31)&#39; can&#39;t be established.ECDSA key fingerprint is 7d:76:4f:bc:02:b3:3c:55:ff:22:9c:63:1a:88:17:3d.Are you sure you want to continue connecting (yes/no)? yes/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@172.16.1.31&#39;s password: Number of key(s) added: 1Now try logging into the machine, with:   &quot;ssh &#39;root@172.16.1.31&#39;&quot;and check to make sure that only the key(s) you wanted were added.</code></pre><p>第三个历程：检查确认</p><pre><code>[root@m01 ~]# ssh 172.16.1.31Last login: Fri Jul 19 08:12:12 2019 from 10.0.1.1[root@nfs01 ~]# hostnamenfs01[root@nfs01 ~]# 登出Connection to 172.16.1.31 closed.[root@m01 ~]# ssh 172.16.1.31 hostnamenfs01[root@m01 ~]# </code></pre><h2 id="2-被管理端服务器"><a href="#2-被管理端服务器" class="headerlink" title="2.被管理端服务器"></a>2.被管理端服务器</h2><p>第一个历程：检查确认</p><pre><code>[root@nfs01 ~]# cd /root/.ssh/[root@nfs01 ~/.ssh]# ll总用量 8-rw------- 1 root root 988 7月  19 15:15 authorized_keys-rw-r--r-- 1 root root 170 6月  26 20:55 known_hosts[root@nfs01 ~/.ssh]# cat authorized_keys ssh-dss AAAAB3NzaC1kc3MAAACBAPFwzIpjQqTXGmTPgABweyY6sxewiNdPiPwBaSz5hAauYnskJSXKbFl5usAxgXbuLcBzGp1RvTH+tVtoUpokAbGbhVX9bhT/5LxjKA31kfp0hicZHtNUDCMOTtgwJmIHo/25BsMURx4i4Mfu8V7lRg5a3WXDXI2JXBLiWtgl/0yHAAAAFQDLicZIPhcZkfLbg26vSPm9cMK14wAAAIAVHBMsnB6TasY3yQzdqQpnVH5dOtD6bIjy48U6CEge7m9jxXb9HUMExOOqRNj/x7HiCeiiML7ebZmLYPZfjam5NWiJ1A5l9FL6QKFvnLSrUOk3b0seBLyWEhM8yWkK5yYaqV9e7jCTJoR/UZjKbZ1lRtLbczytn1e6c8wFVHguHQAAAIBqHcq7NbGPDbkeQEQmSahNubgZ/nXTMR7r2CHsNP+71qxDfkYdDo2dVoWSmhN5Lv+mHLSBFMuJPIvZg/zVc7So6vRgJWiIVedgnJw/Ima+q2f7VJudA+ZNT5vHmlaS77bJ/9tYBdlUO/Ae56gmuNzYYnTdY1UIf1EzEtJnKtUr4Q== root@m01</code></pre><h1 id="第四章-免交户分发密钥"><a href="#第四章-免交户分发密钥" class="headerlink" title="第四章 免交户分发密钥"></a>第四章 免交户分发密钥</h1><p>被管理主机有多台，如何进行批量分发公钥???</p><h2 id="1-解决免交互问题："><a href="#1-解决免交互问题：" class="headerlink" title="1.解决免交互问题："></a>1.解决免交互问题：</h2><p>第一次连接有yes/no</p><pre><code>ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.31 -o StrictHostKeyChecking=no</code></pre><p>需要有密码信息确认</p><pre><code>yum install -y sshpasssshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.31 -o StrictHostKeyChecking=no </code></pre><h2 id="2-ssh-copy-id分发公钥原理："><a href="#2-ssh-copy-id分发公钥原理：" class="headerlink" title="2.ssh-copy-id分发公钥原理："></a>2.ssh-copy-id分发公钥原理：</h2><pre><code> 01. 进行ssh远程连接    02. scp将公钥进行传输    03. 被管理端将公钥保存到用户家目录中的.ssh目录中    04. 修改公钥文件名称和权限  authorized_keys  600</code></pre><h2 id="3-分发脚本："><a href="#3-分发脚本：" class="headerlink" title="3.分发脚本："></a>3.分发脚本：</h2><pre><code>[root@m01 ~]# cat /server/scripts/fenfa.sh #!/bin/bashfor ip in &#123;31,41&#125;do  sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.1.$ip -o StrictHostKeyChecking=no &amp;&gt;/dev/null  if [ $? -eq 0 ]  then     echo &quot;===============pub_key fenfa ok with 172.16.1.$ip=========================&quot;     ssh 172.16.1.$&#123;ip&#125; hostname     echo &quot;&quot;  else     echo &quot;===============pub_key fenfa failed with 172.16.1.$ip=========================&quot;     echo &quot;&quot;  fi done</code></pre><h2 id="4-if判断比较信息："><a href="#4-if判断比较信息：" class="headerlink" title="4.if判断比较信息："></a>4.if判断比较信息：</h2><pre><code>   =    -eq   equal    &gt;    -gt   greater than    &lt;    -lt   less than    &gt;=   -ge   greater equal    &lt;=   -le   less equal    &lt;&gt;   -ne   no equal</code></pre><h2 id="5-分发公钥问题说明："><a href="#5-分发公钥问题说明：" class="headerlink" title="5.分发公钥问题说明："></a>5.分发公钥问题说明：</h2><pre><code>01. 密码信息不正确02. 免密码分发公钥  yum install -y sshpass 03. 分发公钥信息，需要分发你有的公钥   是否有公钥 m01--/root/.ssh/id_dsa.pub</code></pre><h2 id="6-排错方法："><a href="#6-排错方法：" class="headerlink" title="6.排错方法："></a>6.排错方法：</h2><ol><li><p>测试脚本  ssh 172.16.1.7 hostname</p></li><li><p>脚本中命令手动执行</p><p>sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.$ip -o StrictHostKeyChecking=no</p></li></ol><p>7.远程服务端口号发生变化了，如何修改脚本命令<br>centos7：掌握</p><pre><code>sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.7 -o StrictHostKeyChecking=no -p 52113</code></pre><p>8.ssh-copy id命令解释</p><pre><code>   ssh $1 &quot;exec sh -c &#39;cd; umask 077; test -d .ssh || mkdir .ssh ; cat &gt;&gt; .ssh/authorized_keys &amp;&amp; (test -x /sbin/restorecon &amp;&amp; /sbin/restorecon .ssh .ssh/authorized_keys &gt;/dev/null 2&gt;&amp;1 || true)&#39;&quot;01. 远程连接到指定主机02. 切换到家目录，临时修改umask数值03. 判断是否存在.ssh目录，不存在创建.ssh 04. 生成.ssh/authorized_keys,并且把公钥信息保存在此文件中</code></pre><p>9.总结：掌握批量分发公钥脚本编写能力</p><pre><code>01. 解决免交互问题： yes/no  密码问题02. 远程被管理主机端口变化：解决端口问题</code></pre><h1 id="第五章-SSH服务端配置文件说明："><a href="#第五章-SSH服务端配置文件说明：" class="headerlink" title="第五章 SSH服务端配置文件说明："></a>第五章 SSH服务端配置文件说明：</h1><pre><code>vim /etc/ssh/sshd_config#Port 22                 --- 指定服务端口号信息#ListenAddress 0.0.0.0   --- 指定相应网卡可以接收远程访问请求  web默认：主机上所有网卡都可以接收远程连接请求监听地址信息，一定是本地网卡上有的地址信息 ******#PermitEmptyPasswords no --- 是否允许空密码登录#PermitRootLogin yes     --- 不允许root用户登录#UseDNS yes              --- 是否进行DNS反向解析 no  172.16.1.31 --&gt; 172.16.1.61 GSSAPIAuthentication yes --- 是否开启GSSAPI  no      </code></pre><h1 id="第六章-SSH防范远程入侵方案-亡羊补牢-–-未雨绸缪"><a href="#第六章-SSH防范远程入侵方案-亡羊补牢-–-未雨绸缪" class="headerlink" title="第六章 SSH防范远程入侵方案 亡羊补牢 – 未雨绸缪"></a>第六章 SSH防范远程入侵方案 亡羊补牢 – 未雨绸缪</h1><p>参考博客<a href="http://blog.51cto.com/phenixikki/1546669">https://blog.51cto.com/phenixikki/1546669</a></p><pre><code> 1. 用密钥登录，不用密码登陆    2. 防火墙封闭SSH,指定源IP限制(局域网、信任公网)  ？？？    3. 尽量不给服务器外网IP    4. 负载均衡主机，只监听内网地址的远程访问    5. 最小化（软件安装-授权）  web nfs rsync mysql zabbix ... 端口（门）       yum install -y nmap  --- 扫描网站端口信息       nmap -p 1-65535 www.baidu.com   80 443    6. 给系统的重要文件或命令做一个指纹   md5sum -c /etc/passwd  abcd  --- zabbix    7. chattr +i 锁住文件  </code></pre><h1 id="第七章-课程知识回顾说明："><a href="#第七章-课程知识回顾说明：" class="headerlink" title="第七章 课程知识回顾说明："></a>第七章 课程知识回顾说明：</h1><pre><code>1）远程连接的服务程序 （ssh-22（加密） telnet-23（明文））2）远程连接的原理过程 了解3）远程连接的方式   基于密码方式    基于密钥方式  重点4）如何实现密钥远程登录   如何实现多台主机基于密钥远程登录 -- 批量分发公钥的脚本5）远程服务配置文件参数   listen address  监听参数  ******6）远程入侵防范防范</code></pre><p>脚本分享：</p><pre><code>#!/bin/bashif [ -f /root/.ssh/id_dsa ];then    echo &quot;密钥已存在,将发送现有文件&quot;else    ssh-keygen -t dsa -P &quot;&quot; -f /root/.ssh/id_dsa &amp;&amp; echo &quot;密钥生成成功&quot;fifor ip in &#123;31,41&#125;do    sshpass -p123456 ssh-copy-id -p 22 172.16.1.$&#123;ip&#125; -o StrictHostKeyChecking=no &gt;&gt; /dev/null 2&gt;&amp;1    if [ $?==0 ];then        echo &quot;172.16.1.$&#123;ip&#125; key sent successful&quot;        ssh 172.16.1.$&#123;ip&#125; &quot;cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak&quot;        ssh 172.16.1.$&#123;ip&#125; &quot;sed -ri &#39;s@#Port 22@Port 9999@g&#39; /etc/ssh/sshd_config &amp;&amp; echo &#39;port ok&#39;&quot;        ssh 172.16.1.$&#123;ip&#125; &quot;sed -ri &#39;s@#ListenAddress 0.0.0.0@ListenAddress 172.16.1.$&#123;ip&#125;@g&#39; /etc/ssh/sshd_config &amp;&amp; echo &#39;listen ok&#39;&quot;    ssh 172.16.1.$&#123;ip&#125; &quot;sed -ri &#39;s#^PasswordAuthentication yes#PasswordAuthentication no#g&#39; /etc/ssh/sshd_config &amp;&amp; echo &#39;pass ok&#39;&quot;    ssh 172.16.1.$&#123;ip&#125; &quot;systemctl restart sshd&quot;    sleep 3    echo &quot;------------------&quot;    echo &quot;172.16.1.$&#123;ip&#125; hostname is :$(ssh -p 9999 172.16.1.$&#123;ip&#125; hostname)&quot;    echo &quot;------------------&quot;    else    echo &quot;172.16.1.$&#123;ip&#125; key sent faild&quot;fidone</code></pre><p>脚本分享2:</p><pre><code>#!/bin/bashif [ -f /root/.ssh/id_rsa ];then   echo &quot;----------密钥对已经存在---------------&quot;else   echo &quot;----------正在生成密钥对---------------&quot;   ssh-keygen -f /root/.ssh/id_rsa -N &#39;&#39; &gt; /dev/null 2&gt;&amp;1fifor i in &#123;7,31,41&#125;do    echo &quot;正在操作：172.16.1.$&#123;i&#125;&quot;    echo &quot;----------正在分发--------&quot;    sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.$&#123;i&#125; -o StrictHostKeyChecking=no &gt; /tmp/ssh.log 2&gt;&amp;1    echo &quot;----------正在备份SSH配置-----&quot;    ssh 172.16.1.$&#123;i&#125; &quot;\cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak&quot;    echo &quot;----------正在优化SSH配置----&quot;    ssh 172.16.1.$&#123;i&#125; &quot;sed -i &#39;s@#Port 22@Port 9999@g&#39; /etc/ssh/sshd_config&quot;    ssh 172.16.1.$&#123;i&#125; &quot;sed -i &#39;s@#ListenAddress 0.0.0.0@ListenAddress 172.16.1.$&#123;i&#125;@g&#39; /etc/ssh/sshd_config&quot;    ssh 172.16.1.$&#123;i&#125; &quot;sed -i &#39;s@^PasswordAuthentication yes@PasswordAuthentication no@g&#39; /etc/ssh/sshd_config&quot;    ssh 172.16.1.$&#123;i&#125; &quot;systemctl restart sshd&quot;    sleep 2     echo &quot;----------测试优化后的连接&quot;    ssh 172.16.1.$&#123;i&#125; -p 9999 hostnamedone</code></pre><a id="more"></a><p>[player id=’712292593’ type=’collect’ autoplay=’true’/]</p>]]></content>
      
      
      <categories>
          
          <category> Linux进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次源码编译安装LAMP（附源码包）</title>
      <link href="/posts/45151/"/>
      <url>/posts/45151/</url>
      
        <content type="html"><![CDATA[<h1 id="源码编译安装LAMP"><a href="#源码编译安装LAMP" class="headerlink" title="源码编译安装LAMP"></a>源码编译安装LAMP</h1><p><strong>为什么要源码编译</strong><br>  一般来说，我们软件的安装方式有yum（rpm），和源码编译两种方式，那么为什么我们需要源码编译安装一部分软件？选择源码编译安装软件有以下几个原因：<br>         1：满足不同的运行平台，我们Linux发型版本众多，但是每个版本采用的软件或者内核版本都不一样，而我们的二进制包所依赖的环境不一定能够正常运行，所以大部分软件直接提供源码！<br>         2：方便定制，满足不同的需求，很多时候我们所需要的软件都是可以定制的，我需要什么就安装什么，大多数二进制代码都是一键装全，所以自由度并不高！<br>         3：方便运维、开发人员维护，我们的源码是可以打包二进制的，但是对于这个软件的打包都会有一份代价不小的额外工作，包括维护，所以如果是源码的话，软件产商会直接维护，但是如果是二进制的话，一般都是Linux发行商提供！<br><strong>什么是LAMP</strong></p><pre><code>LAMP=Linux Apache Mysql/MariaDB PHP/Perl/Python 这些软件都是开源免费的软件，几个程序各自是独立的，经常为了达到我们需要的效果而协同工作，组成了我们常见的LAMP架构平台!LAMP是世界上最流行的组合，当然同时也有Nginx，也就是LNMP: LAMP 相对于 NGINX 来说较为安全，但是Nginx处理高并发比Apache要强，NGINX 相对于 LAMP 来说安全较为差一点，同样的配制环境负载远远高于 LAMP 向国内的一些大公司，淘宝、新浪都在用这一些 NGINX，向那么大的公司网站需要用到服务器群用LAMP搭建环境成本远远大于NGINX。打个比方本来1000000W访问量需要 10台LAMP环境服务器才能完成，但是使用NGINX也许只需要5、6台这样一来对于这样的公司来说就大大的节约了成本。从网站的流量上来说，70%以上的访问流量是LAMP来提供的，LAMP是最强大的网站解决方案，在以前这句话没有错，但是在现在，这句话有待证实！！！因为在以后的过程中，会发现我们会使用的架构是Nginx和Apache结合使用：使用Nginx可以做集群等相关配置，可以和apache一起使用，有的会用apache去跑php，然后用nginx做反向代理，比如apache运行在8080端口，nginx在80端口，访问php文件时，反向代理到apache，静态页通过nginx处理。nginx支持高并发，apache对php的运行比较稳定。常见的网页类型：htm,html,shtml,stm.php,asp,aspx,shtm,jsp等等Apache本事只处理静态页面，处理动态页面需要使用libphp5.so这个模块去工作，编译php也其实是将一个至关重要的模块打入到apache内部，然后apache收到php请求，将请求交给这个模块来处理！</code></pre><p>Apache工作原理：<br>Apache本身只处理html静态语言页面，当客户端需要访问php页面的时候，Apache会调用libphp5.so这个模块去工作，这个模块会把php页面转换成html静态页面，让Apache处理，Apache处理过，会返回给客户端</p><p><code>LAMP相关网站</code></p><p>Apache=<a href="http://httpd.apache.org/">http://httpd.apache.org/</a>                                                      httpd主程序包<br>MySQL=<a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a>                          mysql主程序包<br>PHP=<a href="http://php.net/downloads.php">http://php.net/downloads.php</a>                                                 php主程序包<br>apr=<a href="http://apr.apache.org/">http://apr.apache.org/</a>                                               apr是httpd的依赖包<br>apr-util=<a href="http://apr.apache.org/">http://apr.apache.org/</a>                               apr-util是httpd的第二个依赖包<br>apr和apr-util这个两个软件是对后端服务软件进行优化的，<br>apr-util只是在apr的基础上提供了更多的数据结构和操作系统封装接口而已。<br> pcre 是httpd的第三个依赖包 <a href="http://pcre.org/">http://pcre.org/</a>    </p><p>PCRE(Perl Compatible Regular Expressions中文含义：perl语言兼容正则表达式)是一个用C语言编写的正则表达式函数库，PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。</p><p>对应我们源码编译的版本<br>         编译安装LAMP所需要及其所使用的源码版本：<br>                   httpd version：httpd-2.4.16<br>                   apr version：apr-1.5.2<br>                   pcre version：pcre-8.37<br>                   apr-util version：apr-util-1.5.4<br>                   mysql version：mysql-5.6.26<br>                   php version：php-5.6.13<br><code>安装之前需要注意：</code></p><p><strong>LAMP源码编译的基础环境</strong></p><pre><code>[root@Andu101 ~]# lsb_release -a……Description:        Red Hat Enterprise Linux Server release 6.5(Santiago)……        [root@Andu101 ~]# uname -aLinux Andu101.cn 2.6.32-431.el6.x86_64 …</code></pre><p><strong>确保系统的干净的系统，不要和现在源码编译安装的软件冲突</strong></p><p><code>不要在一个系统上同时存在 RPM-Apache+源码-Apache</code></p><p><strong>建议在编译之前，把开发包组安装：</strong></p><pre><code>&quot;Development Tools&quot;和 &quot;Development Libraries&quot;yum groupinstall &quot;Development Tools&quot; &quot;Development Libraries&quot; -y [root@Andu101 ~]# yum install gcc gcc-c++ openssl-devel -y   </code></pre><p>所有软件====&gt;<a href="http://cloud.xoxoyun.cn/index.php?share/folder&user=1&sid=Gjfd8rIt">·直通车·点击下载</a></p><pre><code>[root@Andu101 ~]# lsapr-1.5.2.tar.gz            httpd-2.4.16.tar.bz2    pcre-8.37.tar.bz2apr-util-1.5.4.tar.bz2      mysql-5.6.26.tar.gz     php-5.6.13.tar.bz2</code></pre><p>apr和apr-util依赖<br>   apr和apr-util独立编译</p><pre><code> [root@Andu101 ~]# tar xf apr-1.5.2.tar.gz -C /usr/local/src/ &amp;&amp;tar xf apr-util-1.5.4.tar.bz2 -C /usr/local/src/ [root@Andu101 ~]# cd /usr/local/src/apr-1.5.2/ &amp;&amp; ./configure --prefix=/usr/local/apr &amp;&amp; make -j 2 &amp;&amp; make install [root@Andu101 apr-1.5.2]# cd ../apr-util-1.5.4/ &amp;&amp; ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr &amp;&amp; make -j 2 &amp;&amp; make install [root@Andu101 apr-util-1.5.4]# cd &amp;&amp; tar xf pcre-8.37.tar.bz2 -C /usr/local/src/ [root@Andu101 ~]# cd /usr/local/src/pcre-8.37/ &amp;&amp; ./configure --prefix=/usr/local/pcre &amp;&amp; make -j 2 &amp;&amp; make install &amp;&amp; cd</code></pre><h2 id="Apache源码编译"><a href="#Apache源码编译" class="headerlink" title="Apache源码编译"></a><strong>Apache源码编译</strong></h2><pre><code>依赖环境安装完成，开始编译安装apache[root@Andu101 ~]# tar xvf httpd-2.4.16.tar.bz2 -C /usr/local/src/ &amp;&amp; cd /usr/local/src/httpd-2.4.16[root@Andu101 httpd-2.4.16]# ./configure --prefix=/usr/local/apache2.4 --enable-so --enable-rewrite --enable-ssl --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --enable-modules=most --enable-mpms-shared=all --with-mpm=event &amp;&amp; make -j 2 &amp;&amp; make install --prefix=/usr/local/apache2.4                       #安装路径--enable-so                                         #支持动态加载模块--enable-rewrite                                    #支持网站地址重写--enable-ssl                                        #支持SSL加密--with-pcre=/usr/local/pcre                         #pcre路径--with-apr=/usr/local/apr                           #apr路径--with-apr-util=/usr/local/apr-util                 #apr-util路径</code></pre><p>一共有三种稳定的MPM（Multi-Processing Module，多进程处理模块）模式。它们分别是prefork，worker和event，它们同时也代表这Apache的演变和发展。<br><strong>配置Apache的启动脚本</strong></p><pre><code>[root@Andu101 ~]# cp /usr/local/apache2.4/bin/apachectl  /etc/init.d/apache2.4</code></pre><p><strong>若是你按照我的实验环境安装了桌面，那么需要停掉httpd服务，若不是，则不需要</strong><br>    [root@Andu101 ~]# /etc/init.d/httpd stop<br>    [root@Andu101 ~]# chkconfig httpd off<br><strong>编辑启动脚本文件</strong></p><pre><code> [root@Andu101 ~]# vim /etc/init.d/apache2.4#!/bin/sh# chkconfig: 2345 64 36           </code></pre><p><strong>#这个是启动级别的服务，2345是指那些级别启动，64是开启顺序，应该在network服务的后面，36是关闭顺序，应该在network的前面，这里并不是注释<br> #默认network的是：2345 10 90</strong></p><h1 id="description-Apache2-4-16-start-script-描述字段，有了这两个字段，就可以用chkconfig命令控制"><a href="#description-Apache2-4-16-start-script-描述字段，有了这两个字段，就可以用chkconfig命令控制" class="headerlink" title="description: Apache2.4.16 start script            #描述字段，有了这两个字段，就可以用chkconfig命令控制"></a>description: Apache2.4.16 start script            #描述字段，有了这两个字段，就可以用chkconfig命令控制</h1><pre><code>[root@Andu101 ~]# service apache2.4 start[root@Andu101 ~]# chkconfig apache2.4 on</code></pre><p> <strong>Apache安装完成需要注意的地方</strong></p><pre><code>     [root@Andu101 ~]# ps -aux | grep apache     //源码编译apache，运行用户为deamonWarning: bad syntax, perhaps a bogus &#39;-&#39;? See /usr/share/doc/procps-3.2.8/FAQroot        43191  0.0  0.0  70632  2184?  Ss   16:54   0:00/usr/local/apache2.4/bin/httpd -k startdaemon      43192  0.0  0.1663500  4820?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k startdaemon      43193  0.0  0.1414892  4184?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k startdaemon      43194  0.0  0.1414892  4188?  Sl   16:54   0:00/usr/local/apache2.4/bin/httpd -k startroot        43344  0.0  0.0103244  864 pts/0 S+ 17:12   0:00 grep apache         [root@Andu101 ~]# id daemon                                   //编译安装运行用户身份是daemonuid=2(daemon) gid=2(daemon) groups=2(daemon),1(bin),4(adm),7(lp)[root@Andu101 ~]# useradd -M -s /sbin/nologin apache                           //创建一个用户用来运行apache        [root@Andu101 ~]# vim /usr/local/apache2.4/conf/httpd.conf           //修改配置文件改变apache运行身份User apache                     #运行用户Group apache                    #运行组，创建apache的时候已经即时创建了apache这个组         [root@Andu101 ~]# id apacheuid=500(apache) gid=500(apache) groups=500(apache)</code></pre><p><strong>更改目录权限</strong><br>     [root@Andu101 ~]# chown -R apache:apache /usr/local/apache2.4/       //默认是root，改为apache</p><h2 id="MYSQL源码编译"><a href="#MYSQL源码编译" class="headerlink" title="MYSQL源码编译"></a>MYSQL源码编译</h2><pre><code>     Mysql 5.5.15 以后，使用了新的 cmake 编译方式，所以先安装 cmake。 以前的版本直接 configure然后make ，make install ，对于5.5.16的后续版本，将需要先使用cmake之后再make，然后make install     CMake 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的 makefile 或者 project 文件，能测试编译器所支持的 C++特性,类似 UNIX 下的automake。 只是 CMake 的建构档取名为 CmakeLists.txt。Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或Windows Visual C++ 的 projects/workspaces），然后再依一般的建构方式使用。这使得熟悉某个集成开发环境（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是 CMake 和 SCons 等其他类似系统的区别之处。</code></pre><p><strong>解决依赖</strong></p><pre><code>[root@Andu101 ~]# yum install -y cmake     ncurses-devel              //gcc等相关在编译apache已安装</code></pre><p><strong>编译安装MySql</strong><br>安装之前使用 yum remove mysql  确保没有安装MySQL<br>    [root@Andu101 ~]# tar xf mysql-5.6.26.tar.gz -C /usr/local/src/ ; cd /usr/local/src/mysql-5.6.26<br>    [root@Andu101 mysql-5.6.26]# useradd -M -s /sbin/nologin mysql                            //创建mysql运行用户<br>    [root@Andu101 mysql-5.6.26]# cmake <br>     -DCMAKE_INSTALL_PREFIX=/usr/local/mysql <br>     -DMYSQL_UNIX_ADDR=/tmp/mysql.sock <br>     -DDEFAULT_CHARSET=utf8 <br>     -DDEFAULT_COLLATION=utf8_general_ci <br>     -DWITH_EXTRA_CHARSETS=all <br>     -DWITH_MYISAM_STORAGE_ENGINE=1<br>     -DWITH_INNOBASE_STORAGE_ENGINE=1<br>     -DWITH_MEMORY_STORAGE_ENGINE=1<br>     -DWITH_READLINE=1<br>     -DENABLED_LOCAL_INFILE=1<br>     -DMYSQL_DATADIR=/usr/local/mysql/data <br>     -DMYSQL-USER=mysql</p><p>*<strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong>参数解释**<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><pre><code>DCMAKE_INSTALL_PREFIX                                      #制定mysql的安装根目录，目录在安装的时候会自动创建，这个值也可以在服务器启动时，用--basedir来设置DMYSQL_UNIX_ADDR                                           #服务器与本地客户端进行通信的Unix套接字文件，必须是绝对路径，默认位置/tmp/mysql.sock，可以在服务器启动时，用--socket改变DDEFAULT_CHARSET                        #mysql默认使用的字符集，不指定将默认使用Latin1西欧字符集DDEFAULT_COLLATION                           #默认字符校对DWITH_EXTRA_CHARSETS                  #制定mysql拓展字符集，默认值也是all支持所有的字符集DWITH_MYISAM_STORAGE_ENGINE DWITH_INNOBASE_STORAGE_ENGINEDWITH_MEMORY_STORAGE_ENGINE#静态编译MYISAM，INNOBASE，MEMORY存储引擎到MYSQL服务 器，这样MYSQL就支持这三种存储引擎DWITH_READLINE                    #支持readline库DENABLED_LOCAL_INFILE                    #允许本地倒入数据，启用加载本地数据DMYSQL_DATADIR                                #mysql数据库存放路径DMYSQL-USER                                    #运行mysql的用户[root@Andu101 mysql-5.6.26]# make -j 4 &amp;&amp; make install</code></pre><p><strong>这些编译参数的帮助寻找方法：</strong><br><a href="http://www.mysql.com→→documentation→→选择对应的版本(5.6)→→html/">http://www.mysql.com→→Documentation→→选择对应的版本（5.6）→→HTML</a> Online→→View→→Installation &amp; Upgrades→→Installing MySQL from Source →→MySQL Source-Configuration Options→→<br><a href="http://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html">http://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html</a> </p><p><strong>配置mysql</strong></p><pre><code> [root@Andu101 mysql-5.6.26]# cd &amp;&amp; chown -R mysql:mysql /usr/local/mysql/                //属主属组更改 [root@Andu101 ~]# cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf       //覆盖原配置文件 [root@Andu101 ~]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld    //启动脚本 [root@Andu101 ~]# vim /etc/init.d/mysqld                                                   //更改启动脚本中指定mysql位置basedir=datadir=#修改为basedir=/usr/local/mysqldatadir=/usr/local/mysql/data[root@Andu101 ~]# chkconfig mysqld  on                                         //开机启动</code></pre><p><strong>初始化数据库</strong></p><pre><code> [root@Andu101 ~]# /usr/local/mysql/scripts/mysql_install_db \--defaults-file=/etc/my.cnf  \--basedir=/usr/local/mysql/\--datadir=/usr/local/mysql/data/\--user=mysql</code></pre><p><strong>#类似于在rpm安装的时候启动数据库弹出的初始化消息</strong></p><pre><code>[root@Andu101 ~]# ls /usr/local/mysql/data/                     //初始化看这个下面有无mysql和test等数据库ibdata1  ib_logfile0  ib_logfile1  mysql  performance_schema  test[root@Andu101 ~]# ln -s /usr/local/mysql/bin/* /bin/                  //这个里面是部分命令，让系统直接调用[root@Andu101 ~]# servie mysqld  start                                 //启动数据库[root@Andu101 ~]# mysql_secure_installation                                   //初始安全设置（设置root密码，123456） [root@Andu101 ~]# mysql -uroot -p123456                                //测试登录（OK）</code></pre><h2 id="编译安装配置PHP"><a href="#编译安装配置PHP" class="headerlink" title="编译安装配置PHP"></a>编译安装配置PHP</h2><p>PHP原始为Personal Home Page的缩写，已经正式更名为 “PHP: Hypertext Preprocessor”。<br>Apache对于php的解析，就是通过众多Module中的php Module来完成的，把php最终集成到Apache系统中，还需要对Apache进行一些必要的设置！</p><p><strong>解决依赖</strong><br>       [root@Andu101 php-5.6.13]# yum install -y libxml2-devel<br>       [root@Andu101 ~]# tar xf php-5.6.13.tar.bz2 -C  /usr/local/src/ ; cd /usr/local/src/php-5.6.13</p><p><strong>正式安装</strong></p><pre><code>[root@Andu101 php-5.6.13]# ./configure --prefix=/usr/local/php --with-mysql=/usr/local/mysql/ --with-apxs2=/usr/local/apache2.4/bin/apxs --with-config-file-path=/usr/local/php--prefix                        #指定安装路径--with-apxs2                    #用apache的apxs工具将php编译成apache的一个模块--with-mysql                    #与mysql结合，如果不跟路径，编译出来的版本将是低版本--with-config-file-path         #php的主配置文件php.ini路径</code></pre><p><strong>看到下面一段内容，表示configure成功</strong></p><pre><code>Thank you for using PHP.config.status: creating php5.specconfig.status: creating main/build-defs.hconfig.status: creating scripts/phpizeconfig.status: creating scripts/man1/phpize.1config.status: creating scripts/php-configconfig.status: creating scripts/man1/php-config.1config.status: creating sapi/cli/php.1config.status: creating sapi/cgi/php-cgi.1config.status: creating ext/phar/phar.1config.status: creating ext/phar/phar.phar.1config.status: creating main/php_config.hconfig.status: executing default commands[root@Andu101 php-5.6.13]# make –j 3 ; make install ; cd /usr/local/src/php-5.6.13[root@Andu101 php-5.6.13]# cp php.ini-production /usr/local/php/php.ini ; cd        //php配置文件</code></pre><p><strong>检测编译安装结果</strong></p><p>只有有下面这两个文件（模块），代表我们的apache就可以支持php了</p><pre><code>[root@Andu101 ~]#ls  /usr/local/apache2.4/modules/httpd.exp /usr/local/apache2.4/modules/httpd.exp[root@Andu101 ~]# ls /usr/local/apache2.4/modules/libphp5.so/usr/local/apache2.4/modules/libphp5.so</code></pre><p><strong>配置Apache支持PHP</strong></p><pre><code>[root@Andu101 ~]# vim /usr/local/apache2.4/conf/httpd.conf……248    &lt;IfModule dir_module&gt;249       DirectoryIndex index.html index.php           #添加index.php250    &lt;/IfModule&gt;……376     AddType application/x-compress .Z377     AddType application/x-gzip .gz .tgz       #上面两行是以前有的378     AddType application/x-httpd-php .php      #下面两行是添加的，需要添加以支持PHP379     AddType application/x-httpd-php-source .phps</code></pre><p>修改完，重启下Apache服务。<br>测试</p><pre><code>[root@Andu101 ~]# vim /usr/local/apache2.4/htdocs/index.php               &lt;?php        phpinfo();?&gt;</code></pre><h2 id="然后使用客户端浏览此页面"><a href="#然后使用客户端浏览此页面" class="headerlink" title="然后使用客户端浏览此页面"></a>然后使用客户端浏览此页面</h2><h2 id="当然也可以采用lamp一键安装脚本直通车"><a href="#当然也可以采用lamp一键安装脚本直通车" class="headerlink" title="当然也可以采用lamp一键安装脚本直通车"></a>当然也可以采用lamp一键安装脚本<a href="http://lamp.sh/">直通车</a></h2><p>[player type=’recommend’ autoplay=’false’/]</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清新壁纸库</title>
      <link href="/posts/64166/"/>
      <url>/posts/64166/</url>
      
        <content type="html"><![CDATA[<h1 id="壁纸源"><a href="#壁纸源" class="headerlink" title="壁纸源"></a>壁纸源</h1><hr><a id="more"></a><table><thead><tr><th><img src="https://gitee.com/xoxoyun/img/raw/master/image/0001.jpg"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0002.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0003.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0004.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0005.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0006.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0007.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0008.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0009.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0010.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0011.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0012.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0013.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0014.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0015.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0016.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0017.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0018.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0019.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0020.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0021.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0022.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0023.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0024.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0025.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0026.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0027.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0028.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0029.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0030.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0031.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0032.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0033.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0034.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0035.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0036.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0037.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0038.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0039.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0040.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0041.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0042.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0043.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0044.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0045.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0046.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0047.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0048.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0049.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0050.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0051.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0052.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0053.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0054.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0055.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0056.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0057.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0058.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0059.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0060.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0061.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0062.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0063.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0064.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0065.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0066.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0067.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0068.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0069.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0070.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0071.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0072.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0073.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0074.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0075.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0076.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0077.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0078.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0079.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0080.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0081.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0082.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0083.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0084.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0085.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0086.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0087.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0088.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0089.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0090.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0091.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0092.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0093.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0094.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0095.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0096.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0097.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0098.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0099.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0100.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0101.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0102.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0103.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0104.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0105.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0106.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0107.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0108.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0109.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0110.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0111.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0112.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0113.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0114.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0115.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0116.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0117.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0118.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0119.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0120.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0121.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0122.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0123.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0124.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0125.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0126.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0127.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0128.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0129.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0130.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0131.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0132.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0133.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0134.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0135.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0136.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0137.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0138.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0139.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0140.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0141.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0142.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0143.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0144.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0145.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0146.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0147.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0148.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0149.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0150.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0151.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0152.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0153.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0154.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0155.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0156.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0157.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0158.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0159.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0160.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0161.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0162.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0163.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0164.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0165.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0166.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0167.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0168.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0169.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0170.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0171.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0172.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0173.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0174.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0175.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0176.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0177.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0178.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0179.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0180.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0181.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0182.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0183.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0184.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0185.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0186.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0187.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0188.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0189.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0190.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0191.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0192.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0193.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0194.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0195.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0196.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0197.jpg"></td></tr><tr><td><img src="https://gitee.com/xoxoyun/img/raw/master/image/0198.jpg"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/1.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/2.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/3.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/4.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/5.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/6.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/7.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/8.png" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/1-1.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/2-2.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/3-3.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/4-4.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/1.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/2.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/3.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/4.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/5.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/6.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/7.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/8.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/9.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/10.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/11.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/12.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/13.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/14.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/15.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/16.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/17.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/18.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/19.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/20.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/21.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/22.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/23.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/24.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/25.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/26.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/27.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/28.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/29.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/30.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/31.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/32.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/33.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/34.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/35.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/36.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/37.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/38.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/39.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/40.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/41.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/42.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/43.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/44.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/45.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/46.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/47.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/48.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/49.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/50.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/51.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/52.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/53.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/54.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/55.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/56.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/57.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/58.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/59.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/60.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/61.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/62.jpg" alt="img"></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/kococ/IMAGE/63.jpg" alt="img"></td></tr></tbody></table><blockquote><p>不能让任何人毁掉你的温柔细心</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IMAGE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
